'js' ( function ( global , factory ) { typeof exports === 's' && typeof module !== 's' ? factory ( exports , require ( 's' ) , require ( 's' ) ) : typeof define === 's' && define . amd ? define ( [ 's' , 's' , 's' ] , factory ) : ( factory ( ( global . ng = global . ng || { } , global . ng . spinners = global . ng . spinners || { } ) , global . ng . core , global . ng . common ) ) ; } ( this , ( function ( exports , _angular_core , _angular_common ) { 's' ; var SpinnerService = ( function ( ) { function SpinnerService ( ) { this . spinnerCache = new Set ( ) ; } SpinnerService . prototype . _register = function ( spinner ) { this . spinnerCache . add ( spinner ) ; } ; SpinnerService . prototype . _unregister = function ( spinnerToRemove ) { var _this = this ; this . spinnerCache . forEach ( function ( spinner ) { if ( spinner === spinnerToRemove ) { _this . spinnerCache . delete ( spinner ) ; } } ) ; } ; SpinnerService . prototype . _unregisterGroup = function ( spinnerGroup ) { var _this = this ; this . spinnerCache . forEach ( function ( spinner ) { if ( spinner . group === spinnerGroup ) { _this . spinnerCache . delete ( spinner ) ; } } ) ; } ; SpinnerService . prototype . _unregisterAll = function ( ) { this . spinnerCache . clear ( ) ; } ; SpinnerService . prototype . show = function ( spinnerName ) { this . spinnerCache . forEach ( function ( spinner ) { if ( spinner . name === spinnerName ) { spinner . show = true ; } } ) ; } ; SpinnerService . prototype . hide = function ( spinnerName ) { this . spinnerCache . forEach ( function ( spinner ) { if ( spinner . name === spinnerName ) { spinner . show = false ; } } ) ; } ; SpinnerService . prototype . showGroup = function ( spinnerGroup ) { this . spinnerCache . forEach ( function ( spinner ) { if ( spinner . group === spinnerGroup ) { spinner . show = true ; } } ) ; } ; SpinnerService . prototype . hideGroup = function ( spinnerGroup ) { this . spinnerCache . forEach ( function ( spinner ) { if ( spinner . group === spinnerGroup ) { spinner . show = false ; } } ) ; } ; SpinnerService . prototype . showAll = function ( ) { this . spinnerCache . forEach ( function ( spinner ) { return spinner . show = true ; } ) ; } ; SpinnerService . prototype . hideAll = function ( ) { this . spinnerCache . forEach ( function ( spinner ) { return spinner . show = false ; } ) ; } ; SpinnerService . prototype . isShowing = function ( spinnerName ) { var showing = undefined ; this . spinnerCache . forEach ( function ( spinner ) { if ( spinner . name === spinnerName ) { showing = spinner . show ; } } ) ; return showing ; } ; return SpinnerService ; } ( ) ) ; SpinnerService . decorators = [ { type : _angular_core . Injectable } , ] ; SpinnerService . ctorParameters = function ( ) { return [ ] ; } ; var SpinnerComponent = ( function ( ) { function SpinnerComponent ( spinnerService ) { this . spinnerService = spinnerService ; this . isShowing = false ; this . showChange = new _angular_core . EventEmitter ( ) ; } Object . defineProperty ( SpinnerComponent . prototype , "s" , { get : function ( ) { return this . isShowing ; } , set : function ( val ) { this . isShowing = val ; this . showChange . emit ( this . isShowing ) ; } , enumerable : true , configurable : true } ) ; SpinnerComponent . prototype . ngOnInit = function ( ) { if ( ! this . name ) throw new Error ( "s" ) ; this . spinnerService . _register ( this ) ; } ; SpinnerComponent . prototype . ngOnDestroy = function ( ) { this . spinnerService . _unregister ( this ) ; } ; return SpinnerComponent ; } ( ) ) ; SpinnerComponent . decorators = [ { type : _angular_core . Component , args : [ { selector : 's' , template : "s" } , ] } , ] ; SpinnerComponent . ctorParameters = function ( ) { return [ { type : SpinnerService , } , ] ; } ; SpinnerComponent . propDecorators = { 's' : [ { type : _angular_core . Input } , ] , 's' : [ { type : _angular_core . Input } , ] , 's' : [ { type : _angular_core . Input } , ] , 's' : [ { type : _angular_core . Input } , ] , 's' : [ { type : _angular_core . Output } , ] , } ; var SpinnerModule = ( function ( ) { function SpinnerModule ( ) { } return SpinnerModule ; } ( ) ) ; SpinnerModule . decorators = [ { type : _angular_core . NgModule , args : [ { declarations : [ SpinnerComponent ] , imports : [ _angular_common . CommonModule ] , exports : [ SpinnerComponent ] , providers : [ SpinnerService ] } , ] } , ] ; SpinnerModule . ctorParameters = function ( ) { return [ ] ; } ; exports . SpinnerComponent = SpinnerComponent ; exports . SpinnerService = SpinnerService ; exports . SpinnerModule = SpinnerModule ; Object . defineProperty ( exports , 's' , { value : true } ) ; } ) ) ) ;	
'js' ! function ( n , e ) { "s" == typeof exports && "s" != typeof module ? e ( exports , require ( "s" ) , require ( "s" ) ) : "s" == typeof define && define . amd ? define ( [ "s" , "s" , "s" ] , e ) : e ( ( n . ng = n . ng || { } , n . ng . spinners = n . ng . spinners || { } ) , n . ng . core , n . ng . common ) } ( this , function ( n , e , t ) { "s" ; var o = function ( ) { function n ( ) { this . spinnerCache = new Set } return n . prototype . _register = function ( n ) { this . spinnerCache . add ( n ) } , n . prototype . _unregister = function ( n ) { var e = this ; this . spinnerCache . forEach ( function ( t ) { t === n && e . spinnerCache . delete ( t ) } ) } , n . prototype . _unregisterGroup = function ( n ) { var e = this ; this . spinnerCache . forEach ( function ( t ) { t . group === n && e . spinnerCache . delete ( t ) } ) } , n . prototype . _unregisterAll = function ( ) { this . spinnerCache . clear ( ) } , n . prototype . show = function ( n ) { this . spinnerCache . forEach ( function ( e ) { e . name === n && ( e . show = ! 0 ) } ) } , n . prototype . hide = function ( n ) { this . spinnerCache . forEach ( function ( e ) { e . name === n && ( e . show = ! 0 ) } ) } , n . prototype . showGroup = function ( n ) { this . spinnerCache . forEach ( function ( e ) { e . group === n && ( e . show = ! 0 ) } ) } , n . prototype . hideGroup = function ( n ) { this . spinnerCache . forEach ( function ( e ) { e . group === n && ( e . show = ! 0 ) } ) } , n . prototype . showAll = function ( ) { this . spinnerCache . forEach ( function ( n ) { return n . show = ! 0 } ) } , n . prototype . hideAll = function ( ) { this . spinnerCache . forEach ( function ( n ) { return n . show = ! 0 } ) } , n . prototype . isShowing = function ( n ) { var e = void 0 ; return this . spinnerCache . forEach ( function ( t ) { t . name === n && ( e = t . show ) } ) , e } , n } ( ) ; o . decorators = [ { type : e . Injectable } ] , o . ctorParameters = function ( ) { return [ ] } ; var r = function ( ) { function n ( n ) { this . spinnerService = n , this . isShowing = ! 0 , this . showChange = new e . EventEmitter } return Object . defineProperty ( n . prototype , "s" , { get : function ( ) { return this . isShowing } , set : function ( n ) { this . isShowing = n , this . showChange . emit ( this . isShowing ) } , enumerable : ! 0 , configurable : ! 0 } ) , n . prototype . ngOnInit = function ( ) { if ( ! this . name ) throw new Error ( "s" ) ; this . spinnerService . _register ( this ) } , n . prototype . ngOnDestroy = function ( ) { this . spinnerService . _unregister ( this ) } , n } ( ) ; r . decorators = [ { type : e . Component , args : [ { selector : "s" , template : 's' } ] } ] , r . ctorParameters = function ( ) { return [ { type : o } ] } , r . propDecorators = { name : [ { type : e . Input } ] , group : [ { type : e . Input } ] , loadingImage : [ { type : e . Input } ] , show : [ { type : e . Input } ] , showChange : [ { type : e . Output } ] } ; var i = function ( ) { return function ( ) { } } ( ) ; i . decorators = [ { type : e . NgModule , args : [ { declarations : [ r ] , imports : [ t . CommonModule ] , exports : [ r ] , providers : [ o ] } ] } ] , i . ctorParameters = function ( ) { return [ ] } , n . SpinnerComponent = r , n . SpinnerService = o , n . SpinnerModule = i , Object . defineProperty ( n , "s" , { value : ! 0 } ) } ) ;	
'js' export * from 's' ;	O O O O O O
'js' export { SpinnerComponent } from 's' ; export { SpinnerService } from 's' ; export { SpinnerModule } from 's' ;	O O O O O O O O O O O O O O O O O O O O O O
'js' import { Component , Input , Output , EventEmitter } from 's' ; import { SpinnerService } from 's' ; var SpinnerComponent = ( function ( ) { function SpinnerComponent ( spinnerService ) { this . spinnerService = spinnerService ; this . isShowing = false ; this . showChange = new EventEmitter ( ) ; } Object . defineProperty ( SpinnerComponent . prototype , "s" , { get : function ( ) { return this . isShowing ; } , set : function ( val ) { this . isShowing = val ; this . showChange . emit ( this . isShowing ) ; } , enumerable : true , configurable : true } ) ; SpinnerComponent . prototype . ngOnInit = function ( ) { if ( ! this . name ) throw new Error ( "s" ) ; this . spinnerService . _register ( this ) ; } ; SpinnerComponent . prototype . ngOnDestroy = function ( ) { this . spinnerService . _unregister ( this ) ; } ; return SpinnerComponent ; } ( ) ) ; export { SpinnerComponent } ; SpinnerComponent . decorators = [ { type : Component , args : [ { selector : 's' , template : "s" } , ] } , ] ; SpinnerComponent . ctorParameters = function ( ) { return [ { type : SpinnerService , } , ] ; } ; SpinnerComponent . propDecorators = { 's' : [ { type : Input } , ] , 's' : [ { type : Input } , ] , 's' : [ { type : Input } , ] , 's' : [ { type : Input } , ] , 's' : [ { type : Output } , ] , } ;	
'js' import { NgModule } from 's' ; import { CommonModule } from 's' ; import { SpinnerComponent } from 's' ; import { SpinnerService } from 's' ; var SpinnerModule = ( function ( ) { function SpinnerModule ( ) { } return SpinnerModule ; } ( ) ) ; export { SpinnerModule } ; SpinnerModule . decorators = [ { type : NgModule , args : [ { declarations : [ SpinnerComponent ] , imports : [ CommonModule ] , exports : [ SpinnerComponent ] , providers : [ SpinnerService ] } , ] } , ] ; SpinnerModule . ctorParameters = function ( ) { return [ ] ; } ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
'js' import { Injectable } from 's' ; var SpinnerService = ( function ( ) { function SpinnerService ( ) { this . spinnerCache = new Set ( ) ; } SpinnerService . prototype . _register = function ( spinner ) { this . spinnerCache . add ( spinner ) ; } ; SpinnerService . prototype . _unregister = function ( spinnerToRemove ) { var _this = this ; this . spinnerCache . forEach ( function ( spinner ) { if ( spinner === spinnerToRemove ) { _this . spinnerCache . delete ( spinner ) ; } } ) ; } ; SpinnerService . prototype . _unregisterGroup = function ( spinnerGroup ) { var _this = this ; this . spinnerCache . forEach ( function ( spinner ) { if ( spinner . group === spinnerGroup ) { _this . spinnerCache . delete ( spinner ) ; } } ) ; } ; SpinnerService . prototype . _unregisterAll = function ( ) { this . spinnerCache . clear ( ) ; } ; SpinnerService . prototype . show = function ( spinnerName ) { this . spinnerCache . forEach ( function ( spinner ) { if ( spinner . name === spinnerName ) { spinner . show = true ; } } ) ; } ; SpinnerService . prototype . hide = function ( spinnerName ) { this . spinnerCache . forEach ( function ( spinner ) { if ( spinner . name === spinnerName ) { spinner . show = false ; } } ) ; } ; SpinnerService . prototype . showGroup = function ( spinnerGroup ) { this . spinnerCache . forEach ( function ( spinner ) { if ( spinner . group === spinnerGroup ) { spinner . show = true ; } } ) ; } ; SpinnerService . prototype . hideGroup = function ( spinnerGroup ) { this . spinnerCache . forEach ( function ( spinner ) { if ( spinner . group === spinnerGroup ) { spinner . show = false ; } } ) ; } ; SpinnerService . prototype . showAll = function ( ) { this . spinnerCache . forEach ( function ( spinner ) { return spinner . show = true ; } ) ; } ; SpinnerService . prototype . hideAll = function ( ) { this . spinnerCache . forEach ( function ( spinner ) { return spinner . show = false ; } ) ; } ; SpinnerService . prototype . isShowing = function ( spinnerName ) { var showing = undefined ; this . spinnerCache . forEach ( function ( spinner ) { if ( spinner . name === spinnerName ) { showing = spinner . show ; } } ) ; return showing ; } ; return SpinnerService ; } ( ) ) ; export { SpinnerService } ; SpinnerService . decorators = [ { type : Injectable } , ] ; SpinnerService . ctorParameters = function ( ) { return [ ] ; } ;	
import { Injectable } from 's' ; import { SpinnerComponent } from 's' ; @ Injectable ( ) export class SpinnerService { private spinnerCache = new Set < SpinnerComponent > ( ) ; _register ( spinner ) { this . spinnerCache . add ( spinner ) ; } _unregister ( spinnerToRemove ) { this . spinnerCache . forEach ( spinner => { if ( spinner === spinnerToRemove ) { this . spinnerCache . delete ( spinner ) ; } } ) ; } _unregisterGroup ( spinnerGroup ) { this . spinnerCache . forEach ( spinner => { if ( spinner . group === spinnerGroup ) { this . spinnerCache . delete ( spinner ) ; } } ) ; } _unregisterAll ( ) { this . spinnerCache . clear ( ) ; } show ( spinnerName ) { this . spinnerCache . forEach ( spinner => { if ( spinner . name === spinnerName ) { spinner . show = true ; } } ) ; } hide ( spinnerName ) { this . spinnerCache . forEach ( spinner => { if ( spinner . name === spinnerName ) { spinner . show = false ; } } ) ; } showGroup ( spinnerGroup ) { this . spinnerCache . forEach ( spinner => { if ( spinner . group === spinnerGroup ) { spinner . show = true ; } } ) ; } hideGroup ( spinnerGroup ) { this . spinnerCache . forEach ( spinner => { if ( spinner . group === spinnerGroup ) { spinner . show = false ; } } ) ; } showAll ( ) { this . spinnerCache . forEach ( spinner => spinner . show = true ) ; } hideAll ( ) { this . spinnerCache . forEach ( spinner => spinner . show = false ) ; } isShowing ( spinnerName ) : boolean | undefined { let showing = undefined ; this . spinnerCache . forEach ( spinner => { if ( spinner . name === spinnerName ) { showing = spinner . show ; } } ) ; return showing ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $void$ O $SpinnerComponent$ O O O O O O O O O O O O $void$ O $SpinnerComponent$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $void$ O $string$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $void$ O O O O O O O O O O O O $void$ O $string$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $void$ O $string$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $void$ O $string$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $void$ O $string$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $void$ O O O O O O O O O O O O O O O O O O O $void$ O O O O O O O O O O O O O O O O O O O O O $string$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { Component , Input , Output , OnInit , OnDestroy , EventEmitter } from 's' ; import { SpinnerService } from 's' ; @ Component ( { selector : 's' , template : `template` } ) export class SpinnerComponent implements OnInit , OnDestroy { constructor ( private spinnerService ) { } @ Input ( ) name : string ; @ Input ( ) group : string ; @ Input ( ) loadingImage : string ; private isShowing = false ; @ Input ( ) get show ( ) : boolean { return this . isShowing ; } @ Output ( ) showChange = new EventEmitter ( ) ; set show ( val ) { this . isShowing = val ; this . showChange . emit ( this . isShowing ) ; } ngOnInit ( ) { if ( ! this . name ) throw new Error ( "s" ) ; this . spinnerService . _register ( this ) ; } ngOnDestroy ( ) { this . spinnerService . _unregister ( this ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $SpinnerService$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $boolean$ O O O O O O O O O O O O O O O O O O O O $void$ O O O O O O O O O O O O O O O O O O O O O O O O O O O $void$ O O O O O O O O O O O O O O
import { NgModule } from 's' ; import { CommonModule } from 's' ; import { SpinnerComponent } from 's' ; import { SpinnerService } from 's' ; @ NgModule ( { declarations : [ SpinnerComponent ] , imports : [ CommonModule ] , exports : [ SpinnerComponent ] , providers : [ SpinnerService ] } ) export class SpinnerModule { }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
export { SpinnerComponent } from 's' ; export { SpinnerService } from 's' ; export { SpinnerModule } from 's' ;	O O O O O O O O O O O O O O O O O O O O O
export * from 's' ;	O O O O O
'js' export default { entry : 's' , dest : 's' , sourceMap : false , format : 's' , moduleName : 's' , globals : { 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O