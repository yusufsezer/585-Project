import { browser , by , element } from 's' ; export class ApplicationPage { navigateTo ( ) { return browser . get ( 's' ) ; } getParagraphText ( ) { return element ( by . css ( 's' ) ) . getText ( ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { ApplicationPage } from 's' ; describe ( 's' , ( ) => { let page ; beforeEach ( ( ) => { page = new ApplicationPage ( ) ; } ) ; it ( 's' , ( ) => { page . navigateTo ( ) ; expect ( page . getParagraphText ( ) ) . toEqual ( 's' ) ; } ) ; } ) ;	O O O O O O O O O O O O O O O O $ApplicationPage$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
'js' module . exports = function ( config ) { config . set ( { basePath : 's' , frameworks : [ 's' , 's' ] , plugins : [ require ( 's' ) , require ( 's' ) , require ( 's' ) , require ( 's' ) , require ( 's' ) ] , client : { clearContext : false } , coverageIstanbulReporter : { dir : require ( 's' ) . join ( __dirname , 's' ) , reports : [ 's' , 's' ] , fixWebpackSourcePaths : true } , angularCli : { environment : 's' } , reporters : [ 's' , 's' ] , port : 0 , colors : true , logLevel : config . LOG_INFO , autoWatch : true , browsers : [ 's' ] , singleRun : false } ) ; } ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
'js' module . exports = function ( config ) { config . set ( { basePath : 's' , frameworks : [ 's' , 's' ] , plugins : [ require ( 's' ) , require ( 's' ) , require ( 's' ) , require ( 's' ) , require ( 's' ) ] , client : { clearContext : false } , coverageIstanbulReporter : { dir : require ( 's' ) . join ( __dirname , 's' ) , reports : [ 's' , 's' ] , fixWebpackSourcePaths : true } , reporters : [ 's' , 's' ] , port : 0 , colors : true , logLevel : config . LOG_INFO , autoWatch : true , browsers : [ 's' ] , singleRun : false } ) ; } ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
export const NgxPermissionsPredefinedStrategies = { REMOVE : 's' , SHOW : 's' } ;	O O O O O O O O O O O O O O
import { Injectable } from 's' ; import { BehaviorSubject , Observable } from 's' ; import { Strategy } from 's' ; @ Injectable ( ) export class NgxPermissionsConfigurationStore { public strategiesSource : BehaviorSubject < Strategy > = new BehaviorSubject < Strategy > ( { } ) ; public strategies$ : Observable < Strategy > = this . strategiesSource . asObservable ( ) ; public onAuthorisedDefaultStrategy : string | undefined ; public onUnAuthorisedDefaultStrategy : string | undefined ; constructor ( ) { } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { Inject , Injectable , InjectionToken , TemplateRef } from 's' ; import { BehaviorSubject , Observable } from 's' ; import { NgxPermissionsPredefinedStrategies } from 's' ; import { NgxPermissionsConfigurationStore } from 's' ; export type StrategyFunction = ( templateRef ? < any > ) => void ; export type Strategy = { [ key ] : StrategyFunction } ; export const USE_CONFIGURATION_STORE = new InjectionToken ( 's' ) ; @ Injectable ( ) export class NgxPermissionsConfigurationService { private strategiesSource : BehaviorSubject < Strategy > ; public strategies$ : Observable < Strategy > ; public onAuthorisedDefaultStrategy : string | undefined ; public onUnAuthorisedDefaultStrategy : string | undefined ; constructor ( @ Inject ( USE_CONFIGURATION_STORE ) private isolate = false , private configurationStore ) { this . strategiesSource = this . isolate ? new BehaviorSubject < Strategy > ( { } ) : this . configurationStore . strategiesSource ; this . strategies$ = this . strategiesSource . asObservable ( ) ; this . onAuthorisedDefaultStrategy = this . isolate ? undefined : this . configurationStore . onAuthorisedDefaultStrategy ; this . onUnAuthorisedDefaultStrategy = this . isolate ? undefined : this . configurationStore . onUnAuthorisedDefaultStrategy ; } public setDefaultOnAuthorizedStrategy ( name : string | 's' | 's' ) { if ( this . isolate ) { this . onAuthorisedDefaultStrategy = this . getDefinedStrategy ( name ) ; } else { this . configurationStore . onAuthorisedDefaultStrategy = this . getDefinedStrategy ( name ) ; this . onAuthorisedDefaultStrategy = this . configurationStore . onAuthorisedDefaultStrategy ; } } public setDefaultOnUnauthorizedStrategy ( name : string | 's' | 's' ) { if ( this . isolate ) { this . onUnAuthorisedDefaultStrategy = this . getDefinedStrategy ( name ) ; } else { this . configurationStore . onUnAuthorisedDefaultStrategy = this . getDefinedStrategy ( name ) ; this . onUnAuthorisedDefaultStrategy = this . configurationStore . onUnAuthorisedDefaultStrategy ; } } public addPermissionStrategy ( key , func ) { this . strategiesSource . value [ key ] = func ; } public getStrategy ( key ) { return this . strategiesSource . value [ key ] ; } public getAllStrategies ( ) { return this . strategiesSource . value ; } private getDefinedStrategy ( name : string | 's' | 's' ) { if ( this . strategiesSource . value [ name ] || this . isPredefinedStrategy ( name ) ) { return name ; } else { throw new Error ( `template` ) ; } } private isPredefinedStrategy ( strategy ) { return strategy === NgxPermissionsPredefinedStrategies . SHOW || strategy === NgxPermissionsPredefinedStrategies . REMOVE ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $TemplateRef$ O O O O O O O O O O O O O $string$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $boolean$ O O O O $NgxPermissionsConfigurationStore$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $void$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $void$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $void$ O $string$ O $StrategyFunction$ O O O O O O O O O O O O O O O O O $string$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $boolean$ O $string$ O O O O O O O O O O O O O O O O O
export class NgxPermission { name : string ; validationFunction ? : Function ; constructor ( name , validationFunction ) { this . name = name ; this . validationFunction = validationFunction ; } }	O O O O O O O O O O O O O O O $string$ O $Function$ O O O O O O O O O O O O O O O O
import { Injectable } from 's' ; import { BehaviorSubject , Observable } from 's' ; @ Injectable ( ) export class NgxPermissionsStore { public permissionsSource = new BehaviorSubject < { } > ( { } ) ; public permissions$ : Observable < { } > = this . permissionsSource . asObservable ( ) ; constructor ( ) { } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
export function isFunction ( functionToCheck ) : functionToCheck is Function { let getType = { } ; return ! ! functionToCheck && functionToCheck instanceof Function && getType . toString . call ( functionToCheck ) === 's' ; } export function isPlainObject ( value ) { if ( Object . prototype . toString . call ( value ) !== 's' ) { return false ; } else { let prototype = Object . getPrototypeOf ( value ) ; return prototype === null || prototype === Object . prototype ; } } export function isString ( value ) : value is string { return ! ! value && typeof value === 's' ; } export function isBoolean ( value ) : value is boolean { return typeof value === 's' ; } export function isPromise ( promise ) { return Object . prototype . toString . call ( promise ) === 's' ; } export function notEmptyValue ( value ) { if ( Array . isArray ( value ) ) { return value . length > 0 ; } return ! ! value ; } export function transformStringToArray ( value ) : string [ ] { if ( isString ( value ) ) { return [ value ] ; } return value ; }	O O O O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $boolean$ O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O O O O O O O O O O O $any$ O O O O O O O O O O O O O O O O O O O $boolean$ O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O O O O O O O O O O O O O O O O O O
export class NgxRole { name : string ; validationFunction : Function | string [ ] ; constructor ( name , validationFunction : Function | string [ ] ) { this . name = name ; this . validationFunction = validationFunction ; } }	O O O O O O O O O O O O O O O O O O $string$ O O O O O O O O O O O O O O O O O O O O O O O O
import { BehaviorSubject , Observable } from 's' ; export class NgxRolesStore { public rolesSource = new BehaviorSubject < { } > ( { } ) ; public roles$ : Observable < { } > = this . rolesSource . asObservable ( ) ; }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { ChangeDetectorRef , Directive , EventEmitter , Input , OnChanges , OnDestroy , OnInit , Output , SimpleChanges , TemplateRef , ViewContainerRef } from 's' ; import { merge , Subscription } from 's' ; import { skip , take } from 's' ; import { NgxPermissionsPredefinedStrategies } from 's' ; import { NgxPermissionsConfigurationService , StrategyFunction } from 's' ; import { NgxPermissionsService } from 's' ; import { NgxRolesService } from 's' ; import { isBoolean , isFunction , isString , notEmptyValue } from 's' ; @ Directive ( { selector : 's' } ) export class NgxPermissionsDirective implements OnInit , OnDestroy , OnChanges { @ Input ( ) ngxPermissionsOnly : string | string [ ] ; @ Input ( ) ngxPermissionsOnlyThen : TemplateRef < any > ; @ Input ( ) ngxPermissionsOnlyElse : TemplateRef < any > ; @ Input ( ) ngxPermissionsExcept : string | string [ ] ; @ Input ( ) ngxPermissionsExceptElse : TemplateRef < any > ; @ Input ( ) ngxPermissionsExceptThen : TemplateRef < any > ; @ Input ( ) ngxPermissionsThen : TemplateRef < any > ; @ Input ( ) ngxPermissionsElse : TemplateRef < any > ; @ Input ( ) ngxPermissionsOnlyAuthorisedStrategy : string | StrategyFunction ; @ Input ( ) ngxPermissionsOnlyUnauthorisedStrategy : string | StrategyFunction ; @ Input ( ) ngxPermissionsExceptUnauthorisedStrategy : string | StrategyFunction ; @ Input ( ) ngxPermissionsExceptAuthorisedStrategy : string | StrategyFunction ; @ Input ( ) ngxPermissionsUnauthorisedStrategy : string | StrategyFunction ; @ Input ( ) ngxPermissionsAuthorisedStrategy : string | StrategyFunction ; @ Output ( ) permissionsAuthorized = new EventEmitter ( ) ; @ Output ( ) permissionsUnauthorized = new EventEmitter ( ) ; private initPermissionSubscription : Subscription ; private firstMergeUnusedRun = 0 ; private currentAuthorizedState : boolean ; constructor ( private permissionsService , private configurationService , private rolesService , private viewContainer , private changeDetector , private templateRef < any > ) { } ngOnInit ( ) { this . viewContainer . clear ( ) ; this . initPermissionSubscription = this . validateExceptOnlyPermissions ( ) ; } ngOnChanges ( changes ) { const onlyChanges = changes [ 's' ] ; const exceptChanges = changes [ 's' ] ; if ( onlyChanges || exceptChanges ) { if ( onlyChanges && onlyChanges . firstChange ) return ; if ( exceptChanges && exceptChanges . firstChange ) return ; merge ( this . permissionsService . permissions$ , this . rolesService . roles$ ) . pipe ( skip ( this . firstMergeUnusedRun ) , take ( 0 ) ) . subscribe ( ( ) => { if ( notEmptyValue ( this . ngxPermissionsExcept ) ) { this . validateExceptAndOnlyPermissions ( ) ; return ; } if ( notEmptyValue ( this . ngxPermissionsOnly ) ) { this . validateOnlyPermissions ( ) ; return ; } this . handleAuthorisedPermission ( this . getAuthorisedTemplates ( ) ) ; } ) ; } } ngOnDestroy ( ) { if ( this . initPermissionSubscription ) { this . initPermissionSubscription . unsubscribe ( ) ; } } private validateExceptOnlyPermissions ( ) { return merge ( this . permissionsService . permissions$ , this . rolesService . roles$ ) . pipe ( skip ( this . firstMergeUnusedRun ) ) . subscribe ( ( ) => { if ( notEmptyValue ( this . ngxPermissionsExcept ) ) { this . validateExceptAndOnlyPermissions ( ) ; return ; } if ( notEmptyValue ( this . ngxPermissionsOnly ) ) { this . validateOnlyPermissions ( ) ; return ; } this . handleAuthorisedPermission ( this . getAuthorisedTemplates ( ) ) ; } ) ; } private validateExceptAndOnlyPermissions ( ) { Promise . all ( [ this . permissionsService . hasPermission ( this . ngxPermissionsExcept ) , this . rolesService . hasOnlyRoles ( this . ngxPermissionsExcept ) ] ) . then ( ( [ hasPermission , hasRole ] ) => { if ( hasPermission || hasRole ) { this . handleUnauthorisedPermission ( this . ngxPermissionsExceptElse || this . ngxPermissionsElse ) ; return ; } if ( ! ! this . ngxPermissionsOnly ) throw false ; this . handleAuthorisedPermission ( this . ngxPermissionsExceptThen || this . ngxPermissionsThen || this . templateRef ) ; } ) . catch ( ( ) => { if ( ! ! this . ngxPermissionsOnly ) { this . validateOnlyPermissions ( ) ; } else { this . handleAuthorisedPermission ( this . ngxPermissionsExceptThen || this . ngxPermissionsThen || this . templateRef ) ; } } ) ; } private validateOnlyPermissions ( ) { Promise . all ( [ this . permissionsService . hasPermission ( this . ngxPermissionsOnly ) , this . rolesService . hasOnlyRoles ( this . ngxPermissionsOnly ) ] ) . then ( ( [ hasPermissions , hasRoles ] ) => { if ( hasPermissions || hasRoles ) { this . handleAuthorisedPermission ( this . ngxPermissionsOnlyThen || this . ngxPermissionsThen || this . templateRef ) ; } else { this . handleUnauthorisedPermission ( this . ngxPermissionsOnlyElse || this . ngxPermissionsElse ) ; } } ) . catch ( ( ) => { this . handleUnauthorisedPermission ( this . ngxPermissionsOnlyElse || this . ngxPermissionsElse ) ; } ) ; } private handleUnauthorisedPermission ( template < any > ) { if ( isBoolean ( this . currentAuthorizedState ) && ! this . currentAuthorizedState ) return ; this . currentAuthorizedState = false ; this . permissionsUnauthorized . emit ( ) ; if ( this . getUnAuthorizedStrategyInput ( ) ) { this . applyStrategyAccordingToStrategyType ( this . getUnAuthorizedStrategyInput ( ) ) ; return ; } if ( this . configurationService . onUnAuthorisedDefaultStrategy && ! this . elseBlockDefined ( ) ) { this . applyStrategy ( this . configurationService . onUnAuthorisedDefaultStrategy ) ; } else { this . showTemplateBlockInView ( template ) ; } } private handleAuthorisedPermission ( template < any > ) { if ( isBoolean ( this . currentAuthorizedState ) && this . currentAuthorizedState ) return ; this . currentAuthorizedState = true ; this . permissionsAuthorized . emit ( ) ; if ( this . getAuthorizedStrategyInput ( ) ) { this . applyStrategyAccordingToStrategyType ( this . getAuthorizedStrategyInput ( ) ) ; return ; } if ( this . configurationService . onAuthorisedDefaultStrategy && ! this . thenBlockDefined ( ) ) { this . applyStrategy ( this . configurationService . onAuthorisedDefaultStrategy ) ; } else { this . showTemplateBlockInView ( template ) ; } } private applyStrategyAccordingToStrategyType ( strategy : string | Function ) { if ( isString ( strategy ) ) { this . applyStrategy ( strategy ) ; return ; } if ( isFunction ( strategy ) ) { this . showTemplateBlockInView ( this . templateRef ) ; ( strategy as Function ) ( this . templateRef ) ; return ; } } private showTemplateBlockInView ( template < any > ) { this . viewContainer . clear ( ) ; if ( ! template ) { return ; } this . viewContainer . createEmbeddedView ( template ) ; this . changeDetector . markForCheck ( ) ; } private getAuthorisedTemplates ( ) < any > { return this . ngxPermissionsOnlyThen || this . ngxPermissionsExceptThen || this . ngxPermissionsThen || this . templateRef ; } private elseBlockDefined ( ) { return ! ! this . ngxPermissionsExceptElse || ! ! this . ngxPermissionsElse ; } private thenBlockDefined ( ) { return ! ! this . ngxPermissionsExceptThen || ! ! this . ngxPermissionsThen ; } private getAuthorizedStrategyInput ( ) { return this . ngxPermissionsOnlyAuthorisedStrategy || this . ngxPermissionsExceptAuthorisedStrategy || this . ngxPermissionsAuthorisedStrategy ; } private getUnAuthorizedStrategyInput ( ) { return this . ngxPermissionsOnlyUnauthorisedStrategy || this . ngxPermissionsExceptUnauthorisedStrategy || this . ngxPermissionsUnauthorisedStrategy ; } private applyStrategy ( str ) { if ( str === NgxPermissionsPredefinedStrategies . SHOW ) { this . showTemplateBlockInView ( this . templateRef ) ; return ; } if ( str === NgxPermissionsPredefinedStrategies . REMOVE ) { this . viewContainer . clear ( ) ; return ; } const strategy = this . configurationService . getStrategy ( str ) ; this . showTemplateBlockInView ( this . templateRef ) ; strategy ( this . templateRef ) ; } }	gxPermissionsService$ O O $NgxPermissionsConfigurationService$ O O $NgxRolesService$ O O $ViewContainerRef$ O O $ChangeDetectorRef$ O O $TemplateRef$ O O O O O O $void$ O O O O O O O O O O O O O O O O O O O O O O $void$ O $SimpleChanges$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $void$ O O O O O O O O O O O O O O O O O O O O O $Subscription$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $void$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $void$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $void$ O $TemplateRef$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $void$ O $TemplateRef$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $void$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $void$ O $TemplateRef$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $TemplateRef$ O O O O O O O O O O O O O O O O O O O O O O O O O $boolean$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
export interface NgxPermissionsRouterData { only ? : string | string [ ] | Function ; except ? : string | string [ ] | Function ; redirectTo ? : string ; }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { Injectable } from 's' ; import { ActivatedRouteSnapshot , CanActivate , CanActivateChild , CanLoad , NavigationExtras , Route , Router , RouterStateSnapshot } from 's' ; import { forkJoin , from , Observable , of } from 's' ; import { first , mergeMap , tap } from 's' ; import { NgxPermissionsRouterData } from 's' ; import { NgxPermissionsService } from 's' ; import { NgxRolesService } from 's' ; import { isFunction , isPlainObject , transformStringToArray } from 's' ; interface NgxRedirectToNavigationParameters { navigationCommands : any [ ] | Function ; navigationExtras ? : NavigationExtras | Function ; } @ Injectable ( ) export class NgxPermissionsGuard implements CanActivate , CanLoad , CanActivateChild { constructor ( private permissionsService , private rolesService , private router ) { } canActivate ( route , state ) : Promise < boolean > | boolean { return this . hasPermissions ( route , state ) ; } canActivateChild ( childRoute , state ) : Observable < boolean > | Promise < boolean > | boolean { return this . hasPermissions ( childRoute , state ) ; } canLoad ( route ) : boolean | Observable < boolean > | Promise < boolean > { return this . hasPermissions ( route ) ; } private hasPermissions ( route : ActivatedRouteSnapshot | Route , state ? ) { const purePermissions = ! ! route && route . data ? route . data [ 's' ] as NgxPermissionsRouterData : { } ; let permissions = this . transformPermission ( purePermissions , route , state ) ; if ( this . isParameterAvailable ( permissions . except ) ) { return this . passingExceptPermissionsValidation ( permissions , route , state ) ; } if ( this . isParameterAvailable ( permissions . only ) ) { return this . passingOnlyPermissionsValidation ( permissions , route , state ) ; } return true ; } private transformPermission ( purePermissions , route , state ) { let permissions = { ... purePermissions } ; if ( isFunction ( permissions . except ) ) { permissions . except = ( permissions . except as Function ) ( route , state ) ; } if ( isFunction ( permissions . only ) ) { permissions . only = ( permissions . only as Function ) ( route , state ) ; } permissions . except = transformStringToArray ( permissions . except ) ; permissions . only = transformStringToArray ( permissions . only ) ; return permissions ; } private isParameterAvailable ( permission ) { return ! ! ( permission ) && permission . length > 0 ; } private passingExceptPermissionsValidation ( permissions , route , state ) { if ( ! ! permissions . redirectTo && ( ( isFunction ( permissions . redirectTo ) ) || ( isPlainObject ( permissions . redirectTo ) && ! this . isRedirectionWithParameters ( permissions . redirectTo ) ) ) ) { let failedPermission = 's' ; return from ( permissions . except as any [ ] ) . pipe ( mergeMap ( ( data ) => { return forkJoin ( [ this . permissionsService . hasPermission ( < string | string [ ] > data ) , this . rolesService . hasOnlyRoles ( < string | string [ ] > data ) ] ) . pipe ( tap ( ( hasPermissions : boolean [ ] ) => { const dontHavePermissions = hasPermissions . every ( ( data ) => data === false ) ; if ( ! dontHavePermissions ) { failedPermission = data ; } } ) ) ; } ) , first ( ( data ) => data . some ( ( data ) => data === true ) , false ) , mergeMap ( ( isAllFalse ) => { if ( ! ! failedPermission ) { this . handleRedirectOfFailedPermission ( permissions , failedPermission , route , state ) ; return of ( false ) ; } if ( ! isAllFalse && permissions . only ) { return this . onlyRedirectCheck ( permissions , route , state ) ; } return of ( ! isAllFalse ) ; } ) ) . toPromise ( ) ; } return Promise . all ( [ this . permissionsService . hasPermission ( < string | string [ ] > permissions . except ) , this . rolesService . hasOnlyRoles ( < string | string [ ] > permissions . except ) ] ) . then ( ( [ hasPermission , hasRoles ] ) => { if ( hasPermission || hasRoles ) { if ( permissions . redirectTo ) { this . redirectToAnotherRoute ( permissions . redirectTo , route , state ) ; } return false ; } if ( permissions . only ) { return this . checkOnlyPermissions ( permissions , route , state ) ; } return true ; } ) ; } private redirectToAnotherRoute ( redirectTo : string | any [ ] | NgxRedirectToNavigationParameters | Function , route : ActivatedRouteSnapshot | Route , state ? , failedPermissionName ? ) { if ( isFunction ( redirectTo ) ) { redirectTo = ( redirectTo as Function ) ( failedPermissionName , route , state ) ; } if ( this . isRedirectionWithParameters ( redirectTo ) ) { if ( this . hasNavigationExtrasAsFunction ( redirectTo ) ) { ( < NgxRedirectToNavigationParameters > redirectTo ) . navigationExtras = ( ( < NgxRedirectToNavigationParameters > redirectTo ) . navigationExtras as Function ) ( route , state ) ; } if ( this . hasNavigationCommandsAsFunction ( redirectTo ) ) { ( < NgxRedirectToNavigationParameters > redirectTo ) . navigationCommands = ( ( < NgxRedirectToNavigationParameters > redirectTo ) . navigationCommands as Function ) ( route , state ) ; } this . router . navigate ( ( ( < NgxRedirectToNavigationParameters > redirectTo ) . navigationCommands as any [ ] ) , ( ( < NgxRedirectToNavigationParameters > redirectTo ) . navigationExtras as NavigationExtras ) ) ; return ; } if ( Array . isArray ( redirectTo ) ) { this . router . navigate ( redirectTo ) ; } else { this . router . navigate ( [ redirectTo ] ) ; } } private isRedirectionWithParameters ( object : any | NgxRedirectToNavigationParameters ) { return isPlainObject ( object ) && ( ! ! object . navigationCommands || ! ! object . navigationExtras ) ; } private hasNavigationExtrasAsFunction ( redirectTo ) { return ! ! ( < NgxRedirectToNavigationParameters > redirectTo ) . navigationExtras && isFunction ( ( < NgxRedirectToNavigationParameters > redirectTo ) . navigationExtras ) ; } private hasNavigationCommandsAsFunction ( redirectTo ) { return ! ! ( < NgxRedirectToNavigationParameters > redirectTo ) . navigationCommands && isFunction ( ( < NgxRedirectToNavigationParameters > redirectTo ) . navigationCommands ) ; } private onlyRedirectCheck ( permissions , route : ActivatedRouteSnapshot | Route , state ? ) < boolean > { let failedPermission = 's' ; return from ( permissions . only ) . pipe ( mergeMap ( ( data ) => { return forkJoin ( [ this . permissionsService . hasPermission ( < string | string [ ] > data ) , this . rolesService . hasOnlyRoles ( < string | string [ ] > data ) ] ) . pipe ( tap ( ( hasPermission : boolean [ ] ) => { const failed = hasPermission . every ( ( data ) => data === false ) ; if ( failed ) { failedPermission = data ; } } ) ) ; } ) , first ( ( data ) => { if ( isFunction ( permissions . redirectTo ) ) { return data . some ( ( data ) => data === true ) ; } return data . every ( ( data ) => data === false ) ; } , false ) , mergeMap ( ( pass ) : Observable < boolean > => { if ( isFunction ( permissions . redirectTo ) ) { if ( pass ) { return of ( true ) ; } else { this . handleRedirectOfFailedPermission ( permissions , failedPermission , route , state ) ; return of ( false ) ; } } else { if ( ! ! failedPermission ) { this . handleRedirectOfFailedPermission ( permissions , failedPermission , route , state ) ; } return of ( ! pass ) ; } } ) ) . toPromise ( ) ; } private handleRedirectOfFailedPermission ( permissions , failedPermission , route : ActivatedRouteSnapshot | Route , state ? ) { if ( this . isFailedPermissionPropertyOfRedirectTo ( permissions , failedPermission ) ) { this . redirectToAnotherRoute ( ( < any > permissions . redirectTo ) [ failedPermission ] , route , state , failedPermission ) ; } else { if ( isFunction ( permissions . redirectTo ) ) { this . redirectToAnotherRoute ( ( < any > permissions . redirectTo ) , route , state , failedPermission ) ; } else { this . redirectToAnotherRoute ( ( < any > permissions . redirectTo ) [ 's' ] , route , state , failedPermission ) ; } } } private isFailedPermissionPropertyOfRedirectTo ( permissions , failedPermission ) { return ! ! permissions . redirectTo && permissions . redirectTo [ < any > failedPermission ] ; } private checkOnlyPermissions ( purePermissions , route : ActivatedRouteSnapshot | Route , state ? ) { let permissions = { ... purePermissions } ; return Promise . all ( [ this . permissionsService . hasPermission ( < string | string [ ] > permissions . only ) , this . rolesService . hasOnlyRoles ( < string | string [ ] > permissions . only ) ] ) . then ( ( [ hasPermission , hasRole ] ) => { if ( hasPermission || hasRole ) return true ; if ( permissions . redirectTo ) { this . redirectToAnotherRoute ( permissions . redirectTo , route , state ) ; } return false ; } ) ; } private passingOnlyPermissionsValidation ( permissions , route : ActivatedRouteSnapshot | Route , state ? ) { if ( ( isFunction ( permissions . redirectTo ) || isPlainObject ( permissions . redirectTo ) && ! this . isRedirectionWithParameters ( permissions . redirectTo ) ) ) { return this . onlyRedirectCheck ( permissions , route , state ) } return this . checkOnlyPermissions ( permissions , route , state ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsService$ O O $NgxRolesService$ O O $Router$ O O O O O $ActivatedRouteSnapshot$ O $RouterStateSnapshot$ O O O O O O O O O O O O O O O O O O O O O O $ActivatedRouteSnapshot$ O $RouterStateSnapshot$ O O O O O O O O O O O O O O O O O O O O O O O O O O O $Route$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $RouterStateSnapshot$ O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsRouterData$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O $NgxPermissionsRouterData$ O $any$ O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O O O O O O O O O O O O O $NgxPermissionsRouterData$ O $any$ O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O $boolean$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $RouterStateSnapshot$ O O $string$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $boolean$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $boolean$ O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O $boolean$ O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O $Promise$ O $any$ O O O O O O O O $RouterStateSnapshot$ O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O O O O O O O O O O O O O $boolean$ O O O O O O O O O O O O O O $boolean$ O O O O O O O O O O O O O O O $boolean$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O $string$ O O O O O O O O $RouterStateSnapshot$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O $string$ O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O O $RouterStateSnapshot$ O O O $NgxPermissionsRouterData$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsRouterData$ O O O O O O O O $RouterStateSnapshot$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { Directive , EventEmitter , Input , OnInit , Output , TemplateRef , ViewContainerRef } from 's' ; import { StrategyFunction } from 's' ; @ Directive ( { selector : 's' } ) export class NgxPermissionsAllowStubDirective implements OnInit { @ Input ( ) ngxPermissionsOnly : string | string [ ] ; @ Input ( ) ngxPermissionsOnlyThen : TemplateRef < any > ; @ Input ( ) ngxPermissionsOnlyElse : TemplateRef < any > ; @ Input ( ) ngxPermissionsExcept : string | string [ ] ; @ Input ( ) ngxPermissionsExceptElse : TemplateRef < any > ; @ Input ( ) ngxPermissionsExceptThen : TemplateRef < any > ; @ Input ( ) ngxPermissionsThen : TemplateRef < any > ; @ Input ( ) ngxPermissionsElse : TemplateRef < any > ; @ Input ( ) ngxPermissionsOnlyAuthorisedStrategy : string | StrategyFunction ; @ Input ( ) ngxPermissionsOnlyUnauthorisedStrategy : string | StrategyFunction ; @ Input ( ) ngxPermissionsExceptUnauthorisedStrategy : string | StrategyFunction ; @ Input ( ) ngxPermissionsExceptAuthorisedStrategy : string | StrategyFunction ; @ Input ( ) ngxPermissionsUnauthorisedStrategy : string | StrategyFunction ; @ Input ( ) ngxPermissionsAuthorisedStrategy : string | StrategyFunction ; @ Output ( ) permissionsAuthorized = new EventEmitter ( ) ; @ Output ( ) permissionsUnauthorized = new EventEmitter ( ) ; constructor ( private viewContainer , private templateRef < any > ) { } ngOnInit ( ) { this . viewContainer . clear ( ) ; this . viewContainer . createEmbeddedView ( this . getAuthorizedTemplate ( ) ) ; this . permissionsUnauthorized . emit ( ) ; } private getAuthorizedTemplate ( ) { return this . ngxPermissionsOnlyThen || this . ngxPermissionsExceptThen || this . ngxPermissionsThen || this . templateRef ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ViewContainerRef$ O O $TemplateRef$ O O O O O O $void$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { Directive , EventEmitter , Input , OnInit , Output , TemplateRef , ViewContainerRef } from 's' ; import { StrategyFunction } from 's' ; @ Directive ( { selector : 's' } ) export class NgxPermissionsRestrictStubDirective implements OnInit { @ Input ( ) ngxPermissionsOnly : string | string [ ] ; @ Input ( ) ngxPermissionsOnlyThen : TemplateRef < any > ; @ Input ( ) ngxPermissionsOnlyElse : TemplateRef < any > ; @ Input ( ) ngxPermissionsExcept : string | string [ ] ; @ Input ( ) ngxPermissionsExceptElse : TemplateRef < any > ; @ Input ( ) ngxPermissionsExceptThen : TemplateRef < any > ; @ Input ( ) ngxPermissionsThen : TemplateRef < any > ; @ Input ( ) ngxPermissionsElse : TemplateRef < any > ; @ Input ( ) ngxPermissionsOnlyAuthorisedStrategy : string | StrategyFunction ; @ Input ( ) ngxPermissionsOnlyUnauthorisedStrategy : string | StrategyFunction ; @ Input ( ) ngxPermissionsExceptUnauthorisedStrategy : string | StrategyFunction ; @ Input ( ) ngxPermissionsExceptAuthorisedStrategy : string | StrategyFunction ; @ Input ( ) ngxPermissionsUnauthorisedStrategy : string | StrategyFunction ; @ Input ( ) ngxPermissionsAuthorisedStrategy : string | StrategyFunction ; @ Output ( ) permissionsAuthorized = new EventEmitter ( ) ; @ Output ( ) permissionsUnauthorized = new EventEmitter ( ) ; constructor ( private viewContainer ) { } ngOnInit ( ) { this . viewContainer . clear ( ) ; if ( this . getUnAuthorizedTemplate ( ) ) { this . viewContainer . createEmbeddedView ( this . getUnAuthorizedTemplate ( ) ) ; } this . permissionsUnauthorized . emit ( ) ; } private getUnAuthorizedTemplate ( ) { return this . ngxPermissionsOnlyElse || this . ngxPermissionsExceptElse || this . ngxPermissionsElse ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ViewContainerRef$ O O O $void$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { NgModule , ModuleWithProviders } from 's' ; import { NgxPermissionsDirective } from 's' ; import { NgxPermissionsService , USE_PERMISSIONS_STORE } from 's' ; import { NgxPermissionsGuard } from 's' ; import { NgxRolesService , USE_ROLES_STORE } from 's' ; import { NgxPermissionsStore } from 's' ; import { NgxRolesStore } from 's' ; import { NgxPermissionsAllowStubDirective } from 's' ; import { NgxPermissionsRestrictStubDirective } from 's' ; import { NgxPermissionsConfigurationService , USE_CONFIGURATION_STORE } from 's' ; import { NgxPermissionsConfigurationStore } from 's' ; export * from 's' export * from 's' export * from 's' export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' export * from 's' export * from 's' export * from 's' export * from 's' export interface NgxPermissionsModuleConfig { rolesIsolate ? : boolean ; permissionsIsolate ? : boolean ; configurationIsolate ? : boolean } @ NgModule ( { imports : [ ] , declarations : [ NgxPermissionsDirective ] , exports : [ NgxPermissionsDirective ] } ) export class NgxPermissionsModule { static forRoot ( config = { } ) { return { ngModule : NgxPermissionsModule , providers : [ NgxPermissionsStore , NgxRolesStore , NgxPermissionsConfigurationStore , NgxPermissionsService , NgxPermissionsGuard , NgxRolesService , NgxPermissionsConfigurationService , { provide : USE_PERMISSIONS_STORE , useValue : config . permissionsIsolate } , { provide : USE_ROLES_STORE , useValue : config . rolesIsolate } , { provide : USE_CONFIGURATION_STORE , useValue : config . configurationIsolate } , ] } ; } static forChild ( config = { } ) { return { ngModule : NgxPermissionsModule , providers : [ { provide : USE_PERMISSIONS_STORE , useValue : config . permissionsIsolate } , { provide : USE_ROLES_STORE , useValue : config . rolesIsolate } , { provide : USE_CONFIGURATION_STORE , useValue : config . configurationIsolate } , NgxPermissionsConfigurationService , NgxPermissionsService , NgxRolesService , NgxPermissionsGuard ] } ; } } @ NgModule ( { imports : [ ] , declarations : [ NgxPermissionsAllowStubDirective ] , exports : [ NgxPermissionsAllowStubDirective ] } ) export class NgxPermissionsAllowStubModule { } @ NgModule ( { imports : [ ] , declarations : [ NgxPermissionsRestrictStubDirective ] , exports : [ NgxPermissionsRestrictStubDirective ] } ) export class NgxPermissionsRestrictStubModule { }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ModuleWithProviders$ O $NgxPermissionsModuleConfig$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ModuleWithProviders$ O $NgxPermissionsModuleConfig$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { Component , 0 , TemplateRef } from 's' ; import { fakeAsync , TestBed , tick } from 's' ; import { NgxPermissionsModule } from 's' ; import { NgxPermissionsService } from 's' ; import { NgxPermissionsConfigurationService } from 's' ; import { NgxPermissionsPredefinedStrategies } from 's' ; import { NgxRolesService } from 's' ; enum PermissionsTestEnum { ADMIN = < any > 's' , GUEST = < any > 's' } describe ( 's' , ( ) => { @ Component ( { selector : 's' , template : `template` } ) class TestComp { data : any ; } let permissionService ; let permissions ; let fixture ; let comp ; let configurationService ; const disable = 's' ; let renderer ; let correctTemplate = 's' let disableFunction = ( tF < any > ) => { renderer . setAttribute ( tF . elementRef . nativeElement . nextSibling , 's' , 's' ) ; } ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { declarations : [ TestComp ] , imports : [ NgxPermissionsModule . forRoot ( ) ] , providers : [ 0 ] } ) ; fixture = TestBed . createComponent ( TestComp ) ; comp = fixture . componentInstance ; permissionService = fixture . debugElement . injector . get ( NgxPermissionsService ) ; configurationService = fixture . debugElement . injector . get ( NgxPermissionsConfigurationService ) ; renderer = fixture . debugElement . injector . get ( 0 ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { configurationService . addPermissionStrategy ( disable , disableFunction ) ; configurationService . setDefaultOnAuthorizedStrategy ( disable ) ; permissionService . loadPermissions ( [ PermissionsTestEnum . ADMIN , PermissionsTestEnum . GUEST ] ) ; detectChanges ( fixture ) ; let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toBeTruthy ( ) ; expect ( content . disabled ) . toEqual ( true ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { configurationService . setDefaultOnAuthorizedStrategy ( NgxPermissionsPredefinedStrategies . SHOW ) ; permissionService . loadPermissions ( [ PermissionsTestEnum . ADMIN , PermissionsTestEnum . GUEST ] ) ; detectChanges ( fixture ) ; let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toBeTruthy ( ) ; expect ( content . innerHTML ) . toEqual ( correctTemplate ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { configurationService . setDefaultOnAuthorizedStrategy ( NgxPermissionsPredefinedStrategies . REMOVE ) ; permissionService . loadPermissions ( [ PermissionsTestEnum . ADMIN , PermissionsTestEnum . GUEST ] ) ; detectChanges ( fixture ) ; let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toBe ( null ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { configurationService . addPermissionStrategy ( disable , disableFunction ) ; configurationService . setDefaultOnUnauthorizedStrategy ( disable ) ; permissionService . loadPermissions ( [ PermissionsTestEnum . GUEST ] ) ; detectChanges ( fixture ) ; let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toBeTruthy ( ) ; expect ( content . disabled ) . toEqual ( true ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { configurationService . setDefaultOnUnauthorizedStrategy ( NgxPermissionsPredefinedStrategies . SHOW ) ; permissionService . loadPermissions ( [ PermissionsTestEnum . GUEST ] ) ; detectChanges ( fixture ) ; let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toBeTruthy ( ) ; expect ( content . innerHTML ) . toEqual ( correctTemplate ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { configurationService . setDefaultOnUnauthorizedStrategy ( NgxPermissionsPredefinedStrategies . REMOVE ) ; permissionService . loadPermissions ( [ PermissionsTestEnum . GUEST ] ) ; detectChanges ( fixture ) ; let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toBe ( null ) ; } ) ) ; } ) ; describe ( 's' , ( ) => { @ Component ( { selector : 's' , template : `template` } ) class TestComp { data : any ; } let permissionService ; let permissions ; let fixture ; let comp ; let configurationService ; const disable = 's' ; let renderer ; let correctTemplate = 's' let disableFunction = ( tF < any > ) => { renderer . setAttribute ( tF . elementRef . nativeElement . nextSibling , 's' , 's' ) ; } ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { declarations : [ TestComp ] , imports : [ NgxPermissionsModule . forRoot ( ) ] , providers : [ 0 ] } ) ; fixture = TestBed . createComponent ( TestComp ) ; comp = fixture . componentInstance ; permissionService = fixture . debugElement . injector . get ( NgxPermissionsService ) ; configurationService = fixture . debugElement . injector . get ( NgxPermissionsConfigurationService ) ; renderer = fixture . debugElement . injector . get ( 0 ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { permissionService . loadPermissions ( [ PermissionsTestEnum . ADMIN , PermissionsTestEnum . GUEST ] ) ; detectChanges ( fixture ) ; let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { permissionService . loadPermissions ( [ PermissionsTestEnum . GUEST ] ) ; detectChanges ( fixture ) ; let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toBeTruthy ( ) ; expect ( content . innerHTML ) . toEqual ( correctTemplate ) ; } ) ) ; } ) ; describe ( 's' , ( ) => { @ Component ( { selector : 's' , template : `template` } ) class TestComp { data : any ; } let permissionService ; let permissions ; let fixture ; let comp ; let configurationService ; const disable = 's' ; let renderer ; let correctTemplate = 's' ; let disableFunction = ( tF < any > ) => { renderer . setAttribute ( tF . elementRef . nativeElement . nextSibling , 's' , 's' ) ; } ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { declarations : [ TestComp ] , imports : [ NgxPermissionsModule . forRoot ( ) ] , providers : [ 0 ] } ) ; fixture = TestBed . createComponent ( TestComp ) ; comp = fixture . componentInstance ; permissionService = fixture . debugElement . injector . get ( NgxPermissionsService ) ; configurationService = fixture . debugElement . injector . get ( NgxPermissionsConfigurationService ) ; renderer = fixture . debugElement . injector . get ( 0 ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { permissionService . loadPermissions ( [ PermissionsTestEnum . GUEST ] ) ; detectChanges ( fixture ) ; let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { permissionService . loadPermissions ( [ PermissionsTestEnum . ADMIN , PermissionsTestEnum . GUEST ] ) ; detectChanges ( fixture ) ; let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toBeTruthy ( ) ; expect ( content . innerHTML ) . toEqual ( correctTemplate ) ; } ) ) ; } ) ; describe ( 's' , ( ) => { @ Component ( { selector : 's' , template : `template` } ) class TestComp { data : any ; public disabled ( templateRef < any > ) { templateRef . elementRef . nativeElement . nextSibling . setAttribute ( 's' , true ) } } let permissionService ; let permissions ; let fixture ; let comp ; let configurationService ; const disable = 's' ; let renderer ; let correctTemplate = 's' let disableFunction = ( tF < any > ) => { renderer . setAttribute ( tF . elementRef . nativeElement . nextSibling , 's' , 's' ) ; } ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { declarations : [ TestComp ] , imports : [ NgxPermissionsModule . forRoot ( ) ] , providers : [ 0 ] } ) ; fixture = TestBed . createComponent ( TestComp ) ; comp = fixture . componentInstance ; permissionService = fixture . debugElement . injector . get ( NgxPermissionsService ) ; configurationService = fixture . debugElement . injector . get ( NgxPermissionsConfigurationService ) ; renderer = fixture . debugElement . injector . get ( 0 ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { permissionService . loadPermissions ( [ PermissionsTestEnum . ADMIN , PermissionsTestEnum . GUEST ] ) ; detectChanges ( fixture ) ; let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toBeTruthy ( ) ; expect ( content . disabled ) . toEqual ( true ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { permissionService . loadPermissions ( [ PermissionsTestEnum . GUEST ] ) ; detectChanges ( fixture ) ; let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toBeTruthy ( ) ; expect ( content . disabled ) . toEqual ( true ) ; } ) ) ; } ) ; describe ( 's' , ( ) => { @ Component ( { selector : 's' , template : `template` } ) class TestComp { data : any ; public disabled ( templateRef < any > ) { templateRef . elementRef . nativeElement . nextSibling . setAttribute ( 's' , true ) } } let permissionService ; let permissions ; let fixture ; let comp ; let configurationService ; const disable = 's' ; let renderer ; let correctTemplate = 's' let disableFunction = ( tF < any > ) => { renderer . setAttribute ( tF . elementRef . nativeElement . nextSibling , 's' , 's' ) ; } ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { declarations : [ TestComp ] , imports : [ NgxPermissionsModule . forRoot ( ) ] , providers : [ 0 ] } ) ; fixture = TestBed . createComponent ( TestComp ) ; comp = fixture . componentInstance ; permissionService = fixture . debugElement . injector . get ( NgxPermissionsService ) ; configurationService = fixture . debugElement . injector . get ( NgxPermissionsConfigurationService ) ; renderer = fixture . debugElement . injector . get ( 0 ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { permissionService . loadPermissions ( [ PermissionsTestEnum . ADMIN , PermissionsTestEnum . GUEST ] ) ; detectChanges ( fixture ) ; let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toBeTruthy ( ) ; expect ( content . disabled ) . toEqual ( true ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { permissionService . loadPermissions ( [ PermissionsTestEnum . GUEST ] ) ; detectChanges ( fixture ) ; let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toBeTruthy ( ) ; expect ( content . disabled ) . toEqual ( true ) ; } ) ) ; } ) ; describe ( 's' , ( ) => { @ Component ( { selector : 's' , template : `template` } ) class TestComp { data : any ; public disabled ( templateRef < any > ) { templateRef . elementRef . nativeElement . nextSibling . setAttribute ( 's' , true ) } } let permissionService ; let permissions ; let fixture ; let comp ; let configurationService ; const disable = 's' ; let renderer ; let correctTemplate = 's' let disableFunction = ( tF < any > ) => { renderer . setAttribute ( tF . elementRef . nativeElement . nextSibling , 's' , 's' ) ; } ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { declarations : [ TestComp ] , imports : [ NgxPermissionsModule . forRoot ( ) ] , providers : [ 0 ] } ) ; fixture = TestBed . createComponent ( TestComp ) ; comp = fixture . componentInstance ; permissionService = fixture . debugElement . injector . get ( NgxPermissionsService ) ; configurationService = fixture . debugElement . injector . get ( NgxPermissionsConfigurationService ) ; renderer = fixture . debugElement . injector . get ( 0 ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { configurationService . addPermissionStrategy ( disable , disableFunction ) ; permissionService . loadPermissions ( [ PermissionsTestEnum . ADMIN , PermissionsTestEnum . GUEST ] ) ; detectChanges ( fixture ) ; let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toBeTruthy ( ) ; expect ( content . disabled ) . toEqual ( true ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { configurationService . addPermissionStrategy ( disable , disableFunction ) ; permissionService . loadPermissions ( [ PermissionsTestEnum . GUEST ] ) ; detectChanges ( fixture ) ; let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toBeTruthy ( ) ; expect ( content . disabled ) . toEqual ( true ) ; } ) ) ; } ) ; describe ( 's' , ( ) => { @ Component ( { selector : 's' , template : `template` } ) class TestComp { data : any ; public disabled ( templateRef < any > ) { templateRef . elementRef . nativeElement . nextSibling . setAttribute ( 's' , true ) } } let permissionService ; let permissions ; let fixture ; let comp ; let configurationService ; const disable = 's' ; let renderer ; let correctTemplate = 's' let disableFunction = ( tF < any > ) => { renderer . setAttribute ( tF . elementRef . nativeElement . nextSibling , 's' , 's' ) ; } ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { declarations : [ TestComp ] , imports : [ NgxPermissionsModule . forRoot ( ) ] , providers : [ 0 ] } ) ; fixture = TestBed . createComponent ( TestComp ) ; comp = fixture . componentInstance ; permissionService = fixture . debugElement . injector . get ( NgxPermissionsService ) ; configurationService = fixture . debugElement . injector . get ( NgxPermissionsConfigurationService ) ; renderer = fixture . debugElement . injector . get ( 0 ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { configurationService . addPermissionStrategy ( disable , disableFunction ) ; permissionService . loadPermissions ( [ PermissionsTestEnum . ADMIN , PermissionsTestEnum . GUEST ] ) ; detectChanges ( fixture ) ; let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toBeTruthy ( ) ; expect ( content . disabled ) . toEqual ( true ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { configurationService . addPermissionStrategy ( disable , disableFunction ) ; permissionService . loadPermissions ( [ PermissionsTestEnum . GUEST ] ) ; detectChanges ( fixture ) ; let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toBeTruthy ( ) ; expect ( content . disabled ) . toEqual ( true ) ; } ) ) ; } ) ; describe ( 's' , ( ) => { @ Component ( { selector : 's' , template : `template` } ) class TestComp { data : any ; public disabled ( templateRef < any > ) { templateRef . elementRef . nativeElement . nextSibling . setAttribute ( 's' , true ) } } let permissionService ; let permissions ; let fixture ; let comp ; let configurationService ; const disable = 's' ; let renderer ; let correctTemplate = 's' let disableFunction = ( tF < any > ) => { renderer . setAttribute ( tF . elementRef . nativeElement . nextSibling , 's' , 's' ) ; } ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { declarations : [ TestComp ] , imports : [ NgxPermissionsModule . forRoot ( ) ] , providers : [ 0 ] } ) ; fixture = TestBed . createComponent ( TestComp ) ; comp = fixture . componentInstance ; permissionService = fixture . debugElement . injector . get ( NgxPermissionsService ) ; configurationService = fixture . debugElement . injector . get ( NgxPermissionsConfigurationService ) ; renderer = fixture . debugElement . injector . get ( 0 ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { permissionService . loadPermissions ( [ PermissionsTestEnum . ADMIN , PermissionsTestEnum . GUEST ] ) ; detectChanges ( fixture ) ; let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toBeTruthy ( ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { configurationService . addPermissionStrategy ( disable , disableFunction ) ; permissionService . loadPermissions ( [ PermissionsTestEnum . GUEST ] ) ; detectChanges ( fixture ) ; let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; } ) ) ; } ) ; describe ( 's' , ( ) => { @ Component ( { selector : 's' , template : `template` } ) class TestComp { data : any ; public disabled ( templateRef < any > ) { templateRef . elementRef . nativeElement . nextSibling . setAttribute ( 's' , true ) } } let permissionService ; let permissions ; let fixture ; let comp ; let configurationService ; const disable = 's' ; let renderer ; let correctTemplate = 's' let disableFunction = ( tF < any > ) => { renderer . setAttribute ( tF . elementRef . nativeElement . nextSibling , 's' , 's' ) ; } ; let enableFunction = ( tF < any > ) => { renderer . removeAttribute ( tF . elementRef . nativeElement . nextSibling , 's' ) ; } ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { declarations : [ TestComp ] , imports : [ NgxPermissionsModule . forRoot ( ) ] , providers : [ 0 ] } ) ; fixture = TestBed . createComponent ( TestComp ) ; comp = fixture . componentInstance ; permissionService = fixture . debugElement . injector . get ( NgxPermissionsService ) ; configurationService = fixture . debugElement . injector . get ( NgxPermissionsConfigurationService ) ; renderer = fixture . debugElement . injector . get ( 0 ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { configurationService . addPermissionStrategy ( disable , disableFunction ) ; configurationService . addPermissionStrategy ( 's' , enableFunction ) ; permissionService . loadPermissions ( [ PermissionsTestEnum . GUEST ] ) ; detectChanges ( fixture ) ; let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toBeTruthy ( ) ; expect ( content . disabled ) . toBe ( true ) ; permissionService . loadPermissions ( [ PermissionsTestEnum . ADMIN , PermissionsTestEnum . GUEST ] ) ; detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . disabled ) . toBeFalsy ( ) ; } ) ) ; } ) ; function detectChanges ( fixture ) { tick ( ) ; fixture . detectChanges ( ) ; tick ( ) ; fixture . detectChanges ( ) ; }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsConfigurationService$ O O O O O O O $Renderer2$ O O O O O O O O O $TemplateRefgxPermissionsConfigurationService$ O O O O O O O $Renderer2$ O O O O O O O O O $TemplateRefgxPermissionsConfigurationService$ O O O O O O O $Renderer2$ O O O O O O O O O O $TemplateRefemplateRef$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsConfigurationService$ O O O O O O O $Renderer2$ O O O O O O O O O $TemplateRefemplateRef$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsConfigurationService$ O O O O O O O $Renderer2$ O O O O O O O O O $TemplateRefemplateRef$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsConfigurationService$ O O O O O O O $Renderer2$ O O O O O O O O O $TemplateRefemplateRef$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsConfigurationService$ O O O O O O O $Renderer2$ O O O O O O O O O $TemplateRefemplateRef$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsConfigurationService$ O O O O O O O $Renderer2$ O O O O O O O O O $TemplateRefemplateRef$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsConfigurationService$ O O O O O O O $Renderer2$ O O O O O O O O O $TemplateRef$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $TemplateRef
import { Component } from 's' ; import { fakeAsync , TestBed , tick } from 's' ; import { NgxPermissionsModule } from 's' ; import { NgxRolesService } from 's' ; import { NgxPermissionsService } from 's' ; import { NgxPermissionsConfigurationService } from 's' ; describe ( 's' , ( ) => { @ Component ( { selector : 's' , template : `template` } ) class TestComp { data : any ; } let rolesService ; let permissionsService ; let configurationService ; let fixture ; let comp ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { declarations : [ TestComp ] , imports : [ NgxPermissionsModule . forRoot ( ) ] } ) ; fixture = TestBed . createComponent ( TestComp ) ; comp = fixture . componentInstance ; rolesService = fixture . debugElement . injector . get ( NgxRolesService ) ; permissionsService = fixture . debugElement . injector . get ( NgxPermissionsService ) ; configurationService = fixture . debugElement . injector . get ( NgxPermissionsConfigurationService ) ; } ) ; describe ( 's' , ( ) => { beforeEach ( ( ) => { configurationService . setDefaultOnUnauthorizedStrategy ( 's' ) ; permissionsService . addPermission ( 's' ) ; } ) it ( 's' , fakeAsync ( ( ) => { detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML . trim ( ) ) . toEqual ( `template` ) ; } ) ) ; } ) } ) ; describe ( 's' , ( ) => { @ Component ( { selector : 's' , template : `template` } ) class TestComp { data : any ; } let rolesService ; let permissionsService ; let configurationService ; let fixture ; let comp ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { declarations : [ TestComp ] , imports : [ NgxPermissionsModule . forRoot ( ) ] } ) ; fixture = TestBed . createComponent ( TestComp ) ; comp = fixture . componentInstance ; rolesService = fixture . debugElement . injector . get ( NgxRolesService ) ; permissionsService = fixture . debugElement . injector . get ( NgxPermissionsService ) ; configurationService = fixture . debugElement . injector . get ( NgxPermissionsConfigurationService ) ; } ) ; describe ( 's' , ( ) => { beforeEach ( ( ) => { configurationService . setDefaultOnUnauthorizedStrategy ( 's' ) ; permissionsService . addPermission ( 's' ) ; } ) it ( 's' , fakeAsync ( ( ) => { detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML . trim ( ) ) . toEqual ( `template` ) ; } ) ) ; } ) } ) ; describe ( 's' , ( ) => { @ Component ( { selector : 's' , template : `template` } ) class TestComp { data : any ; } let rolesService ; let permissionsService ; let configurationService ; let fixture ; let comp ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { declarations : [ TestComp ] , imports : [ NgxPermissionsModule . forRoot ( ) ] } ) ; fixture = TestBed . createComponent ( TestComp ) ; comp = fixture . componentInstance ; rolesService = fixture . debugElement . injector . get ( NgxRolesService ) ; permissionsService = fixture . debugElement . injector . get ( NgxPermissionsService ) ; configurationService = fixture . debugElement . injector . get ( NgxPermissionsConfigurationService ) ; } ) ; describe ( 's' , ( ) => { beforeEach ( ( ) => { configurationService . setDefaultOnUnauthorizedStrategy ( 's' ) ; permissionsService . addPermission ( 's' ) ; } ) it ( 's' , fakeAsync ( ( ) => { detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML . trim ( ) ) . toEqual ( `template` ) ; } ) ) ; } ) } ) ; describe ( 's' , ( ) => { @ Component ( { selector : 's' , template : `template` } ) class TestComp { data : any ; } let rolesService ; let permissionsService ; let configurationService ; let fixture ; let comp ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { declarations : [ TestComp ] , imports : [ NgxPermissionsModule . forRoot ( ) ] } ) ; fixture = TestBed . createComponent ( TestComp ) ; comp = fixture . componentInstance ; comp . permissionsUnauthorized = ( ) => { } ; rolesService = fixture . debugElement . injector . get ( NgxRolesService ) ; permissionsService = fixture . debugElement . injector . get ( NgxPermissionsService ) ; configurationService = fixture . debugElement . injector . get ( NgxPermissionsConfigurationService ) ; } ) ; describe ( 's' , ( ) => { beforeEach ( ( ) => { permissionsService . addPermission ( 's' ) ; } ) it ( 's' , fakeAsync ( ( ) => { spyOn ( comp , 's' ) ; detectChanges ( fixture ) ; permissionsService . addPermission ( 's' ) ; detectChanges ( fixture ) ; expect ( comp . permissionsUnauthorized ) . toHaveBeenCalledTimes ( 0 ) ; } ) ) ; } ) } ) ; describe ( 's' , ( ) => { @ Component ( { selector : 's' , template : `template` } ) class TestComp { data : any ; } let rolesService ; let permissionsService ; let configurationService ; let fixture ; let comp ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { declarations : [ TestComp ] , imports : [ NgxPermissionsModule . forRoot ( ) ] } ) ; fixture = TestBed . createComponent ( TestComp ) ; comp = fixture . componentInstance ; rolesService = fixture . debugElement . injector . get ( NgxRolesService ) ; permissionsService = fixture . debugElement . injector . get ( NgxPermissionsService ) ; configurationService = fixture . debugElement . injector . get ( NgxPermissionsConfigurationService ) ; } ) ; describe ( 's' , ( ) => { beforeEach ( ( ) => { configurationService . setDefaultOnUnauthorizedStrategy ( 's' ) ; permissionsService . addPermission ( 's' ) ; } ) it ( 's' , fakeAsync ( ( ) => { detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML . trim ( ) ) . toEqual ( `template` ) ; } ) ) ; } ) } ) ; describe ( 's' , ( ) => { @ Component ( { selector : 's' , template : `template` } ) class TestComp { data : any ; permissions = "s" } let rolesService ; let permissionsService ; let configurationService ; let fixture ; let comp ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { declarations : [ TestComp ] , imports : [ NgxPermissionsModule . forRoot ( ) ] } ) ; fixture = TestBed . createComponent ( TestComp ) ; comp = fixture . componentInstance ; rolesService = fixture . debugElement . injector . get ( NgxRolesService ) ; permissionsService = fixture . debugElement . injector . get ( NgxPermissionsService ) ; configurationService = fixture . debugElement . injector . get ( NgxPermissionsConfigurationService ) ; } ) ; describe ( 's' , ( ) => { beforeEach ( ( ) => { permissionsService . addPermission ( 's' ) ; } ) it ( 's' , fakeAsync ( ( ) => { detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toEqual ( null ) ; comp . permissions = "s" ; detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML . trim ( ) ) . toEqual ( `template` ) ; } ) ) ; } ) } ) ; describe ( 's' , ( ) => { @ Component ( { selector : 's' , template : `template` } ) class TestComp { data : any ; permissions = "s" } let rolesService ; let permissionsService ; let configurationService ; let fixture ; let comp ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { declarations : [ TestComp ] , imports : [ NgxPermissionsModule . forRoot ( ) ] } ) ; fixture = TestBed . createComponent ( TestComp ) ; comp = fixture . componentInstance ; rolesService = fixture . debugElement . injector . get ( NgxRolesService ) ; permissionsService = fixture . debugElement . injector . get ( NgxPermissionsService ) ; configurationService = fixture . debugElement . injector . get ( NgxPermissionsConfigurationService ) ; } ) ; describe ( 's' , ( ) => { beforeEach ( ( ) => { permissionsService . addPermission ( 's' ) ; } ) it ( 's' , fakeAsync ( ( ) => { detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toEqual ( null ) ; comp . permissions = undefined ; detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML . trim ( ) ) . toEqual ( `template` ) ; } ) ) ; } ) } ) ; describe ( 's' , ( ) => { @ Component ( { selector : 's' , template : `template` } ) class TestComp { data : any ; permissions = "s" } let rolesService ; let permissionsService ; let configurationService ; let fixture ; let comp ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { declarations : [ TestComp ] , imports : [ NgxPermissionsModule . forRoot ( ) ] } ) ; fixture = TestBed . createComponent ( TestComp ) ; comp = fixture . componentInstance ; rolesService = fixture . debugElement . injector . get ( NgxRolesService ) ; permissionsService = fixture . debugElement . injector . get ( NgxPermissionsService ) ; configurationService = fixture . debugElement . injector . get ( NgxPermissionsConfigurationService ) ; } ) ; describe ( 's' , ( ) => { beforeEach ( ( ) => { permissionsService . addPermission ( 's' ) ; } ) it ( 's' , fakeAsync ( ( ) => { detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML . trim ( ) ) . toEqual ( `template` ) ; comp . permissions = "s" ; detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toEqual ( null ) ; } ) ) ; } ) } ) ; describe ( 's' , ( ) => { @ Component ( { selector : 's' , template : `template` } ) class TestComp { data : any ; permissions = "s" } let rolesService ; let permissionsService ; let configurationService ; let fixture ; let comp ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { declarations : [ TestComp ] , imports : [ NgxPermissionsModule . forRoot ( ) ] } ) ; fixture = TestBed . createComponent ( TestComp ) ; comp = fixture . componentInstance ; rolesService = fixture . debugElement . injector . get ( NgxRolesService ) ; permissionsService = fixture . debugElement . injector . get ( NgxPermissionsService ) ; configurationService = fixture . debugElement . injector . get ( NgxPermissionsConfigurationService ) ; } ) ; describe ( 's' , ( ) => { beforeEach ( ( ) => { permissionsService . addPermission ( 's' ) ; } ) it ( 's' , fakeAsync ( ( ) => { detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toEqual ( null ) ; comp . permissions = undefined ; detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML . trim ( ) ) . toEqual ( `template` ) ; } ) ) ; } ) } ) ; function detectChanges ( fixture ) { tick ( ) ; fixture . detectChanges ( ) ; tick ( ) ; fixture . detectChanges ( ) ; }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsConfigurationService$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsConfigurationService$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsConfigurationService$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsConfigurationService$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsConfigurationService$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsConfigurationServicegxPermissionsConfigurationServicegxPermissionsConfigurationServicegxPermissionsConfigurationService$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { NgxPermissionsDirective } from 's' ; import { Component } from 's' ; import { NgxPermissionsModule } from 's' ; import { fakeAsync , TestBed , tick } from 's' ; import { NgxPermissionsService } from 's' ; import { NgxRolesService } from 's' ; enum PermissionsTestEnum { ADMIN = < any > 's' , GUEST = < any > 's' } describe ( 's' , ( ) => { it ( 's' , ( ) => { expect ( true ) . toBeTruthy ( ) ; } ) ; } ) ; describe ( 's' , ( ) => { @ Component ( { selector : 's' , template : `template` } ) class TestComp { data : any ; } let permissionService ; let permissions ; let fixture ; let comp ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { declarations : [ TestComp ] , imports : [ NgxPermissionsModule . forRoot ( ) ] } ) ; fixture = TestBed . createComponent ( TestComp ) ; comp = fixture . componentInstance ; permissionService = fixture . debugElement . injector . get ( NgxPermissionsService ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { permissionService . loadPermissions ( [ PermissionsTestEnum . ADMIN , PermissionsTestEnum . GUEST ] ) ; tick ( ) ; fixture . detectChanges ( ) ; let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { permissionService . loadPermissions ( [ PermissionsTestEnum . ADMIN , PermissionsTestEnum . GUEST ] ) ; detectChanges ( fixture ) ; let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { permissionService . loadPermissions ( [ PermissionsTestEnum . GUEST ] ) ; detectChanges ( fixture ) ; let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toBeTruthy ( ) ; expect ( content . innerHTML ) . toEqual ( 's' ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { permissionService . loadPermissions ( [ PermissionsTestEnum . GUEST ] ) ; detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML ) . toEqual ( 's' ) ; permissionService . addPermission ( PermissionsTestEnum . ADMIN ) ; detectChanges ( fixture ) ; let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { permissionService . loadPermissions ( [ PermissionsTestEnum . ADMIN , PermissionsTestEnum . GUEST ] ) ; detectChanges ( fixture ) ; let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; permissionService . removePermission ( PermissionsTestEnum . ADMIN ) ; detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML ) . toEqual ( 's' ) ; } ) ) ; } ) ; describe ( 's' , ( ) => { @ Component ( { selector : 's' , template : `template` } ) class TestComp { data : any ; } let permissionService ; let permissions ; let fixture ; let comp ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { declarations : [ TestComp ] , imports : [ NgxPermissionsModule . forRoot ( ) ] } ) ; fixture = TestBed . createComponent ( TestComp ) ; comp = fixture . componentInstance ; permissionService = fixture . debugElement . injector . get ( NgxPermissionsService ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { permissionService . loadPermissions ( [ PermissionsTestEnum . ADMIN , PermissionsTestEnum . GUEST ] ) ; detectChanges ( fixture ) ; let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toBeTruthy ( ) ; expect ( content . innerHTML ) . toEqual ( 's' ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { permissionService . loadPermissions ( [ PermissionsTestEnum . GUEST ] ) ; detectChanges ( fixture ) ; let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { permissionService . loadPermissions ( [ PermissionsTestEnum . GUEST ] ) ; detectChanges ( fixture ) ; let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; permissionService . addPermission ( PermissionsTestEnum . ADMIN ) ; detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML ) . toEqual ( 's' ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { permissionService . loadPermissions ( [ PermissionsTestEnum . ADMIN , PermissionsTestEnum . GUEST ] ) ; detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML ) . toEqual ( 's' ) ; permissionService . removePermission ( PermissionsTestEnum . ADMIN ) ; detectChanges ( fixture ) ; let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; } ) ) ; } ) ; describe ( 's' , ( ) => { @ Component ( { selector : 's' , template : `template` } ) class TestComp { data : any ; } let rolesService ; let permissions ; let fixture ; let comp ; let awesomePermissions = "s" ; let permissionsService ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { declarations : [ TestComp ] , imports : [ NgxPermissionsModule . forRoot ( ) ] } ) ; fixture = TestBed . createComponent ( TestComp ) ; comp = fixture . componentInstance ; rolesService = fixture . debugElement . injector . get ( NgxRolesService ) ; permissionsService = fixture . debugElement . injector . get ( NgxPermissionsService ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { rolesService . addRole ( 's' , [ awesomePermissions ] ) ; permissionsService . addPermission ( awesomePermissions ) ; detectChanges ( fixture ) ; let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toBeTruthy ( ) ; expect ( content . innerHTML ) . toEqual ( 's' ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { rolesService . addRole ( 's' , [ awesomePermissions ] ) ; permissionsService . addPermission ( awesomePermissions ) ; detectChanges ( fixture ) ; let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toBeTruthy ( ) ; expect ( content . innerHTML ) . toEqual ( 's' ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { permissionsService . addPermission ( awesomePermissions ) ; rolesService . addRole ( 's' , [ awesomePermissions ] ) ; detectChanges ( fixture ) ; let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toBeTruthy ( ) ; expect ( content . innerHTML ) . toEqual ( 's' ) ; rolesService . flushRoles ( ) ; tick ( ) ; fixture . detectChanges ( ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toEqual ( null ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { permissionsService . addPermission ( awesomePermissions ) ; rolesService . addRole ( 's' , [ awesomePermissions ] ) ; detectChanges ( fixture ) ; let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toBeTruthy ( ) ; expect ( content . innerHTML ) . toEqual ( 's' ) ; rolesService . removeRole ( "s" ) ; detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toEqual ( null ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { permissionsService . addPermission ( awesomePermissions ) ; rolesService . addRole ( 's' , [ awesomePermissions , 's' ] ) ; detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toEqual ( null ) ; } ) ) ; } ) ; describe ( 's' , ( ) => { @ Component ( { selector : 's' , template : `template` } ) class TestComp { data : any ; } let rolesService ; let permissions ; let fixture ; let comp ; let permissionsService ; let awesomePermission = "s" ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { declarations : [ TestComp ] , imports : [ NgxPermissionsModule . forRoot ( ) ] } ) ; fixture = TestBed . createComponent ( TestComp ) ; comp = fixture . componentInstance ; rolesService = fixture . debugElement . injector . get ( NgxRolesService ) ; permissionsService = fixture . debugElement . injector . get ( NgxPermissionsService ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { permissionsService . addPermission ( awesomePermission ) ; rolesService . addRole ( 's' , [ awesomePermission ] ) ; detectChanges ( fixture ) ; let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toBeTruthy ( ) ; expect ( content . innerHTML ) . toEqual ( 's' ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { permissionsService . addPermission ( awesomePermission ) ; rolesService . addRole ( 's' , [ 's' ] ) ; detectChanges ( fixture ) ; let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toBeTruthy ( ) ; expect ( content . innerHTML ) . toEqual ( 's' ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { permissionsService . addPermission ( awesomePermission ) ; rolesService . addRole ( 's' , [ awesomePermission ] ) ; detectChanges ( fixture ) ; let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toBeTruthy ( ) ; expect ( content . innerHTML ) . toEqual ( 's' ) ; rolesService . flushRoles ( ) ; detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toEqual ( null ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { permissionsService . addPermission ( awesomePermission ) ; rolesService . addRole ( 's' , [ awesomePermission ] ) ; detectChanges ( fixture ) ; let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toBeTruthy ( ) ; expect ( content . innerHTML ) . toEqual ( 's' ) ; rolesService . removeRole ( "s" ) ; detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toEqual ( null ) ; } ) ) ; } ) ; describe ( 's' , ( ) => { @ Component ( { selector : 's' , template : `template` } ) class TestComp { data : any ; } let rolesService ; let permissions ; let fixture ; let comp ; let permissionsService ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { declarations : [ TestComp ] , imports : [ NgxPermissionsModule . forRoot ( ) ] } ) ; fixture = TestBed . createComponent ( TestComp ) ; comp = fixture . componentInstance ; rolesService = fixture . debugElement . injector . get ( NgxRolesService ) ; permissionsService = fixture . debugElement . injector . get ( NgxPermissionsService ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { permissionsService . addPermission ( 's' ) ; rolesService . addRole ( 's' , [ 's' ] ) ; detectChanges ( fixture ) ; let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { permissionsService . addPermission ( 's' ) ; rolesService . addRole ( 's' , [ 's' ] ) ; detectChanges ( fixture ) ; let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { permissionsService . addPermission ( 's' ) ; rolesService . addRole ( 's' , [ 's' ] ) ; detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toEqual ( null ) ; rolesService . flushRoles ( ) ; detectChanges ( fixture ) ; let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toBeTruthy ( ) ; expect ( content . innerHTML ) . toEqual ( 's' ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { permissionsService . addPermission ( 's' ) ; rolesService . addRole ( 's' , [ 's' ] ) ; detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toEqual ( null ) ; rolesService . removeRole ( "s" ) ; detectChanges ( fixture ) ; let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toBeTruthy ( ) ; expect ( content . innerHTML ) . toEqual ( 's' ) ; } ) ) ; } ) ; describe ( 's' , ( ) => { @ Component ( { selector : 's' , template : `template` } ) class TestComp { data : any ; } let rolesService ; let permissions ; let fixture ; let comp ; let permissionsService ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { declarations : [ TestComp ] , imports : [ NgxPermissionsModule . forRoot ( ) ] } ) ; fixture = TestBed . createComponent ( TestComp ) ; comp = fixture . componentInstance ; rolesService = fixture . debugElement . injector . get ( NgxRolesService ) ; permissionsService = fixture . debugElement . injector . get ( NgxPermissionsService ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { permissionsService . addPermission ( 's' ) ; rolesService . addRole ( 's' , [ 's' ] ) ; detectChanges ( fixture ) ; let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { rolesService . addRole ( 's' , [ 's' ] ) ; detectChanges ( fixture ) ; let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content . innerHTML ) . toEqual ( 's' ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { permissionsService . addPermission ( 's' ) ; rolesService . addRole ( 's' , [ 's' ] ) ; detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toEqual ( null ) ; rolesService . flushRoles ( ) ; permissionsService . flushPermissions ( ) ; detectChanges ( fixture ) ; let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toBeTruthy ( ) ; expect ( content . innerHTML ) . toEqual ( 's' ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { permissionsService . addPermission ( 's' ) ; rolesService . addRole ( 's' , [ 's' ] ) ; detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toEqual ( null ) ; rolesService . removeRole ( "s" ) ; detectChanges ( fixture ) ; let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toBeTruthy ( ) ; expect ( content . innerHTML ) . toEqual ( 's' ) ; } ) ) ; } ) ; describe ( 's' , ( ) => { @ Component ( { selector : 's' , template : `template` } ) class TestComp { data : any ; } let rolesService ; let permissions ; let fixture ; let comp ; let permissionsService ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { declarations : [ TestComp ] , imports : [ NgxPermissionsModule . forRoot ( ) ] } ) ; fixture = TestBed . createComponent ( TestComp ) ; comp = fixture . componentInstance ; rolesService = fixture . debugElement . injector . get ( NgxRolesService ) ; permissionsService = fixture . debugElement . injector . get ( NgxPermissionsService ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; permissionsService . addPermission ( 's' ) ; rolesService . addRole ( 's' , [ 's' ] ) ; detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML ) . toEqual ( 's' ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; rolesService . addRole ( 's' , [ 's' ] ) ; detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toEqual ( null ) ; } ) ) ; } ) ; describe ( 's' , ( ) => { @ Component ( { selector : 's' , template : `template` } ) class TestComp { data : any ; } let rolesService ; let permissions ; let fixture ; let comp ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { declarations : [ TestComp ] , imports : [ NgxPermissionsModule . forRoot ( ) ] } ) ; fixture = TestBed . createComponent ( TestComp ) ; comp = fixture . componentInstance ; rolesService = fixture . debugElement . injector . get ( NgxRolesService ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; rolesService . addRole ( 's' , [ 's' ] ) ; detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML ) . toEqual ( 's' ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { rolesService . addRole ( 's' , [ 's' ] ) ; tick ( ) ; fixture . detectChanges ( ) ; let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; } ) ) ; } ) ; describe ( 's' , ( ) => { @ Component ( { selector : 's' , template : `template` } ) class TestComp { data : any ; } let rolesService ; let permissions ; let fixture ; let comp ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { declarations : [ TestComp ] , imports : [ NgxPermissionsModule . forRoot ( ) ] } ) ; fixture = TestBed . createComponent ( TestComp ) ; comp = fixture . componentInstance ; rolesService = fixture . debugElement . injector . get ( NgxRolesService ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; rolesService . addRole ( 's' , ( ) => { return true ; } ) ; detectChanges ( fixture ) ; tick ( ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML ) . toEqual ( 's' ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; rolesService . addRole ( 's' , ( ) => { return false ; } ) ; detectChanges ( fixture ) ; tick ( ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toEqual ( null ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; rolesService . addRole ( 's' , ( ) => { return Promise . resolve ( true ) ; } ) ; detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML ) . toEqual ( 's' ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; rolesService . addRole ( 's' , ( ) => { return Promise . reject ( ) ; } ) ; detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toEqual ( null ) ; } ) ) ; } ) ; describe ( 's' , ( ) => { @ Component ( { selector : 's' , template : `template` } ) class TestComp { data : any ; } let rolesService ; let permissions ; let fixture ; let comp ; let permissionsService ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { declarations : [ TestComp ] , imports : [ NgxPermissionsModule . forRoot ( ) ] } ) ; fixture = TestBed . createComponent ( TestComp ) ; comp = fixture . componentInstance ; rolesService = fixture . debugElement . injector . get ( NgxRolesService ) ; permissionsService = fixture . debugElement . injector . get ( NgxPermissionsService ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; rolesService . addRole ( 's' , ( ) => { return true ; } ) ; detectChanges ( fixture ) ; tick ( ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML ) . toEqual ( 's' ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; rolesService . addRole ( 's' , ( ) => { return false ; } ) ; detectChanges ( fixture ) ; tick ( ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toEqual ( null ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; rolesService . addRole ( 's' , ( ) => { return Promise . resolve ( true ) ; } ) ; detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML ) . toEqual ( 's' ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; rolesService . addRole ( 's' , ( ) => { return Promise . reject ( ) ; } ) ; detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toEqual ( null ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; rolesService . addRole ( 's' , ( ) => { return Promise . reject ( ) ; } ) ; rolesService . addRole ( 's' , ( ) => { return Promise . resolve ( true ) ; } ) ; detectChanges ( fixture ) ; tick ( ) ; tick ( ) ; tick ( ) ; fixture . detectChanges ( ) let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML ) . toEqual ( 's' ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; rolesService . addRole ( 's' , ( ) => { return Promise . reject ( ) ; } ) ; rolesService . addRole ( 's' , ( ) => { return Promise . resolve ( ) ; } ) ; detectChanges ( fixture ) ; tick ( ) ; tick ( ) ; tick ( ) ; fixture . detectChanges ( ) let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML ) . toEqual ( 's' ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; rolesService . addRole ( 's' , ( ) => { return Promise . reject ( ) ; } ) ; rolesService . addRole ( 's' , ( ) => { return Promise . reject ( ) ; } ) ; detectChanges ( fixture ) ; tick ( ) ; tick ( ) ; tick ( ) ; fixture . detectChanges ( ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toEqual ( null ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; rolesService . addRole ( 's' , ( ) => { return true ; } ) ; rolesService . addRole ( 's' , ( ) => { return Promise . reject ( ) ; } ) ; detectChanges ( fixture ) ; tick ( ) ; tick ( ) ; tick ( ) ; fixture . detectChanges ( ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML ) . toEqual ( 's' ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; rolesService . addRole ( 's' , ( ) => { return Promise . reject ( ) ; } ) ; permissionsService . addPermission ( 's' ) ; rolesService . addRole ( 's' , [ 's' ] ) ; detectChanges ( fixture ) ; tick ( ) ; tick ( ) ; tick ( ) ; fixture . detectChanges ( ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML ) . toEqual ( 's' ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; rolesService . addRole ( 's' , ( ) => { return Promise . reject ( ) ; } ) ; permissionsService . addPermission ( 's' ) ; rolesService . addRole ( 's' , [ 's' ] ) ; detectChanges ( fixture ) ; tick ( ) ; tick ( ) ; tick ( ) ; fixture . detectChanges ( ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML ) . toEqual ( 's' ) ; } ) ) ; } ) ; describe ( 's' , ( ) => { @ Component ( { selector : 's' , template : `template` } ) class TestComp { data : any ; } let permissionsService ; let permissions ; let fixture ; let comp ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { declarations : [ TestComp ] , imports : [ NgxPermissionsModule . forRoot ( ) ] } ) ; fixture = TestBed . createComponent ( TestComp ) ; comp = fixture . componentInstance ; permissionsService = fixture . debugElement . injector . get ( NgxPermissionsService ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; permissionsService . addPermission ( 's' , ( ) => { return true ; } ) ; detectChanges ( fixture ) ; tick ( ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML ) . toEqual ( 's' ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; permissionsService . addPermission ( 's' , ( ) => { return false ; } ) ; detectChanges ( fixture ) ; tick ( ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toEqual ( null ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; permissionsService . addPermission ( 's' , ( ) => { return Promise . resolve ( true ) ; } ) ; detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML ) . toEqual ( 's' ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; permissionsService . addPermission ( 's' , ( ) => { return Promise . reject ( ) ; } ) ; detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toEqual ( null ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; permissionsService . addPermission ( 's' , ( ) => { return Promise . resolve ( ) ; } ) ; permissionsService . addPermission ( 's' , ( ) => { return Promise . reject ( ) ; } ) ; detectChanges ( fixture ) ; tick ( ) ; tick ( ) ; tick ( ) ; fixture . detectChanges ( ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML ) . toEqual ( 's' ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; permissionsService . addPermission ( 's' , ( ) => { return Promise . resolve ( ) ; } ) ; permissionsService . addPermission ( 's' , ( ) => { return Promise . resolve ( ) ; } ) ; detectChanges ( fixture ) ; tick ( ) ; tick ( ) ; tick ( ) ; fixture . detectChanges ( ) let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML ) . toEqual ( 's' ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; permissionsService . addPermission ( 's' , ( ) => { return Promise . reject ( ) ; } ) ; permissionsService . addPermission ( 's' , ( ) => { return Promise . reject ( ) ; } ) ; detectChanges ( fixture ) ; tick ( ) ; tick ( ) ; tick ( ) ; fixture . detectChanges ( ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toEqual ( null ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; permissionsService . addPermission ( 's' , ( ) => { return true ; } ) ; permissionsService . addPermission ( 's' , ( ) => { return Promise . reject ( ) ; } ) ; detectChanges ( fixture ) ; tick ( ) ; tick ( ) ; tick ( ) ; fixture . detectChanges ( ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML ) . toEqual ( 's' ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; permissionsService . addPermission ( 's' , ( ) => { return Promise . reject ( ) ; } ) ; permissionsService . addPermission ( 's' , ( ) => { return Promise . resolve ( true ) } ) ; detectChanges ( fixture ) ; tick ( ) ; tick ( ) ; tick ( ) ; fixture . detectChanges ( ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML ) . toEqual ( 's' ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; permissionsService . addPermission ( 's' , ( ) => { return Promise . reject ( ) ; } ) ; permissionsService . addPermission ( 's' , ( ) => { return true ; } ) ; detectChanges ( fixture ) ; tick ( ) ; tick ( ) ; tick ( ) ; fixture . detectChanges ( ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML ) . toEqual ( 's' ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; permissionsService . addPermission ( 's' , ( ) => { return true ; } ) ; permissionsService . addPermission ( 's' , ( ) => { return Promise . reject ( ) ; } ) ; detectChanges ( fixture ) ; tick ( ) ; tick ( ) ; tick ( ) ; fixture . detectChanges ( ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML ) . toEqual ( 's' ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; permissionsService . addPermission ( 's' , ( name , store ) => { expect ( store [ name ] . name ) . toBeTruthy ( ) ; return name === 's' } ) ; permissionsService . addPermission ( 's' , ( ) => { return Promise . reject ( ) ; } ) ; detectChanges ( fixture ) ; tick ( ) ; tick ( ) ; tick ( ) ; fixture . detectChanges ( ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML ) . toEqual ( 's' ) ; } ) ) ; } ) ; describe ( 's' , ( ) => { @ Component ( { selector : 's' , template : `template` } ) class TestComp { data : any ; } let permissionsService ; let permissions ; let fixture ; let comp ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { declarations : [ TestComp ] , imports : [ NgxPermissionsModule . forRoot ( ) ] } ) ; fixture = TestBed . createComponent ( TestComp ) ; comp = fixture . componentInstance ; permissionsService = fixture . debugElement . injector . get ( NgxPermissionsService ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; permissionsService . addPermission ( 's' , ( ) => { return true ; } ) ; detectChanges ( fixture ) ; tick ( ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML ) . toEqual ( 's' ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; permissionsService . addPermission ( 's' , ( ) => { return false ; } ) ; detectChanges ( fixture ) ; tick ( ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toEqual ( null ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; permissionsService . addPermission ( 's' , ( ) => { return Promise . resolve ( true ) ; } ) ; detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML ) . toEqual ( 's' ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; permissionsService . addPermission ( 's' , ( ) => { return Promise . reject ( ) ; } ) ; detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toEqual ( null ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; permissionsService . addPermission ( 's' , ( ) => { return Promise . resolve ( ) ; } ) ; permissionsService . addPermission ( 's' , ( ) => { return Promise . resolve ( true ) ; } ) ; detectChanges ( fixture ) ; tick ( ) ; tick ( ) ; tick ( ) ; fixture . detectChanges ( ) let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML ) . toEqual ( 's' ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; permissionsService . addPermission ( 's' , ( ) => { return Promise . resolve ( ) ; } ) ; permissionsService . addPermission ( 's' , ( ) => { return Promise . reject ( ) ; } ) ; detectChanges ( fixture ) ; tick ( ) ; tick ( ) ; tick ( ) ; fixture . detectChanges ( ) let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML ) . toEqual ( 's' ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; permissionsService . addPermission ( 's' , ( ) => { return Promise . reject ( ) ; } ) ; permissionsService . addPermission ( 's' , ( ) => { return Promise . reject ( ) ; } ) ; detectChanges ( fixture ) ; tick ( ) ; tick ( ) ; tick ( ) ; fixture . detectChanges ( ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toEqual ( null ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; permissionsService . addPermission ( 's' , ( ) => { return Promise . reject ( ) ; } ) ; permissionsService . addPermission ( 's' , ( ) => { return true ; } ) ; detectChanges ( fixture ) ; tick ( ) ; tick ( ) ; tick ( ) ; fixture . detectChanges ( ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML ) . toEqual ( 's' ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; permissionsService . addPermission ( 's' , ( ) => { return Promise . resolve ( true ) } ) ; permissionsService . addPermission ( 's' , ( ) => { return Promise . reject ( ) ; } ) ; detectChanges ( fixture ) ; tick ( ) ; tick ( ) ; tick ( ) ; fixture . detectChanges ( ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML ) . toEqual ( 's' ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; permissionsService . addPermission ( 's' , ( ) => { return true ; } ) ; permissionsService . addPermission ( 's' , ( ) => { return Promise . reject ( ) ; } ) ; detectChanges ( fixture ) ; tick ( ) ; tick ( ) ; tick ( ) ; fixture . detectChanges ( ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML ) . toEqual ( 's' ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; permissionsService . addPermission ( 's' , ( name , store ) => { expect ( store [ name ] . name ) . toBeTruthy ( ) ; return name === 's' } ) ; permissionsService . addPermission ( 's' , ( ) => { return Promise . reject ( ) ; } ) ; detectChanges ( fixture ) ; tick ( ) ; tick ( ) ; tick ( ) ; fixture . detectChanges ( ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML ) . toEqual ( 's' ) ; } ) ) ; } ) ; describe ( 's' , ( ) => { @ Component ( { selector : 's' , template : `template` } ) class TestComp { data : any ; } let permissionsService ; let permissions ; let fixture ; let comp ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { declarations : [ TestComp ] , imports : [ NgxPermissionsModule . forRoot ( ) ] } ) ; fixture = TestBed . createComponent ( TestComp ) ; comp = fixture . componentInstance ; permissionsService = fixture . debugElement . injector . get ( NgxPermissionsService ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; permissionsService . addPermission ( 's' , ( ) => { return true ; } ) ; detectChanges ( fixture ) ; tick ( ) ; tick ( ) ; tick ( ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML ) . toEqual ( 's' ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; permissionsService . addPermission ( 's' , ( ) => { return true ; } ) ; permissionsService . addPermission ( 's' , ( ) => { return true ; } ) ; detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toEqual ( null ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; permissionsService . addPermission ( 's' , ( ) => { return true ; } ) ; permissionsService . addPermission ( 's' , ( ) => { return true ; } ) ; detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toEqual ( null ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; permissionsService . addPermission ( 's' , ( ) => { return false ; } ) ; permissionsService . addPermission ( 's' , ( ) => { return true ; } ) ; detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML ) . toEqual ( 's' ) ; } ) ) ; } ) ; describe ( 's' , ( ) => { @ Component ( { selector : 's' , template : `template` } ) class TestComp { data : any ; } let permissionsService ; let permissions ; let fixture ; let comp ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { declarations : [ TestComp ] , imports : [ NgxPermissionsModule . forRoot ( ) ] } ) ; fixture = TestBed . createComponent ( TestComp ) ; comp = fixture . componentInstance ; permissionsService = fixture . debugElement . injector . get ( NgxPermissionsService ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; permissionsService . addPermission ( 's' , ( ) => { return true ; } ) ; detectChanges ( fixture ) ; tick ( ) ; tick ( ) ; tick ( ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML ) . toEqual ( 's' ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; permissionsService . addPermission ( 's' , ( ) => { return true ; } ) ; permissionsService . addPermission ( 's' , ( ) => { return true ; } ) ; detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toEqual ( null ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; permissionsService . addPermission ( 's' , ( ) => { return true ; } ) ; permissionsService . addPermission ( 's' , ( ) => { return true ; } ) ; detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toEqual ( null ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; permissionsService . addPermission ( 's' , ( ) => { return false ; } ) ; permissionsService . addPermission ( 's' , ( ) => { return true ; } ) ; detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML ) . toEqual ( 's' ) ; } ) ) ; } ) ; describe ( 's' , ( ) => { @ Component ( { selector : 's' , template : `template` } ) class TestComp { data : any ; } let rolesService ; let permissions ; let fixture ; let comp ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { declarations : [ TestComp ] , imports : [ NgxPermissionsModule . forRoot ( ) ] } ) ; fixture = TestBed . createComponent ( TestComp ) ; comp = fixture . componentInstance ; rolesService = fixture . debugElement . injector . get ( NgxRolesService ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; rolesService . addRole ( 's' , ( ) => { return true ; } ) ; detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML ) . toEqual ( 's' ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; rolesService . addRole ( 's' , ( ) => { return true ; } ) ; rolesService . addRole ( 's' , ( ) => { return true ; } ) ; detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toEqual ( null ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; rolesService . addRole ( 's' , ( ) => { return true ; } ) ; rolesService . addRole ( 's' , ( ) => { return true ; } ) ; detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toEqual ( null ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; rolesService . addRole ( 's' , ( ) => { return false ; } ) ; rolesService . addRole ( 's' , ( ) => { return true ; } ) ; detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML ) . toEqual ( 's' ) ; } ) ) ; } ) ; describe ( 's' , ( ) => { @ Component ( { selector : 's' , template : `template` } ) class TestComp { data : any ; } let rolesService ; let permissions ; let fixture ; let comp ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { declarations : [ TestComp ] , imports : [ NgxPermissionsModule . forRoot ( ) ] } ) ; fixture = TestBed . createComponent ( TestComp ) ; comp = fixture . componentInstance ; rolesService = fixture . debugElement . injector . get ( NgxRolesService ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML ) . toEqual ( `template` ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; rolesService . addRole ( 's' , ( ) => { return true ; } ) ; detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML ) . toEqual ( 's' ) ; rolesService . removeRole ( 's' ) ; detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML ) . toEqual ( `template` ) ; } ) ) ; } ) ; describe ( 's' , ( ) => { @ Component ( { selector : 's' , template : `template` } ) class TestComp { data : any ; } let rolesService ; let permissions ; let fixture ; let comp ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { declarations : [ TestComp ] , imports : [ NgxPermissionsModule . forRoot ( ) ] } ) ; fixture = TestBed . createComponent ( TestComp ) ; comp = fixture . componentInstance ; rolesService = fixture . debugElement . injector . get ( NgxRolesService ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { rolesService . addRole ( 's' , ( ) => { return true ; } ) ; detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML ) . toEqual ( `template` ) ; } ) ) ; } ) ; describe ( 's' , ( ) => { @ Component ( { selector : 's' , template : `template` } ) class TestComp { data : any ; } let rolesService ; let permissionsService ; let fixture ; let comp ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { declarations : [ TestComp ] , imports : [ NgxPermissionsModule . forRoot ( ) ] } ) ; fixture = TestBed . createComponent ( TestComp ) ; comp = fixture . componentInstance ; rolesService = fixture . debugElement . injector . get ( NgxRolesService ) ; permissionsService = fixture . debugElement . injector . get ( NgxPermissionsService ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { rolesService . addRole ( 's' , ( ) => { return true ; } ) ; detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML ) . toEqual ( `template` ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { detectChanges ( fixture ) ; let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toBeTruthy ( ) ; expect ( content . innerHTML ) . toEqual ( `template` ) ; permissionsService . addPermission ( 's' , ( ) => { return true ; } ) ; detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML ) . toEqual ( `template` ) ; } ) ) ; } ) ; describe ( 's' , ( ) => { @ Component ( { selector : 's' , template : `template` } ) class TestComp { data : any ; } let rolesService ; let permissions ; let fixture ; let comp ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { declarations : [ TestComp ] , imports : [ NgxPermissionsModule . forRoot ( ) ] } ) ; fixture = TestBed . createComponent ( TestComp ) ; comp = fixture . componentInstance ; rolesService = fixture . debugElement . injector . get ( NgxRolesService ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML ) . toEqual ( `template` ) ; } ) ) ; } ) ; describe ( 's' , ( ) => { @ Component ( { selector : 's' , template : `template` } ) class TestComp { data : any ; } let rolesService ; let permissionsService ; let fixture ; let comp ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { declarations : [ TestComp ] , imports : [ NgxPermissionsModule . forRoot ( ) ] } ) ; fixture = TestBed . createComponent ( TestComp ) ; comp = fixture . componentInstance ; rolesService = fixture . debugElement . injector . get ( NgxRolesService ) ; permissionsService = fixture . debugElement . injector . get ( NgxPermissionsService ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { permissionsService . addPermission ( 's' ) ; detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML ) . toEqual ( `template` ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { rolesService . addRole ( 's' , ( ) => { return true ; } ) ; detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML ) . toEqual ( `template` ) ; } ) ) ; } ) ; describe ( 's' , ( ) => { @ Component ( { selector : 's' , template : `template` } ) class TestComp { data : any ; } let rolesService ; let permissionsService ; let fixture ; let comp ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { declarations : [ TestComp ] , imports : [ NgxPermissionsModule . forRoot ( ) ] } ) ; fixture = TestBed . createComponent ( TestComp ) ; comp = fixture . componentInstance ; rolesService = fixture . debugElement . injector . get ( NgxRolesService ) ; permissionsService = fixture . debugElement . injector . get ( NgxPermissionsService ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { permissionsService . addPermission ( 's' ) ; detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML ) . toEqual ( `template` ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { rolesService . addRole ( 's' , ( ) => { return true ; } ) ; detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML ) . toEqual ( `template` ) ; } ) ) ; } ) ; describe ( 's' , ( ) => { @ Component ( { selector : 's' , template : `template` } ) class TestComp { data : any ; } let rolesService ; let permissionsService ; let fixture ; let comp ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { declarations : [ TestComp ] , imports : [ NgxPermissionsModule . forRoot ( ) ] } ) ; fixture = TestBed . createComponent ( TestComp ) ; comp = fixture . componentInstance ; rolesService = fixture . debugElement . injector . get ( NgxRolesService ) ; permissionsService = fixture . debugElement . injector . get ( NgxPermissionsService ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { permissionsService . addPermission ( 's' ) ; detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML ) . toEqual ( `template` ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { rolesService . addRole ( 's' , ( ) => { return true ; } ) ; detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML ) . toEqual ( `template` ) ; } ) ) ; } ) ; describe ( 's' , ( ) => { @ Component ( { selector : 's' , template : `template` } ) class TestComp { data : any ; } let rolesService ; let permissionsService ; let fixture ; let comp ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { declarations : [ TestComp ] , imports : [ NgxPermissionsModule . forRoot ( ) ] } ) ; fixture = TestBed . createComponent ( TestComp ) ; comp = fixture . componentInstance ; rolesService = fixture . debugElement . injector . get ( NgxRolesService ) ; permissionsService = fixture . debugElement . injector . get ( NgxPermissionsService ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { permissionsService . addPermission ( 's' ) ; detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML ) . toEqual ( `template` ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { rolesService . addRole ( 's' , ( ) => { return true ; } ) ; detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML ) . toEqual ( `template` ) ; } ) ) ; } ) ; describe ( "s" , ( ) => { @ Component ( { selector : 's' , template : `template` } ) class TestComp { data : any ; } let rolesService ; let permissionsService ; let fixture ; let comp ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { declarations : [ TestComp ] , imports : [ NgxPermissionsModule . forRoot ( ) ] } ) ; fixture = TestBed . createComponent ( TestComp ) ; comp = fixture . componentInstance ; rolesService = fixture . debugElement . injector . get ( NgxRolesService ) ; permissionsService = fixture . debugElement . injector . get ( NgxPermissionsService ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML ) . toEqual ( `template` ) ; } ) ) ; } ) ; describe ( "s" , ( ) => { @ Component ( { selector : 's' , template : `template` } ) class TestComp { data : any ; } let rolesService ; let permissionsService ; let fixture ; let comp ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { declarations : [ TestComp ] , imports : [ NgxPermissionsModule . forRoot ( ) ] } ) ; fixture = TestBed . createComponent ( TestComp ) ; comp = fixture . componentInstance ; rolesService = fixture . debugElement . injector . get ( NgxRolesService ) ; permissionsService = fixture . debugElement . injector . get ( NgxPermissionsService ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML ) . toEqual ( `template` ) ; } ) ) ; } ) ; describe ( "s" , ( ) => { @ Component ( { selector : 's' , template : `template` } ) class TestComp { data : any ; } let rolesService ; let permissionsService ; let fixture ; let comp ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { declarations : [ TestComp ] , imports : [ NgxPermissionsModule . forRoot ( ) ] } ) ; fixture = TestBed . createComponent ( TestComp ) ; comp = fixture . componentInstance ; rolesService = fixture . debugElement . injector . get ( NgxRolesService ) ; permissionsService = fixture . debugElement . injector . get ( NgxPermissionsService ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML ) . toEqual ( `template` ) ; } ) ) ; } ) ; describe ( "s" , ( ) => { @ Component ( { selector : 's' , template : `template` } ) class TestComp { data : any ; } let rolesService ; let permissionsService ; let fixture ; let comp ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { declarations : [ TestComp ] , imports : [ NgxPermissionsModule . forRoot ( ) ] } ) ; fixture = TestBed . createComponent ( TestComp ) ; comp = fixture . componentInstance ; rolesService = fixture . debugElement . injector . get ( NgxRolesService ) ; permissionsService = fixture . debugElement . injector . get ( NgxPermissionsService ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML ) . toEqual ( `template` ) ; } ) ) ; } ) ; describe ( "s" , ( ) => { @ Component ( { selector : 's' , template : `template` } ) class TestComp { data : any ; } let rolesService ; let permissionsService ; let fixture ; let comp ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { declarations : [ TestComp ] , imports : [ NgxPermissionsModule . forRoot ( ) ] } ) ; fixture = TestBed . createComponent ( TestComp ) ; comp = fixture . componentInstance ; rolesService = fixture . debugElement . injector . get ( NgxRolesService ) ; permissionsService = fixture . debugElement . injector . get ( NgxPermissionsService ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML ) . toEqual ( `template` ) ; } ) ) ; } ) ; describe ( "s" , ( ) => { @ Component ( { selector : 's' , template : `template` } ) class TestComp { data : any ; } let rolesService ; let permissionsService ; let fixture ; let comp ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { declarations : [ TestComp ] , imports : [ NgxPermissionsModule . forRoot ( ) ] } ) ; fixture = TestBed . createComponent ( TestComp ) ; comp = fixture . componentInstance ; rolesService = fixture . debugElement . injector . get ( NgxRolesService ) ; permissionsService = fixture . debugElement . injector . get ( NgxPermissionsService ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML ) . toEqual ( `template` ) ; } ) ) ; } ) ; describe ( "s" , ( ) => { @ Component ( { selector : 's' , template : `template` } ) class TestComp { data : any ; } let rolesService ; let permissionsService ; let fixture ; let comp ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { declarations : [ TestComp ] , imports : [ NgxPermissionsModule . forRoot ( ) ] } ) ; fixture = TestBed . createComponent ( TestComp ) ; comp = fixture . componentInstance ; rolesService = fixture . debugElement . injector . get ( NgxRolesService ) ; permissionsService = fixture . debugElement . injector . get ( NgxPermissionsService ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { detectChanges ( fixture ) ; let 0 = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( 0 ) . toBeTruthy ( ) ; expect ( 0 . innerHTML ) . toEqual ( `template` ) ; } ) ) ; } ) ; function detectChanges ( fixture ) { tick ( ) ; fixture . detectChanges ( ) ; tick ( ) ; fixture . detectChanges ( ) ; }	
import { NgxPermissionsGuard } from 's' ; import { async , fakeAsync , inject , TestBed } from 's' ; import { NgxPermissionsService } from 's' ; import { NgxRolesService } from 's' ; import { NgxPermissionsModule } from 's' ; import { ActivatedRouteSnapshot , Router , RouterStateSnapshot } from 's' ; import { tick } from "s" ; import { RouterTestingModule } from 's' ; describe ( 's' , ( ) => { let permissionGuard ; let route ; let fakeRouter ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { imports : [ NgxPermissionsModule . forRoot ( ) ] } ) ; } ) ; beforeEach ( inject ( [ NgxPermissionsService , NgxRolesService ] , ( service , rolesService ) => { fakeRouter = < any > { navigate : ( ) => { } } ; spyOn ( fakeRouter , 's' ) ; service . addPermission ( 's' ) ; permissionGuard = new NgxPermissionsGuard ( service , rolesService , fakeRouter as Router ) ; } ) ) ; it ( 's' , ( ) => { expect ( permissionGuard ) . toBeTruthy ( ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { only : 's' } } } ; ( permissionGuard . canActivateChild ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { only : 's' } } } ; ( permissionGuard . canActivateChild ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { only : 's' , redirectTo : 's' } } } ; ( permissionGuard . canActivateChild ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { only : 's' , redirectTo : [ 's' ] } } } ; ( permissionGuard . canActivateChild ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { only : 's' , except : 's' , redirectTo : [ 's' ] } } } ; expect ( permissionGuard . canActivateChild ( route , { } as RouterStateSnapshot ) ) . toBe ( true ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { only : [ ] , except : [ ] , redirectTo : [ 's' ] } } } ; expect ( permissionGuard . canActivateChild ( route , { } as RouterStateSnapshot ) ) . toBe ( true ) ; } ) ) } ) ; describe ( 's' , ( ) => { let permissionGuard ; let fakeRouter ; let route ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { imports : [ NgxPermissionsModule . forRoot ( ) ] } ) ; } ) ; beforeEach ( inject ( [ NgxPermissionsService , NgxRolesService ] , ( service , rolesService ) => { fakeRouter = < any > { navigate : ( ) => { } } ; spyOn ( fakeRouter , 's' ) ; service . addPermission ( 's' ) ; permissionGuard = new NgxPermissionsGuard ( service , rolesService , fakeRouter as Router ) ; } ) ) ; it ( 's' , ( ) => { expect ( permissionGuard ) . toBeTruthy ( ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : 's' } } } ; ( permissionGuard . canActivateChild ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : 's' , redirectTo : 's' } } } ; ( permissionGuard . canActivateChild ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : [ "s" , 's' ] } } } ; ( permissionGuard . canActivateChild ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : [ "s" , 's' ] , redirectTo : 's' } } } ; ( permissionGuard . canActivateChild ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : 's' } } } ; ( permissionGuard . canActivateChild ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : [ 's' , "s" ] } } } ; ( permissionGuard . canActivateChild ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) } ) ) ; } ) ; describe ( 's' , ( ) => { let permissionGuard ; let fakeRouter ; let route ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { imports : [ NgxPermissionsModule . forRoot ( ) ] } ) ; } ) ; beforeEach ( inject ( [ NgxPermissionsService , NgxRolesService ] , ( service , rolesService ) => { fakeRouter = < any > { navigate : ( ) => { } } ; spyOn ( fakeRouter , 's' ) service . addPermission ( 's' ) ; permissionGuard = new NgxPermissionsGuard ( service , rolesService , fakeRouter as Router ) ; } ) ) ; it ( 's' , ( ) => { expect ( permissionGuard ) . toBeTruthy ( ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : 's' , only : 's' , redirectTo : 's' } } } ; ( permissionGuard . canActivateChild ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : [ "s" , 's' ] , only : 's' } } } ; ( permissionGuard . canActivateChild ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : 's' , only : "s" } } } ; ( permissionGuard . canActivateChild ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : [ 's' , "s" ] , only : [ 's' , 's' ] } } } ; ( permissionGuard . canActivateChild ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : [ 's' , "s" ] , only : [ 's' , 's' ] , redirectTo : 's' } } } ; ( permissionGuard . canActivateChild ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; } ) ; describe ( 's' , ( ) => { let permissionGuard ; let fakeRouter ; let route ; let testRouter ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { imports : [ NgxPermissionsModule . forRoot ( ) , RouterTestingModule . withRoutes ( [ { path : 's' , redirectTo : 's' , data : { permissions : { except : ( route , awesome ) => { return true ; } } , } } , ] ) ] } ) ; } ) ; beforeEach ( inject ( [ NgxPermissionsService , NgxRolesService ] , ( service , rolesService , router ) => { fakeRouter = < any > { navigate : ( ) => { } } ; service . addPermission ( 's' ) ; spyOn ( fakeRouter , 's' ) ; permissionGuard = new NgxPermissionsGuard ( service , rolesService , fakeRouter as Router ) ; } ) ) ; it ( 's' , ( ) => { expect ( permissionGuard ) . toBeTruthy ( ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { only : ( route , awesome ) => { if ( route . data . path . includes ( 0 ) ) { return [ 's' ] } else { return 's' } } } , path : 's' } } ; ( permissionGuard . canActivateChild ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : ( route , awesome ) => { if ( route . data . path . includes ( 's' ) ) { return [ 's' ] } else { return 's' } } } , path : 's' } } ; ( permissionGuard . canActivateChild ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : ( route , awesome ) => { if ( route . data . path . includes ( 's' ) ) { return [ 's' ] } else { return 's' } } , only : ( route , awesome ) => { if ( route . data . path . includes ( 's' ) ) { return [ 's' ] } else { return 's' } } } , path : 's' } } ; ( permissionGuard . canActivateChild ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : ( route , awesome ) => { if ( route . data . path . includes ( 's' ) ) { return [ 's' ] } else { return 's' } } , only : ( route , awesome ) => { if ( route . data . path . includes ( 's' ) ) { return [ 's' ] } else { return 's' } } , redirectTo : 's' } , path : 's' } } ; ( permissionGuard . canActivateChild ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; } ) ; describe ( 's' , ( ) => { let permissionGuard ; let fakeRouter ; let route ; let testRouter ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { imports : [ NgxPermissionsModule . forRoot ( ) , RouterTestingModule . withRoutes ( [ { path : 's' , redirectTo : 's' , data : { permissions : { except : ( route , awesome ) => { return true ; } , redirectTo : { navigationCommands : [ 's' ] , navigationExtras : { skipLocationChange : true } } } , } } , ] ) ] } ) ; } ) ; beforeEach ( inject ( [ NgxPermissionsService , NgxRolesService ] , ( service , rolesService , router ) => { fakeRouter = < any > { navigate : ( ) => { } } ; service . addPermission ( 's' ) ; spyOn ( fakeRouter , 's' ) ; permissionGuard = new NgxPermissionsGuard ( service , rolesService , fakeRouter as Router ) ; } ) ) ; it ( 's' , ( ) => { expect ( permissionGuard ) . toBeTruthy ( ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { only : "s" , redirectTo : { navigationCommands : [ 's' ] , navigationExtras : { skipLocationChange : true } } } , path : 's' } } ; ( permissionGuard . canActivateChild ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] , { skipLocationChange : true } ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { only : "s" , redirectTo : { navigationCommands : ( rejectedPermission , route , state ) => { return [ 's' ] } , navigationExtras : ( route , state ) => { return { skipLocationChange : true } } } } , path : 's' } } ; ( permissionGuard . canActivateChild ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] , { skipLocationChange : true } ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : "s" , redirectTo : { navigationCommands : ( rejectedPermission , route , state ) => { return [ 's' ] } , navigationExtras : ( route , state ) => { return { skipLocationChange : true } } } } , path : 's' } } ; ( permissionGuard . canActivateChild ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] , { skipLocationChange : true } ) ; } ) } ) ) ; } ) ; describe ( 's' , ( ) => { let permissionGuard ; let fakeRouter ; let route ; let testRouter ; let fakeService ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { imports : [ NgxPermissionsModule . forRoot ( ) ] } ) ; } ) ; beforeEach ( inject ( [ NgxPermissionsService , NgxRolesService ] , ( service , rolesService ) => { fakeRouter = < any > { navigate : ( ) => { } } ; service . addPermission ( 's' ) ; fakeService = service ; spyOn ( fakeRouter , 's' ) ; permissionGuard = new NgxPermissionsGuard ( service , rolesService , fakeRouter as Router ) ; } ) ) ; it ( 's' , ( ) => { expect ( permissionGuard ) . toBeTruthy ( ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : [ 's' , 's' , "s" ] , redirectTo : { canReadAgenda : 's' , canEditAgenda : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canActivateChild ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { fakeService . addPermission ( 's' ) ; route = { data : { permissions : { except : [ "s" , 's' , 's' ] , redirectTo : { canReadAgenda : 's' , canEditAgenda : 's' , canRun : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canActivateChild ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { fakeService . addPermission ( 's' ) ; route = { data : { permissions : { except : [ 's' , 's' ] , redirectTo : { canReadAgenda : 's' , canEditAgenda : 's' , canRun : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canActivateChild ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : [ 's' , 's' ] , redirectTo : { canRun : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canActivateChild ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : [ 's' ] , only : [ 's' ] , redirectTo : { canReadAgenda : 's' , canRunAgenda : 's' , canRun : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canActivateChild ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { fakeService . addPermission ( 's' ) ; route = { data : { permissions : { except : [ 's' ] , only : [ 's' ] , redirectTo : { canReadAgenda : 's' , canRunAgenda : 's' , canRun : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canActivateChild ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { only : [ 's' , 's' , "s" ] , redirectTo : { canReadAgenda : 's' , canEditAgenda : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canActivateChild ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { only : [ 's' , 's' , "s" ] , redirectTo : { canReadAgenda : 's' , canEditAgenda : ( route , state ) => { return 's' } , default : 's' } } , path : 's' } } ; ( permissionGuard . canActivateChild ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { only : [ 's' , 's' , "s" ] , redirectTo : { canReadAgenda : 's' , canEditAgenda : { navigationCommands : [ 's' ] , navigationExtras : { skipLocationChange : true } } , default : 's' } } , path : 's' } } ; ( permissionGuard . canActivateChild ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] , { skipLocationChange : true } ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { only : [ 's' , 's' , "s" ] , redirectTo : { canReadAgenda : 's' , canEditAgenda : ( ) => { return { navigationCommands : [ 's' ] , navigationExtras : { skipLocationChange : true } } } , default : 's' } } , path : 's' } } ; ( permissionGuard . canActivateChild ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] , { skipLocationChange : true } ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { fakeService . addPermission ( 's' ) ; route = { data : { permissions : { only : [ 's' , 's' , 's' ] , redirectTo : { canReadAgenda : 's' , canEditAgenda : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canActivateChild ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { fakeService . addPermission ( 's' ) ; route = { data : { permissions : { only : [ 's' ] , redirectTo : { canReadAgenda : 's' , canEditAgenda : 's' , canRun : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canActivateChild ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) } ) ) ; } ) ; describe ( 's' , ( ) => { let permissionGuard ; let fakeRouter ; let route ; let testRouter ; let fakeService ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { imports : [ NgxPermissionsModule . forRoot ( ) ] } ) ; } ) ; beforeEach ( inject ( [ NgxPermissionsService , NgxRolesService ] , ( service , rolesService ) => { fakeRouter = < any > { navigate : ( ) => { } } ; service . addPermission ( 's' ) ; fakeService = service ; spyOn ( fakeRouter , 's' ) ; permissionGuard = new NgxPermissionsGuard ( service , rolesService , fakeRouter as Router ) ; } ) ) ; it ( 's' , ( ) => { expect ( permissionGuard ) . toBeTruthy ( ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : 's' , redirectTo : { canReadAgenda : 's' , canEditAgenda : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canActivateChild ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { fakeService . addPermission ( 's' ) ; route = { data : { permissions : { only : "s" , redirectTo : { canReadAgenda : 's' , canEditAgenda : 's' , DELETE : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canActivateChild ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { fakeService . addPermission ( 's' ) ; route = { data : { permissions : { except : 's' , redirectTo : { canReadAgenda : 's' , canEditAgenda : 's' , canRun : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canActivateChild ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : 's' , redirectTo : { canRun : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canActivateChild ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : 's' , only : 's' , redirectTo : { canReadAgenda : 's' , canRunAgenda : 's' , canRun : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canActivateChild ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { fakeService . addPermission ( 's' ) ; route = { data : { permissions : { except : 's' , only : 's' , redirectTo : { canReadAgenda : 's' , canRunAgenda : 's' , canRun : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canActivateChild ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { fakeService . addPermission ( 's' ) ; route = { data : { permissions : { only : 's' , redirectTo : { canReadAgenda : 's' , canEditAgenda : 's' , canRun : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canActivateChild ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) } ) ) ; } ) ; describe ( 's' , ( ) => { let permissionGuard ; let fakeRouter ; let route ; let testRouter ; let fakeService ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { imports : [ NgxPermissionsModule . forRoot ( ) ] } ) ; } ) ; beforeEach ( inject ( [ NgxPermissionsService , NgxRolesService ] , ( service , rolesService ) => { fakeRouter = < any > { navigate : ( ) => { } } ; service . addPermission ( 's' ) ; fakeService = service ; spyOn ( fakeRouter , 's' ) ; permissionGuard = new NgxPermissionsGuard ( service , rolesService , fakeRouter as Router ) ; } ) ) ; it ( 's' , ( ) => { expect ( permissionGuard ) . toBeTruthy ( ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : 's' , redirectTo : { canReadAgenda : 's' , canEditAgenda : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canActivateChild ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { fakeService . addPermission ( 's' ) ; route = { data : { permissions : { only : "s" , redirectTo : { canReadAgenda : 's' , canEditAgenda : 's' , DELETE : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canActivateChild ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { fakeService . addPermission ( 's' ) ; route = { data : { permissions : { except : 's' , redirectTo : { canReadAgenda : 's' , canEditAgenda : 's' , canRun : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canActivateChild ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : 's' , redirectTo : { canRun : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canActivateChild ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : 's' , only : 's' , redirectTo : { canReadAgenda : 's' , canRunAgenda : 's' , canRun : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canActivateChild ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : 's' , only : 's' , redirectTo : { canReadAgenda : 's' , canRunAgenda : ( failedPermissionName , b , c ) => { return failedPermissionName ; } , canRun : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canActivateChild ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : 's' , only : 's' , redirectTo : { canReadAgenda : ( failedPermissionName , b , c ) => { return failedPermissionName ; } , canRun : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canActivateChild ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { fakeService . addPermission ( 's' ) ; route = { data : { permissions : { except : 's' , only : 's' , redirectTo : { canReadAgenda : 's' , canRunAgenda : 's' , canRun : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canActivateChild ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { fakeService . addPermission ( 's' ) ; route = { data : { permissions : { only : 's' , redirectTo : { canReadAgenda : 's' , canEditAgenda : 's' , canRun : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canActivateChild ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) } ) ) ; } ) ; describe ( 's' , ( ) => { let permissionGuard ; let fakeRouter ; let route ; let testRouter ; let fakeService ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { imports : [ NgxPermissionsModule . forRoot ( ) ] } ) ; } ) ; beforeEach ( inject ( [ NgxPermissionsService , NgxRolesService ] , ( service , rolesService ) => { fakeRouter = < any > { navigate : ( ) => { } } ; service . addPermission ( 's' ) ; fakeService = service ; spyOn ( fakeRouter , 's' ) ; permissionGuard = new NgxPermissionsGuard ( service , rolesService , fakeRouter as Router ) ; } ) ) ; it ( 's' , ( ) => { expect ( permissionGuard ) . toBeTruthy ( ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : [ 's' , 's' , "s" ] , redirectTo : ( failedPermission , route , state ) => { return failedPermission ; } } , path : 's' } } ; ( permissionGuard . canActivateChild ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { only : [ "s" ] , redirectTo : ( failedPermission , route , state ) => { return failedPermission ; } } , path : 's' } } ; ( permissionGuard . canActivateChild ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : 's' , only : [ "s" ] , redirectTo : ( failedPermission , route , state ) => { return failedPermission ; } } , path : 's' } } ; ( permissionGuard . canActivateChild ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; } ) ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsGuard$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsService$ O $NgxRolesServicegxPermissionsGuard$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsService$ O $NgxRolesServicegxPermissionsGuard$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsService$ O $NgxRolesServicegxPermissionsGuard$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ActivatedRouteSnapshot$ O $RouterStateSnapshot$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsService$ O $NgxRolesService$ O $Router$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ActivatedRouteSnapshot$ O $RouterStateSnapshot$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ActivatedRouteSnapshot$ O $RouterStateSnapshot$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ActivatedRouteSnapshot$ O $RouterStateSnapshot$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ActivatedRouteSnapshot$ O $RouterStateSnapshot$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ActivatedRouteSnapshot$ O $RouterStateSnapshot$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ActivatedRouteSnapshot$ O $RouterStateSnapshot$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsGuard$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ActivatedRouteSnapshot$ O $RouterStateSnapshot$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsService$ O $NgxRolesService$ O $RoutergxPermissionsGuard$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsService$ O $NgxRolesServicegxPermissionsGuard$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsService$ O $NgxRolesServicegxPermissionsGuard$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsService$ O $NgxRolesServiceany$ O $any$ O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O $any$ O $anygxPermissionsGuard$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsService$ O $NgxRolesService
import { NgxPermissionsGuard } from 's' ; import { async , fakeAsync , inject , TestBed } from 's' ; import { NgxPermissionsService } from 's' ; import { NgxRolesService } from 's' ; import { NgxPermissionsModule } from 's' ; import { ActivatedRouteSnapshot , Router , RouterStateSnapshot } from 's' ; import { tick } from "s" ; import { RouterTestingModule } from 's' ; describe ( 's' , ( ) => { let permissionGuard ; let route ; let fakeRouter ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { imports : [ NgxPermissionsModule . forRoot ( ) ] } ) ; } ) ; beforeEach ( inject ( [ NgxPermissionsService , NgxRolesService ] , ( service , rolesService ) => { fakeRouter = < any > { navigate : ( ) => { } } ; spyOn ( fakeRouter , 's' ) ; service . addPermission ( 's' ) ; permissionGuard = new NgxPermissionsGuard ( service , rolesService , fakeRouter as Router ) ; } ) ) ; it ( 's' , ( ) => { expect ( permissionGuard ) . toBeTruthy ( ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { only : 's' } } } ; ( ( permissionGuard . canLoad ( route ) as any ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { only : 's' } } } ; ( permissionGuard . canLoad ( route ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { only : 's' , redirectTo : 's' } } } ; ( permissionGuard . canLoad ( route ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { only : 's' , redirectTo : [ 's' ] } } } ; ( permissionGuard . canLoad ( route ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { only : 's' , except : 's' , redirectTo : [ 's' ] } } } ; expect ( permissionGuard . canLoad ( route ) ) . toBe ( true ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { only : [ ] , except : [ ] , redirectTo : [ 's' ] } } } ; expect ( permissionGuard . canLoad ( route ) ) . toBe ( true ) ; } ) ) } ) ; describe ( 's' , ( ) => { let permissionGuard ; let fakeRouter ; let route ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { imports : [ NgxPermissionsModule . forRoot ( ) ] } ) ; } ) ; beforeEach ( inject ( [ NgxPermissionsService , NgxRolesService ] , ( service , rolesService ) => { fakeRouter = < any > { navigate : ( ) => { } } ; spyOn ( fakeRouter , 's' ) ; service . addPermission ( 's' ) ; permissionGuard = new NgxPermissionsGuard ( service , rolesService , fakeRouter as Router ) ; } ) ) ; it ( 's' , ( ) => { expect ( permissionGuard ) . toBeTruthy ( ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : 's' } } } ; ( permissionGuard . canLoad ( route ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : 's' , redirectTo : 's' } } } ; ( permissionGuard . canLoad ( route ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : [ "s" , 's' ] } } } ; ( permissionGuard . canLoad ( route ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : [ "s" , 's' ] , redirectTo : 's' } } } ; ( permissionGuard . canLoad ( route ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : 's' } } } ; ( permissionGuard . canLoad ( route ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : [ 's' , "s" ] } } } ; ( permissionGuard . canLoad ( route ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) } ) ) ; } ) ; describe ( 's' , ( ) => { let permissionGuard ; let fakeRouter ; let route ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { imports : [ NgxPermissionsModule . forRoot ( ) ] } ) ; } ) ; beforeEach ( inject ( [ NgxPermissionsService , NgxRolesService ] , ( service , rolesService ) => { fakeRouter = < any > { navigate : ( ) => { } } ; spyOn ( fakeRouter , 's' ) service . addPermission ( 's' ) ; permissionGuard = new NgxPermissionsGuard ( service , rolesService , fakeRouter as Router ) ; } ) ) ; it ( 's' , ( ) => { expect ( permissionGuard ) . toBeTruthy ( ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : 's' , only : 's' , redirectTo : 's' } } } ; ( permissionGuard . canLoad ( route ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : [ "s" , 's' ] , only : 's' } } } ; ( permissionGuard . canLoad ( route ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : 's' , only : "s" } } } ; ( permissionGuard . canLoad ( route ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : [ 's' , "s" ] , only : [ 's' , 's' ] } } } ; ( permissionGuard . canLoad ( route ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : [ 's' , "s" ] , only : [ 's' , 's' ] , redirectTo : 's' } } } ; ( permissionGuard . canLoad ( route ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; } ) ; describe ( 's' , ( ) => { let permissionGuard ; let fakeRouter ; let route ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { imports : [ NgxPermissionsModule . forRoot ( { permissionsIsolate : true , rolesIsolate : true } ) ] } ) ; } ) ; beforeEach ( inject ( [ NgxPermissionsService , NgxRolesService ] , ( service , rolesService ) => { fakeRouter = < any > { navigate : ( ) => { } } ; spyOn ( fakeRouter , 's' ) service . addPermission ( 's' ) ; permissionGuard = new NgxPermissionsGuard ( service , rolesService , fakeRouter as Router ) ; } ) ) ; it ( 's' , ( ) => { expect ( permissionGuard ) . toBeTruthy ( ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : 's' , only : 's' , redirectTo : 's' } } } ; ( permissionGuard . canLoad ( route ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : [ "s" , 's' ] , only : 's' } } } ; ( permissionGuard . canLoad ( route ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : 's' , only : "s" } } } ; ( permissionGuard . canLoad ( route ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : [ 's' , "s" ] , only : [ 's' , 's' ] } } } ; ( permissionGuard . canLoad ( route ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : [ 's' , "s" ] , only : [ 's' , 's' ] , redirectTo : 's' } } } ; ( permissionGuard . canLoad ( route ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; } ) ; describe ( 's' , ( ) => { let permissionGuard ; let fakeRouter ; let route ; let testRouter ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { imports : [ NgxPermissionsModule . forRoot ( ) , RouterTestingModule . withRoutes ( [ { path : 's' , redirectTo : 's' , data : { permissions : { except : ( route , awesome ) => { return true ; } } , } } , ] ) ] } ) ; } ) ; beforeEach ( inject ( [ NgxPermissionsService , NgxRolesService ] , ( service , rolesService , router ) => { fakeRouter = < any > { navigate : ( ) => { } } ; service . addPermission ( 's' ) ; spyOn ( fakeRouter , 's' ) ; permissionGuard = new NgxPermissionsGuard ( service , rolesService , fakeRouter as Router ) ; } ) ) ; it ( 's' , ( ) => { expect ( permissionGuard ) . toBeTruthy ( ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { only : ( route , awesome ) => { if ( route . data . path . includes ( 0 ) ) { return [ 's' ] } else { return 's' } } } , path : 's' } } ; ( permissionGuard . canLoad ( route ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : ( route , awesome ) => { if ( route . data . path . includes ( 's' ) ) { return [ 's' ] } else { return 's' } } } , path : 's' } } ; ( permissionGuard . canLoad ( route ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : ( route , awesome ) => { if ( route . data . path . includes ( 's' ) ) { return [ 's' ] } else { return 's' } } , only : ( route , awesome ) => { if ( route . data . path . includes ( 's' ) ) { return [ 's' ] } else { return 's' } } } , path : 's' } } ; ( permissionGuard . canLoad ( route ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : ( route , awesome ) => { if ( route . data . path . includes ( 's' ) ) { return [ 's' ] } else { return 's' } } , only : ( route , awesome ) => { if ( route . data . path . includes ( 's' ) ) { return [ 's' ] } else { return 's' } } , redirectTo : 's' } , path : 's' } } ; ( permissionGuard . canLoad ( route ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; } ) ; describe ( 's' , ( ) => { let permissionGuard ; let fakeRouter ; let route ; let testRouter ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { imports : [ NgxPermissionsModule . forRoot ( ) , RouterTestingModule . withRoutes ( [ { path : 's' , redirectTo : 's' , data : { permissions : { except : ( route , awesome ) => { return true ; } , redirectTo : { navigationCommands : [ 's' ] , navigationExtras : { skipLocationChange : true } } } , } } , ] ) ] } ) ; } ) ; beforeEach ( inject ( [ NgxPermissionsService , NgxRolesService ] , ( service , rolesService , router ) => { fakeRouter = < any > { navigate : ( ) => { } } ; service . addPermission ( 's' ) ; spyOn ( fakeRouter , 's' ) ; permissionGuard = new NgxPermissionsGuard ( service , rolesService , fakeRouter as Router ) ; } ) ) ; it ( 's' , ( ) => { expect ( permissionGuard ) . toBeTruthy ( ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { only : "s" , redirectTo : { navigationCommands : [ 's' ] , navigationExtras : { skipLocationChange : true } } } , path : 's' } } ; ( permissionGuard . canLoad ( route ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] , { skipLocationChange : true } ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { only : "s" , redirectTo : { navigationCommands : ( rejectedPermission , route ) => { return [ 's' ] } , navigationExtras : ( route ) => { return { skipLocationChange : true } } } } , path : 's' } } ; ( permissionGuard . canLoad ( route ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] , { skipLocationChange : true } ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : "s" , redirectTo : { navigationCommands : ( rejectedPermission , route ) => { return [ 's' ] } , navigationExtras : ( route ) => { return { skipLocationChange : true } } } } , path : 's' } } ; ( permissionGuard . canLoad ( route ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] , { skipLocationChange : true } ) ; } ) } ) ) ; } ) ; describe ( 's' , ( ) => { let permissionGuard ; let fakeRouter ; let route ; let testRouter ; let fakeService ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { imports : [ NgxPermissionsModule . forRoot ( ) ] } ) ; } ) ; beforeEach ( inject ( [ NgxPermissionsService , NgxRolesService ] , ( service , rolesService ) => { fakeRouter = < any > { navigate : ( ) => { } } ; service . addPermission ( 's' ) ; fakeService = service ; spyOn ( fakeRouter , 's' ) ; permissionGuard = new NgxPermissionsGuard ( service , rolesService , fakeRouter as Router ) ; } ) ) ; it ( 's' , ( ) => { expect ( permissionGuard ) . toBeTruthy ( ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : [ 's' , 's' , "s" ] , redirectTo : { canReadAgenda : 's' , canEditAgenda : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canLoad ( route ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { fakeService . addPermission ( 's' ) ; route = { data : { permissions : { except : [ "s" , 's' , 's' ] , redirectTo : { canReadAgenda : 's' , canEditAgenda : 's' , canRun : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canLoad ( route ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { fakeService . addPermission ( 's' ) ; route = { data : { permissions : { except : [ 's' , 's' ] , redirectTo : { canReadAgenda : 's' , canEditAgenda : 's' , canRun : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canLoad ( route ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : [ 's' , 's' ] , redirectTo : { canRun : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canLoad ( route ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : [ 's' ] , only : [ 's' ] , redirectTo : { canReadAgenda : 's' , canRunAgenda : 's' , canRun : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canLoad ( route ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { fakeService . addPermission ( 's' ) ; route = { data : { permissions : { except : [ 's' ] , only : [ 's' ] , redirectTo : { canReadAgenda : 's' , canRunAgenda : 's' , canRun : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canLoad ( route ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { only : [ 's' , 's' , "s" ] , redirectTo : { canReadAgenda : 's' , canEditAgenda : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canLoad ( route ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { only : [ 's' , 's' , "s" ] , redirectTo : { canReadAgenda : 's' , canEditAgenda : ( route ) => { return 's' } , default : 's' } } , path : 's' } } ; ( permissionGuard . canLoad ( route ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { only : [ 's' , 's' , "s" ] , redirectTo : { canReadAgenda : 's' , canEditAgenda : { navigationCommands : [ 's' ] , navigationExtras : { skipLocationChange : true } } , default : 's' } } , path : 's' } } ; ( permissionGuard . canLoad ( route ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] , { skipLocationChange : true } ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { only : [ 's' , 's' , "s" ] , redirectTo : { canReadAgenda : 's' , canEditAgenda : ( ) => { return { navigationCommands : [ 's' ] , navigationExtras : { skipLocationChange : true } } } , default : 's' } } , path : 's' } } ; ( permissionGuard . canLoad ( route ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] , { skipLocationChange : true } ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { fakeService . addPermission ( 's' ) ; route = { data : { permissions : { only : [ 's' , 's' , 's' ] , redirectTo : { canReadAgenda : 's' , canEditAgenda : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canLoad ( route ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { fakeService . addPermission ( 's' ) ; route = { data : { permissions : { only : [ 's' ] , redirectTo : { canReadAgenda : 's' , canEditAgenda : 's' , canRun : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canLoad ( route ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) } ) ) ; } ) ; describe ( 's' , ( ) => { let permissionGuard ; let fakeRouter ; let route ; let testRouter ; let fakeService ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { imports : [ NgxPermissionsModule . forRoot ( ) ] } ) ; } ) ; beforeEach ( inject ( [ NgxPermissionsService , NgxRolesService ] , ( service , rolesService ) => { fakeRouter = < any > { navigate : ( ) => { } } ; service . addPermission ( 's' ) ; fakeService = service ; spyOn ( fakeRouter , 's' ) ; permissionGuard = new NgxPermissionsGuard ( service , rolesService , fakeRouter as Router ) ; } ) ) ; it ( 's' , ( ) => { expect ( permissionGuard ) . toBeTruthy ( ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : 's' , redirectTo : { canReadAgenda : 's' , canEditAgenda : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canLoad ( route ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { fakeService . addPermission ( 's' ) ; route = { data : { permissions : { only : "s" , redirectTo : { canReadAgenda : 's' , canEditAgenda : 's' , DELETE : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canLoad ( route ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { fakeService . addPermission ( 's' ) ; route = { data : { permissions : { except : 's' , redirectTo : { canReadAgenda : 's' , canEditAgenda : 's' , canRun : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canLoad ( route ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : 's' , redirectTo : { canRun : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canLoad ( route ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : 's' , only : 's' , redirectTo : { canReadAgenda : 's' , canRunAgenda : 's' , canRun : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canLoad ( route ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { fakeService . addPermission ( 's' ) ; route = { data : { permissions : { except : 's' , only : 's' , redirectTo : { canReadAgenda : 's' , canRunAgenda : 's' , canRun : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canLoad ( route ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { fakeService . addPermission ( 's' ) ; route = { data : { permissions : { only : 's' , redirectTo : { canReadAgenda : 's' , canEditAgenda : 's' , canRun : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canLoad ( route ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) } ) ) ; } ) ; describe ( 's' , ( ) => { let permissionGuard ; let fakeRouter ; let route ; let testRouter ; let fakeService ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { imports : [ NgxPermissionsModule . forRoot ( ) ] } ) ; } ) ; beforeEach ( inject ( [ NgxPermissionsService , NgxRolesService ] , ( service , rolesService ) => { fakeRouter = < any > { navigate : ( ) => { } } ; service . addPermission ( 's' ) ; fakeService = service ; spyOn ( fakeRouter , 's' ) ; permissionGuard = new NgxPermissionsGuard ( service , rolesService , fakeRouter as Router ) ; } ) ) ; it ( 's' , ( ) => { expect ( permissionGuard ) . toBeTruthy ( ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : 's' , redirectTo : { canReadAgenda : 's' , canEditAgenda : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canLoad ( route ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { fakeService . addPermission ( 's' ) ; route = { data : { permissions : { only : "s" , redirectTo : { canReadAgenda : 's' , canEditAgenda : 's' , DELETE : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canLoad ( route ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { fakeService . addPermission ( 's' ) ; route = { data : { permissions : { except : 's' , redirectTo : { canReadAgenda : 's' , canEditAgenda : 's' , canRun : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canLoad ( route ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : 's' , redirectTo : { canRun : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canLoad ( route ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : 's' , only : 's' , redirectTo : { canReadAgenda : 's' , canRunAgenda : 's' , canRun : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canLoad ( route ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : 's' , only : 's' , redirectTo : { canReadAgenda : 's' , canRunAgenda : ( failedPermissionName , b , c ) => { return failedPermissionName ; } , canRun : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canLoad ( route ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : 's' , only : 's' , redirectTo : { canReadAgenda : ( failedPermissionName , b , c ) => { return failedPermissionName ; } , canRun : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canLoad ( route ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { fakeService . addPermission ( 's' ) ; route = { data : { permissions : { except : 's' , only : 's' , redirectTo : { canReadAgenda : 's' , canRunAgenda : 's' , canRun : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canLoad ( route ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { fakeService . addPermission ( 's' ) ; route = { data : { permissions : { only : 's' , redirectTo : { canReadAgenda : 's' , canEditAgenda : 's' , canRun : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canLoad ( route ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) } ) ) ; } ) ; describe ( 's' , ( ) => { let permissionGuard ; let fakeRouter ; let route ; let testRouter ; let fakeService ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { imports : [ NgxPermissionsModule . forRoot ( ) ] } ) ; } ) ; beforeEach ( inject ( [ NgxPermissionsService , NgxRolesService ] , ( service , rolesService ) => { fakeRouter = < any > { navigate : ( ) => { } } ; service . addPermission ( 's' ) ; fakeService = service ; spyOn ( fakeRouter , 's' ) ; permissionGuard = new NgxPermissionsGuard ( service , rolesService , fakeRouter as Router ) ; } ) ) ; it ( 's' , ( ) => { expect ( permissionGuard ) . toBeTruthy ( ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : [ 's' , 's' , "s" ] , redirectTo : ( failedPermission , route ) => { return failedPermission ; } } , path : 's' } } ; ( permissionGuard . canLoad ( route ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { only : [ "s" ] , redirectTo : ( failedPermission , route ) => { return failedPermission ; } } , path : 's' } } ; ( permissionGuard . canLoad ( route ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : 's' , only : [ "s" ] , redirectTo : ( failedPermission , route ) => { return failedPermission ; } } , path : 's' } } ; ( permissionGuard . canLoad ( route ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; } ) ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsGuard$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsService$ O $NgxRolesServicegxPermissionsGuard$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsService$ O $NgxRolesServicegxPermissionsGuard$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsService$ O $NgxRolesServicegxPermissionsGuard$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsService$ O $NgxRolesServicegxPermissionsGuard$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ActivatedRouteSnapshot$ O $RouterStateSnapshot$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsService$ O $NgxRolesService$ O $Router$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ActivatedRouteSnapshot$ O $RouterStateSnapshot$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ActivatedRouteSnapshot$ O $RouterStateSnapshot$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ActivatedRouteSnapshot$ O $RouterStateSnapshot$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ActivatedRouteSnapshot$ O $RouterStateSnapshot$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ActivatedRouteSnapshot$ O $RouterStateSnapshot$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ActivatedRouteSnapshot$ O $RouterStateSnapshot$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsGuard$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ActivatedRouteSnapshot$ O $RouterStateSnapshot$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsService$ O $NgxRolesService$ O $RoutergxPermissionsGuard$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsService$ O $NgxRolesServicegxPermissionsGuard$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsService$ O $NgxRolesService$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsGuard$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsService$ O $NgxRolesService$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O $any$ O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O $any$ O $anygxPermissionsGuard$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsService$ O $NgxRolesService
import { NgxPermissionsService } from 's' ; import { Component , ModuleWithProviders , NgModule , NgModuleFactoryLoader } from 's' ; import { Route , Router , RouterModule } from 's' ; import { Location } from 's' ; import { ComponentFixture , fakeAsync , getTestBed , inject , TestBed , tick } from 's' ; import { RouterTestingModule , SpyNgModuleFactoryLoader } from 's' ; import { NgxPermissionsModule } from 's' ; import { NgxRolesService } from 's' ; @ Component ( { selector : 's' , template : `template` } ) class RootCmp { constructor ( public permissions ) { permissions . addPermission ( 's' , ( ) => { return false ; } ) ; } } @ Component ( { selector : 's' , template : 's' } ) class ParentLazyLoadedComponent { } function getLazyLoadedModule ( importedModule ) { @ Component ( { selector : 's' , template : 's' } ) class ChildLazyLoadedComponent { constructor ( public permissions ) { permissions . addPermission ( 's' , ( ) => { return true ; } ) ; } } @ NgModule ( { declarations : [ ParentLazyLoadedComponent , ChildLazyLoadedComponent ] , imports : [ RouterModule . forChild ( [ < Route > { path : 's' , component : ParentLazyLoadedComponent , children : [ { path : 's' , component : ChildLazyLoadedComponent } ] } ] ) , importedModule ] } ) class LoadedModule { } return LoadedModule ; } function advance ( fixture < any > ) { tick ( ) ; fixture . detectChanges ( ) ; } function createRoot ( router , type ) < any > { const f = TestBed . createComponent ( type ) ; advance ( f ) ; router . initialNavigation ( ) ; advance ( f ) ; return f ; } describe ( "s" , ( ) => { beforeEach ( ( ) => { TestBed . configureTestingModule ( { imports : [ RouterTestingModule , NgxPermissionsModule . forRoot ( ) , ] , declarations : [ RootCmp ] } ) ; } ) ; it ( "s" , fakeAsync ( inject ( [ Router , Location , NgModuleFactoryLoader ] , ( router , location , loader ) => { let LoadedModule = getLazyLoadedModule ( NgxPermissionsModule . forChild ( ) ) ; loader . stubbedModules = { expected : LoadedModule } ; const fixture = createRoot ( router , RootCmp ) , injector = getTestBed ( ) , permissionsService = injector . get ( NgxPermissionsService ) ; permissionsService . hasPermission ( 's' ) . then ( ( data ) => { expect ( data ) . toBe ( false ) } ) ; router . resetConfig ( [ { path : 's' , loadChildren : 's' } ] ) ; router . navigateByUrl ( 's' ) ; advance ( fixture ) ; expect ( location . path ( ) ) . toEqual ( 's' ) ; permissionsService . hasPermission ( 's' ) . then ( ( data ) => { expect ( data ) . toBe ( true ) } ) ; } ) ) ) ; it ( "s" , fakeAsync ( inject ( [ Router , Location , NgModuleFactoryLoader ] , ( router , location , loader ) => { let LoadedModule = getLazyLoadedModule ( NgxPermissionsModule ) ; loader . stubbedModules = { expected : LoadedModule } ; const fixture = createRoot ( router , RootCmp ) , injector = getTestBed ( ) , permissionsService = injector . get ( NgxPermissionsService ) ; permissionsService . hasPermission ( 's' ) . then ( ( data ) => { expect ( data ) . toBe ( false ) } ) ; router . resetConfig ( [ { path : 's' , loadChildren : 's' } ] ) ; router . navigateByUrl ( 's' ) ; advance ( fixture ) ; expect ( location . path ( ) ) . toEqual ( 's' ) ; permissionsService . hasPermission ( 's' ) . then ( ( data ) => { expect ( data ) . toBe ( true ) } ) ; } ) ) ) ; it ( "s" , fakeAsync ( inject ( [ Router , Location , NgModuleFactoryLoader ] , ( router , location , loader ) => { let LoadedModule = getLazyLoadedModule ( NgxPermissionsModule . forRoot ( ) ) ; loader . stubbedModules = { expected : LoadedModule } ; const fixture = createRoot ( router , RootCmp ) , injector = getTestBed ( ) , permissionsService = injector . get ( NgxPermissionsService ) ; permissionsService . hasPermission ( 's' ) . then ( ( data ) => { expect ( data ) . toBe ( false ) } ) ; router . resetConfig ( [ { path : 's' , loadChildren : 's' } ] ) ; router . navigateByUrl ( 's' ) ; advance ( fixture ) ; expect ( location . path ( ) ) . toEqual ( 's' ) ; permissionsService . hasPermission ( 's' ) . then ( ( data ) => { expect ( data ) . toBe ( false ) } ) ; } ) ) ) ; it ( "s" , fakeAsync ( inject ( [ Router , Location , NgModuleFactoryLoader ] , ( router , location , loader ) => { let LoadedModule = getLazyLoadedModule ( NgxPermissionsModule . forChild ( { permissionsIsolate : true } ) ) ; loader . stubbedModules = { expected : LoadedModule } ; const fixture = createRoot ( router , RootCmp ) , injector = getTestBed ( ) , permissionsService = injector . get ( NgxPermissionsService ) ; permissionsService . hasPermission ( 's' ) . then ( ( data ) => { expect ( data ) . toBe ( false ) } ) ; router . resetConfig ( [ { path : 's' , loadChildren : 's' } ] ) ; router . navigateByUrl ( 's' ) ; advance ( fixture ) ; expect ( location . path ( ) ) . toEqual ( 's' ) ; permissionsService . hasPermission ( 's' ) . then ( ( data ) => { expect ( data ) . toBe ( false ) } ) ; } ) ) ) ; } ) ; @ Component ( { selector : 's' , template : `template` } ) class RootRolesCmp { constructor ( public roleService ) { roleService . addRole ( 's' , ( ) => { return false ; } ) ; } } @ Component ( { selector : 's' , template : 's' } ) class ParentLazyRolesLoadedComponent { } function getLazyRolesLoadedModule ( importedModule ) { @ Component ( { selector : 's' , template : 's' } ) class ChildLazyLoadedComponent { constructor ( public permissions ) { permissions . addRole ( 's' , ( ) => { return true ; } ) ; } } @ NgModule ( { declarations : [ ParentLazyLoadedComponent , ChildLazyLoadedComponent ] , imports : [ RouterModule . forChild ( [ < Route > { path : 's' , component : ParentLazyLoadedComponent , children : [ { path : 's' , component : ChildLazyLoadedComponent } ] } ] ) , importedModule ] } ) class LoadedModule { } return LoadedModule ; } describe ( "s" , ( ) => { beforeEach ( ( ) => { TestBed . configureTestingModule ( { imports : [ RouterTestingModule , NgxPermissionsModule . forRoot ( ) , ] , declarations : [ RootRolesCmp ] } ) ; } ) ; it ( "s" , fakeAsync ( inject ( [ Router , Location , NgModuleFactoryLoader ] , ( router , location , loader ) => { let LoadedModule = getLazyRolesLoadedModule ( NgxPermissionsModule . forChild ( ) ) ; loader . stubbedModules = { expected : LoadedModule } ; const fixture = createRoot ( router , RootRolesCmp ) , injector = getTestBed ( ) , rolesService = injector . get ( NgxRolesService ) ; rolesService . hasOnlyRoles ( 's' ) . then ( ( data ) => { expect ( data ) . toBe ( false ) } ) ; router . resetConfig ( [ { path : 's' , loadChildren : 's' } ] ) ; router . navigateByUrl ( 's' ) ; advance ( fixture ) ; expect ( location . path ( ) ) . toEqual ( 's' ) ; rolesService . hasOnlyRoles ( 's' ) . then ( ( data ) => { expect ( data ) . toBe ( true ) } ) ; } ) ) ) ; it ( "s" , fakeAsync ( inject ( [ Router , Location , NgModuleFactoryLoader ] , ( router , location , loader ) => { let LoadedModule = getLazyRolesLoadedModule ( NgxPermissionsModule . forRoot ( ) ) ; loader . stubbedModules = { expected : LoadedModule } ; const fixture = createRoot ( router , RootRolesCmp ) , injector = getTestBed ( ) , rolesService = injector . get ( NgxRolesService ) ; rolesService . hasOnlyRoles ( 's' ) . then ( ( data ) => { expect ( data ) . toBe ( false ) } ) ; router . resetConfig ( [ { path : 's' , loadChildren : 's' } ] ) ; router . navigateByUrl ( 's' ) ; advance ( fixture ) ; expect ( location . path ( ) ) . toEqual ( 's' ) ; rolesService . hasOnlyRoles ( 's' ) . then ( ( data ) => { expect ( data ) . toBe ( false ) } ) ; } ) ) ) ; it ( "s" , fakeAsync ( inject ( [ Router , Location , NgModuleFactoryLoader ] , ( router , location , loader ) => { let LoadedModule = getLazyRolesLoadedModule ( NgxPermissionsModule . forChild ( { rolesIsolate : true } ) ) ; loader . stubbedModules = { expected : LoadedModule } ; const fixture = createRoot ( router , RootRolesCmp ) , injector = getTestBed ( ) , rolesService = injector . get ( NgxRolesService ) ; rolesService . hasOnlyRoles ( 's' ) . then ( ( data ) => { expect ( data ) . toBe ( false ) } ) ; router . resetConfig ( [ { path : 's' , loadChildren : 's' } ] ) ; router . navigateByUrl ( 's' ) ; advance ( fixture ) ; expect ( location . path ( ) ) . toEqual ( 's' ) ; rolesService . hasOnlyRoles ( 's' ) . then ( ( data ) => { expect ( data ) . toBe ( false ) } ) ; } ) ) ) ; } ) ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsService$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsService$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $void$ O $ComponentFixture$ O O O O O O O O O O O O O O O O O $ComponentFixture$ O $Router$ O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $Router$ O $Location$ O $SpyNgModuleFactoryLoader$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsService$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $Router$ O $Location$ O $SpyNgModuleFactoryLoader$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsService$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $Router$ O $Location$ O $SpyNgModuleFactoryLoader$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $Router$ O $Location$ O $SpyNgModuleFactoryLoader$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxRolesService$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ModuleWithProviders$ O O O O O O O O O O O O O O O O O O O O O $NgxRolesService$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $Router$ O $Location$ O $SpyNgModuleFactoryLoader$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxRolesService$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $Router$ O $Location$ O $SpyNgModuleFactoryLoader$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $Router$ O $Location$ O $SpyNgModuleFactoryLoader$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { NgxPermissionsGuard } from 's' ; import { async , fakeAsync , inject , TestBed } from 's' ; import { NgxPermissionsService } from 's' ; import { NgxRolesService } from 's' ; import { NgxPermissionsModule } from 's' ; import { ActivatedRouteSnapshot , Router , RouterStateSnapshot } from 's' ; import { tick } from "s" ; import { RouterTestingModule } from 's' ; describe ( 's' , ( ) => { let permissionGuard ; let route ; let fakeRouter ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { imports : [ NgxPermissionsModule . forRoot ( ) ] } ) ; } ) ; beforeEach ( inject ( [ NgxPermissionsService , NgxRolesService ] , ( service , rolesService ) => { fakeRouter = < any > { navigate : ( ) => { } } ; spyOn ( fakeRouter , 's' ) ; service . addPermission ( 's' ) ; permissionGuard = new NgxPermissionsGuard ( service , rolesService , fakeRouter as Router ) ; } ) ) ; it ( 's' , ( ) => { expect ( permissionGuard ) . toBeTruthy ( ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { only : 's' } } } ; ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { only : [ ] } } } ; expect ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) ) . toEqual ( true ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { } ; expect ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) ) . toEqual ( true ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : [ ] } } } ; expect ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) ) . toEqual ( true ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { only : 's' } } } ; ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { only : 's' , redirectTo : 's' } } } ; ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { only : 's' , redirectTo : [ 's' ] } } } ; ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { only : 's' , except : 's' , redirectTo : [ 's' ] } } } ; expect ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . toBe ( true ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { only : [ ] , except : [ ] , redirectTo : [ 's' ] } } } ; expect ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . toBe ( true ) ; } ) ) } ) ; describe ( 's' , ( ) => { let permissionGuard ; let fakeRouter ; let route ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { imports : [ NgxPermissionsModule . forRoot ( ) ] } ) ; } ) ; beforeEach ( inject ( [ NgxPermissionsService , NgxRolesService ] , ( service , rolesService ) => { fakeRouter = < any > { navigate : ( ) => { } } ; spyOn ( fakeRouter , 's' ) ; service . addPermission ( 's' ) ; permissionGuard = new NgxPermissionsGuard ( service , rolesService , fakeRouter as Router ) ; } ) ) ; it ( 's' , ( ) => { expect ( permissionGuard ) . toBeTruthy ( ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : 's' } } } ; ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : 's' , redirectTo : 's' } } } ; ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : [ "s" , 's' ] } } } ; ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : [ "s" , 's' ] , redirectTo : 's' } } } ; ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : 's' } } } ; ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : [ 's' , "s" ] } } } ; ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) } ) ) ; } ) ; describe ( 's' , ( ) => { let permissionGuard ; let fakeRouter ; let route ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { imports : [ NgxPermissionsModule . forRoot ( ) ] } ) ; } ) ; beforeEach ( inject ( [ NgxPermissionsService , NgxRolesService ] , ( service , rolesService ) => { fakeRouter = < any > { navigate : ( ) => { } } ; spyOn ( fakeRouter , 's' ) service . addPermission ( 's' ) ; permissionGuard = new NgxPermissionsGuard ( service , rolesService , fakeRouter as Router ) ; } ) ) ; it ( 's' , ( ) => { expect ( permissionGuard ) . toBeTruthy ( ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : 's' , only : 's' , redirectTo : 's' } } } ; ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : [ "s" , 's' ] , only : 's' } } } ; ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : 's' , only : "s" } } } ; ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : [ 's' , "s" ] , only : [ 's' , 's' ] } } } ; ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : [ 's' , "s" ] , only : [ 's' , 's' ] , redirectTo : 's' } } } ; ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; } ) ; describe ( 's' , ( ) => { let permissionGuard ; let fakeRouter ; let route ; let testRouter ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { imports : [ NgxPermissionsModule . forRoot ( ) , RouterTestingModule . withRoutes ( [ { path : 's' , redirectTo : 's' , data : { permissions : { except : ( route , awesome ) => { return true ; } } , } } , ] ) ] } ) ; } ) ; beforeEach ( inject ( [ NgxPermissionsService , NgxRolesService ] , ( service , rolesService , router ) => { fakeRouter = < any > { navigate : ( ) => { } } ; service . addPermission ( 's' ) ; spyOn ( fakeRouter , 's' ) ; permissionGuard = new NgxPermissionsGuard ( service , rolesService , fakeRouter as Router ) ; } ) ) ; it ( 's' , ( ) => { expect ( permissionGuard ) . toBeTruthy ( ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { only : ( route , awesome ) => { if ( route . data . path . includes ( 0 ) ) { return [ 's' ] } else { return 's' } } } , path : 's' } } ; ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : ( route , awesome ) => { if ( route . data . path . includes ( 's' ) ) { return [ 's' ] } else { return 's' } } } , path : 's' } } ; ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : ( route , awesome ) => { if ( route . data . path . includes ( 's' ) ) { return [ 's' ] } else { return 's' } } , only : ( route , awesome ) => { if ( route . data . path . includes ( 's' ) ) { return [ 's' ] } else { return 's' } } } , path : 's' } } ; ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : ( route , awesome ) => { if ( route . data . path . includes ( 's' ) ) { return [ 's' ] } else { return 's' } } , only : ( route , awesome ) => { if ( route . data . path . includes ( 's' ) ) { return [ 's' ] } else { return 's' } } , redirectTo : 's' } , path : 's' } } ; ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; } ) ; describe ( 's' , ( ) => { let permissionGuard ; let fakeRouter ; let route ; let testRouter ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { imports : [ NgxPermissionsModule . forRoot ( ) , RouterTestingModule . withRoutes ( [ { path : 's' , redirectTo : 's' , data : { permissions : { except : ( route , awesome ) => { return true ; } , redirectTo : { navigationCommands : [ 's' ] , navigationExtras : { skipLocationChange : true } } } , } } , ] ) ] } ) ; } ) ; beforeEach ( inject ( [ NgxPermissionsService , NgxRolesService ] , ( service , rolesService , router ) => { fakeRouter = < any > { navigate : ( ) => { } } ; service . addPermission ( 's' ) ; spyOn ( fakeRouter , 's' ) ; permissionGuard = new NgxPermissionsGuard ( service , rolesService , fakeRouter as Router ) ; } ) ) ; it ( 's' , ( ) => { expect ( permissionGuard ) . toBeTruthy ( ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { only : "s" , redirectTo : { navigationCommands : [ 's' ] , navigationExtras : { skipLocationChange : true } } } , path : 's' } } ; ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] , { skipLocationChange : true } ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { only : "s" , redirectTo : { navigationCommands : ( rejectedPermission , route , state ) => { return [ 's' ] } , navigationExtras : ( route , state ) => { return { skipLocationChange : true } } } } , path : 's' } } ; ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] , { skipLocationChange : true } ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : "s" , redirectTo : { navigationCommands : ( rejectedPermission , route , state ) => { return [ 's' ] } , navigationExtras : ( route , state ) => { return { skipLocationChange : true } } } } , path : 's' } } ; ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] , { skipLocationChange : true } ) ; } ) } ) ) ; } ) ; describe ( 's' , ( ) => { let permissionGuard ; let fakeRouter ; let route ; let testRouter ; let fakeService ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { imports : [ NgxPermissionsModule . forRoot ( ) ] } ) ; } ) ; beforeEach ( inject ( [ NgxPermissionsService , NgxRolesService ] , ( service , rolesService ) => { fakeRouter = < any > { navigate : ( ) => { } } ; service . addPermission ( 's' ) ; fakeService = service ; spyOn ( fakeRouter , 's' ) ; permissionGuard = new NgxPermissionsGuard ( service , rolesService , fakeRouter as Router ) ; } ) ) ; it ( 's' , ( ) => { expect ( permissionGuard ) . toBeTruthy ( ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : [ 's' , 's' , "s" ] , redirectTo : { canReadAgenda : 's' , canEditAgenda : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { fakeService . addPermission ( 's' ) ; route = { data : { permissions : { except : [ "s" , 's' , 's' ] , redirectTo : { canReadAgenda : 's' , canEditAgenda : 's' , canRun : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { fakeService . addPermission ( 's' ) ; route = { data : { permissions : { except : [ 's' , 's' ] , redirectTo : { canReadAgenda : 's' , canEditAgenda : 's' , canRun : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : [ 's' , 's' ] , redirectTo : { canRun : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : [ 's' ] , only : [ 's' ] , redirectTo : { canReadAgenda : 's' , canRunAgenda : 's' , canRun : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { fakeService . addPermission ( 's' ) ; route = { data : { permissions : { except : [ 's' ] , only : [ 's' ] , redirectTo : { canReadAgenda : 's' , canRunAgenda : 's' , canRun : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { only : [ 's' , 's' , "s" ] , redirectTo : { canReadAgenda : 's' , canEditAgenda : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { only : [ 's' , 's' , "s" ] , redirectTo : { canReadAgenda : 's' , canEditAgenda : ( route , state ) => { return 's' } , default : 's' } } , path : 's' } } ; ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { only : [ 's' , "s" ] , redirectTo : { canReadAgenda : 's' , canEditAgenda : { navigationCommands : [ 's' ] , navigationExtras : { skipLocationChange : true } } , default : 's' } } , path : 's' } } ; ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] , { skipLocationChange : true } ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { only : [ 's' , 's' , "s" ] , redirectTo : { canReadAgenda : 's' , canEditAgenda : ( ) => { return { navigationCommands : [ 's' ] , navigationExtras : { skipLocationChange : true } } } , default : 's' } } , path : 's' } } ; ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] , { skipLocationChange : true } ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { fakeService . addPermission ( 's' ) ; route = { data : { permissions : { only : [ 's' , 's' , 's' ] , redirectTo : { canReadAgenda : 's' , canEditAgenda : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { fakeService . addPermission ( 's' ) ; route = { data : { permissions : { only : [ 's' ] , redirectTo : { canReadAgenda : 's' , canEditAgenda : 's' , canRun : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) } ) ) ; } ) ; describe ( 's' , ( ) => { let permissionGuard ; let fakeRouter ; let route ; let testRouter ; let fakeService ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { imports : [ NgxPermissionsModule . forRoot ( ) ] } ) ; } ) ; beforeEach ( inject ( [ NgxPermissionsService , NgxRolesService ] , ( service , rolesService ) => { fakeRouter = < any > { navigate : ( ) => { } } ; service . addPermission ( 's' ) ; fakeService = service ; spyOn ( fakeRouter , 's' ) ; permissionGuard = new NgxPermissionsGuard ( service , rolesService , fakeRouter as Router ) ; } ) ) ; it ( 's' , ( ) => { expect ( permissionGuard ) . toBeTruthy ( ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : 's' , redirectTo : { canReadAgenda : 's' , canEditAgenda : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { fakeService . addPermission ( 's' ) ; route = { data : { permissions : { only : "s" , redirectTo : { canReadAgenda : 's' , canEditAgenda : 's' , DELETE : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { fakeService . addPermission ( 's' ) ; route = { data : { permissions : { except : 's' , redirectTo : { canReadAgenda : 's' , canEditAgenda : 's' , canRun : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : 's' , redirectTo : { canRun : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : 's' , only : 's' , redirectTo : { canReadAgenda : 's' , canRunAgenda : 's' , canRun : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { fakeService . addPermission ( 's' ) ; route = { data : { permissions : { except : 's' , only : 's' , redirectTo : { canReadAgenda : 's' , canRunAgenda : 's' , canRun : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { fakeService . addPermission ( 's' ) ; route = { data : { permissions : { only : 's' , redirectTo : { canReadAgenda : 's' , canEditAgenda : 's' , canRun : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) } ) ) ; } ) ; describe ( 's' , ( ) => { let permissionGuard ; let fakeRouter ; let route ; let testRouter ; let fakeService ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { imports : [ NgxPermissionsModule . forRoot ( ) ] } ) ; } ) ; beforeEach ( inject ( [ NgxPermissionsService , NgxRolesService ] , ( service , rolesService ) => { fakeRouter = < any > { navigate : ( ) => { } } ; service . addPermission ( 's' ) ; fakeService = service ; spyOn ( fakeRouter , 's' ) ; permissionGuard = new NgxPermissionsGuard ( service , rolesService , fakeRouter as Router ) ; } ) ) ; it ( 's' , ( ) => { expect ( permissionGuard ) . toBeTruthy ( ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : 's' , redirectTo : { canReadAgenda : 's' , canEditAgenda : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { fakeService . addPermission ( 's' ) ; route = { data : { permissions : { only : "s" , redirectTo : { canReadAgenda : 's' , canEditAgenda : 's' , DELETE : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { fakeService . addPermission ( 's' ) ; route = { data : { permissions : { except : 's' , redirectTo : { canReadAgenda : 's' , canEditAgenda : 's' , canRun : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : 's' , redirectTo : { canRun : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : 's' , only : 's' , redirectTo : { canReadAgenda : 's' , canRunAgenda : 's' , canRun : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : 's' , only : 's' , redirectTo : { canReadAgenda : 's' , canRunAgenda : ( failedPermissionName , b , c ) => { return failedPermissionName ; } , canRun : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : 's' , only : 's' , redirectTo : { canReadAgenda : ( failedPermissionName , b , c ) => { return failedPermissionName ; } , canRun : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { fakeService . addPermission ( 's' ) ; route = { data : { permissions : { except : 's' , only : 's' , redirectTo : { canReadAgenda : 's' , canRunAgenda : 's' , canRun : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { fakeService . addPermission ( 's' ) ; route = { data : { permissions : { only : 's' , redirectTo : { canReadAgenda : 's' , canEditAgenda : 's' , canRun : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) } ) ) ; } ) ; describe ( 's' , ( ) => { let permissionGuard ; let fakeRouter ; let route ; let testRouter ; let fakeService ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { imports : [ NgxPermissionsModule . forRoot ( ) ] } ) ; } ) ; beforeEach ( inject ( [ NgxPermissionsService , NgxRolesService ] , ( service , rolesService ) => { fakeRouter = < any > { navigate : ( ) => { } } ; service . addPermission ( 's' ) ; fakeService = service ; spyOn ( fakeRouter , 's' ) ; permissionGuard = new NgxPermissionsGuard ( service , rolesService , fakeRouter as Router ) ; } ) ) ; it ( 's' , ( ) => { expect ( permissionGuard ) . toBeTruthy ( ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : [ 's' , 's' , "s" ] , redirectTo : ( failedPermission , route , state ) => { return failedPermission ; } } , path : 's' } } ; ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { only : [ "s" ] , redirectTo : ( failedPermission , route , state ) => { return failedPermission ; } } , path : 's' } } ; ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : 's' , only : [ "s" ] , redirectTo : ( failedPermission , route , state ) => { return failedPermission ; } } , path : 's' } } ; ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { function loginRedirect ( activateRouteSnapshot , routerStateSnapshot ) { return 's' ; } route = { data : { permissions : { only : [ "s" , "s" ] , redirectTo : loginRedirect } , path : 's' } } ; ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { function loginRedirect ( permissonName , activateRouteSnapshot , routerStateSnapshot ) { localStorage . setItem ( 's' , routerStateSnapshot . url ) ; return 's' ; } route = { data : { permissions : { except : [ 's' ] , only : [ "s" , "s" ] , redirectTo : loginRedirect } , path : 's' } } ; ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { function loginRedirect ( activateRouteSnapshot , routerStateSnapshot ) { return 's' ; } route = { data : { permissions : { except : [ 's' , 's' ] , redirectTo : loginRedirect } , path : 's' } } ; ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) } ) ) ; } ) ; describe ( 's' , ( ) => { let permissionGuard ; let fakeRouter ; let route ; let testRouter ; let fakeService ; let roleService ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { imports : [ NgxPermissionsModule . forRoot ( ) ] } ) ; } ) ; beforeEach ( inject ( [ NgxPermissionsService , NgxRolesService ] , ( service , rolesService ) => { fakeRouter = < any > { navigate : ( ) => { } } ; service . addPermission ( 's' ) ; service . addPermission ( 's' ) ; rolesService . addRole ( 's' , [ 's' , 's' ] ) ; roleService = rolesService ; fakeService = service ; spyOn ( fakeRouter , 's' ) ; permissionGuard = new NgxPermissionsGuard ( service , rolesService , fakeRouter as Router ) ; } ) ) ; it ( 's' , ( ) => { expect ( permissionGuard ) . toBeTruthy ( ) ; } ) ; xit ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : [ 's' ] , redirectTo : { AWESOME : 's' , SOMETHING : 's' , canRun : 's' , default : 's' } } , path : 's' } } ; ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { only : [ "s" ] , redirectTo : ( failedPermission , route , state ) => { return failedPermission ; } } , path : 's' } } ; ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { roleService . addRole ( 's' , [ 's' , 's' ] ) ; route = { data : { permissions : { only : [ "s" ] , redirectTo : ( failedPermission , route , state ) => { return failedPermission ; } } , path : 's' } } ; ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { roleService . addRole ( 's' , [ 's' , 's' ] ) ; route = { data : { permissions : { only : [ "s" , "s" ] , redirectTo : ( failedPermission , route , state ) => { return failedPermission ; } } , path : 's' } } ; ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { route = { data : { permissions : { except : 's' , only : [ "s" ] , redirectTo : ( failedPermission , route , state ) => { return failedPermission ; } } , path : 's' } } ; ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { function loginRedirect ( activateRouteSnapshot , routerStateSnapshot ) { return 's' ; } route = { data : { permissions : { only : [ "s" , "s" ] , redirectTo : loginRedirect } , path : 's' } } ; ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { function loginRedirect ( permissonName , activateRouteSnapshot , routerStateSnapshot ) { localStorage . setItem ( 's' , routerStateSnapshot . url ) ; return 's' ; } route = { data : { permissions : { except : [ 's' ] , only : [ "s" , "s" ] , redirectTo : loginRedirect } , path : 's' } } ; ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; expect ( fakeRouter . navigate ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { function loginRedirect ( activateRouteSnapshot , routerStateSnapshot ) { return 's' ; } route = { data : { permissions : { except : [ 's' , 's' ] , redirectTo : loginRedirect } , path : 's' } } ; ( permissionGuard . canActivate ( route , { } as RouterStateSnapshot ) as any ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) } ) ) ; } ) ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsGuard$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsService$ O $NgxRolesServicegxPermissionsGuard$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsService$ O $NgxRolesServicegxPermissionsGuard$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsService$ O $NgxRolesServicegxPermissionsGuard$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ActivatedRouteSnapshot$ O $RouterStateSnapshot$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsService$ O $NgxRolesService$ O $Router$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ActivatedRouteSnapshot$ O $RouterStateSnapshot$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ActivatedRouteSnapshot$ O $RouterStateSnapshot$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ActivatedRouteSnapshot$ O $RouterStateSnapshot$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ActivatedRouteSnapshot$ O $RouterStateSnapshot$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ActivatedRouteSnapshot$ O $RouterStateSnapshot$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ActivatedRouteSnapshot$ O $RouterStateSnapshot$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsGuard$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ActivatedRouteSnapshot$ O $RouterStateSnapshot$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsService$ O $NgxRolesService$ O $RoutergxPermissionsGuard$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsService$ O $NgxRolesService$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsGuard$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsService$ O $NgxRolesServicegxPermissionsGuard$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsService$ O $NgxRolesServiceany$ O $any$ O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O $any$ O $anygxPermissionsGuard$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsService$ O $NgxRolesServicectivatedRouteSnapshot$ O $RouterStateSnapshot$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ActivatedRouteSnapshot$ O $RouterStateSnapshot$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ActivatedRouteSnapshot$ O $RouterStateSnapshot$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsGuard$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsService$ O $NgxRolesServicectivatedRouteSnapshot$ O $RouterStateSnapshot$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ActivatedRouteSnapshot$ O $RouterStateSnapshot$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ActivatedRouteSnapshot$ O $RouterStateSnapshot$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { fakeAsync , inject , TestBed } from 's' ; import { NgxPermissionsModule } from 's' ; import { NgxPermissionsConfigurationService , USE_CONFIGURATION_STORE } from 's' ; import { NgxPermissionsConfigurationStore } from 's' ; const StrategiesFunction = { FUNCTION : ( ) => { } , } describe ( 's' , ( ) => { let localService ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { imports : [ NgxPermissionsModule . forRoot ( ) ] } ) ; } ) ; beforeEach ( inject ( [ NgxPermissionsConfigurationService ] , ( service ) => { localService = service ; } ) ) ; it ( 's' , ( ) => { expect ( localService ) . toBeTruthy ( ) ; } ) ; it ( 's' , ( ) => { expect ( localService . getAllStrategies ( ) [ 's' ] ) . toBeFalsy ( ) ; localService . addPermissionStrategy ( 's' , ( ) => { } ) ; expect ( localService . getAllStrategies ( ) [ 's' ] ) . toBeTruthy ( ) ; } ) ; it ( 's' , ( ) => { expect ( localService . getStrategy ( 's' ) ) . toBeFalsy ( ) ; localService . addPermissionStrategy ( 's' , ( ) => { } ) ; expect ( localService . getStrategy ( 's' ) ) . toBeTruthy ( ) ; } ) ; it ( 's' , ( ) => { expect ( function ( ) { localService . setDefaultOnAuthorizedStrategy ( 's' ) } ) . toThrow ( ) ; } ) ; it ( 's' , ( ) => { expect ( function ( ) { localService . setDefaultOnUnauthorizedStrategy ( 's' ) } ) . toThrow ( ) ; } ) ; it ( 's' , ( ) => { localService . addPermissionStrategy ( 's' , ( ) => { } ) ; localService . setDefaultOnUnauthorizedStrategy ( 's' ) ; expect ( localService . onUnAuthorisedDefaultStrategy ) . toBeTruthy ( ) ; expect ( localService . onUnAuthorisedDefaultStrategy ) . toEqual ( 's' ) ; } ) ; it ( 's' , ( ) => { localService . addPermissionStrategy ( 's' , ( ) => { } ) ; localService . setDefaultOnAuthorizedStrategy ( 's' ) ; expect ( localService . onAuthorisedDefaultStrategy ) . toBeTruthy ( ) ; expect ( localService . onAuthorisedDefaultStrategy ) . toEqual ( 's' ) ; } ) ; } ) ; describe ( 's' , ( ) => { let localService ; let localStore ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { imports : [ NgxPermissionsModule . forRoot ( { configurationIsolate : true } ) ] } ) } ) ; beforeEach ( inject ( [ NgxPermissionsConfigurationService , NgxPermissionsConfigurationStore ] , ( service , store ) => { localService = service ; localStore = store ; localStore . onAuthorisedDefaultStrategy = 's' ; localStore . onUnAuthorisedDefaultStrategy = 's' ; } ) ) ; it ( 's' , ( ) => { expect ( localService ) . toBeTruthy ( ) ; } ) ; it ( 's' , ( ) => { expect ( localService . onAuthorisedDefaultStrategy ) . toBeFalsy ( ) ; } ) ; it ( 's' , ( ) => { expect ( localService . onAuthorisedDefaultStrategy ) . toBeFalsy ( ) ; } ) } ) ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsConfigurationService$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsConfigurationServicegxPermissionsConfigurationService$ O O $NgxPermissionsConfigurationStore$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsConfigurationService$ O $NgxPermissionsConfigurationStore$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { NgxPermissionsService } from 's' ; import { fakeAsync , inject , TestBed } from 's' ; import { NgxPermissionsModule } from 's' ; import { NgxPermission } from 's' ; enum PermissionsNamesEnum { ADMIN = < any > 's' , GUEST = < any > 's' } describe ( 's' , ( ) => { let localService ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { imports : [ NgxPermissionsModule . forRoot ( ) ] } ) ; } ) ; beforeEach ( inject ( [ NgxPermissionsService ] , ( service ) => { localService = service ; } ) ) ; it ( 's' , ( ) => { expect ( localService ) . toBeTruthy ( ) ; } ) ; it ( 's' , ( ) => { expect ( localService . getPermission ( < any > PermissionsNamesEnum . ADMIN ) ) . toBeFalsy ( ) ; localService . addPermission ( < any > PermissionsNamesEnum . ADMIN ) ; expect ( localService . getPermission ( < any > PermissionsNamesEnum . ADMIN ) ) . toBeTruthy ( ) ; } ) it ( 's' , ( ) => { expect ( localService . getPermissions ( ) [ PermissionsNamesEnum . ADMIN ] ) . toBeFalsy ( ) ; localService . addPermission ( < any > PermissionsNamesEnum . ADMIN , ) ; expect ( localService . getPermissions ( ) [ PermissionsNamesEnum . ADMIN ] ) . toBeTruthy ( ) ; localService . removePermission ( < any > PermissionsNamesEnum . ADMIN ) ; expect ( localService . getPermissions ( ) [ PermissionsNamesEnum . ADMIN ] ) . toBeFalsy ( ) ; } ) ; it ( 's' , ( ) => { expect ( Object . keys ( localService . getPermissions ( ) ) . length ) . toEqual ( 0 ) ; localService . addPermission ( < any > PermissionsNamesEnum . ADMIN , ) ; localService . addPermission ( < any > PermissionsNamesEnum . GUEST , ) ; expect ( Object . keys ( localService . getPermissions ( ) ) . length ) . toEqual ( 0 ) ; localService . flushPermissions ( ) ; expect ( Object . keys ( localService . getPermissions ( ) ) . length ) . toEqual ( 0 ) ; } ) ; it ( 's' , ( ) => { expect ( Object . keys ( localService . getPermissions ( ) ) . length ) . toEqual ( 0 ) ; localService . addPermission ( [ < any > PermissionsNamesEnum . ADMIN , PermissionsNamesEnum . GUEST ] ) ; expect ( Object . keys ( localService . getPermissions ( ) ) . length ) . toEqual ( 0 ) ; expect ( localService . getPermissions ( ) ) . toEqual ( { ADMIN : { name : "s" } , GUEST : { name : "s" } } ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { expect ( Object . keys ( localService . getPermissions ( ) ) . length ) . toEqual ( 0 ) ; localService . addPermission ( [ < any > PermissionsNamesEnum . ADMIN , PermissionsNamesEnum . GUEST ] ) ; expect ( Object . keys ( localService . getPermissions ( ) ) . length ) . toEqual ( 0 ) ; localService . hasPermission ( 's' ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) ; localService . hasPermission ( 's' ) . then ( data => { expect ( data ) . toEqual ( false ) ; } ) ; localService . hasPermission ( [ 's' ] ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) ; localService . hasPermission ( [ 's' , 's' ] ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { expect ( Object . keys ( localService . getPermissions ( ) ) . length ) . toEqual ( 0 ) ; localService . addPermission ( < any > PermissionsNamesEnum . ADMIN , ( ) => { return true } ) ; expect ( Object . keys ( localService . getPermissions ( ) ) . length ) . toEqual ( 0 ) ; localService . hasPermission ( 's' ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) ; localService . addPermission ( < any > PermissionsNamesEnum . GUEST , ( ) => { return false } ) ; expect ( Object . keys ( localService . getPermissions ( ) ) . length ) . toEqual ( 0 ) ; localService . hasPermission ( 's' ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; } ) ; localService . addPermission ( < any > 's' , ( ) => { return Promise . resolve ( true ) } ) ; expect ( Object . keys ( localService . getPermissions ( ) ) . length ) . toEqual ( 0 ) ; localService . hasPermission ( 's' ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) ; localService . addPermission ( < any > 's' , ( ) => { return Promise . resolve ( false ) } ) ; expect ( Object . keys ( localService . getPermissions ( ) ) . length ) . toEqual ( 0 ) ; localService . hasPermission ( 's' ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; } ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { expect ( Object . keys ( localService . getPermissions ( ) ) . length ) . toEqual ( 0 ) ; localService . addPermission ( < any > [ PermissionsNamesEnum . ADMIN ] , ( ) => { return true } ) ; expect ( Object . keys ( localService . getPermissions ( ) ) . length ) . toEqual ( 0 ) ; localService . hasPermission ( 's' ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) ; localService . addPermission ( < any > [ PermissionsNamesEnum . GUEST ] , ( ) => { return false } ) ; expect ( Object . keys ( localService . getPermissions ( ) ) . length ) . toEqual ( 0 ) ; localService . hasPermission ( 's' ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; } ) ; localService . addPermission ( < any > [ 's' ] , ( ) => { return Promise . resolve ( true ) } ) ; expect ( Object . keys ( localService . getPermissions ( ) ) . length ) . toEqual ( 0 ) ; localService . hasPermission ( 's' ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) ; localService . addPermission ( < any > [ 's' ] , ( ) => { return Promise . resolve ( false ) } ) ; expect ( Object . keys ( localService . getPermissions ( ) ) . length ) . toEqual ( 0 ) ; localService . hasPermission ( [ 's' ] ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; } ) ; localService . addPermission ( < any > [ 's' ] , ( name , store ) => { return Promise . resolve ( false ) } ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { localService . addPermission ( < any > [ 's' ] , ( n , store ) => { expect ( n ) . toEqual ( 's' ) ; expect ( n ) . toEqual ( 's' ) ; expect ( store [ 's' ] ) . toBeTruthy ( ) ; return Promise . resolve ( n ) } ) ; expect ( Object . keys ( localService . getPermissions ( ) ) . length ) . toEqual ( 0 ) ; localService . hasPermission ( [ 's' ] ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { localService . addPermission ( < any > [ 's' ] , ( n , store ) => { expect ( n ) . toEqual ( 's' ) ; expect ( n ) . toEqual ( 's' ) ; expect ( store [ 's' ] ) . toBeTruthy ( ) ; return Promise . resolve ( true ) } ) ; expect ( Object . keys ( localService . getPermissions ( ) ) . length ) . toEqual ( 0 ) ; localService . hasPermission ( 's' ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { localService . hasPermission ( 's' ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) ; } ) ) it ( 's' , fakeAsync ( ( ) => { localService . hasPermission ( [ ] ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) ; } ) ) } ) ; describe ( 's' , ( ) => { it ( 's' , ( ) => { let permission = new NgxPermission ( 's' , ( ) => true ) ; expect ( permission . name ) . toBe ( 's' ) ; expect ( ( permission . validationFunction as Function ) ( ) ) . toBe ( true ) ; } ) } ) ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsService$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsService
import { NgxRolesService } from 's' ; import { fakeAsync , inject , TestBed } from 's' ; import { NgxRolesStore } from 's' ; import { NgxPermissionsModule } from 's' ; import { NgxRole } from 's' ; import { NgxPermissionsService } from 's' ; enum RoleNamesEnum { ADMIN = < any > 's' , GUEST = < any > 's' } describe ( 's' , ( ) => { let localService ; let permissionsService ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { imports : [ NgxPermissionsModule . forRoot ( ) ] } ) ; } ) ; beforeEach ( inject ( [ NgxRolesService , NgxPermissionsService ] , ( service , ps ) => { localService = service ; permissionsService = ps ; } ) ) ; it ( 's' , ( ) => { expect ( localService ) . toBeTruthy ( ) ; } ) ; it ( 's' , ( ) => { expect ( localService . getRoles ( ) [ RoleNamesEnum . ADMIN ] ) . toBeFalsy ( ) ; localService . addRole ( < any > RoleNamesEnum . ADMIN , [ 's' , 's' ] ) ; expect ( localService . getRoles ( ) [ RoleNamesEnum . ADMIN ] ) . toBeTruthy ( ) ; expect ( localService . getRoles ( ) ) . toEqual ( { ADMIN : { name : 's' , validationFunction : [ 's' , 's' ] } } ) } ) ; it ( 's' , ( ) => { expect ( localService . getRoles ( ) [ RoleNamesEnum . ADMIN ] ) . toBeFalsy ( ) ; localService . addRole ( < any > RoleNamesEnum . ADMIN , [ 's' , 's' ] ) ; expect ( localService . getRoles ( ) [ RoleNamesEnum . ADMIN ] ) . toBeTruthy ( ) ; localService . removeRole ( < any > RoleNamesEnum . ADMIN ) ; expect ( localService . getRoles ( ) [ RoleNamesEnum . ADMIN ] ) . toBeFalsy ( ) ; } ) ; it ( 's' , ( ) => { expect ( Object . keys ( localService . getRoles ( ) ) . length ) . toEqual ( 0 ) ; localService . addRole ( < any > RoleNamesEnum . ADMIN , [ 's' , 's' ] ) ; localService . addRole ( < any > RoleNamesEnum . GUEST , [ 's' , 's' ] ) ; expect ( Object . keys ( localService . getRoles ( ) ) . length ) . toEqual ( 0 ) ; localService . flushRoles ( ) ; expect ( Object . keys ( localService . getRoles ( ) ) . length ) . toEqual ( 0 ) ; } ) ; it ( 's' , ( ) => { expect ( Object . keys ( localService . getRoles ( ) ) . length ) . toEqual ( 0 ) ; localService . addRoles ( { ADMIN : [ 's' ] , GUEST : [ "s" ] } ) ; expect ( Object . keys ( localService . getRoles ( ) ) . length ) . toEqual ( 0 ) ; expect ( localService . getRoles ( ) ) . toEqual ( { ADMIN : { name : "s" , validationFunction : [ 's' ] } , GUEST : { name : "s" , validationFunction : [ 's' ] } } ) } ) ; it ( 's' , fakeAsync ( ( ) => { expect ( Object . keys ( localService . getRoles ( ) ) . length ) . toEqual ( 0 ) ; localService . addRoles ( { ADMIN : [ 's' ] , GUEST : [ "s" ] } ) ; expect ( Object . keys ( localService . getRoles ( ) ) . length ) . toEqual ( 0 ) ; localService . hasOnlyRoles ( 's' ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; } ) ; permissionsService . addPermission ( 's' ) ; localService . hasOnlyRoles ( 's' ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) ; localService . hasOnlyRoles ( 's' ) . then ( data => { expect ( data ) . toEqual ( false ) ; } ) ; localService . hasOnlyRoles ( [ 's' ] ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) ; localService . hasOnlyRoles ( [ 's' , 's' ] ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { expect ( Object . keys ( localService . getRoles ( ) ) . length ) . toEqual ( 0 ) ; permissionsService . addPermission ( [ 's' , 's' ] ) ; localService . addRoles ( { ADMIN : [ 's' ] , GUEST : [ "s" ] } ) ; expect ( Object . keys ( localService . getRoles ( ) ) . length ) . toEqual ( 0 ) ; localService . hasOnlyRoles ( 's' ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) ; localService . hasOnlyRoles ( [ 's' ] ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) ; localService . hasOnlyRoles ( [ 's' , 's' ] ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) ; localService . hasOnlyRoles ( 's' ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; } ) ; localService . hasOnlyRoles ( [ 's' ] ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; } ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { localService . addRole ( 's' , ( ) => true ) ; let role = localService . getRole ( 's' ) ; expect ( role . name ) . toBe ( 's' ) ; expect ( ( role . validationFunction as Function ) ( ) ) . toEqual ( true ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { localService . hasOnlyRoles ( 's' ) . then ( ( data ) => { expect ( data ) . toEqual ( true ) ; } ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { localService . hasOnlyRoles ( 's' ) . then ( ( data ) => { expect ( data ) . toEqual ( false ) ; } ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { localService . addRole ( 's' , [ 's' ] ) ; localService . hasOnlyRoles ( 's' ) . then ( ( data ) => { expect ( data ) . toBe ( false ) ; } ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { localService . addRole ( 's' , [ 's' ] ) ; localService . hasOnlyRoles ( 's' ) . then ( ( data ) => { expect ( data ) . toBe ( false ) ; } ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { localService . addRole ( 's' , [ 's' ] ) ; localService . hasOnlyRoles ( [ ] ) . then ( ( data ) => { expect ( data ) . toBe ( true ) ; } ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { permissionsService . addPermission ( [ 's' , 's' ] ) ; localService . addRole ( 's' , [ 's' , 's' ] ) ; localService . hasOnlyRoles ( 's' ) . then ( ( data ) => { expect ( data ) . toBe ( true ) ; } ) } ) ) ; it ( 's' , fakeAsync ( ( ) => { permissionsService . addPermission ( [ 's' ] ) ; localService . addRole ( 's' , [ 's' , 's' ] ) ; localService . hasOnlyRoles ( 's' ) . then ( ( data ) => { expect ( data ) . toBe ( false ) ; } ) } ) ) ; xit ( 's' , fakeAsync ( ( ) => { localService . addRole ( 's' , ( ) => { return [ 's' ] } ) ; localService . hasOnlyRoles ( [ 's' ] ) . then ( ( data ) => { expect ( data ) . toBe ( true ) ; } ) ; } ) ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , ( ) => { let roleModel = new NgxRole ( 's' , ( ) => true ) ; expect ( roleModel . name ) . toBe ( 's' ) ; expect ( ( roleModel . validationFunction as Function ) ( ) ) . toBe ( true ) ; } ) } ) ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxRolesService$ O O $NgxPermissionsService$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxRolesService$ O $NgxPermissionsService
import { Component } from 's' ; import { fakeAsync , TestBed , tick } from 's' ; import { NgxPermissionsAllowStubDirective } from 's' ; describe ( 's' , ( ) => { @ Component ( { selector : 's' , template : `template` } ) class TestComp { data : any ; } let fixture ; let comp ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { declarations : [ TestComp , NgxPermissionsAllowStubDirective ] } ) ; fixture = TestBed . createComponent ( TestComp ) ; comp = fixture . componentInstance ; } ) ; it ( 's' , fakeAsync ( ( ) => { detectChanges ( fixture ) ; let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toBeTruthy ( ) ; expect ( content . innerHTML ) . toEqual ( 's' ) ; } ) ) ; } ) ; describe ( 's' , ( ) => { @ Component ( { selector : 's' , template : `template` } ) class TestComp { data : any ; } let fixture ; let comp ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { declarations : [ TestComp , NgxPermissionsAllowStubDirective ] } ) ; fixture = TestBed . createComponent ( TestComp ) ; comp = fixture . componentInstance ; } ) ; it ( 's' , fakeAsync ( ( ) => { detectChanges ( fixture ) ; let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toBeTruthy ( ) ; expect ( content . innerHTML ) . toEqual ( 's' ) ; } ) ) ; } ) ; describe ( 's' , ( ) => { @ Component ( { selector : 's' , template : `template` } ) class TestComp { data : any ; } let fixture ; let comp ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { declarations : [ TestComp , NgxPermissionsAllowStubDirective ] } ) ; fixture = TestBed . createComponent ( TestComp ) ; comp = fixture . componentInstance ; } ) ; it ( 's' , fakeAsync ( ( ) => { detectChanges ( fixture ) ; let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toBeTruthy ( ) ; expect ( content . innerHTML ) . toEqual ( 's' ) ; } ) ) ; } ) ; describe ( 's' , ( ) => { @ Component ( { selector : 's' , template : `template` } ) class TestComp { data : any ; } let fixture ; let comp ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { declarations : [ TestComp , NgxPermissionsAllowStubDirective ] } ) ; fixture = TestBed . createComponent ( TestComp ) ; comp = fixture . componentInstance ; } ) ; it ( 's' , fakeAsync ( ( ) => { detectChanges ( fixture ) ; let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toBeTruthy ( ) ; expect ( content . innerHTML ) . toEqual ( 's' ) ; } ) ) ; } ) ; describe ( 's' , ( ) => { @ Component ( { selector : 's' , template : `template` } ) class TestComp { data : any ; } let fixture ; let comp ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { declarations : [ TestComp , NgxPermissionsAllowStubDirective ] } ) ; fixture = TestBed . createComponent ( TestComp ) ; comp = fixture . componentInstance ; } ) ; it ( 's' , fakeAsync ( ( ) => { detectChanges ( fixture ) ; let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toBeTruthy ( ) ; expect ( content . innerHTML ) . toEqual ( 's' ) ; } ) ) ; } ) ; function detectChanges ( fixture ) { tick ( ) ; fixture . detectChanges ( ) ; }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { Component } from 's' ; import { fakeAsync , TestBed , tick } from 's' ; import { NgxPermissionsRestrictStubDirective } from 's' ; import { NgxPermissionsAllowStubDirective } from 's' ; describe ( 's' , ( ) => { @ Component ( { selector : 's' , template : `template` } ) class TestComp { data : any ; } let fixture ; let comp ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { declarations : [ TestComp , NgxPermissionsRestrictStubDirective ] } ) ; fixture = TestBed . createComponent ( TestComp ) ; comp = fixture . componentInstance ; } ) ; it ( 's' , fakeAsync ( ( ) => { detectChanges ( fixture ) ; let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toEqual ( null ) ; } ) ) ; } ) ; describe ( 's' , ( ) => { @ Component ( { selector : 's' , template : `template` } ) class TestComp { data : any ; } let fixture ; let comp ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { declarations : [ TestComp , NgxPermissionsRestrictStubDirective ] } ) ; fixture = TestBed . createComponent ( TestComp ) ; comp = fixture . componentInstance ; } ) ; it ( 's' , fakeAsync ( ( ) => { detectChanges ( fixture ) ; let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toBeTruthy ( ) ; expect ( content . innerHTML ) . toEqual ( 's' ) ; } ) ) ; } ) ; describe ( 's' , ( ) => { @ Component ( { selector : 's' , template : `template` } ) class TestComp { data : any ; } let fixture ; let comp ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { declarations : [ TestComp , NgxPermissionsRestrictStubDirective ] } ) ; fixture = TestBed . createComponent ( TestComp ) ; comp = fixture . componentInstance ; } ) ; it ( 's' , fakeAsync ( ( ) => { detectChanges ( fixture ) ; let content = fixture . debugElement . nativeElement . querySelector ( 's' ) ; expect ( content ) . toBeTruthy ( ) ; expect ( content . innerHTML ) . toEqual ( 's' ) ; } ) ) ; } ) ; function detectChanges ( fixture ) { tick ( ) ; fixture . detectChanges ( ) ; }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
export * from 's' ;	O O O O O
import 's' ; import 's' ; import 's' ; import { getTestBed } from 's' ; import { BrowserDynamicTestingModule , platformBrowserDynamicTesting } from 's' ; declare const require ; getTestBed ( ) . initTestEnvironment ( BrowserDynamicTestingModule , platformBrowserDynamicTesting ( ) ) ; const context = require . context ( 's' , true , "s" ) ; context . keys ( ) . map ( context ) ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
'js' const { SpecReporter } = require ( 's' ) ; exports . config = { allScriptsTimeout : 0 , specs : [ 's' ] , capabilities : { 's' : 's' } , directConnect : true , baseUrl : 's' , framework : 's' , jasmineNodeOpts : { showColors : true , defaultTimeoutInterval : 0 , print : function ( ) { } } , onPrepare ( ) { require ( 's' ) . register ( { project : 's' } ) ; jasmine . getEnv ( ) . addReporter ( new SpecReporter ( { spec : { displayStacktrace : true } } ) ) ; } } ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { Component , OnInit } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' , styleUrls : [ 's' ] } ) export class HomeComponent implements OnInit { constructor ( ) { } ngOnInit ( ) { } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { ActivatedRouteSnapshot , RouterModule , RouterStateSnapshot , Routes } from 's' ; import { NgModule } from 's' ; import { HomeComponent } from 's' ; import { NgxPermissionsGuard } from 's' ; export function testPermissions ( route , state ) { if ( route . params [ 's' ] === 0 ) { return [ 's' , "s" ] } else { return 's' } } const appRoutes = [ { path : 's' , component : HomeComponent , canActivate : [ NgxPermissionsGuard ] , data : { permissions : { only : 's' , redirectTo : 's' } } } , { path : 's' , component : HomeComponent , canActivate : [ NgxPermissionsGuard ] , data : { permissions : { except : 's' , redirectTo : 's' } } } , { path : 's' , component : HomeComponent , canActivate : [ NgxPermissionsGuard ] , data : { permissions : { only : testPermissions } } } , { path : 's' , component : HomeComponent , canActivate : [ NgxPermissionsGuard ] , data : { permissions : { except : 's' , redirectTo : 's' } } } , { path : 's' , component : HomeComponent , canActivate : [ NgxPermissionsGuard ] , data : { permissions : { only : 's' , redirectTo : 's' } } } , { path : 's' , component : HomeComponent , canActivate : [ NgxPermissionsGuard ] , data : { permissions : { except : 's' } } } , { path : 's' , canActivate : [ ] , children : [ { path : 's' , redirectTo : 's' , pathMatch : 's' } , { path : 's' , component : HomeComponent , canActivate : [ NgxPermissionsGuard ] , data : { permissions : { only : 's' , redirectTo : 's' } } , children : [ { path : 's' , redirectTo : 's' , pathMatch : 's' } , { path : 's' , component : HomeComponent } , { path : 's' , component : HomeComponent } , ] } , ] } , { path : 's' , component : HomeComponent } , ] ; @ NgModule ( { imports : [ RouterModule . forRoot ( appRoutes ) ] , exports : [ RouterModule ] , providers : [ ] } ) export class AppRoutingModule { }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ActivatedRouteSnapshot$ O $RouterStateSnapshot$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O $Routes
import { Component , OnInit } from 's' ; import { NgxPermissionsService } from 's' ; import { NgxPermissionsConfigurationService } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' , styleUrls : [ 's' ] } ) export class AppComponent implements OnInit { title = 's' ; permission : string [ ] = [ 's' ] ; constructor ( private permissionsService ) { } ngOnInit ( ) { this . permissionsService . addPermission ( 's' , ( ) => { return new Promise < boolean > ( ( resolve , reject ) => { setTimeout ( ( ) => { resolve ( true ) ; } , 0 ) ; } ) } ) } public unAuthorized ( ) { console . log ( 's' ) ; } public authorized ( ) { console . log ( 's' ) } public addPermission ( ) { this . permissionsService . addPermission ( 's' ) ; } changeToAdmin ( ) { this . permission = [ 's' ] ; console . log ( this . permission ) ; } changeToAnotherPermission ( ) { this . permission = [ 's' ] ; } changeToGuest ( ) { this . permission = [ 's' ] ; console . log ( this . permission ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsService$ O O O $void$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { TestBed , async } from 's' ; import { AppComponent } from 's' ; xdescribe ( 's' , ( ) => { beforeEach ( async ( ( ) => { TestBed . configureTestingModule ( { declarations : [ AppComponent ] , } ) . compileComponents ( ) ; } ) ) ; it ( 's' , async ( ( ) => { const fixture = TestBed . createComponent ( AppComponent ) ; const app = fixture . debugElement . componentInstance ; expect ( app ) . toBeTruthy ( ) ; } ) ) ; it ( `template` , async ( ( ) => { const fixture = TestBed . createComponent ( AppComponent ) ; const app = fixture . debugElement . componentInstance ; expect ( app . title ) . toEqual ( 's' ) ; } ) ) ; it ( 's' , async ( ( ) => { const fixture = TestBed . createComponent ( AppComponent ) ; fixture . detectChanges ( ) ; const compiled = fixture . debugElement . nativeElement ; expect ( compiled . querySelector ( 's' ) . textContent ) . toContain ( 's' ) ; } ) ) ; } ) ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { Component , OnInit } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' , styleUrls : [ 's' ] } ) export class InitialLoadComponent implements OnInit { constructor ( ) { } ngOnInit ( ) { console . log ( 's' ) } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { BrowserModule } from 's' ; import { NgModule } from 's' ; import { AppComponent } from 's' ; import { NgxPermissionsModule } from 's' ; import { AppRoutingModule } from 's' ; import { HomeComponent } from 's' ; import { InitialLoadComponent } from 's' ; @ NgModule ( { declarations : [ AppComponent , HomeComponent , InitialLoadComponent ] , imports : [ BrowserModule , NgxPermissionsModule . forRoot ( ) , AppRoutingModule ] , providers : [ ] , bootstrap : [ AppComponent ] } ) export class AppModule { }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { async , ComponentFixture , TestBed } from 's' ; import { HomeComponent } from 's' ; xdescribe ( 's' , ( ) => { let component ; let fixture < HomeComponent > ; beforeEach ( async ( ( ) => { TestBed . configureTestingModule ( { declarations : [ HomeComponent ] } ) . compileComponents ( ) ; } ) ) ; beforeEach ( ( ) => { fixture = TestBed . createComponent ( HomeComponent ) ; component = fixture . componentInstance ; fixture . detectChanges ( ) ; } ) ; it ( 's' , ( ) => { expect ( component ) . toBeTruthy ( ) ; } ) ; } ) ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O $HomeComponent$ O O $ComponentFixture$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
'js' "s" ; exports . __esModule = true ; var 0 = require ( ) ; if ( viewEncapsulation ) { % > , ViewEncapsulation < % ; } % > % ; if ( changeDetection ) { % > , ChangeDetectionStrategy < % ; } % > ; from ; 's' ; if ( inlineTemplate ) { % > template ; "s" , % ; } else { % > templateUrl ; 's' , % ; } if ( inlineStyle ) { % > styles ; [ ] < % ; } else { % > styleUrls ; [ 's' ] < % ; } % > % ; if ( viewEncapsulation ) { % > , encapsulation ; ViewEncapsulation . < ; viewEncapsulation % > % ; } if ( changeDetection ) { % > , changeDetection ; ChangeDetectionStrategy . < ; changeDetection % > % ; } % > ; var 0 = ( function ( ) { function 0 ( ) { } return 0 ; } ( ) ) ; % > 0 . Component ; implements ; 0 . OnInit ; { constructor ( ) ; { } ngOnInit ( ) ; { } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
'js' "s" ; exports . __esModule = true ; var 0 = require ( "s" ) ; classifiedModuleName % > Component ; from ; 's' ; describe ( 's' , function ( ) { var component = % > Component ; var fixture = << , classifiedModuleName = % > Component > ; beforeEach ( 0 . async ( function ( ) { 0 . TestBed . configureTestingModule ( { declarations : [ , classifiedModuleName % > Component ] } ) . compileComponents ( ) ; } ) ) ; beforeEach ( function ( ) { fixture = 0 . TestBed . createComponent ( , classifiedModuleName % > Component ) ; component = fixture . componentInstance ; fixture . detectChanges ( ) ; } ) ; it ( 's' , function ( ) { expect ( component ) . toBeTruthy ( ) ; } ) ; } ) ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { async , ComponentFixture , TestBed } from 's' ; import { InitialLoadComponent } from 's' ; xdescribe ( 's' , ( ) => { let component ; let fixture < InitialLoadComponent > ; beforeEach ( async ( ( ) => { TestBed . configureTestingModule ( { declarations : [ InitialLoadComponent ] } ) . compileComponents ( ) ; } ) ) ; beforeEach ( ( ) => { fixture = TestBed . createComponent ( InitialLoadComponent ) ; component = fixture . componentInstance ; fixture . detectChanges ( ) ; } ) ; it ( 's' , ( ) => { expect ( component ) . toBeTruthy ( ) ; } ) ; } ) ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O $InitialLoadComponent$ O O $ComponentFixture$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { Component , OnInit } from 's' ; import { NgxPermissionsService } from 's' ; import { NgxRolesService } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' , styleUrls : [ 's' ] } ) export class IsolateComponent implements OnInit { constructor ( ) { } ngOnInit ( ) { } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { NgxPermissionsAllowStubDirective } from 's' import { async , ComponentFixture , TestBed } from 's' ; import { IsolateComponent } from 's' ; describe ( 's' , ( ) => { let component ; let fixture < IsolateComponent > ; beforeEach ( async ( ( ) => { TestBed . configureTestingModule ( { declarations : [ IsolateComponent , NgxPermissionsAllowStubDirective ] , imports : [ ] } ) . compileComponents ( ) ; } ) ) ; beforeEach ( ( ) => { fixture = TestBed . createComponent ( IsolateComponent ) ; component = fixture . componentInstance ; fixture . detectChanges ( ) ; } ) ; it ( 's' , ( ) => { expect ( component ) . toBeTruthy ( ) ; } ) ; } ) ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $IsolateComponent$ O O $ComponentFixture$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { RouterModule , Routes } from 's' ; import { NgModule } from 's' ; import { IsolateComponent } from 's' ; import { NgxPermissionsGuard } from 's' ; const appRoutes = [ { path : 's' , component : IsolateComponent , canActivateChild : [ NgxPermissionsGuard ] , children : [ { path : 's' , component : IsolateComponent , data : { permissions : { except : 's' } } } , { path : 's' , component : IsolateComponent , data : { permissions : { only : 's' } } } , { path : 's' , component : IsolateComponent , data : { permissions : { except : 's' } } } , { path : 's' , component : IsolateComponent , data : { permissions : { only : 's' } } } ] } , ] ; @ NgModule ( { imports : [ RouterModule . forChild ( appRoutes ) , ] , exports : [ RouterModule ] , providers : [ ] } ) export class LazyIsolateRoutingModule { }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $Routes$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { NgModule } from 's' ; import { CommonModule } from 's' ; import { IsolateComponent } from 's' ; import { NgxPermissionsModule } from 's' ; import { LazyIsolateRoutingModule } from 's' ; @ NgModule ( { imports : [ CommonModule , LazyIsolateRoutingModule , NgxPermissionsModule . forChild ( { permissionsIsolate : true , rolesIsolate : true } ) ] , declarations : [ IsolateComponent ] } ) export class LazyIsolateModule { }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { Component , OnInit } from 's' ; import { NgxPermissionsConfigurationService } from 's' @ Component ( { selector : 's' , templateUrl : 's' , styleUrls : [ 's' ] } ) export class LazyComponentComponent implements OnInit { constructor ( private ngxconfService ) { } ngOnInit ( ) { console . log ( this . ngxconfService . onUnAuthorisedDefaultStrategy ) ; console . log ( this . ngxconfService . getAllStrategies ( ) ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxPermissionsConfigurationService$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { async , ComponentFixture , TestBed } from 's' ; import { LazyComponentComponent } from 's' ; xdescribe ( 's' , ( ) => { let component ; let fixture < LazyComponentComponent > ; beforeEach ( async ( ( ) => { TestBed . configureTestingModule ( { declarations : [ LazyComponentComponent ] } ) . compileComponents ( ) ; } ) ) ; beforeEach ( ( ) => { fixture = TestBed . createComponent ( LazyComponentComponent ) ; component = fixture . componentInstance ; fixture . detectChanges ( ) ; } ) ; it ( 's' , ( ) => { expect ( component ) . toBeTruthy ( ) ; } ) ; } ) ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O $LazyComponentComponent$ O O $ComponentFixture$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { RouterModule , Routes } from 's' ; import { NgModule } from 's' ; import { NgxPermissionsGuard } from 's' ; import { LazyComponentComponent } from 's' ; import { NgxPermissionsModule } from 's' ; const appRoutes = [ { path : 's' , component : LazyComponentComponent , } , { path : 's' , component : LazyComponentComponent , canActivate : [ NgxPermissionsGuard ] , data : { permissions : { except : 's' } } } , { path : 's' , component : LazyComponentComponent , canActivate : [ NgxPermissionsGuard ] , data : { permissions : { only : 's' } } } , { path : 's' , component : LazyComponentComponent , canActivate : [ NgxPermissionsGuard ] , data : { permissions : { except : 's' } } } , { path : 's' , component : LazyComponentComponent , canActivate : [ NgxPermissionsGuard ] , data : { permissions : { only : 's' } } } ] ; @ NgModule ( { imports : [ RouterModule . forChild ( appRoutes ) , ] , exports : [ RouterModule ] , providers : [ ] } ) export class LazyRoutingModule { }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $Routes$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { NgModule } from 's' ; import { CommonModule } from 's' ; import { LazyRoutingModule } from 's' ; import { LazyComponentComponent } from 's' ; import { NgxPermissionsModule } from 's' ; @ NgModule ( { imports : [ CommonModule , LazyRoutingModule , NgxPermissionsModule . forChild ( ) ] , declarations : [ LazyComponentComponent ] } ) export class LazyModule { }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { Component , OnInit , 0 , TemplateRef } from 's' ; import { NgxRolesService , NgxPermissionsConfigurationService , NgxPermissionsService } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' , styleUrls : [ 's' ] } ) export class LazyRoleIsolateTestComponent implements OnInit { constructor ( private rolesService , private permissionsService , private renderer , private configService ) { } ngOnInit ( ) { this . configService . addPermissionStrategy ( 's' , ( tf ) => { this . renderer . setAttribute ( tf . elementRef . nativeElement . nextSibling , 's' , 's' ) ; } ) ; this . configService . setDefaultOnUnauthorizedStrategy ( 's' ) ; this . permissionsService . addPermission ( 's' ) this . rolesService . addRole ( 's' , [ 's' ] ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxRolesService$ O O $NgxPermissionsService$ O O $Renderer2$ O O $NgxPermissionsConfigurationService$ O O O O O O O O O O O O O O O O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { RouterModule , Routes } from 's' ; import { NgModule } from 's' ; import { NgxPermissionsGuard } from 's' ; import { LazyRoleIsolateTestComponent } from 's' ; const appRoutes = [ { path : 's' , component : LazyRoleIsolateTestComponent , } , { path : 's' , component : LazyRoleIsolateTestComponent , canActivate : [ NgxPermissionsGuard ] , data : { permissions : { except : 's' } } } , { path : 's' , component : LazyRoleIsolateTestComponent , canActivate : [ NgxPermissionsGuard ] , data : { permissions : { only : 's' } } } , { path : 's' , component : LazyRoleIsolateTestComponent , canActivate : [ NgxPermissionsGuard ] , data : { permissions : { except : 's' } } } , { path : 's' , component : LazyRoleIsolateTestComponent , canActivate : [ NgxPermissionsGuard ] , data : { permissions : { only : 's' } } } , { path : 's' , component : LazyRoleIsolateTestComponent , canActivate : [ NgxPermissionsGuard ] , data : { permissions : { only : 's' } } } , { path : 's' , component : LazyRoleIsolateTestComponent , canActivate : [ NgxPermissionsGuard ] , data : { permissions : { except : 's' } } } ] ; @ NgModule ( { imports : [ RouterModule . forChild ( appRoutes ) , ] , exports : [ RouterModule ] , providers : [ ] } ) export class LazyIsolateRolesRoutingModule { }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $Routes$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { async , ComponentFixture , TestBed } from 's' ; import { LazyRoleIsolateTestComponent } from 's' ; xdescribe ( 's' , ( ) => { let component ; let fixture < LazyRoleIsolateTestComponent > ; beforeEach ( async ( ( ) => { TestBed . configureTestingModule ( { declarations : [ LazyRoleIsolateTestComponent ] } ) . compileComponents ( ) ; } ) ) ; beforeEach ( ( ) => { fixture = TestBed . createComponent ( LazyRoleIsolateTestComponent ) ; component = fixture . componentInstance ; fixture . detectChanges ( ) ; } ) ; it ( 's' , ( ) => { expect ( component ) . toBeTruthy ( ) ; } ) ; } ) ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O $LazyRoleIsolateTestComponent$ O O $ComponentFixture$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { NgModule } from 's' ; import { CommonModule } from 's' ; import { NgxPermissionsModule } from 's' ; import { LazyIsolateRolesRoutingModule } from 's' ; import { LazyRoleIsolateTestComponent } from 's' ; @ NgModule ( { imports : [ CommonModule , LazyIsolateRolesRoutingModule , NgxPermissionsModule . forChild ( { permissionsIsolate : true , rolesIsolate : true , configurationIsolate : true } ) ] , declarations : [ LazyRoleIsolateTestComponent ] } ) export class LazyRoleIsolateModule { }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { Injectable } from 's' ; @ Injectable ( ) export class AsyncTestService { constructor ( ) { } public promiseResolveTrue ( ) { return Promise . resolve ( true ) ; } public promiseResolveFalse ( ) { return Promise . resolve ( false ) ; } public promiseReject ( ) { return < any > Promise . reject ( ( ) => { } ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { TestBed , inject } from 's' ; import { AsyncTestService } from 's' ; xdescribe ( 's' , ( ) => { beforeEach ( ( ) => { TestBed . configureTestingModule ( { providers : [ AsyncTestService ] } ) ; } ) ; it ( 's' , inject ( [ AsyncTestService ] , ( service ) => { expect ( service ) . toBeTruthy ( ) ; } ) ) ; } ) ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $AsyncTestService$ O O O O O O O O O O O O O O O O O O O
import { Component , OnInit } from 's' ; import { NgxRolesService } from 's' ; import { AsyncTestService } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' , styleUrls : [ 's' ] } ) export class LazyRolesAsyncTestComponent implements OnInit { constructor ( private rolesServices , private asyncTest ) { } ngOnInit ( ) { this . rolesServices . addRole ( "s" , ( ) => { return true ; } ) ; this . rolesServices . addRole ( "s" , ( ) => { return false ; } ) ; this . rolesServices . addRole ( "s" , ( ) => { return this . asyncTest . promiseResolveTrue ( ) ; } ) ; this . rolesServices . addRole ( "s" , ( ) => { return this . asyncTest . promiseResolveFalse ( ) ; } ) ; this . rolesServices . addRole ( "s" , ( ) => { return this . asyncTest . promiseReject ( ) ; } ) console . log ( this . rolesServices . getRoles ( ) ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NgxRolesService$ O O $AsyncTestService$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { RouterModule , Routes } from 's' ; import { NgModule } from 's' ; import { NgxPermissionsGuard } from 's' ; import { LazyRolesAsyncTestComponent } from 's' ; const appRoutes = [ { path : 's' , component : LazyRolesAsyncTestComponent , } , { path : 's' , component : LazyRolesAsyncTestComponent , canActivate : [ NgxPermissionsGuard ] , data : { permissions : { except : 's' } } } , { path : 's' , component : LazyRolesAsyncTestComponent , canActivate : [ NgxPermissionsGuard ] , data : { permissions : { only : 's' } } } , { path : 's' , component : LazyRolesAsyncTestComponent , canActivate : [ NgxPermissionsGuard ] , data : { permissions : { except : 's' } } } , { path : 's' , component : LazyRolesAsyncTestComponent , canActivate : [ NgxPermissionsGuard ] , data : { permissions : { only : 's' } } } , { path : 's' , component : LazyRolesAsyncTestComponent , canActivate : [ NgxPermissionsGuard ] , data : { permissions : { only : 's' } } } , { path : 's' , component : LazyRolesAsyncTestComponent , canActivate : [ NgxPermissionsGuard ] , data : { permissions : { except : 's' } } } ] ; @ NgModule ( { imports : [ RouterModule . forChild ( appRoutes ) , ] , exports : [ RouterModule ] , providers : [ ] } ) export class LazyIsolateAsyncRolesRoutingModule { }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $Routes$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { NgModule } from 's' ; import { CommonModule } from 's' ; import { LazyRolesAsyncTestComponent } from 's' ; import { NgxPermissionsModule } from 's' ; import { AsyncTestService } from 's' ; import { LazyIsolateAsyncRolesRoutingModule } from 's' ; @ NgModule ( { imports : [ CommonModule , NgxPermissionsModule . forChild ( { permissionsIsolate : true , rolesIsolate : true } ) , LazyIsolateAsyncRolesRoutingModule ] , providers : [ AsyncTestService ] , declarations : [ LazyRolesAsyncTestComponent ] } ) export class LazyRolesAsyncIsolateModule { }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { async , ComponentFixture , TestBed } from 's' ; import { LazyRolesAsyncTestComponent } from 's' ; xdescribe ( 's' , ( ) => { let component ; let fixture < LazyRolesAsyncTestComponent > ; beforeEach ( async ( ( ) => { TestBed . configureTestingModule ( { declarations : [ LazyRolesAsyncTestComponent ] } ) . compileComponents ( ) ; } ) ) ; beforeEach ( ( ) => { fixture = TestBed . createComponent ( LazyRolesAsyncTestComponent ) ; component = fixture . componentInstance ; fixture . detectChanges ( ) ; } ) ; it ( 's' , ( ) => { expect ( component ) . toBeTruthy ( ) ; } ) ; } ) ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O $LazyRolesAsyncTestComponent$ O O $ComponentFixture$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
'js' "s" ; exports . __esModule = true ; exports . environment = { production : false } ;	O O O O O O O O O O O O O O O O O O O
'js' "s" ; exports . __esModule = true ; exports . environment = { production : true } ;	O O O O O O O O O O O O O O O O O O O
export const environment = { production : true } ;	O O O O O O O O O O
export const environment = { production : false } ;	O O O O O O O O O O
import { enableProdMode } from 's' ; import { platformBrowserDynamic } from 's' ; import { AppModule } from 's' ; import { environment } from 's' ; if ( environment . production ) { enableProdMode ( ) ; } platformBrowserDynamic ( ) . bootstrapModule ( AppModule ) ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import 's' ; import 's' ; import 's' ; import 's' ;	O O O O O O O O O O O O
import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import { getTestBed } from 's' ; import { BrowserDynamicTestingModule , platformBrowserDynamicTesting } from 's' ; declare const __karma__ ; declare const require ; __karma__ . loaded = function ( ) { } ; getTestBed ( ) . initTestEnvironment ( BrowserDynamicTestingModule , platformBrowserDynamicTesting ( ) ) ; const context = require . context ( 's' , true , "s" ) ; context . keys ( ) . map ( context ) ; __karma__ . start ( ) ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O