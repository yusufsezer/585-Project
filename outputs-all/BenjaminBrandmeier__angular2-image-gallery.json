'js' var browserstack = require ( 's' ) ; exports . config = { 's' : 's' + process . env . BROWSERSTACK_USERNAME + 's' + process . env . BROWSERSTACK_KEY + 's' , allScriptsTimeout : 0 , specs : [ 's' ] , 's' : { 's' : process . env . BROWSERSTACK_USERNAME , 's' : process . env . BROWSERSTACK_KEY , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : true } , baseUrl : 's' , beforeLaunch : function ( ) { require ( 's' ) . register ( { project : 's' } ) ; console . log ( "s" ) ; return new Promise ( function ( resolve , reject ) { exports . bs_local = new browserstack . Local ( ) ; exports . bs_local . start ( { 's' : exports . config . capabilities [ 's' ] } , function ( error ) { if ( error ) return reject ( error ) ; console . log ( 's' ) ; resolve ( ) ; } ) ; } ) ; } , afterLaunch : function ( ) { return new Promise ( function ( resolve , reject ) { exports . bs_local . stop ( resolve ) ; } ) ; } } ;	O O $any$ O $any$ O O O O $complex$ O $complex$ O O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $number$ O O O $string[]$ O O O O O O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O $string$ O O O $Promise<any>$ O O O O O $any$ O O O O $any$ O O $string$ O O O O O $Console$ O $void$ O O O O O O $PromiseConstructor$ O O O $void$ O $void$ O O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O $any$ O $complex$ O $complex$ O O O O O O O $any$ O O O O $any$ O O $void$ O $any$ O O $Console$ O $void$ O O O O $void$ O O O O O O O O O O O $Promise<any>$ O O O O O O O $PromiseConstructor$ O O O $void$ O $void$ O O $any$ O $any$ O $any$ O $void$ O O O O O O O O
'js' exports . config = { 's' : 's' + process . env . BROWSERSTACK_USERNAME + 's' + process . env . BROWSERSTACK_KEY + 's' , allScriptsTimeout : 0 , specs : [ 's' ] , 's' : { 's' : process . env . BROWSERSTACK_USERNAME , 's' : process . env . BROWSERSTACK_KEY } , 's' : [ { 's' : 's' , 's' : 's' } ] , baseUrl : 's' , beforeLaunch : function ( ) { require ( 's' ) . register ( { project : 's' } ) ; } } ;	O $complex$ O $complex$ O O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $number$ O O O $string[]$ O O O O O O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O O O O O O O O O O O $string$ O O O $void$ O O O O O $any$ O O O O $any$ O O $string$ O O O O O O O O
'js' const { SpecReporter } = require ( 's' ) ; exports . config = { allScriptsTimeout : 0 , specs : [ 's' ] , seleniumAddress : 's' , capabilities : { browserName : 's' , browser_version : 's' , os : 's' , os_version : 's' , resolution : 's' , build : process . env . BS_AUTOMATE_BUILD , project : process . env . BS_AUTOMATE_PROJECT , 's' : process . env . BROWSERSTACK_USERNAME , 's' : process . env . BROWSERSTACK_KEY , 's' : true , 's' : process . env . BROWSERSTACK_LOCAL_IDENTIFIER } , directConnect : false , baseUrl : 's' , framework : 's' , jasmineNodeOpts : { showColors : true , defaultTimeoutInterval : 0 , print : function ( ) { } } , beforeLaunch : function ( ) { require ( 's' ) . register ( { project : 's' } ) ; } , onPrepare ( ) { jasmine . getEnv ( ) . addReporter ( new SpecReporter ( { spec : { displayStacktrace : true } } ) ) ; } } ;	O O O $any$ O O $any$ O O O O O O O O O $number$ O O O $string[]$ O O O O O $string$ O O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O O $boolean$ O O O $string$ O O O $string$ O O O $complex$ O O $boolean$ O O O $number$ O O O $void$ O O O O O O O O $void$ O O O O O $any$ O O O O $any$ O O $string$ O O O O O O O $void$ O O O $any$ O $any$ O O O $any$ O O $any$ O O $complex$ O O $boolean$ O O O O O O O O O O
'js' var BrowserStack = require ( "s" ) ; var process = require ( "s" ) ; var argv = require ( 's' ) ( process . argv . slice ( 0 ) ) ; var browserStackCredentials = { username : process . env . BROWSERSTACK_USERNAME , password : process . env . BROWSERSTACK_KEY } ; var automateClient = BrowserStack . createAutomateClient ( browserStackCredentials ) ; automateClient . getBuilds ( function ( error , builds ) { console . log ( "s" ) ; console . log ( builds ) ; var lastBuildId = builds [ 0 ] . hashed_id ; console . log ( 's' , lastBuildId ) ; automateClient . getSessions ( lastBuildId , function ( error , sessions ) { console . log ( 's' , sessions ) ; var lastSessionId = sessions [ 0 ] . hashed_id ; automateClient . getSession ( lastSessionId , function ( error , session ) { console . log ( 's' , session ) ; automateClient . updateSession ( lastSessionId , { status : argv . _ [ 0 ] } , function ( error , info ) { console . log ( 's' , info ) } ) ; } ) ; } ) ; } ) ;	O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $complex$ O O $any$ O $any$ O O O $any$ O $any$ O O $Console$ O $void$ O O O O $Console$ O $void$ O $any$ O O O $any$ O $any$ O O O O $any$ O $Console$ O $void$ O O O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O $Console$ O $void$ O O O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O $Console$ O $void$ O O O $any$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O O $Console$ O $void$ O O O $any$ O O O O O O O O O O O O O
import { browser , element , by } from 's' ; export class GalleryPage { navigateTo ( ) { return browser . get ( 's' ) ; } getFirstGalleryRow ( ) { return element ( by . css ( 's' ) ) ; } getFirstImageFromFirstRow ( ) { return element ( by . css ( 's' ) ) ; } getImageInsideViewerIfActive ( id ) { return element ( by . css ( 's' + id + 's' ) ) } getExitButton ( ) { return element ( by . css ( 's' ) ) } getLeftArrowButton ( ) { return element ( by . css ( 's' ) ) } getRightArrowButton ( ) { return element ( by . css ( 's' ) ) } }	O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $number$ O O O $any$ O $any$ O $any$ O O O $number$ O O O O O $any$ O O O O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O $any$ O O O O O O
import { GalleryPage } from 's' import { browser , protractor } from "s" describe ( 's' , function ( ) { let page beforeEach ( ( ) => { page = new GalleryPage ( ) } ) it ( 's' , ( ) => { page . navigateTo ( ) expect ( page . getFirstGalleryRow ( ) . isPresent ( ) ) . toBeTruthy ( ) } ) it ( 's' , ( ) => { page . getFirstImageFromFirstRow ( ) . click ( ) expect ( page . getImageInsideViewerIfActive ( 0 ) . isPresent ( ) ) . toBeTruthy ( ) } ) it ( 's' , ( ) => { browser . actions ( ) . sendKeys ( protractor . Key . RIGHT ) . perform ( ) expect ( page . getImageInsideViewerIfActive ( 0 ) . isPresent ( ) ) . toBeTruthy ( ) } ) it ( 's' , ( ) => { expect ( page . getExitButton ( ) . isPresent ( ) ) . toBeTruthy ( ) browser . actions ( ) . mouseMove ( page . getImageInsideViewerIfActive ( 0 ) ) . perform ( ) expect ( page . getLeftArrowButton ( ) . isPresent ( ) ) . toBeTruthy ( ) expect ( page . getRightArrowButton ( ) . isPresent ( ) ) . toBeTruthy ( ) } ) it ( 's' , ( ) => { browser . actions ( ) . mouseDown ( page . getImageInsideViewerIfActive ( 0 ) ) . mouseMove ( { x : - 0 , y : 0 } ) . mouseUp ( ) . perform ( ) expect ( page . getImageInsideViewerIfActive ( 0 ) . isPresent ( ) ) . toBeTruthy ( ) } ) it ( 's' , ( ) => { page . getExitButton ( ) . click ( ) browser . wait ( protractor . ExpectedConditions . stalenessOf ( page . getImageInsideViewerIfActive ( 0 ) ) , 0 ) browser . wait ( protractor . ExpectedConditions . stalenessOf ( page . getExitButton ( ) ) , 0 ) } ) } )	O O $any$ O O O O O $any$ O $any$ O O O $any$ O O O O O O O O $GalleryPage$ $any$ O O O O O $GalleryPage$ O O $any$ O O O O $any$ O O O O O O O $GalleryPage$ O $any$ O O $any$ O $GalleryPage$ O $any$ O O O $any$ O O O O $any$ O O O O $any$ O O O O O O O $GalleryPage$ O $any$ O O O $any$ O O $any$ O $GalleryPage$ O $any$ O O O O $any$ O O O O $any$ O O O O $any$ O O O O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O $any$ O $GalleryPage$ O $any$ O O O O $any$ O O O O $any$ O O O O $any$ O O O O O O O $any$ O $GalleryPage$ O $any$ O O O $any$ O O O O $any$ O O $any$ O $any$ O O O $any$ O $GalleryPage$ O $any$ O O O O O $any$ O O $any$ O $GalleryPage$ O $any$ O O O $any$ O O O O $any$ O O $any$ O $GalleryPage$ O $any$ O O O $any$ O O O O $any$ O O O O $any$ O O O O O O O $any$ O $any$ O O O $any$ O $GalleryPage$ O $any$ O O O O O $any$ O O $number$ O O O O $number$ O O O O O $any$ O O O $any$ O O $any$ O $GalleryPage$ O $any$ O O O O $any$ O O O O $any$ O O O O $any$ O O O O O O O $GalleryPage$ O $any$ O O O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $GalleryPage$ O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $GalleryPage$ O $any$ O O O O O O O O O O
'js' const { SpecReporter } = require ( 's' ) ; exports . config = { allScriptsTimeout : 0 , specs : [ 's' ] , capabilities : { 's' : 's' } , directConnect : true , baseUrl : 's' , framework : 's' , jasmineNodeOpts : { showColors : true , defaultTimeoutInterval : 0 , print : function ( ) { } } , beforeLaunch : function ( ) { require ( 's' ) . register ( { project : 's' } ) ; } , onPrepare ( ) { jasmine . getEnv ( ) . addReporter ( new SpecReporter ( { spec : { displayStacktrace : true } } ) ) ; } } ;	O O O $any$ O O $any$ O O O O $complex$ O $complex$ O O $number$ O O O $string[]$ O O O O O $complex$ O O O O O O O $boolean$ O O O $string$ O O O $string$ O O O $complex$ O O $boolean$ O O O $number$ O O O $void$ O O O O O O O O $void$ O O O O O $any$ O O O O $any$ O O $string$ O O O O O O O $void$ O O O $any$ O $any$ O O O $any$ O O $any$ O O $complex$ O O $boolean$ O O O O O O O O O O
'js' var fs = require ( 's' ) ; var path = require ( 's' ) ; var mkdirp = require ( 's' ) ; var process = require ( "s" ) ; var gm = require ( 's' ) ; var appRoot = require ( 's' ) ; var argv = require ( 's' ) ( process . argv . slice ( 0 ) ) ; var one = require ( 's' ) var sortFunction ; var projectRoot = appRoot . path ; var toConvertAbsoluteBasePath ; var assetsAbsoluteBasePath = projectRoot + "s" ; var previewRelativePath = "s" ; var imageMetadataArray = [ ] ; var resolutions = [ { name : 's' , height : 0 } , { name : 's' , height : 0 } , { name : 's' , height : 0 } , { name : 's' , height : 0 } , { name : 's' , height : 0 } , { name : 's' , height : 0 } , { name : 's' , height : undefined } ] ; function init ( ) { if ( argv [ "s" ] !== undefined ) { var galleryName = argv [ 's' ] ; console . log ( `template` ) ; assetsAbsoluteBasePath = assetsAbsoluteBasePath + argv [ 's' ] + "s" ; previewRelativePath = previewRelativePath + argv [ 's' ] + "s" ; } if ( argv [ "s" ] ) { var outputDirectory = argv [ "s" ] ; if ( outputDirectory . indexOf ( outputDirectory . length ) != 's' ) { outputDirectory += 's' ; } assetsAbsoluteBasePath = outputDirectory ; } if ( argv [ "s" ] ) { var remoteBaseUrl = argv [ "s" ] ; if ( remoteBaseUrl . indexOf ( remoteBaseUrl . length ) != 's' ) { remoteBaseUrl += 's' ; } previewRelativePath = remoteBaseUrl ; } if ( argv [ 's' ] . length == 0 ) { toConvertAbsoluteBasePath = projectRoot + "s" ; console . log ( 's' + toConvertAbsoluteBasePath ) ; } else if ( argv [ 's' ] . length > 0 ) { console . log ( 's' ) ; } else { toConvertAbsoluteBasePath = argv . _ [ 0 ] ; if ( toConvertAbsoluteBasePath . indexOf ( toConvertAbsoluteBasePath . length ) != 's' ) { toConvertAbsoluteBasePath += 's' ; } } console . log ( `template` ) ; console . log ( `template` ) ; console . log ( `template` ) ; if ( ! argv [ 's' ] && ! argv [ 's' ] && ! argv [ 's' ] ) { console . log ( 's' ) ; sortFunction = sortByFileName ; } if ( argv [ 's' ] ) { sortFunction = sortByCreationDate ; console . log ( 's' ) ; } if ( argv [ 's' ] ) { sortFunction = sortByFileName ; console . log ( 's' ) ; } if ( argv [ 's' ] ) { sortFunction = sortByPrimaryColor ; console . log ( 's' ) ; } convert ( ) ; } function convert ( ) { createFolderStructure ( ) ; var files = fs . readdirSync ( toConvertAbsoluteBasePath ) ; processFiles ( files , 0 ) ; console . log ( 's' ) ; } function createFolderStructure ( ) { console . log ( 's' ) ; mkdirp . sync ( assetsAbsoluteBasePath + 's' , function ( err ) { if ( err ) throw err ; } ) ; for ( var i in resolutions ) { mkdirp . sync ( assetsAbsoluteBasePath + resolutions [ i ] . name , function ( err ) { if ( err ) throw err ; } ) ; } console . log ( 's' ) ; } function processFiles ( files , fidx ) { if ( fidx < files . length ) { var file = files [ fidx ] ; var extension = file . substring ( file . lastIndexOf ( "s" ) + 0 , file . length ) ; if ( isSupportedExtension ( extension ) ) { var filePath = path . join ( toConvertAbsoluteBasePath , file ) ; if ( fs . lstatSync ( filePath ) . isFile ( ) ) { identifyImage ( files , fidx , filePath , file ) ; } else { processFiles ( files , ++ fidx ) ; } } else { processFiles ( files , ++ fidx ) ; } } else { console . log ( 's' ) provideImageInformation ( imageMetadataArray , 0 , resolutions , 0 ) ; } } function identifyImage ( files , fidx , filePath , file ) { gm ( filePath ) . identify ( function ( err , features ) { if ( err ) { console . log ( filePath ) console . log ( err ) throw err ; } var dateTimeOriginal = undefined ; if ( features [ 's' ] ) { dateTimeOriginal = features [ 's' ] [ 's' ] ; } var imageMetadata = { name : file , date : dateTimeOriginal } ; imageMetadataArray . push ( imageMetadata ) ; fs . createReadStream ( filePath ) . pipe ( fs . createWriteStream ( assetsAbsoluteBasePath + 's' + file ) ) ; createPreviewImage ( files , fidx , filePath , file , 0 ) ; } ) ; } function createPreviewImage ( files , fidx , filePath , file , index ) { gm ( filePath ) . resize ( null , resolutions [ index ] . height ) . autoOrient ( ) . quality ( 0 ) . write ( assetsAbsoluteBasePath + resolutions [ index ] . name + 's' + file , function ( err ) { if ( err ) throw err ; if ( index !== resolutions . length - 0 ) { createPreviewImage ( files , fidx , filePath , file , ++ index ) ; } else { process . stdout . write ( 's' + ( fidx ) + "s" ) ; processFiles ( files , ++ fidx ) ; } } ) ; } function provideImageInformation ( imageMetadataArray , imgMetadataIdx , resolutions , resolutionIdx ) { var imgMetadata = imageMetadataArray [ imgMetadataIdx ] ; var resolution = resolutions [ resolutionIdx ] ; var filePath = assetsAbsoluteBasePath + resolution . name + 's' + imgMetadata . name ; gm ( filePath ) . size ( function ( err , size ) { if ( err ) { console . log ( filePath ) console . log ( err ) throw err ; } imgMetadata [ resolution . name ] = { } ; imgMetadata [ resolution . name ] [ 's' ] = previewRelativePath + resolution . name + 's' + imgMetadata . name ; imgMetadata [ resolution . name ] [ 's' ] = size . width ; imgMetadata [ resolution . name ] [ 's' ] = size . height ; if ( resolutions . length - 0 == resolutionIdx ) { gm ( filePath ) . resize ( 0 , 0 ) . colors ( 0 ) . toBuffer ( 's' , function ( err , buffer ) { if ( err ) throw err ; imgMetadata [ 's' ] = 's' + buffer . slice ( 0 , 0 ) . toString ( 's' ) ; if ( imageMetadataArray . length - 0 == imgMetadataIdx ) { console . log ( 's' ) ; sortFunction ( ) ; } else { provideImageInformation ( imageMetadataArray , ++ imgMetadataIdx , resolutions , 0 ) ; } } ) ; } else { provideImageInformation ( imageMetadataArray , imgMetadataIdx , resolutions , ++ resolutionIdx ) ; } } ) ; } function sortByCreationDate ( ) { console . log ( 's' ) ; imageMetadataArray . sort ( function ( a , b ) { if ( a . date > b . date ) { return 0 ; } else if ( a . date == b . date ) { return 0 ; } else { return - 0 ; } } ) ; console . log ( 's' ) ; saveMetadataFile ( imageMetadataArray ) ; } function sortByFileName ( ) { console . log ( 's' ) ; imageMetadataArray . sort ( function ( a , b ) { if ( a . name > b . name ) { return 0 ; } else if ( a . name == b . name ) { return 0 ; } else { return - 0 ; } } ) ; console . log ( 's' ) ; saveMetadataFile ( imageMetadataArray ) ; } function sortByPrimaryColor ( ) { console . log ( 's' ) ; var iterations = 0 ; var sortedColorsArray = [ ] ; for ( var i = 0 ; i < iterations ; i ++ ) { var specificColorSpectrum = imageMetadataArray . filter ( function ( imageMetadata ) { var color = one ( imageMetadata [ 's' ] ) ; var hue = color . hue ( ) ; return hue <= i * 0 && hue > ( ( i * 0 ) - 0 ) } ) ; specificColorSpectrum . sort ( function ( a , b ) { var colorA = one ( a [ 's' ] ) ; var colorB = one ( b [ 's' ] ) ; var luminanceA = calcRelativeLuminance ( colorA ) ; var luminanceB = calcRelativeLuminance ( colorB ) ; if ( i % 0 == 0 ) { return luminanceA - luminanceB ; } else { return luminanceB - luminanceA ; } } ) ; sortedColorsArray [ i ] = specificColorSpectrum ; } var sortedColorsArray = flatten ( sortedColorsArray ) ; console . log ( 's' ) ; saveMetadataFile ( sortedColorsArray ) ; } function saveMetadataFile ( sortedMetadataArray ) { var metadataAsJSON = JSON . stringify ( sortedMetadataArray , null , null ) ; console . log ( 's' ) ; fs . writeFile ( assetsAbsoluteBasePath + 's' , metadataAsJSON , function ( err ) { if ( err ) throw err ; console . log ( 's' ) ; } ) ; } function calcRelativeLuminance ( color ) { return Math . sqrt ( 0 * Math . pow ( color . red ( ) , 0 ) + 0 * Math . pow ( color . green ( ) , 0 ) + 0 * Math . pow ( color . blue ( ) , 0 ) ) ; } function flatten ( arr ) { return arr . reduce ( function ( flat , toFlatten ) { return flat . concat ( Array . isArray ( toFlatten ) ? flatten ( toFlatten ) : toFlatten ) ; } , [ ] ) ; } function isSupportedExtension ( format ) { var supportedFormats = [ "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" ] ; return supportedFormats . includes ( format . toUpperCase ( ) ) ; } init ( ) ;	O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O $any$ O O $any$ O $any$ O $any$ O O $any$ O O $string$ O $any$ O O O O $string$ O O O O $any[]$ O O O O O $complex$ O O O $string$ O O O $number$ O O O O O $string$ O O O $number$ O O O O O $string$ O O O $number$ O O O O O $string$ O O O $number$ O O O O O $string$ O O O $number$ O O O O O $string$ O O O $number$ O O O O O $string$ O O O $undefined$ O $undefined$ O O O O $void$ O O O O O $any$ O O O O $undefined$ O O O $any$ O $any$ O O O O $Console$ O $void$ O O O O $string$ O $string$ O $any$ O O O O O O $string$ O $string$ O $any$ O O O O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $string$ O $any$ O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $string$ O $any$ O O O O $any$ O O O O $any$ O O O O $any$ O $any$ O O O $Console$ O $void$ O O O $string$ O O O O O O $any$ O O O O $any$ O O O O $Console$ O $void$ O O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O O $Console$ O $void$ O O O O $Console$ O $void$ O O O O $Console$ O $void$ O O O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O O $Console$ O $void$ O O O O $any$ O $void$ O O O O $any$ O O O O O $any$ O $void$ O $Console$ O $void$ O O O O O O O $any$ O O O O O $any$ O $void$ O $Console$ O $void$ O O O O O O O $any$ O O O O O $any$ O $void$ O $Console$ O $void$ O O O O O $void$ O O O O O $void$ O O O $void$ O O O O $any$ O $any$ O $any$ O $any$ O O $void$ O $any$ O O O O $Console$ O $void$ O O O O O O $void$ O O O $Console$ O $void$ O O O O $any$ O $any$ O $string$ O O O O O $any$ O O O O $any$ O O $any$ O O O O O O O $string$ O $complex$ O O $any$ O $any$ O $string$ O $complex$ O $string$ O O $string$ O O O $any$ O O O O $any$ O O $any$ O O O O O $Console$ O $void$ O O O O O O $void$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O $boolean$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O O O O $void$ O $any$ O $any$ O $any$ O $any$ O O O O O $void$ O $any$ O O $any$ O O O O O O $void$ O $any$ O O $any$ O O O O O O $Console$ O $void$ O O O $void$ O $any[]$ O O O $complex$ O O O O O O O $void$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O O O $any$ O $any$ O O O O $any$ O O $Console$ O $void$ O $any$ O $Console$ O $void$ O $any$ O O $any$ O O O $any$ O $undefined$ O O O $any$ O O O O O $any$ O $any$ O O O O O O O O O $complex$ O O $any$ O $any$ O $any$ O $any$ O O $any[]$ O $number$ O $complex$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $string$ O O O $any$ O O O $void$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O O $void$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O O O $complex$ O $any$ O O $number$ O O $any$ O O O $any$ O O O O $any$ O $string$ O $complex$ O $any$ O O $string$ O O O $any$ O O O $any$ O O O O $any$ O O $any$ O O O $any$ O $complex$ O $number$ O O O O $void$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O $any$ O $any$ O $any$ O O O O $any$ O O O O O $void$ O $any$ O O $any$ O O O O O O O O $void$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $string$ O $string$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $string$ O O $any$ O O O $any$ O $any$ O O O O $any$ O O $Console$ O $void$ O $string$ O $Console$ O $void$ O $any$ O O $any$ O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O O $string$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O O $any$ O $string$ O O $any$ O O O O O O $any$ O O O O $any$ O O O O O $any$ O $any$ O O O O $any$ O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O $any$ O O $Console$ O $void$ O O O O $any$ O O O O O O $void$ O $any$ O O $any$ O $any$ O O O O O O O O O O O $void$ O $any$ O $any$ O $any$ O O $any$ O O O O O O O O $void$ O O O $Console$ O $void$ O O O O $any[]$ O $any[]$ O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O O O O O O O $Console$ O $void$ O O O O $void$ O $any[]$ O O O O $void$ O O O $Console$ O $void$ O O O O $any[]$ O $any[]$ O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O O O O O O O $Console$ O $void$ O O O O $void$ O $any[]$ O O O O $void$ O O O $Console$ O $void$ O O O O O $number$ O O O O $any[]$ O O O O O O O $number$ O O O $number$ O $number$ O $number$ O O O O $any[]$ O $any[]$ O $complex$ O O O $any$ O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $number$ O O O $any$ O O O $number$ O O O O O O O O O $any[]$ O $any[]$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $number$ O $number$ O $any$ O O O $number$ O $number$ O $any$ O O O O $number$ O O O O O O O $number$ O $number$ O O O O O $number$ O $number$ O O O O O $any[]$ O $number$ O O $any[]$ O O O $any[]$ O $any$ O $any[][]$ O O $Console$ O $void$ O O O O $void$ O $any$ O O O O $void$ O $any$ O O O $string$ O $JSON$ O $complex$ O $any$ O O O O O O $Console$ O $void$ O O O O $any$ O $any$ O $string$ O O O $string$ O O O $any$ O O O O $any$ O O $any$ O $Console$ O $void$ O O O O O O O O O $number$ O $any$ O O O $Math$ O $number$ O O O $Math$ O $number$ O $any$ O $any$ O O O O O O O O $Math$ O $number$ O $any$ O $any$ O O O O O O O O $Math$ O $number$ O $any$ O $any$ O O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $ArrayConstructor$ O $complex$ O $any$ O O $any$ O $any[]$ O O $any$ O O O O O O O O O O $boolean$ O $any$ O O O $stringstring[]$ O $boolean$ O $any$ O $any$ O O O O O $void$ O O O
'js' module . exports = function ( config ) { config . set ( { basePath : 's' , frameworks : [ 's' , 's' ] , plugins : [ require ( 's' ) , require ( 's' ) , require ( 's' ) , require ( 's' ) , require ( 's' ) ] , client : { clearContext : false } , coverageIstanbulReporter : { dir : require ( 's' ) . join ( __dirname , 's' ) , reports : [ 's' , 's' ] , fixWebpackSourcePaths : true } , reporters : [ 's' , 's' ] , port : 0 , colors : true , logLevel : config . LOG_INFO , autoWatch : true , browsers : [ 's' ] , singleRun : false } ) ; } ;	O $void$ O $void$ O O O $any$ O O $any$ O $any$ O O $string$ O O O $string[]$ O O O O O O O $any[]$ O O $any$ O O O O $any$ O O O O $any$ O O O O $any$ O O O O $any$ O O O O O $complex$ O O $boolean$ O O O O $complex$ O O $any$ O $any$ O O O O $any$ O $any$ O O O O $string[]$ O O O O O O O $boolean$ O O O O $string[]$ O O O O O O O $number$ O O O $boolean$ O O O $any$ O $any$ O $any$ O $boolean$ O O O $string[]$ O O O O O $boolean$ O O O O O O O
import { Injectable } from 's' import { Observable , Subject } from 's' @ Injectable ( ) export class ImageService { private imagesUpdatedSource = new Subject < Array < any > > ( ) private imageSelectedIndexUpdatedSource = new Subject < number > ( ) private showImageViewerSource = new Subject < boolean > ( ) imagesUpdated$ : Observable < Array < any > > = this . imagesUpdatedSource . asObservable ( ) imageSelectedIndexUpdated$ : Observable < number > = this . imageSelectedIndexUpdatedSource . asObservable ( ) showImageViewerChanged$ : Observable < boolean > = this . showImageViewerSource . asObservable ( ) updateImages ( images < any > ) { this . imagesUpdatedSource . next ( images ) } updateSelectedImageIndex ( newIndex ) { this . imageSelectedIndexUpdatedSource . next ( newIndex ) } showImageViewer ( show ) { this . showImageViewerSource . next ( show ) } }	O O $any$ O O O O O $any$ O $any$ O O O O $any$ O O O O $any$ O O $any$ O O $any$ O $ArrayConstructor$ O O O O O O O $any$ O O $any$ O O O O O O $any$ O O $any$ O O O O O $any$ O $any$ O $ArrayConstructor$ O O O O O O O $any$ O $any$ O O $any$ O $any$ O O O O O O $any$ O $any$ O O $any$ O $any$ O O O O O O $any$ O $any$ O O $void$ O $Array$ O O O O O O O $any$ O $any$ O $any[]$ O O $void$ O $number$ O O O O $any$ O $any$ O $number$ O O $void$ O $boolean$ O O O O $any$ O $any$ O $boolean$ O O O
import { ChangeDetectorRef , Component , ElementRef , EventEmitter , HostListener , Input , OnChanges , OnDestroy , OnInit , Output , QueryList , SimpleChanges , ViewChild , ViewChildren } from 's' import { ImageService } from 's' import { Subscription } from 's' import { HttpClient } from 's' @ Component ( { selector : 's' , templateUrl : 's' , styleUrls : [ 's' ] } ) export class GalleryComponent implements OnInit , OnDestroy , OnChanges { gallery : Array < any > = [ ] imageDataStaticPath : string = 's' imageDataCompletePath : string = 's' dataFileName : string = 's' images : Array < any > = [ ] minimalQualityCategory = 's' viewerSubscription : Subscription rowIndex : number = 0 rightArrowInactive : boolean = false leftArrowInactive : boolean = false @ Input ( 's' ) providedImageMargin : number = 0 @ Input ( 's' ) providedImageSize : number = 0 @ Input ( 's' ) providedGalleryName : string = 's' @ Input ( 's' ) providedMetadataUri : string = undefined @ Input ( 's' ) rowsPerPage : number = 0 @ Output ( ) viewerChange = new EventEmitter < boolean > ( ) @ ViewChild ( 's' , { static : true } ) galleryContainer : ElementRef @ ViewChildren ( 's' ) imageElements : QueryList < any > @ HostListener ( 's' , [ 's' ] ) triggerCycle ( event ) { this . scaleGallery ( ) } @ HostListener ( 's' , [ 's' ] ) windowResize ( event ) { this . render ( ) } constructor ( public imageService , public http , public changeDetectorRef ) { } ngOnInit ( ) { this . fetchDataAndRender ( ) this . viewerSubscription = this . imageService . showImageViewerChanged$ . subscribe ( ( visibility ) => this . viewerChange . emit ( visibility ) ) } ngOnChanges ( changes ) { if ( changes [ 's' ] != undefined ) { this . fetchDataAndRender ( ) } else { this . render ( ) } } ngOnDestroy ( ) { if ( this . viewerSubscription ) { this . viewerSubscription . unsubscribe ( ) } } openImageViewer ( img ) { this . imageService . updateImages ( this . images ) this . imageService . updateSelectedImageIndex ( this . images . indexOf ( img ) ) this . imageService . showImageViewer ( true ) } navigate ( direction ) { if ( ( direction === 0 && this . rowIndex < this . gallery . length - this . rowsPerPage ) || ( direction === - 0 && this . rowIndex > 0 ) ) { this . rowIndex += ( this . rowsPerPage * direction ) } this . refreshNavigationErrorState ( ) } calcImageMargin ( ) { const galleryWidth = this . getGalleryWidth ( ) const ratio = galleryWidth / 0 return Math . round ( Math . max ( 0 , this . providedImageMargin * ratio ) ) } private fetchDataAndRender ( ) { this . imageDataCompletePath = this . providedMetadataUri if ( ! this . providedMetadataUri ) { this . imageDataCompletePath = this . providedGalleryName !== 's' ? `template` : this . imageDataStaticPath + this . dataFileName } this . http . get ( this . imageDataCompletePath ) . subscribe ( ( data < any > ) => { this . images = data this . imageService . updateImages ( this . images ) this . images . forEach ( image => { image [ 's' ] = false image [ 's' ] = false image [ 's' ] = 's' } ) this . render ( ) this . render ( ) } , err => { if ( this . providedMetadataUri ) { console . error ( `template` ) } else { console . error ( `template` ) } } , ( ) => undefined ) } private render ( ) { this . gallery = [ ] let tempRow = [ this . images [ 0 ] ] let currentRowIndex = 0 let i = 0 for ( i ; i < this . images . length ; i ++ ) { while ( this . images [ i + 0 ] && this . shouldAddCandidate ( tempRow , this . images [ i + 0 ] ) ) { i ++ } if ( this . images [ i + 0 ] ) { tempRow . pop ( ) } this . gallery [ currentRowIndex ++ ] = tempRow tempRow = [ this . images [ i + 0 ] ] } this . scaleGallery ( ) } private shouldAddCandidate ( imgRow < any > , candidate ) { const oldDifference = this . calcIdealHeight ( ) - this . calcRowHeight ( imgRow ) imgRow . push ( candidate ) const newDifference = this . calcIdealHeight ( ) - this . calcRowHeight ( imgRow ) return Math . abs ( oldDifference ) > Math . abs ( newDifference ) } private calcRowHeight ( imgRow < any > ) { const originalRowWidth = this . calcOriginalRowWidth ( imgRow ) const ratio = ( this . getGalleryWidth ( ) - ( imgRow . length - 0 ) * this . calcImageMargin ( ) ) / originalRowWidth const rowHeight = imgRow [ 0 ] [ this . minimalQualityCategory ] [ 's' ] * ratio return rowHeight } private calcOriginalRowWidth ( imgRow < any > ) { let originalRowWidth = 0 imgRow . forEach ( img => { const individualRatio = this . calcIdealHeight ( ) / img [ this . minimalQualityCategory ] [ 's' ] img [ this . minimalQualityCategory ] [ 's' ] = img [ this . minimalQualityCategory ] [ 's' ] * individualRatio img [ this . minimalQualityCategory ] [ 's' ] = this . calcIdealHeight ( ) originalRowWidth += img [ this . minimalQualityCategory ] [ 's' ] } ) return originalRowWidth } private calcIdealHeight ( ) { return this . getGalleryWidth ( ) / ( 0 / this . providedImageSize ) + 0 } private getGalleryWidth ( ) { if ( this . galleryContainer . nativeElement . clientWidth === 0 ) { return this . galleryContainer . nativeElement . scrollWidth } return this . galleryContainer . nativeElement . clientWidth } private scaleGallery ( ) { let imageCounter = 0 let maximumGalleryImageHeight = 0 this . gallery . slice ( this . rowIndex , this . rowIndex + this . rowsPerPage ) . forEach ( imgRow => { const originalRowWidth = this . calcOriginalRowWidth ( imgRow ) if ( imgRow !== this . gallery [ this . gallery . length - 0 ] ) { const ratio = ( this . getGalleryWidth ( ) - ( imgRow . length - 0 ) * this . calcImageMargin ( ) ) / originalRowWidth imgRow . forEach ( ( img ) => { img [ 's' ] = img [ this . minimalQualityCategory ] [ 's' ] * ratio img [ 's' ] = img [ this . minimalQualityCategory ] [ 's' ] * ratio maximumGalleryImageHeight = Math . max ( maximumGalleryImageHeight , img [ 's' ] ) this . checkForAsyncLoading ( img , imageCounter ++ ) } ) } else { imgRow . forEach ( ( img ) => { img . width = img [ this . minimalQualityCategory ] [ 's' ] img . height = img [ this . minimalQualityCategory ] [ 's' ] maximumGalleryImageHeight = Math . max ( maximumGalleryImageHeight , img [ 's' ] ) this . checkForAsyncLoading ( img , imageCounter ++ ) } ) } } ) this . minimalQualityCategory = maximumGalleryImageHeight > 0 ? 's' : 's' this . refreshNavigationErrorState ( ) this . changeDetectorRef . detectChanges ( ) } private checkForAsyncLoading ( image , imageCounter ) { const imageElements = this . imageElements . toArray ( ) if ( image [ 's' ] || ( imageElements . length > 0 && imageElements [ imageCounter ] && this . isScrolledIntoView ( imageElements [ imageCounter ] . nativeElement ) ) ) { image [ 's' ] = true image [ 's' ] = image [ this . minimalQualityCategory ] [ 's' ] } else { image [ 's' ] = 's' } } private isScrolledIntoView ( element ) { const elementTop = element . getBoundingClientRect ( ) . top const elementBottom = element . getBoundingClientRect ( ) . bottom return elementTop < window . innerHeight && elementBottom >= 0 && ( elementBottom > 0 || elementTop > 0 ) } private refreshNavigationErrorState ( ) { this . leftArrowInactive = this . rowIndex == 0 this . rightArrowInactive = this . rowIndex > ( this . gallery . length - this . rowsPerPage ) } }	O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any[]$ O $ArrayConstructor$ O O O O O O $string$ O O O O $string$ O O O O $string$ O O O O $any[]$ O $ArrayConstructor$ O O O O O O $string$ O O $any$ O $any$ $number$ O O O O $boolean$ O O O O $boolean$ O O O O O $any$ O O O $number$ O O O O O $any$ O O O $number$ O O O O O $any$ O O O $string$ O O O O O $any$ O O O $string$ O O O $undefined$ O $any$ O O O $number$ O O O O O $any$ O O $any$ O O $any$ O O O O O O $any$ O O O O $boolean$ O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O O O O O O O $void$ O $any$ O O O O $void$ O O O O $any$ O O O O O O O $void$ O $any$ O O O O $void$ O O O O O O $ImageService$ O O $HttpClient$ O O $ChangeDetectorRef$ O O O $void$ O O O O O $void$ O O O O $any$ O O O $ImageService$ O $any$ O $any$ O O $boolean$ O O O O $any$ O $any$ O $boolean$ O O O $void$ O $SimpleChanges$ O O O O $any$ O O O O $undefined$ O O O O $void$ O O O O O O O $void$ O O O O $void$ O O O O O O O $any$ O O O O $any$ O $any$ O O O O $void$ O $any$ O O O O $ImageService$ O $void$ O O O $any[]$ O O O $ImageService$ O $void$ O O O $any[]$ O $number$ O $any$ O O O O $ImageService$ O $void$ O O O O $void$ O $number$ O O O O O $number$ O O O O O $number$ O O O $any[]$ O $number$ O O O $number$ O O O $number$ O O O O O O $number$ O O O O O O O $number$ O O O O $number$ O O O O O O $void$ O O O $number$ O O O O $number$ O O O $number$ O O O $number$ O $number$ O O O $Math$ O $number$ O $Math$ O $number$ O O O O O $number$ O $number$ O O O O $void$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O O $string$ O O O $string$ O O O O O O O $string$ O O O $string$ O O O $any$ O $any$ O O O $string$ O O $any$ O O $Array$ O O O O O O O O $any[]$ O $any[]$ O O $ImageService$ O $void$ O O O $any[]$ O O O $any[]$ O $void$ O $any$ O O $any$ O O O O O $any$ O O O O O $any$ O O O O O O O O O $void$ O O O O $void$ O O O O $any$ O O O O O O $string$ O O $Console$ O $void$ O O O O O O $Console$ O $void$ O O O O O O O O O $undefined$ O O O $void$ O O O O O $any[]$ O O O O $any[]$ O O O O $any[]$ O O O O O $number$ O O O $number$ O O O O $number$ O $number$ O O O $any[]$ O $number$ O $number$ O O O O O O O $any[]$ O $number$ O O O O O O $boolean$ O $any[]$ O O O $any[]$ O $number$ O O O O O O $number$ O O O O O O $any[]$ O $number$ O O O O O $any[]$ O $any$ O O O O O $any[]$ O $number$ O O O $any[]$ $any[]$ O O O O $any[]$ O $number$ O O O O O O O $void$ O O O O $boolean$ O $Array$ O O O O $any$ O O O $number$ O O O $number$ O O O O O $number$ O $any[]$ O $any[]$ O $number$ O $any$ O O $number$ O O O $number$ O O O O O $number$ O $any[]$ O O $Math$ O $number$ O $number$ O O $Math$ O $number$ O $number$ O O O $number$ O $Array$ O O O O O O $number$ O O O $number$ O $any[]$ O O $number$ O O O O $number$ O O O O $any[]$ O $number$ O O O O O O $number$ O O O O $number$ O $number$ O $any[]$ O O O O O O $string$ O O O O O $number$ O $number$ O O $number$ O $Array$ O O O O O O $number$ O O $any[]$ O $void$ O $any$ O O O $number$ O O O $number$ O O O $any$ O O O $string$ O O O O $any$ O O O $string$ O O O O O $any$ O O O $string$ O O O O O $number$ $any$ O O O $string$ O O O O O O O $number$ O O $number$ O $any$ O O O $string$ O O O O O O O $number$ O O $number$ O O O O O O $number$ O O O O O O O O $number$ O O O O O $number$ O O O O O O O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O $void$ O O O O $number$ O O O $number$ O O O O $any[]$ O $any[]$ O O O $number$ O O O $number$ O O O $number$ O O $void$ O $any$ O O O $number$ O O O $number$ O $any$ O O O $any$ O O O $any[]$ O O O $any[]$ O $number$ O O O O O O $number$ O O O O $number$ O O O O $any$ O $any$ O O O O O O $number$ O O O O $number$ $any$ O $any$ O O $any$ O O O $any$ O O O O $any$ O O O $string$ O O O O O $number$ $any$ O O O O $any$ O O O $string$ O O O O O $number$ $number$ O $Math$ O $number$ O $number$ O $any$ O O O O O O $void$ O $any$ O $number$ O O O O O O O $any$ O $any$ O O $any$ O O O $any$ O $any$ O $any$ O O O $string$ O O O O $any$ O $any$ O $any$ O O O $string$ O O O O $number$ O $Math$ O $number$ O $number$ O $any$ O O O O O O $void$ O $any$ O $number$ O O O O O O O O O $string$ O $number$ O O O O O O O O $void$ O O O O $any$ O $any$ O O O O $void$ O $any$ O $number$ O O O $any$ O O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O O O $any$ O $number$ O O O O $boolean$ O $any$ O $number$ O O $any$ O O O O $any$ O O O O O $any$ O O O O $any$ O O O $string$ O O O O O O O $any$ O O O O O O O O $boolean$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $complex$ O $number$ O $any$ O O O O $any$ O O O $any$ O O O O O $void$ O O O O O $boolean$ O O O $number$ O O O O $boolean$ O O O $number$ O O O O $any[]$ O $number$ O O O $number$ O O O
import { ImageService } from 's' import { Component } from 's' import { animate , state , style , transition , trigger } from 's' @ Component ( { selector : 's' , templateUrl : 's' , styleUrls : [ 's' ] , host : { 's' : 's' } , animations : [ trigger ( 's' , [ state ( 's' , style ( { opacity : 0 , transform : 's' } ) ) , state ( 's' , style ( { opacity : 0 , transform : 's' } ) ) , state ( 's' , style ( { opacity : 0 , transform : 's' } ) ) , state ( 's' , style ( { opacity : 0 , transform : 's' } ) ) , transition ( 's' , [ style ( { opacity : 0 , transform : 's' } ) , animate ( 's' ) ] ) , transition ( 's' , [ style ( { opacity : 0 , transform : 's' } ) , animate ( 's' ) ] ) , transition ( 's' , [ style ( { opacity : 0 } ) , animate ( 's' ) ] ) , transition ( 's' , [ style ( { opacity : 0 } ) , animate ( 's' ) ] ) ] ) , trigger ( 's' , [ state ( 's' , style ( { opacity : 0 } ) ) , state ( 's' , style ( { opacity : 0 } ) ) , transition ( 's' , [ style ( { opacity : 0 } ) , animate ( 's' ) ] ) , transition ( 's' , [ style ( { opacity : 0 } ) , animate ( 's' ) ] ) ] ) ] } ) export class ViewerComponent { showViewer : boolean images : Array < any > = [ { } ] currentIdx : number = 0 leftArrowVisible : boolean = true rightArrowVisible : boolean = true categorySelected : string = 's' transform : number math : Math private qualitySelectorShown : boolean = false private qualitySelected : string = 's' constructor ( private imageService ) { imageService . imagesUpdated$ . subscribe ( images => { this . images = images } ) imageService . imageSelectedIndexUpdated$ . subscribe ( newIndex => { this . currentIdx = newIndex this . images . forEach ( image => image [ 's' ] = false ) this . images [ this . currentIdx ] [ 's' ] = true this . transform = 0 this . updateQuality ( ) } ) imageService . showImageViewerChanged$ . subscribe ( showViewer => { this . showViewer = showViewer } ) this . math = Math } get leftArrowActive ( ) : boolean { return this . currentIdx > 0 } get rightArrowActive ( ) : boolean { return this . currentIdx < this . images . length - 0 } pan ( swipe ) { this . transform = swipe . deltaX } onResize ( ) { this . images . forEach ( image => { image [ 's' ] = false image [ 's' ] = false } ) this . updateImage ( ) } showQualitySelector ( ) { this . qualitySelectorShown = ! this . qualitySelectorShown } qualityChanged ( newQuality ) { this . qualitySelected = newQuality this . updateImage ( ) } imageLoaded ( image ) { image [ 's' ] = true } navigate ( direction , swipe ) { if ( ( direction === 0 && this . currentIdx < this . images . length - 0 ) || ( direction === - 0 && this . currentIdx > 0 ) ) { if ( direction == - 0 ) { this . images [ this . currentIdx ] [ 's' ] = 's' this . images [ this . currentIdx - 0 ] [ 's' ] = 's' } else { this . images [ this . currentIdx ] [ 's' ] = 's' this . images [ this . currentIdx + 0 ] [ 's' ] = 's' } this . currentIdx += direction if ( swipe ) { this . hideNavigationArrows ( ) } else { this . showNavigationArrows ( ) } this . updateImage ( ) } } showNavigationArrows ( ) { this . leftArrowVisible = true this . rightArrowVisible = true } closeViewer ( ) { this . images . forEach ( image => image [ 's' ] = undefined ) this . images . forEach ( image => image [ 's' ] = false ) this . imageService . showImageViewer ( false ) } onKeydown ( event ) { const prevent = [ 0 , 0 , 0 , 0 , 0 ] . find ( no => no === event . keyCode ) if ( prevent ) { event . preventDefault ( ) } switch ( prevent ) { case 0 : this . navigate ( - 0 , false ) break case 0 : this . navigate ( 0 , false ) break case 0 : this . closeViewer ( ) break case 0 : this . images [ this . currentIdx ] [ 's' ] = 's' this . currentIdx = 0 this . images [ this . currentIdx ] [ 's' ] = 's' this . updateImage ( ) break case 0 : this . images [ this . currentIdx ] [ 's' ] = 's' this . currentIdx = this . images . length - 0 this . images [ this . currentIdx ] [ 's' ] = 's' this . updateImage ( ) break default : break } } private hideNavigationArrows ( ) { this . leftArrowVisible = false this . rightArrowVisible = false } private updateImage ( ) { setTimeout ( ( ) => { this . updateQuality ( ) this . images [ this . currentIdx ] [ 's' ] = true this . images . forEach ( image => { if ( image != this . images [ this . currentIdx ] ) { image [ 's' ] = false this . transform = 0 } } ) } , 0 ) } private updateQuality ( ) { const screenWidth = window . innerWidth const screenHeight = window . innerHeight switch ( this . qualitySelected ) { case 's' : { this . categorySelected = 's' if ( screenWidth > this . images [ this . currentIdx ] [ 's' ] . width && screenHeight > this . images [ this . currentIdx ] [ 's' ] . height ) { this . categorySelected = 's' } if ( screenWidth > this . images [ this . currentIdx ] [ 's' ] . width && screenHeight > this . images [ this . currentIdx ] [ 's' ] . height ) { this . categorySelected = 's' } if ( screenWidth > this . images [ this . currentIdx ] [ 's' ] . width && screenHeight > this . images [ this . currentIdx ] [ 's' ] . height ) { this . categorySelected = 's' } if ( screenWidth > this . images [ this . currentIdx ] [ 's' ] . width && screenHeight > this . images [ this . currentIdx ] [ 's' ] . height ) { this . categorySelected = 's' } if ( screenWidth > this . images [ this . currentIdx ] [ 's' ] . width && screenHeight > this . images [ this . currentIdx ] [ 's' ] . height ) { this . categorySelected = 's' } if ( screenWidth > this . images [ this . currentIdx ] [ 's' ] . width && screenHeight > this . images [ this . currentIdx ] [ 's' ] . height ) { this . categorySelected = 's' } break } case 's' : { this . categorySelected = 's' break } case 's' : { this . categorySelected = 's' break } case 's' : { this . categorySelected = 's' break } default : { this . categorySelected = 's' } } } }	O O $any$ O O O O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O $complex$ O O O O O O O $any[]$ O O $any$ O O O O $any$ O O O $any$ O O $number$ O O O $string$ O O O O O O $any$ O O O $any$ O O $number$ O O O $string$ O O O O O O $any$ O O O $any$ O O $number$ O O O $string$ O O O O O O $any$ O O O $any$ O O $number$ O O O $string$ O O O O O O $any$ O O O O $any$ O O $number$ O O O $string$ O O O O O $any$ O O O O O O $any$ O O O O $any$ O O $number$ O O O $string$ O O O O O $any$ O O O O O O $any$ O O O O $any$ O O $number$ O O O O O $any$ O O O O O O $any$ O O O O $any$ O O $number$ O O O O O $any$ O O O O O O O O $any$ O O O O $any$ O O O $any$ O O $number$ O O O O O O $any$ O O O $any$ O O $number$ O O O O O O $any$ O O O O $any$ O O $number$ O O O O O $any$ O O O O O O $any$ O O O O $any$ O O $number$ O O O O O $any$ O O O O O O O O O O O O $any$ O $boolean$ O O $any[]$ O $ArrayConstructor$ O O O O O O O O $number$ O O O O $boolean$ O O O O $boolean$ O O O O $string$ O O O O $number$ O O $Math$ O $Math$ O $boolean$ O O O O O $string$ O O O O O O O $ImageService$ O O $ImageService$ O $any$ O $any$ O $any$ O O O O $any[]$ O $any$ O O $ImageService$ O $any$ O $any$ O $any$ O O O O $number$ O $any$ O O $any[]$ O $void$ O $any$ O $any$ O O O O O O O O $any[]$ O O O $number$ O O O O O O O O $number$ O O O O $void$ O O O O $ImageService$ O $any$ O $any$ O $any$ O O O O $boolean$ O $any$ O O O O $Math$ O $Math$ O O $boolean$ O O O O O O O O $number$ O O O O $boolean$ O O O O O O O O $number$ O O O $any[]$ O $number$ O O O $void$ O $any$ O O O O $number$ O $any$ O $any$ O $void$ O O O O O $any[]$ O $void$ O $any$ O O $any$ O O O O O $any$ O O O O O O O O O $void$ O O O $void$ O O O O O $boolean$ O O O O $boolean$ O $void$ O $any$ O O O O $string$ O $any$ O O $void$ O O O $void$ O $any$ O O $any$ O O O O O O $void$ O $number$ O $any$ O O O O O $number$ O O O O O $number$ O O O $any[]$ O $number$ O O O O O $number$ O O O O O O $number$ O O O O O O O O O O O O O O O $any[]$ O O O $number$ O O O O O O O O $any[]$ O O O $number$ O O O O O O O O O O O O O $any[]$ O O O $number$ O O O O O O O O $any[]$ O O O $number$ O O O O O O O O O O O $number$ O O O O $any$ O O O O $void$ O O O O O O O $void$ O O O O O $void$ O O O O $void$ O O O O O $boolean$ O O O O $boolean$ O O O $void$ O O O O O $any[]$ O $void$ O $any$ O $any$ O O O O $undefined$ O O O $any[]$ O $void$ O $any$ O $any$ O O O O O O O O $ImageService$ O $void$ O O O O $void$ O $KeyboardEvent$ O O O $number$ O O O O O O O O O O O O O $complex$ O $number$ O $number$ O $KeyboardEvent$ O $number$ O O O $number$ O O $KeyboardEvent$ O $void$ O O O O O $number$ O O O O O O O $void$ O O O O O O O O O O O O $void$ O O O O O O O O O O O $void$ O O O O O O O O $any[]$ O O O $number$ O O O O O O O O $number$ O O O O $any[]$ O O O $number$ O O O O O O O O $void$ O O O O O O O O $any[]$ O O O $number$ O O O O O O O O $number$ O O O $any[]$ O $number$ O O O O $any[]$ O O O $number$ O O O O O O O O $void$ O O O O O O O O O $void$ O O O O O $boolean$ O O O O $boolean$ O O O O $void$ O O O $number$ O O O O O O O $void$ O O O O $any[]$ O O O $number$ O O O O O O O O $any[]$ O $void$ O $any$ O O O O $any$ O O O $any[]$ O O O $number$ O O O $any$ O O O O O O O $number$ O O O O O O O O O O O $void$ O O O O $number$ O $complex$ O $number$ O $number$ O $complex$ O $number$ O O O O $string$ O O O O O O O O $string$ O O O O $number$ O O O $any[]$ O O O $number$ O O O O O $any$ O $number$ O O O $any[]$ O O O $number$ O O O O O $any$ O O O O $string$ O O O O O $number$ O O O $any[]$ O O O $number$ O O O O O $any$ O $number$ O O O $any[]$ O O O $number$ O O O O O $any$ O O O O $string$ O O O O O $number$ O O O $any[]$ O O O $number$ O O O O O $any$ O $number$ O O O $any[]$ O O O $number$ O O O O O $any$ O O O O $string$ O O O O O $number$ O O O $any[]$ O O O $number$ O O O O O $any$ O $number$ O O O $any[]$ O O O $number$ O O O O O $any$ O O O O $string$ O O O O O $number$ O O O $any[]$ O O O $number$ O O O O O $any$ O $number$ O O O $any[]$ O O O $number$ O O O O O $any$ O O O O $string$ O O O O O $number$ O O O $any[]$ O O O $number$ O O O O O $any$ O $number$ O O O $any[]$ O O O $number$ O O O O O $any$ O O O O $string$ O O O O O O O O O O O $string$ O O O O O O O O O O $string$ O O O O O O O O O O $string$ O O O O O O O O O $string$ O O O O O O
import { NgModule } from 's' import { ImageService } from 's' import { GalleryComponent } from 's' import { ViewerComponent } from 's' import { FormsModule } from 's' import { CommonModule } from 's' import { BrowserAnimationsModule } from 's' import { HttpClientModule } from 's' @ NgModule ( { imports : [ CommonModule , FormsModule , HttpClientModule , BrowserAnimationsModule ] , declarations : [ GalleryComponent , ViewerComponent ] , providers : [ ImageService ] , exports : [ GalleryComponent , ViewerComponent ] } ) export class 0 { }	O O $any$ O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O O $complex$ O O $any$ O O $complex$ O O $any$ O $any$ O O O O O $any$ O O
export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ;	O O O O O O O O O O O O O O O O O O O O
import 's' ; import 's' ; import 's' ; import { getTestBed } from 's' ; import { BrowserDynamicTestingModule , platformBrowserDynamicTesting } from 's' ; declare const require ; getTestBed ( ) . initTestEnvironment ( BrowserDynamicTestingModule , platformBrowserDynamicTesting ( ) ) ; const context = require . context ( 's' , true , "s" ) ; context . keys ( ) . map ( context ) ;	O O O O O O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O
import { Component , OnInit } from 's' @ Component ( { selector : 's' , templateUrl : 's' , styleUrls : [ 's' ] } ) export class DemoComponent implements OnInit { flexBorderSize : number = 0 flexImageSize : number = 0 galleryName : string = 's' constructor ( ) { } ngOnInit ( ) { } onViewerVisibilityChanged ( isVisible ) { console . log ( `template` ) } }	O O $any$ O $any$ O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O $any$ O $any$ O $number$ O O O O $number$ O O O O $string$ O O O O O O O O O $void$ O O O O $void$ O $boolean$ O O $Console$ O $void$ O O O O O
import { NgModule } from 's' import { DemoComponent } from 's' import { CommonModule } from 's' import { FormsModule } from 's' import { BrowserAnimationsModule } from 's' import { 0 } from 's' import { HttpClientModule } from 's' import { 0 } from 's' ; @ NgModule ( { declarations : [ DemoComponent ] , imports : [ CommonModule , FormsModule , HttpClientModule , BrowserAnimationsModule , 0 , 0 ] , providers : [ ] , bootstrap : [ DemoComponent ] , exports : [ ] } ) export class GalleryDemoModule { }	O O $any$ O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O O $any$ O O $complex$ O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $undefined[]$ O O O O $complex$ O O $any$ O O $undefined[]$ O O O O O O O $any$ O O
export const environment = { production : true } ;	O O $complex$ O O $boolean$ O O O O
export const environment = { production : false } ;	O O $complex$ O O $boolean$ O O O O
'js' module . exports = function ( config ) { config . set ( { basePath : 's' , frameworks : [ 's' , 's' ] , plugins : [ require ( 's' ) , require ( 's' ) , require ( 's' ) , require ( 's' ) , require ( 's' ) ] , client : { clearContext : false } , coverageIstanbulReporter : { dir : require ( 's' ) . join ( __dirname , 's' ) , reports : [ 's' , 's' ] , fixWebpackSourcePaths : true } , reporters : [ 's' , 's' ] , port : 0 , colors : true , logLevel : config . LOG_INFO , autoWatch : true , browsers : [ 's' ] , singleRun : false } ) ; } ;	O $void$ O $void$ O O O $any$ O O $any$ O $any$ O O $string$ O O O $string[]$ O O O O O O O $any[]$ O O $any$ O O O O $any$ O O O O $any$ O O O O $any$ O O O O $any$ O O O O O $complex$ O O $boolean$ O O O O $complex$ O O $any$ O $any$ O O O O $any$ O $any$ O O O O $string[]$ O O O O O O O $boolean$ O O O O $string[]$ O O O O O O O $number$ O O O $boolean$ O O O $any$ O $any$ O $any$ O $boolean$ O O O $string[]$ O O O O O $boolean$ O O O O O O O
import { enableProdMode } from 's' ; import { platformBrowserDynamic } from 's' ; import { environment } from 's' ; import { GalleryDemoModule } from 's' ; import 's' ; if ( environment . production ) { enableProdMode ( ) ; } platformBrowserDynamic ( ) . bootstrapModule ( GalleryDemoModule ) . catch ( err => console . log ( err ) ) ;	O O $any$ O O O O O O $any$ O O O O O O $complex$ O O O O O O $any$ O O O O O O O O O $complex$ O $boolean$ O O $any$ O O O O $any$ O O O $any$ O $any$ O O $any$ O $any$ O $Console$ O $void$ O $any$ O O O
import 's' ; import 's' ;	O O O O O O
import 's' ; import { getTestBed } from 's' ; import { BrowserDynamicTestingModule , platformBrowserDynamicTesting } from 's' ; declare const require ; getTestBed ( ) . initTestEnvironment ( BrowserDynamicTestingModule , platformBrowserDynamicTesting ( ) ) ; const context = require . context ( 's' , true , "s" ) ; context . keys ( ) . map ( context ) ;	O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O