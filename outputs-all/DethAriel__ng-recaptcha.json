import fs from 's' ; import merge from 's' ; import path from 's' ; const supportedVersions = [ 's' , 's' , 's' ] ; readDirRecursively ( 's' ) . forEach ( processFile ) ; function readDirRecursively ( dir , filePathList : string [ ] = [ ] ) : string [ ] { const entries = fs . readdirSync ( dir ) ; entries . forEach ( ( entry ) => { const fileOrDirPath = dir + 's' + entry ; if ( fs . statSync ( fileOrDirPath ) . isDirectory ( ) ) { filePathList = readDirRecursively ( fileOrDirPath , filePathList ) ; } else { filePathList . push ( fileOrDirPath ) ; } } ) ; return filePathList ; } function stripFirstDir ( filePath ) { const [ _baseDir , ... parts ] = filePath . split ( 's' ) ; return parts . join ( 's' ) ; } function stripSuffix ( filePath , suffix ) { return filePath . substr ( 0 , filePath . length - suffix . length ) ; } function ensureDirectoryExistence ( filePath ) { const dirname = path . dirname ( filePath ) ; if ( fs . existsSync ( dirname ) ) { return true ; } ensureDirectoryExistence ( dirname ) ; fs . mkdirSync ( dirname ) ; } function writeToDestination ( filePath , contents ) { if ( fs . existsSync ( filePath ) ) { fs . unlinkSync ( filePath ) ; } ensureDirectoryExistence ( filePath ) ; fs . writeFileSync ( filePath , contents ) ; } function copyToDestination ( filePath , from ) { if ( fs . existsSync ( filePath ) ) { fs . unlinkSync ( filePath ) ; } ensureDirectoryExistence ( filePath ) ; fs . copyFileSync ( from , filePath ) ; } function processFile ( file ) { if ( file . endsWith ( 's' ) ) { const fileExports = require ( 's' + file ) ; const actualRelativePath = stripFirstDir ( stripSuffix ( file , 's' ) ) ; supportedVersions . forEach ( ( version ) => { if ( fileExports [ version ] ) { writeToDestination ( `template` , fileExports [ version ] ) ; } } ) ; } else if ( file . endsWith ( 's' ) ) { const actualRelativePath = stripFirstDir ( stripSuffix ( file , 's' ) ) ; const commonContents = JSON . parse ( fs . readFileSync ( file , { encoding : 's' } ) ) ; supportedVersions . forEach ( ( version ) => { const versionContents = JSON . parse ( fs . readFileSync ( `template` , { encoding : 's' } , ) , ) ; const contents = JSON . stringify ( merge ( { } , commonContents , versionContents ) , null , 0 , ) ; writeToDestination ( `template` , contents ) ; } ) ; } else if ( file . endsWith ( 's' ) ) { const actualRelativePath = stripFirstDir ( stripSuffix ( file , 's' ) ) ; supportedVersions . forEach ( ( version ) => { copyToDestination ( `template` , file ) ; } ) ; } else { const actualRelativePath = stripFirstDir ( file ) ; supportedVersions . forEach ( ( version ) => { copyToDestination ( `template` , file ) ; } ) ; } }	O $any$ O O O O $any$ O O O O $any$ O O O O $string[]$ O O O O O O O O O $string[]$ O O O O $void$ O $void$ O O O $string[]$ O $string$ O $string[]$ O O O O O O O O O O O O O O $any$ O $any$ O $any$ O $string$ O O $any$ O $any$ O O $any$ O O O O $string$ O $string$ O O O $any$ O O O $any$ O $any$ O $string$ O O $any$ O O O O $string[]$ O $string[]$ O $string$ O $string[]$ O O O O O $string[]$ O $number$ O $string$ O O O O O O O $string[]$ O O O $string$ O $string$ O O O O $string$ O O $string[]$ O O $string$ O $complex$ O O O O O $string[]$ O $string$ O O O O O O $string$ O $string$ O $string$ O O O $string$ O $string$ O O O $string$ O $number$ O $string$ O $number$ O O O O $boolean$ O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O O $any$ O $any$ O $any$ O O O O O O O $boolean$ O $any$ O O $any$ O $any$ O $any$ O O O O $void$ O $string$ O $string$ O O O O $any$ O $any$ O $string$ O O O $any$ O $any$ O $string$ O O O $boolean$ O $string$ O O $any$ O $any$ O $string$ O $string$ O O O O $void$ O $string$ O $string$ O O O O $any$ O $any$ O $string$ O O O $any$ O $any$ O $string$ O O O $boolean$ O $string$ O O $any$ O $any$ O $string$ O $string$ O O O O $void$ O $string$ O O O O $string$ O $boolean$ O O O O O O $any$ O $any$ O O O $string$ O O O $string$ O $string$ O $string$ O $string$ O O O O O $string[]$ O $void$ O O $string$ O O O O O $any$ O $string$ O O O $void$ O O O $any$ O $string$ O O O O O O O O O O O $string$ O $boolean$ O O O O O O $string$ O $string$ O $string$ O $string$ O O O O O O $any$ O $JSON$ O $any$ O $any$ O $any$ O $string$ O O $string$ O O O O O O $string[]$ O $void$ O O $string$ O O O O $any$ O $JSON$ O $any$ O $any$ O $any$ O O O O $string$ O O O O O O O O O $string$ O $JSON$ O $complex$ O $any$ O O O O $any$ O $any$ O O O O O O O O $void$ O O O $string$ O O O O O O O O O $string$ O $boolean$ O O O O O O $string$ O $string$ O $string$ O $string$ O O O O O $string[]$ O $void$ O O $string$ O O O $void$ O O O $string$ O O O O O O O O O $string$ O $string$ O $string$ O O $string[]$ O $void$ O O $string$ O O O $void$ O O O $string$ O O O O O O O
export interface Example { entry : string ; name : string ; path : string ; label : string ; title : string ; index ? : boolean ; additional ? : { filename : string , entry : string , title : string , type : string , } ; } export const examples : Example [ ] = [ { entry : 's' , name : 's' , path : 's' , label : 's' , title : 's' , index : true , } , { entry : 's' , name : 's' , path : 's' , label : 's' , title : 's' , } , { entry : 's' , name : 's' , path : 's' , label : 's' , title : 's' , } , { entry : 's' , name : 's' , path : 's' , label : 's' , title : 's' , } , { entry : 's' , name : 's' , path : 's' , label : 's' , title : 's' , } , { entry : 's' , name : 's' , path : 's' , label : 's' , title : 's' , } , { entry : 's' , name : 's' , path : 's' , label : 's' , title : 's' , additional : { filename : 's' , entry : 's' , title : 's' , type : 's' , } , } , ] ;	O O $any$ O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $boolean$ O O O O $complex$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O O O $Example[]$ O $any$ O O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $true$ O O O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O O O O
import * as fs from 's' ; import * as path from 's' ; import { examples } from 's' ; const sourceDir = path . join ( process . cwd ( ) , 's' ) ; function writeExampleFile ( featureName , fileName , contents ) { const location = path . join ( sourceDir , 's' , 's' , featureName , fileName ) ; fs . writeFileSync ( location , contents , { encoding : 's' } ) ; } function generateMain ( featureName ) { const contents = `template` ; writeExampleFile ( featureName , `template` , contents ) ; } function generateMainDev ( featureName ) { const contents = `template` ; writeExampleFile ( featureName , `template` , contents ) ; } function generateData ( example ) { const featureName = example . name ; const additionalContents = ! example . additional ? 's' : `template` ; const contents = `template` ; writeExampleFile ( featureName , `template` , contents ) ; } function generateLinks ( ) { const location = path . join ( sourceDir , 's' , 's' , 's' ) ; const contents = `template` ; fs . writeFileSync ( location , contents , { encoding : 's' } ) ; } function generateFiles ( ) { examples . map ( ( e ) => e . name ) . forEach ( generateMain ) ; examples . map ( ( e ) => e . name ) . forEach ( generateMainDev ) ; examples . forEach ( generateData ) ; generateLinks ( ) ; } generateFiles ( ) ;	O O O $any$ O O O O O O $any$ O O O O O $Example[]$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $void$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O $string$ O O O O O O O $void$ O $any$ O O O $string$ O O O $void$ O $any$ O O O $string$ O O O O $void$ O $any$ O O O $string$ O O O $void$ O $any$ O O O $string$ O O O O $void$ O $any$ O O O $any$ O $any$ O $any$ O O $string$ O O $any$ O $any$ O O O O O O $string$ O O O $void$ O $any$ O O O $string$ O O O O $void$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O $string$ O O O O O O O $void$ O O O $Example[]$ O $U[]$ O O $Example$ O O $Example$ O $string$ O O $void$ O $void$ O O $Example[]$ O $U[]$ O O $Example$ O O $Example$ O $string$ O O $void$ O $void$ O O $Example[]$ O $void$ O $void$ O O $void$ O O O O $void$ O O O
function generate ( { webpackVersion , outSubdirectory , } : { webpackVersion : 's' | 's' , outSubdirectory ? : string , } ) { return `template` . trim ( ) ; } export const 0 = generate ( { webpackVersion : 's' , outSubdirectory : 's' } ) ; export const 0 = generate ( { webpackVersion : 's' , outSubdirectory : 's' } ) ; export const 0 = generate ( { webpackVersion : 's' } ) ;	O O O O O O $string$ O O O O O O O O O O $string$ O O O O O O O O O O $string$ O O O O O O $string$ O O O O O O O O $string$ O O O O O O O $string$ O O O O O O O O $string$ O O O O O O O $string$ O O O O O O O O O O
import { LayoutModule } from 's' ; import { NgModule } from 's' ; import { MatButtonModule , MatIconModule , MatListModule , MatSidenavModule , MatTabsModule , MatToolbarModule , } from 's' ; import { BrowserModule } from 's' ; import { BrowserAnimationsModule } from 's' ; import { DemoWrapperComponent , NAV_LINKS } from 's' ; import { navLinks } from 's' ; @ NgModule ( { declarations : [ DemoWrapperComponent ] , imports : [ BrowserModule , BrowserAnimationsModule , MatButtonModule , MatIconModule , MatTabsModule , MatToolbarModule , MatSidenavModule , MatListModule , LayoutModule , ] , exports : [ DemoWrapperComponent , ] , providers : [ { provide : NAV_LINKS , useValue : navLinks } , ] , } ) export class DemoWrapperModule { }	O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any[]$ O O $any$ O O O $complex$ O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O $any$ O O
import { Component } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' , } ) export class BasicDemoComponent { public resolved ( captchaResponse ) { console . log ( `template` ) ; } }	O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O O $void$ O $string$ O O $Console$ O $void$ O O O O O O
import { NgModule } from 's' ; import { BrowserModule } from 's' ; import { RecaptchaModule } from 's' ; import { PAGE_SETTINGS } from 's' ; import { DemoWrapperModule } from 's' ; import { BasicDemoComponent } from 's' ; import { settings } from 's' ; @ NgModule ( { bootstrap : [ BasicDemoComponent ] , declarations : [ BasicDemoComponent ] , imports : [ RecaptchaModule , BrowserModule , DemoWrapperModule , ] , providers : [ { provide : PAGE_SETTINGS , useValue : settings } , ] , } ) export class DemoModule { }	O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $complex$ O O $any$ O O $complex$ O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O O O $complex$ O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O $any$ O O
import { Component } from 's' ; export interface FormModel { captcha ? : string ; } @ Component ( { selector : 's' , styles : [ `template` ] , templateUrl : 's' , } ) export class FormsDemoComponent { public formModel : FormModel = { } ; }	O O $any$ O O O O O O $any$ O $string$ O O O O O O $any$ O O $string$ O O O $string[]$ O O O O O $string$ O O O O O O O $any$ O O $FormModel$ O $any$ O O O O O
import { NgModule } from 's' ; import { FormsModule } from 's' ; import { BrowserModule } from 's' ; import { RecaptchaFormsModule , RecaptchaModule } from 's' ; import { PAGE_SETTINGS } from 's' ; import { DemoWrapperModule } from 's' ; import { FormsDemoComponent } from 's' ; import { settings } from 's' ; @ NgModule ( { bootstrap : [ FormsDemoComponent ] , declarations : [ FormsDemoComponent ] , imports : [ RecaptchaModule , RecaptchaFormsModule , BrowserModule , FormsModule , DemoWrapperModule , ] , providers : [ { provide : PAGE_SETTINGS , useValue : settings } , ] , } ) export class DemoModule { }	O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $complex$ O O $any$ O O $complex$ O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $complex$ O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O $any$ O O
import { Component } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' , } ) export class GlobalConfigDemoComponent { public resolved ( captchaResponse ) { console . log ( `template` ) ; } }	O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O O $void$ O $string$ O O $Console$ O $void$ O O O O O O
import { NgModule } from 's' ; import { BrowserModule } from 's' ; import { RECAPTCHA_SETTINGS , RecaptchaLoaderService , RecaptchaModule , RecaptchaSettings , } from 's' ; import { PAGE_SETTINGS } from 's' ; import { DemoWrapperModule } from 's' ; import { GlobalConfigDemoComponent } from 's' ; import { settings } from 's' ; const globalSettings = { siteKey : 's' } ; @ NgModule ( { bootstrap : [ GlobalConfigDemoComponent ] , declarations : [ GlobalConfigDemoComponent ] , imports : [ BrowserModule , RecaptchaModule , DemoWrapperModule , ] , providers : [ { provide : RECAPTCHA_SETTINGS , useValue : globalSettings , } , { provide : PAGE_SETTINGS , useValue : settings } , ] , } ) export class DemoModule { }	O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $RecaptchaSettings$ O O $string$ O O O O O $any$ O O $complex$ O O $any$ O O $complex$ O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O O O $complex$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O $any$ O O
import { Component } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' , } ) export class InvisibleDemoComponent { public captchaResponse : string = 's' ; public resolved ( captchaResponse ) { const newResponse = captchaResponse ? `template` : captchaResponse ; this . captchaResponse += `template` ; } }	O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O O $string$ O O O O O O $void$ O $string$ O O O $string$ O $string$ O O O $string$ O O O $string$ O O O O O
import { NgModule } from 's' ; import { BrowserModule } from 's' ; import { RecaptchaModule } from 's' ; import { PAGE_SETTINGS } from 's' ; import { DemoWrapperModule } from 's' ; import { InvisibleDemoComponent } from 's' ; import { settings } from 's' ; @ NgModule ( { bootstrap : [ InvisibleDemoComponent ] , declarations : [ InvisibleDemoComponent ] , imports : [ BrowserModule , RecaptchaModule , DemoWrapperModule , ] , providers : [ { provide : PAGE_SETTINGS , useValue : settings } , ] , } ) export class DemoModule { }	O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $complex$ O O $any$ O O $complex$ O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O O O $complex$ O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O $any$ O O
import { Component } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' , } ) export class LanguageDemoComponent { public resolved ( captchaResponse ) { console . log ( `template` ) ; } }	O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O O $void$ O $string$ O O $Console$ O $void$ O O O O O O
import { NgModule } from 's' ; import { BrowserModule } from 's' ; import { RECAPTCHA_LANGUAGE , RecaptchaLoaderService , RecaptchaModule , } from 's' ; import { PAGE_SETTINGS } from 's' ; import { DemoWrapperModule } from 's' ; import { LanguageDemoComponent } from 's' ; import { settings } from 's' ; @ NgModule ( { bootstrap : [ LanguageDemoComponent ] , declarations : [ LanguageDemoComponent ] , imports : [ BrowserModule , RecaptchaModule , DemoWrapperModule , ] , providers : [ { provide : RECAPTCHA_LANGUAGE , useValue : 's' , } , { provide : PAGE_SETTINGS , useValue : settings } , ] , } ) export class DemoModule { }	O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $complex$ O O $any$ O O $complex$ O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O O O $complex$ O O O $any$ O $any$ O $string$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O $any$ O O
import { Component } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' , } ) export class PreloadApiDemoComponent { public resolved ( captchaResponse ) { console . log ( `template` ) ; } }	O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O O $void$ O $string$ O O $Console$ O $void$ O O O O O O
const recaptchaScript = document . createElement ( 's' ) ; recaptchaScript . src = 's' ; document . head . appendChild ( recaptchaScript ) ;	O $HTMLScriptElement$ O $Document$ O O O O O O $HTMLScriptElement$ O $string$ O O O $Document$ O $HTMLHeadElement$ O $T$ O $HTMLScriptElement$ O O
import { Injectable , NgModule } from 's' ; import { BrowserModule } from 's' ; import { BehaviorSubject , Observable } from 's' ; import { RecaptchaLoaderService , RecaptchaModule } from 's' ; import { PAGE_SETTINGS } from 's' ; import { DemoWrapperModule } from 's' ; import { PreloadApiDemoComponent } from 's' ; import { settings } from 's' ; @ Injectable ( ) export class PreloadedRecaptchaAPIService { public ready : Observable < 0 . ReCaptcha > ; constructor ( ) { const readySubject = new BehaviorSubject < 0 . ReCaptcha > ( null ) ; this . ready = readySubject . asObservable ( ) ; const interval = setInterval ( ( ) => { if ( typeof grecaptcha === 's' || ! ( grecaptcha . render instanceof Function ) ) { return ; } clearInterval ( interval ) ; readySubject . next ( grecaptcha ) ; } , 0 ) ; } } export const service = new PreloadedRecaptchaAPIService ( ) ; @ NgModule ( { bootstrap : [ PreloadApiDemoComponent ] , declarations : [ PreloadApiDemoComponent ] , imports : [ BrowserModule , RecaptchaModule , DemoWrapperModule , ] , providers : [ { provide : RecaptchaLoaderService , useValue : service , } , { provide : PAGE_SETTINGS , useValue : settings } , ] , } ) export class DemoModule { }	O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O O O O $number$ O $number$ O O O O O O O O $any$ O O O O O $any$ O $any$ O $FunctionConstructor$ O O O O O O $void$ O $number$ O O $any$ O $any$ O $any$ O O O O O O O O O O O $PreloadedRecaptchaAPIService$ O O $any$ O O O O $any$ O O $complex$ O O $any$ O O $complex$ O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O O O $complex$ O O O $any$ O $any$ O $PreloadedRecaptchaAPIService$ O $PreloadedRecaptchaAPIService$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O $any$ O O
import { Component , Inject , OnDestroy , OnInit } from 's' ; import { OnExecuteData , 0 } from 's' ; import { Subscription } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' , } ) export class 0 implements OnInit , OnDestroy { public recentToken : string = 's' ; public readonly executionLog : OnExecuteData [ ] = [ ] ; private allExecutionsSubscription : Subscription ; private singleExecutionSubscription : Subscription ; constructor ( private 0 , ) { } public executeAction ( action ) { if ( this . singleExecutionSubscription ) { this . singleExecutionSubscription . unsubscribe ( ) ; } this . singleExecutionSubscription = this . 0 . execute ( action ) . subscribe ( ( token ) => this . recentToken = token ) ; } public ngOnInit ( ) { this . allExecutionsSubscription = this . 0 . onExecute . subscribe ( ( data ) => this . executionLog . push ( data ) ) ; } public ngOnDestroy ( ) { if ( this . allExecutionsSubscription ) { this . allExecutionsSubscription . unsubscribe ( ) ; } if ( this . singleExecutionSubscription ) { this . singleExecutionSubscription . unsubscribe ( ) ; } } public formatToken ( token ) { if ( ! token ) { return 's' ; } return `template` ; } }	O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O $any$ O $any$ O O $string$ O O O O O O O $any[]$ O $any$ O O O O O O O $any$ O $any$ O O $any$ O $any$ O O O O $ReCaptchaV3Service$ O O O O O $void$ O $string$ O O O O O O $any$ O O O O $any$ O $any$ O O O O O O $any$ O O O $any$ O $any$ O $string$ O O $any$ O O $any$ O O O O $string$ O $any$ O O O O $void$ O O O O O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O O O $any[]$ O $number$ O $any$ O O O O O $void$ O O O O O O O $any$ O O O O $any$ O $any$ O O O O O O O O $any$ O O O O $any$ O $any$ O O O O O O $string$ O $string$ O O O O O $string$ O O O O O O O O O O O
import { NgModule } from 's' ; import { BrowserModule } from 's' ; import { 0 , 0 } from 's' ; import { PAGE_SETTINGS } from 's' ; import { DemoWrapperModule } from 's' ; import { 0 } from 's' ; import { settings } from 's' ; @ NgModule ( { bootstrap : [ 0 ] , declarations : [ 0 ] , imports : [ BrowserModule , 0 , DemoWrapperModule , ] , providers : [ { provide : PAGE_SETTINGS , useValue : settings } , { provide : 0 , useValue : 's' } , ] , } ) export class DemoModule { }	O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O O O $complex$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $string$ O O O O O O O O O O $any$ O O
import 's' ; import 's' ; import 's' ; import 's' ;	O O O O O O O O O O O O
function generate ( { webpackVersion , } : { webpackVersion : 's' | 's' , } ) { return `template` . trim ( ) ; } export const 0 = generate ( { webpackVersion : 's' } ) ; export const 0 = generate ( { webpackVersion : 's' } ) ; export const 0 = generate ( { webpackVersion : 's' } ) ;	O O O O O O O O O O O O O O O O O O O O O $string$ O O O O O O $string$ O O O O O O O O O O O O $string$ O O O O O O O O O O O O $string$ O O O O O O O O O O
function generate ( { webpackVersion , } : { webpackVersion : 's' | 's' , } ) { return `template` . trim ( ) ; } export const 0 = generate ( { webpackVersion : 's' } ) ; export const 0 = generate ( { webpackVersion : 's' } ) ; export const 0 = generate ( { webpackVersion : 's' } ) ;	O O O O O O O O O O O O O O O O O O O O O $string$ O O O O O O $string$ O O O O O O O O O O O O $string$ O O O O O O O O O O O O $string$ O O O O O O O O O O
function generate ( { webpackVersion , outSubdirectory , } : { webpackVersion : 's' | 's' , outSubdirectory ? : string , } ) { return `template` . trim ( ) ; } export const 0 = generate ( { webpackVersion : 's' , outSubdirectory : 's' } ) ; export const 0 = generate ( { webpackVersion : 's' , outSubdirectory : 's' } ) ; export const 0 = generate ( { webpackVersion : 's' } ) ;	O O O O O O $string$ O O O O O O O O O O $string$ O O O O O O O O O O $string$ O O O O O O $string$ O O O O O O O O $string$ O O O O O O O $string$ O O O O O O O O $string$ O O O O O O O $string$ O O O O O O O O O O
import { isPlatformBrowser } from 's' ; import { Inject , Injectable , InjectionToken , Optional , PLATFORM_ID , } from 's' ; import { BehaviorSubject , Observable , of } from 's' ; export const RECAPTCHA_LANGUAGE = new InjectionToken < string > ( 's' ) ; export const RECAPTCHA_BASE_URL = new InjectionToken < string > ( 's' ) ; export const RECAPTCHA_NONCE = new InjectionToken < string > ( 's' ) ; declare global { interface Window { 0 : ( ) => void ; } } export function loadScript ( renderMode : 's' | string , onLoaded : ( grecaptcha : 0 . ReCaptcha ) => void , urlParams , url ? , nonce ? , ) { window . 0 = ( ) => { onLoaded ( grecaptcha ) ; } ; const script = document . createElement ( 's' ) ; script . innerHTML = 's' ; const baseUrl = url || 's' ; script . src = `template` ; if ( nonce ) { ( script as any ) . nonce = nonce ; } script . async = true ; script . defer = true ; document . head . appendChild ( script ) ; } @ Injectable ( ) export class RecaptchaLoaderService { private static ready : BehaviorSubject < 0 . ReCaptcha > = null ; public ready : Observable < 0 . ReCaptcha > ; private language : string ; private baseUrl : string ; private nonce : string ; constructor ( @ Inject ( PLATFORM_ID ) private readonly platformId , @ Optional ( ) @ Inject ( RECAPTCHA_LANGUAGE ) language ? , @ Optional ( ) @ Inject ( RECAPTCHA_BASE_URL ) baseUrl ? , @ Optional ( ) @ Inject ( RECAPTCHA_NONCE ) nonce ? , ) { this . language = language ; this . baseUrl = baseUrl ; this . nonce = nonce ; this . init ( ) ; this . ready = isPlatformBrowser ( this . platformId ) ? RecaptchaLoaderService . ready . asObservable ( ) : of ( ) ; } private init ( ) { if ( RecaptchaLoaderService . ready ) { return ; } if ( isPlatformBrowser ( this . platformId ) ) { const subject = new BehaviorSubject < 0 . ReCaptcha > ( null ) ; RecaptchaLoaderService . ready = subject ; const langParam = this . language ? 's' + this . language : 's' ; loadScript ( 's' , ( grecaptcha ) => subject . next ( grecaptcha ) , langParam , this . baseUrl , this . nonce ) ; } } }	O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O $any$ O O O O O O O O O $any$ O O $any$ O O O O O O O O O $any$ O O $any$ O O O O O O O O $any$ O O $complex$ O $void$ O O O O O O O O O O $void$ O $string$ O O O O O $void$ O O $any$ O $any$ O $any$ O O O O $string$ O $string$ $string$ O $string$ $string$ O O O $complex$ O $void$ O O O O O $void$ O $any$ O O O O O $HTMLScriptElement$ O $Document$ O O O O O O $HTMLScriptElement$ O $string$ O O O O $string$ O $string$ O O O $HTMLScriptElement$ O $string$ O O O O O $string$ O O O $HTMLScriptElement$ O O O O $any$ O $string$ O O $HTMLScriptElement$ O $boolean$ O O O $HTMLScriptElement$ O $boolean$ O O O $Document$ O $HTMLHeadElement$ O $T$ O $HTMLScriptElement$ O O O O $any$ O O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O $string$ O O O O $string$ O O O O $string$ O O O O O O $any$ O $any$ O O O $any$ O O $any$ O O O $any$ O $any$ O $string$ $string$ O O $any$ O O O $any$ O $any$ O $string$ $string$ O O $any$ O O O $any$ O $any$ O $string$ $string$ O O O O O $string$ O $string$ O O O $string$ O $string$ O O O $string$ O $string$ O O O $void$ O O O O O $any$ O $any$ O O O $any$ O O $any$ O $any$ O $any$ O O O $any$ O O O O O $void$ O O O O O $any$ O $any$ O O O O O O O $any$ O O O $any$ O O O O $any$ O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O $string$ O O O $string$ O O O O O $string$ O O O $void$ O O O O $any$ O O $any$ O $any$ O $any$ O O $string$ O O O $string$ O O O $string$ O O O O O
import { InjectionToken } from 's' ; export const RECAPTCHA_SETTINGS = new InjectionToken < RecaptchaSettings > ( 's' ) ; export interface RecaptchaSettings { siteKey ? : string ; theme ? : 0 . Theme ; type ? : 0 . Type ; size ? : 0 . Size ; badge ? : 0 . Badge ; }	O O $any$ O O O O O O $any$ O O $any$ O $any$ O O O O O O O $any$ O $string$ O O O O $any$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O O
import { AfterViewInit , Component , ElementRef , EventEmitter , HostBinding , Inject , Input , NgZone , OnDestroy , Optional , Output , } from 's' ; import { Subscription } from 's' ; import { RecaptchaLoaderService } from 's' ; import { RECAPTCHA_SETTINGS , RecaptchaSettings } from 's' ; let nextId = 0 ; @ Component ( { exportAs : 's' , selector : 's' , template : `template` , } ) export class RecaptchaComponent implements AfterViewInit , OnDestroy { @ Input ( ) @ HostBinding ( 's' ) public id = `template` ; @ Input ( ) public siteKey : string ; @ Input ( ) public theme : 0 . Theme ; @ Input ( ) public type : 0 . Type ; @ Input ( ) public size : 0 . Size ; @ Input ( ) public tabIndex : number ; @ Input ( ) public badge : 0 . Badge ; @ Output ( ) public resolved = new EventEmitter < string > ( ) ; private subscription : Subscription ; private widget : number ; private grecaptcha : 0 . ReCaptcha ; private executeRequested : boolean ; constructor ( private elementRef , private loader , private zone , @ Optional ( ) @ Inject ( RECAPTCHA_SETTINGS ) settings ? , ) { if ( settings ) { this . siteKey = settings . siteKey ; this . theme = settings . theme ; this . type = settings . type ; this . size = settings . size ; this . badge = settings . badge ; } } public ngAfterViewInit ( ) { this . subscription = this . loader . ready . subscribe ( ( grecaptcha : 0 . ReCaptcha ) => { if ( grecaptcha != null && grecaptcha . render instanceof Function ) { this . grecaptcha = grecaptcha ; this . renderRecaptcha ( ) ; } } ) ; } public ngOnDestroy ( ) { this . grecaptchaReset ( ) ; if ( this . subscription ) { this . subscription . unsubscribe ( ) ; } } public execute ( ) { if ( this . size !== 's' ) { return ; } if ( this . widget != null ) { this . grecaptcha . execute ( this . widget ) ; } else { this . executeRequested = true ; } } public reset ( ) { if ( this . widget != null ) { if ( this . grecaptcha . getResponse ( this . widget ) ) { this . resolved . emit ( null ) ; } this . grecaptchaReset ( ) ; } } private expired ( ) { this . resolved . emit ( null ) ; } private captchaResponseCallback ( response ) { this . resolved . emit ( response ) ; } private grecaptchaReset ( ) { if ( this . widget != null ) { this . zone . runOutsideAngular ( ( ) => this . grecaptcha . reset ( this . widget ) ) ; } } private renderRecaptcha ( ) { this . widget = this . grecaptcha . render ( this . elementRef . nativeElement , { badge : this . badge , callback : ( response ) => { this . zone . run ( ( ) => this . captchaResponseCallback ( response ) ) ; } , 's' : ( ) => { this . zone . run ( ( ) => this . expired ( ) ) ; } , sitekey : this . siteKey , size : this . size , tabindex : this . tabIndex , theme : this . theme , type : this . type , } ) ; if ( this . executeRequested === true ) { this . executeRequested = false ; this . execute ( ) ; } } }	O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O $number$ O O O O $any$ O O $string$ O O O $string$ O O O $string$ O O O O O O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O O O O $string$ O O O O $any$ O O O $string$ O O O O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O O $number$ O O O O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O O $any$ O O O O O O O $any$ O $any$ O O $number$ O O O O $any$ O $any$ O $any$ O O $boolean$ O O O O O O $ElementRef$ O O $RecaptchaLoaderService$ O O $NgZone$ O O $any$ O O O $any$ O $any$ O $RecaptchaSettings$ $RecaptchaSettings$ O O O O O $RecaptchaSettings$ O O O O $string$ O $RecaptchaSettings$ O $string$ O O O $any$ O $RecaptchaSettings$ O $any$ O O O $any$ O $RecaptchaSettings$ O $any$ O O O $any$ O $RecaptchaSettings$ O $any$ O O O $any$ O $RecaptchaSettings$ O $any$ O O O O $void$ O O O O O $any$ O O O $RecaptchaLoaderService$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O $FunctionConstructor$ O O O O $any$ O $any$ O O O $void$ O O O O O O O O O $void$ O O O O O $void$ O O O O O O O $any$ O O O O $any$ O $any$ O O O O O O $void$ O O O O O O O $any$ O O O O O O O O O O O $number$ O O O O O O $any$ O $any$ O O O $number$ O O O O O O O $boolean$ O O O O O O $void$ O O O O O O O $number$ O O O O O O O O $any$ O $any$ O O O $number$ O O O O O $any$ O $any$ O O O O O O O $void$ O O O O O O $void$ O O O O O $any$ O $any$ O O O O O O $void$ O $string$ O O O O $any$ O $any$ O $string$ O O O O $void$ O O O O O O O $number$ O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O $number$ O O O O O O $void$ O O O O O $number$ O O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O O O $any$ O $void$ O O $string$ O O O O O $any$ O $any$ O O O O O O $void$ O $string$ O O O O O O O O O O O O O $any$ O $any$ O O O O O O $void$ O O O O O O $string$ O O O $string$ O $any$ O O O $any$ O $number$ O O O $number$ O $any$ O O O $any$ O $any$ O O O $any$ O O O O O O O O $boolean$ O O O O O O $boolean$ O O O O O $void$ O O O O O O
import { NgModule } from 's' ; import { RecaptchaComponent } from 's' ; @ NgModule ( { declarations : [ RecaptchaComponent , ] , exports : [ RecaptchaComponent , ] , } ) export class RecaptchaCommonModule { }	O O $any$ O O O O O O $any$ O O O O O $any$ O O $complex$ O O $any$ O O O $complex$ O O $any$ O O O O O O O $any$ O O
import { NgModule } from 's' ; import { RecaptchaCommonModule } from 's' ; import { RecaptchaLoaderService } from 's' ; import { RecaptchaComponent } from 's' ; @ NgModule ( { exports : [ RecaptchaComponent , ] , imports : [ RecaptchaCommonModule , ] , providers : [ RecaptchaLoaderService , ] , } ) export class RecaptchaModule { public static forRoot ( ) { return RecaptchaModule ; } }	O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $complex$ O O $any$ O O O $complex$ O O $any$ O O O $complex$ O O $any$ O O O O O O O $any$ O O O $complex$ O O O O $any$ O O O
import { isPlatformBrowser } from 's' ; import { Inject , Injectable , InjectionToken , NgZone , Optional , PLATFORM_ID } from 's' ; import { Observable , Subject } from 's' ; import { loadScript , RECAPTCHA_BASE_URL , RECAPTCHA_NONCE } from 's' ; export const 0 = new InjectionToken < string > ( 's' ) ; export interface OnExecuteData { action : string ; token : string ; } type ActionBacklogEntry = [ string , Subject < string > ] ; @ Injectable ( ) export class 0 { private readonly isBrowser : boolean ; private readonly siteKey : string ; private readonly zone : NgZone ; private actionBacklog : ActionBacklogEntry [ ] | undefined ; private nonce : string ; private baseUrl : string ; private grecaptcha : 0 . ReCaptcha ; private onExecuteSubject : Subject < OnExecuteData > ; private onExecuteObservable : Observable < OnExecuteData > ; constructor ( zone , @ Inject ( 0 ) siteKey , @ Inject ( PLATFORM_ID ) platformId , @ Optional ( ) @ Inject ( RECAPTCHA_BASE_URL ) baseUrl ? , @ Optional ( ) @ Inject ( RECAPTCHA_NONCE ) nonce ? , ) { this . zone = zone ; this . isBrowser = isPlatformBrowser ( platformId ) ; this . siteKey = siteKey ; this . nonce = nonce ; this . baseUrl = baseUrl ; this . init ( ) ; } public get onExecute ( ) : Observable < OnExecuteData > { if ( ! this . onExecuteSubject ) { this . onExecuteSubject = new Subject < OnExecuteData > ( ) ; this . onExecuteObservable = this . onExecuteSubject . asObservable ( ) ; } return this . onExecuteObservable ; } public execute ( action ) < string > { const subject = new Subject < string > ( ) ; if ( this . isBrowser ) { if ( ! this . grecaptcha ) { if ( ! this . actionBacklog ) { this . actionBacklog = [ ] ; } this . actionBacklog . push ( [ action , subject ] ) ; } else { this . executeActionWithSubject ( action , subject ) ; } } return subject . asObservable ( ) ; } private executeActionWithSubject ( action , subject < string > ) { this . zone . runOutsideAngular ( ( ) => { ( this . grecaptcha . execute as any ) ( this . siteKey , { action } , ) . then ( ( token ) => { this . zone . run ( ( ) => { subject . next ( token ) ; subject . complete ( ) ; if ( this . onExecuteSubject ) { this . onExecuteSubject . next ( { action , token } ) ; } } ) ; } ) ; } ) ; } private init ( ) { if ( this . isBrowser ) { if ( 's' in window ) { this . grecaptcha = grecaptcha ; } else { loadScript ( this . siteKey , this . onLoadComplete , 's' , this . baseUrl , this . nonce ) ; } } } private onLoadComplete = ( grecaptcha : 0 . ReCaptcha ) => { this . grecaptcha = grecaptcha ; if ( this . actionBacklog && this . actionBacklog . length > 0 ) { this . actionBacklog . forEach ( ( [ action , subject ] ) => this . executeActionWithSubject ( action , subject ) ) ; this . actionBacklog = undefined ; } } }	O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $void$ O $any$ O $any$ O O O O O O $any$ O O $any$ O O O O O O O O O $any$ O $string$ O O O $string$ O O O O O $any$ O O O O $any$ O O O O O O $any$ O O O O $any$ O O O $boolean$ O O O O O $string$ O O O O O $any$ O $any$ O O $complex$ O $any$ O O O O O O $string$ O O O O $string$ O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O $NgZone$ O O $any$ O $any$ O $string$ O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O $any$ O $string$ $string$ O O $any$ O O O $any$ O $any$ O $string$ $string$ O O O O O $any$ O $any$ O O O $boolean$ O $any$ O $any$ O O O O $string$ O $string$ O O O $string$ O $string$ O O O $string$ O $string$ O O O $void$ O O O O O O $any$ O O O $any$ O $any$ O O O O O O O $any$ O O O O $any$ O O $any$ O $any$ O O O O O O $any$ O O O $any$ O $any$ O O O O O O O $any$ O O O $Observable$ O $string$ O O O O O O $any$ O O $any$ O O O O O O O O O O $boolean$ O O O O O O O $any$ O O O O O O O $complex$ O O O O $complex$ O O O O O O O $complex$ O $number$ O O $string$ O $any$ O O O O O O O O $void$ O $string$ O $any$ O O O O O $any$ O $any$ O O O O O $void$ O $string$ O $Subject$ O O O O O O O $any$ O $any$ O O O O O O O O $any$ O $any$ O O O O O O $string$ O O $string$ O O O O $any$ O O $string$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O $string$ O O $any$ O $any$ O O O O O O O $any$ O O O O $any$ O $any$ O O $string$ O $string$ O O O O O O O O O O O O O O O $void$ O O O O O O O $boolean$ O O O O O O $complex$ O O O O $any$ O $any$ O O O O $void$ O O O $string$ O O O $void$ O O O O O $string$ O O O $string$ O O O O O O $void$ O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $complex$ O O O $complex$ O $number$ O O O O O O $complex$ O $void$ O O O $string$ O $any$ O O O O O $void$ O $string$ O $any$ O O O O O $complex$ O $undefined$ O O O O
import { NgModule } from 's' ; import { 0 } from 's' ; @ NgModule ( { providers : [ 0 , ] , } ) export class 0 { }	O O $any$ O O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O O O O $any$ O O
import { Directive , forwardRef , HostListener , } from 's' ; import { ControlValueAccessor , NG_VALUE_ACCESSOR , } from 's' ; import { RecaptchaComponent } from 's' ; @ Directive ( { providers : [ { multi : true , provide : NG_VALUE_ACCESSOR , useExisting : forwardRef ( ( ) => RecaptchaValueAccessorDirective ) , } , ] , selector : 's' , } ) export class RecaptchaValueAccessorDirective implements ControlValueAccessor { private onChange : ( value ) => void ; private onTouched : ( ) => void ; constructor ( private host ) { } public writeValue ( value ) { if ( ! value ) { this . host . reset ( ) ; } } public registerOnChange ( fn : ( value ) => void ) { this . onChange = fn ; } public registerOnTouched ( fn : ( ) => void ) { this . onTouched = fn ; } @ HostListener ( 's' , [ 's' ] ) public onResolve ( $event ) { if ( this . onChange ) { this . onChange ( $event ) ; } if ( this . onTouched ) { this . onTouched ( ) ; } } }	O O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O O O O $any$ O O O O O $any$ O O $complex$ O O O $boolean$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O $string$ O O O O O O O $any$ O $any$ O O $void$ O O $string$ O O O O O $void$ O O O O O O O O O $RecaptchaComponent$ O O O O $void$ O $string$ O O O O O $string$ O O O O $RecaptchaComponent$ O $void$ O O O O O O $void$ O $void$ O O $string$ O O O O O O O $void$ O $void$ O O O $void$ O $void$ O O O O O O O O O $void$ O $void$ O O O $any$ O O O O O O O O $void$ O $string$ O O O O O O $void$ O O O O $void$ O $string$ O O O O O O O $void$ O O O O $void$ O O O O O O
import { NgModule } from 's' ; import { FormsModule } from 's' ; import { RecaptchaCommonModule } from 's' ; import { RecaptchaValueAccessorDirective } from 's' ; @ NgModule ( { declarations : [ RecaptchaValueAccessorDirective , ] , exports : [ RecaptchaValueAccessorDirective ] , imports : [ FormsModule , RecaptchaCommonModule ] , } ) export class RecaptchaFormsModule { }	O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $complex$ O O $any$ O O O $complex$ O O $any$ O O $any[]$ O O $any$ O $any$ O O O O O O $any$ O O
export { RecaptchaComponent } from 's' ; export { RecaptchaLoaderService , RECAPTCHA_LANGUAGE , RECAPTCHA_BASE_URL , RECAPTCHA_NONCE , } from 's' ; export { RecaptchaModule } from 's' ; export { RECAPTCHA_SETTINGS , RecaptchaSettings } from 's' ; export { 0 } from 's' ; export { OnExecuteData , 0 , 0 } from 's' ; export { RecaptchaFormsModule } from 's' ; export { RecaptchaValueAccessorDirective } from 's' ;	O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O