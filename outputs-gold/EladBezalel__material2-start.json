import { Component } from 's' ; import { MatDialogRef } from 's' ; @ Component ( { templateUrl : 's' } ) export class DialogComponent { avatars = new Array ( 0 ) . fill ( 0 ) . map ( ( _ , i ) => `template` ) ; selectedAvatar = this . avatars [ 0 ] ; constructor ( public dialogRef < DialogComponent > ) { } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $MatDialogRef$ O O O O O O O
import { Component } from 's' ; import { MatIconRegistry , MatDialog } from 's' ; import { DomSanitizer } from 's' ; import 's' ; import { DialogComponent } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' , styleUrls : [ 's' ] } ) export class AppComponent { users = [ { name : 's' , avatar : 's' , details : 's' + 's' + 's' + 's' , isAdmin : true , isCool : false } , { name : 's' , avatar : 's' , details : 's' + 's' + 's' , isAdmin : false , isCool : true } , { name : 's' , avatar : 's' , details : 's' + 's' + 's' + 's' + 's' + 's' , isAdmin : true , isCool : true } , { name : 's' , avatar : 's' , details : 's' + 's' + 's' , isAdmin : false , isCool : false } , { name : 's' , avatar : 's' , details : 's' + 's' , isAdmin : false , isCool : true } , { name : 's' , avatar : 's' , details : 's' + 's' + 's' + 's' + 's' , isAdmin : true , isCool : true } ] ; selectedUser = this . users [ 0 ] ; isDarkTheme = false ; constructor ( iconRegistry , sanitizer , private dialog ) { const avatarsSafeUrl = sanitizer . bypassSecurityTrustResourceUrl ( 's' ) ; iconRegistry . addSvgIconSetInNamespace ( 's' , avatarsSafeUrl ) ; } openAdminDialog ( ) { this . dialog . open ( DialogComponent ) . afterClosed ( ) . filter ( result => ! ! result ) . subscribe ( user => { this . users . push ( user ) ; this . selectedUser = user ; } ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $MatIconRegistry$ O $DomSanitizer$ O O $MatDialog$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { BrowserModule } from 's' ; import { NgModule } from 's' ; import { FormsModule } from 's' ; import { HttpClientModule } from 's' ; import { BrowserAnimationsModule } from 's' ; import { AppComponent } from 's' ; import { DialogComponent } from 's' ; import { FlexLayoutModule } from 's' ; import { MatButtonModule , MatCardModule , MatCheckboxModule , MatDialogModule , MatIconModule , MatInputModule , MatListModule , MatMenuModule , MatSelectModule , MatSidenavModule , MatSlideToggleModule , MatTabsModule , MatToolbarModule } from 's' ; import 's' ; @ NgModule ( { declarations : [ AppComponent , DialogComponent , ] , imports : [ BrowserModule , FormsModule , HttpClientModule , BrowserAnimationsModule , MatButtonModule , MatCardModule , MatCheckboxModule , MatDialogModule , MatIconModule , MatInputModule , MatListModule , MatMenuModule , MatSelectModule , MatSidenavModule , MatSlideToggleModule , MatTabsModule , MatToolbarModule , FlexLayoutModule ] , providers : [ ] , entryComponents : [ DialogComponent ] , bootstrap : [ AppComponent ] } ) export class AppModule { }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
export const environment = { production : true } ;	O O O O O O O O O O
export const environment = { production : false } ;	O O O O O O O O O O
import { enableProdMode } from 's' ; import { platformBrowserDynamic } from 's' ; import { AppModule } from 's' ; import { environment } from 's' ; if ( environment . production ) { enableProdMode ( ) ; } platformBrowserDynamic ( ) . bootstrapModule ( AppModule ) ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import 's' ; import 's' ; import 's' ;	O O O O O O O O O
const createMenu = require ( 's' ) ; const git = require ( 's' ) ( ) ; const checkoutTag = tag => { return git . reset ( [ 's' , tag ] ) . then ( ( ) => mainMenu ( ) ) . catch ( console . log ) ; } ; const populateTag = tag => getTagHash ( tag ) . then ( commit => ( { name : tag , commit } ) ) ; const checkChanges = ( ) => git . diff ( [ 's' ] ) ; const buildTags = ( tags , prefix = 's' ) => { return Promise . resolve ( tags . filter ( tag => tag . startsWith ( prefix ) ) ) . then ( tags => tags . sort ( ( a , b ) => parseInt ( a . split ( 's' ) [ 0 ] ) - parseInt ( b . split ( 's' ) [ 0 ] ) ) ) . then ( tags => Promise . all ( tags . map ( tag => populateTag ( tag ) ) ) ) . then ( tags => tags . map ( ( tag ) => ( { ... tag , prefix , label : tag . name . split ( 's' ) . slice ( 0 ) . join ( 's' ) . toUpperCase ( ) } ) ) ) ; } ; const getTagList = ( ) => git . tags ( ) . then ( ( { all : tags } ) => tags ) ; const getTagHash = tagName => git . raw ( [ 's' , 's' , tagName ] ) ; const confirmSelectionMenu = name => { const subMenu = createMenu ( { x : 0 , y : 0 } ) ; subMenu . writeLine ( 's' ) ; subMenu . writeSeparator ( ) ; subMenu . writeLine ( `template` ) ; subMenu . writeLine ( `template` ) ; subMenu . writeSeparator ( ) ; subMenu . add ( 's' , ( ) => checkoutTag ( name ) ) ; subMenu . add ( 's' , mainMenu ) } ; const mainMenu = ( ) => { const tagPrefix = 's' ; return getTagList ( ) . then ( tags => buildTags ( tags , tagPrefix ) ) . then ( tags => Promise . all ( [ tags , git . revparse ( [ 's' ] ) ] ) ) . then ( ( [ tags , headCommit ] ) => { if ( ! tags . length ) { return console . log ( `template` ) ; } const menu = createMenu ( { x : 0 , y : 0 } ) ; menu . writeLine ( 's' , 's' ) ; menu . writeSeparator ( ) ; tags . forEach ( ( { name , label , commit } ) => { menu . addItem ( { label , marker : headCommit === commit ? 's' : 's' , handler : ( ) => checkChanges ( ) . then ( changes => changes ? confirmSelectionMenu ( name ) : checkoutTag ( name ) ) } ) ; } ) ; menu . writeSeparator ( ) ; menu . writeLine ( 's' ) ; menu . writeLine ( 's' ) ; menu . writeSeparator ( ) ; menu . add ( "s" , menu . close ) ; } ) } ; mainMenu ( ) ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any