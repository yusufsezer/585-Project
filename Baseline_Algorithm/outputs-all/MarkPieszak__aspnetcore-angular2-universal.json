import { isPlatformServer } from 's' ; import { Inject , Injectable , PLATFORM_ID , 0 , ViewEncapsulation } from 's' ; import { DOCUMENT } from 's' ; @ Injectable ( ) export class LinkService { private isServer : boolean = isPlatformServer ( this . platform_id ) ; constructor ( private rendererFactory , @ Inject ( DOCUMENT ) private document , @ Inject ( PLATFORM_ID ) private platform_id ) { } addTag ( tag , forceCreation ? ) { try { const renderer = this . rendererFactory . createRenderer ( this . document , { id : 's' , encapsulation : ViewEncapsulation . None , styles : [ ] , data : { } } ) ; const link = renderer . createElement ( 's' ) ; const head = this . document . head ; const selector = this . _parseSelector ( tag ) ; if ( head === null ) { throw new Error ( 's' ) ; } Object . keys ( tag ) . forEach ( ( prop ) => { return renderer . setAttribute ( link , prop , tag [ prop ] ) ; } ) ; renderer . appendChild ( head , link ) ; } catch ( e ) { console . error ( 's' , e ) ; } } private _parseSelector ( tag ) { const attr = tag . rel ? 's' : 's' ; return `template` ; } } export declare type LinkDefinition = { charset ? : string ; crossorigin ? : string ; href ? : string ; hreflang ? : string ; media ? : string ; rel ? : string ; rev ? : string ; sizes ? : string ; target ? : string ; type ? : string ; } & { [ prop ] : string ; } ;	O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O O O $any$ O O $boolean$ O O O $any$ O O O $any$ O O O O O $RendererFactory2$ O O $any$ O $any$ O O $any$ O O $any$ O $any$ O O $any$ O O O $void$ O $LinkDefinition$ O $boolean$ $boolean$ O O O O O $any$ O O O $any$ O $any$ O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $undefined[]$ O O O O ${}$ O O O O O O O $any$ O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O O $string$ O O O $string$ O $LinkDefinition$ O O O O $any$ O O O O O O $ErrorConstructor$ O O O O O $ObjectConstructor$ O $complex$ O $LinkDefinition$ O O $void$ O O $string$ O O O O $any$ O $any$ O $any$ O $string$ O $LinkDefinition$ O $string$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O $Console$ O $void$ O O O $any$ O O O O O $string$ O $LinkDefinition$ O O O $string$ O $LinkDefinition$ O $string$ O O O O O O O O O O O O O $any$ O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O O O O O $string$ O O O O O O
import { Component , Injector , OnDestroy , OnInit , ViewEncapsulation } from 's' ; import { Meta , Title } from 's' ; import { ActivatedRoute , NavigationEnd , Router } from 's' ; import { REQUEST } from 's' ; import { TranslateService } from 's' ; import { Subscription } from 's' ; import { filter , map , mergeMap } from 's' ; import { LinkService } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' , styleUrls : [ 's' ] , encapsulation : ViewEncapsulation . None } ) export class AppComponent implements OnInit , OnDestroy { private endPageTitle : string = 's' ; private defaultPageTitle : string = 's' ; private routerSub$ : Subscription ; private request ; constructor ( private router , private activatedRoute , private title , private meta , private linkService , public translate , private injector ) { translate . setDefaultLang ( 's' ) ; translate . use ( 's' ) ; this . request = this . injector . get ( REQUEST ) ; console . log ( `template` ) ; console . log ( `template` ) ; console . log ( this . request ) ; } ngOnInit ( ) { this . _changeTitleOnNavigation ( ) ; } ngOnDestroy ( ) { this . routerSub$ . unsubscribe ( ) ; } private _changeTitleOnNavigation ( ) { this . routerSub$ = this . router . events . pipe ( filter ( event => event instanceof NavigationEnd ) , map ( ( ) => this . activatedRoute ) , map ( route => { while ( route . firstChild ) route = route . firstChild ; return route ; } ) , filter ( route => route . outlet === 's' ) , mergeMap ( route => route . data ) ) . subscribe ( event => { this . _setMetaAndLinks ( event ) ; } ) ; } private _setMetaAndLinks ( event ) { const title = event [ 's' ] ? `template` : `template` ; this . title . setTitle ( title ) ; const metaData = event [ 's' ] || [ ] ; const linksData = event [ 's' ] || [ ] ; for ( let i = 0 ; i < metaData . length ; i ++ ) { this . meta . updateTag ( metaData [ i ] ) ; } for ( let i = 0 ; i < linksData . length ; i ++ ) { this . linkService . addTag ( linksData [ i ] ) ; } } }	O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O $string$ O O O O O O $string$ O O O O O O $any$ O $any$ O O $any$ O O O O $Router$ O O $ActivatedRoute$ O O $Title$ O O $Meta$ O O $LinkService$ O O $TranslateService$ O O $Injector$ O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O $any$ O O O $any$ O $any$ O $any$ O O $Console$ O $void$ O O O O $Console$ O $void$ O O O O $Console$ O $void$ O O O $any$ O O O $void$ O O O O O $void$ O O O O $void$ O O O O O $any$ O $any$ O O O O O $void$ O O O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O O $any$ O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O $void$ O $any$ O O O O O O O $void$ O $any$ O O O $string$ O $any$ O O O O O O O O O O $any$ O $any$ O $string$ O O O $any$ O $any$ O O O O O O O O $any$ O $any$ O O O O O O O O O O $number$ O O O $number$ O $any$ O $any$ O $number$ O O O O O $any$ O $any$ O $any$ O $number$ O O O O O O O $number$ O O O $number$ O $any$ O $any$ O $number$ O O O O O $LinkService$ O $void$ O $any$ O $number$ O O O O O O
import { Component } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' , styleUrls : [ 's' ] } ) export class NavMenuComponent { collapse : string = 's' ; collapseNavbar ( ) { if ( this . collapse . length > 0 ) { this . collapse = 's' ; } else { this . collapse = 's' ; } } collapseMenu ( ) { this . collapse = 's' ; } }	O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O $any$ O $string$ O O O O O $void$ O O O O O O O $string$ O $number$ O O O O O O $string$ O O O O O O O O $string$ O O O O O $void$ O O O O O $string$ O O O O O
export interface IUser { id : number ; name : string ; }	O O $any$ O $number$ O O O $string$ O O O O
import { HttpClient } from 's' ; import { Injectable , Injector } from 's' ; import { ORIGIN_URL } from 's' ; import { IUser } from 's' ; @ Injectable ( ) export class UserService { private baseUrl : string ; constructor ( private http , private injector ) { this . baseUrl = this . injector . get ( ORIGIN_URL ) ; } getUsers ( ) { return this . http . get < IUser [ ] > ( `template` ) ; } getUser ( user ) { return this . http . get < IUser > ( `template` + user . id ) ; } deleteUser ( user ) { return this . http . delete < IUser > ( `template` + user . id ) ; } updateUser ( user ) { return this . http . put < IUser > ( `template` + user . id , user ) ; } addUser ( newUserName ) { return this . http . post < IUser > ( `template` , { name : newUserName } ) ; } }	O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O $any$ O O $string$ O O O O O O $HttpClient$ O O $Injector$ O O O O $string$ O O O $any$ O $any$ O $any$ O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O O O $any$ O $IUser$ O O O O O $any$ O $any$ O $any$ O O O O $IUser$ O $number$ O O O $any$ O $IUser$ O O O O O $any$ O $any$ O $any$ O O O O $IUser$ O $number$ O O O $any$ O $IUser$ O O O O O $any$ O $any$ O $any$ O O O O $IUser$ O $number$ O $IUser$ O O O $any$ O $string$ O O O O O $any$ O $any$ O $any$ O O O O O $string$ O $string$ O O O O O
import { Component , EventEmitter , Input , OnChanges , OnInit , Output , SimpleChanges } from 's' ; import { FormControl , FormGroup } from 's' ; import { debounceTime , distinctUntilChanged } from 's' ; import { IUser } from 's' ; import { UserService } from 's' ; @ Component ( { selector : 's' , styleUrls : [ 's' ] , templateUrl : 's' } ) export class UserDetailComponent implements OnInit , OnChanges { @ Input ( ) user : IUser ; @ Output ( ) userUpdate : EventEmitter < any > = new EventEmitter ( ) ; userForm = new FormGroup ( { id : new FormControl ( ) , name : new FormControl ( ) } ) ; constructor ( private userService ) { } ngOnInit ( ) { this . userForm . valueChanges . pipe ( debounceTime ( 0 ) , distinctUntilChanged ( ) ) . subscribe ( user => ( this . user = user ) ) ; } ngOnChanges ( changes ) { this . userForm . patchValue ( this . user ) ; } updateUser ( ) { this . userService . updateUser ( this . userForm . value ) . subscribe ( result => { console . log ( 's' , result ) ; } , error => { console . log ( `template` ) ; } ) ; this . userUpdate . emit ( this . user ) ; } }	O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string[]$ O O O O O $string$ O O O O O O $any$ O $any$ O $any$ O O $any$ O O $IUser$ O $any$ O O $any$ O O $any$ O $any$ O O O O O $any$ O O O $any$ O O $any$ O O $any$ O O $any$ O O O $any$ O O $any$ O O O O O O O O $UserService$ O O O $void$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O $any$ O $any$ O O O O $IUser$ O $any$ O O O O $void$ O $SimpleChanges$ O O O O $any$ O $any$ O O O $IUser$ O O O $void$ O O O O O $UserService$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O $Console$ O $void$ O O O $any$ O O O O $any$ O O $Console$ O $void$ O O O O O O O O O $any$ O $any$ O O O $IUser$ O O O O
import { Component } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' } ) export class CounterComponent { public currentCount = 0 ; public incrementCounter ( ) { this . currentCount ++ ; } }	O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O O $number$ O O O O $void$ O O O O O $number$ O O O O
import { Component , OnInit } from 's' ; import { TranslateService } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' } ) export class HomeComponent implements OnInit { title : string = 's' ; constructor ( public translate ) { } ngOnInit ( ) { } public setLanguage ( lang ) { this . translate . use ( lang ) ; } }	O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $any$ O $string$ O O O O O O O O $TranslateService$ O O O $void$ O O O O O $void$ O $any$ O O O O $any$ O $any$ O $any$ O O O O
import { Component } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' } ) export class NgxBootstrapComponent { public oneAtATime : boolean = true ; public items = [ 's' , 's' , 's' ] ; public status = { isFirstOpen : true , isFirstDisabled : false , open : false } ; public groups = [ { title : 's' , content : 's' } , { title : 's' , content : 's' } ] ; constructor ( ) { } addItem ( ) { this . items . push ( `template` ) ; } }	O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O O $boolean$ O O O O O O $string[]$ O O O O O O O O O O $complex$ O O $boolean$ O O O $boolean$ O O O $boolean$ O O O O O $complex$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O O O O O O $void$ O O O O O $string[]$ O $number$ O O O O O O
import { Component , OnInit } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' } ) export class NotFoundComponent implements OnInit { constructor ( ) { } ngOnInit ( ) { } }	O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $any$ O O O O O O $void$ O O O O O
import { animate , state , style , transition , trigger } from 's' ; import { Component , OnInit } from 's' ; import { IUser } from 's' ; import { UserService } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' , styleUrls : [ 's' ] , animations : [ trigger ( 's' , [ state ( 's' , style ( { transform : 's' } ) ) , transition ( 's' , [ style ( { transform : 's' } ) , animate ( 0 ) ] ) , transition ( 's' , [ animate ( 0 , style ( { transform : 's' } ) ) ] ) ] ) ] } ) export class UsersComponent implements OnInit { users : IUser [ ] ; selectedUser : IUser ; constructor ( private userService ) { } ngOnInit ( ) { this . userService . getUsers ( ) . subscribe ( result => { console . log ( 's' , result ) ; this . users = result ; } ) ; } onSelect ( user ) { this . selectedUser = user ; } deleteUser ( user ) { this . clearUser ( ) ; this . userService . deleteUser ( user ) . subscribe ( result => { console . log ( 's' , result ) ; let position = this . users . indexOf ( user ) ; this . users . splice ( position , 0 ) ; } , error => { console . log ( `template` ) ; } ) ; } onUserUpdate ( user ) { this . users [ this . users . findIndex ( u => u . id == user . id ) ] = user ; } addUser ( newUserName ) { this . userService . addUser ( newUserName ) . subscribe ( result => { console . log ( 's' , result ) ; this . users . push ( result ) ; this . selectedUser = result ; } , error => { console . log ( `template` ) ; } ) ; } clearUser ( ) { if ( this . selectedUser ) { this . selectedUser = null ; } } }	O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O $any[]$ O O $any$ O O O O $any$ O O O $any$ O O $string$ O O O O O O $any$ O O O O $any$ O O $string$ O O O O O $any$ O O O O O O $any$ O O O O $any$ O O O $any$ O O $string$ O O O O O O O O O O O O O O $any$ O $any$ O $IUser[]$ O $any$ O O O $IUser$ O $any$ O O O O $UserService$ O O O $void$ O O O O O $UserService$ O $any$ O O O $any$ O $any$ O O $Console$ O $void$ O O O $any$ O O O O $IUser[]$ O $any$ O O O O O $void$ O $IUser$ O O O O $IUser$ O $IUser$ O O $void$ O $any$ O O O O $void$ O O O O O $UserService$ O $any$ O $any$ O O $any$ O $any$ O O $Console$ O $void$ O O O $any$ O O O $number$ O O O $IUser[]$ O $number$ O $any$ O O O O $IUser[]$ O $complex$ O $number$ O O O O O O $any$ O O $Console$ O $void$ O O O O O O O O $void$ O $IUser$ O O O O $IUser[]$ O O O $IUser[]$ O $number$ O $IUser$ O $IUser$ O $number$ O $IUser$ O $number$ O O O $IUser$ O O $void$ O $any$ O O O O $UserService$ O $any$ O $any$ O O $any$ O $any$ O O $Console$ O $void$ O O O $any$ O O O O $IUser[]$ O $number$ O $any$ O O O O $IUser$ O $any$ O O O $any$ O O $Console$ O $void$ O O O O O O O O $void$ O O O O O O O $IUser$ O O O O $IUser$ O O O O O O
import { CommonModule } from 's' ; import { HttpClient , HttpClientModule } from 's' ; import { NgModule } from 's' ; import { FormsModule , ReactiveFormsModule } from 's' ; import { BrowserModule , BrowserTransferStateModule } from 's' ; import { PreloadAllModules , RouterModule } from 's' ; import { ORIGIN_URL } from 's' ; import { TransferHttpCacheModule } from 's' ; import { TranslateLoader , TranslateModule } from 's' ; import { TranslateHttpLoader } from 's' ; import { AccordionModule } from 's' ; import { AppComponent } from 's' ; import { NavMenuComponent } from 's' ; import { UserDetailComponent } from 's' ; import { CounterComponent } from 's' ; import { HomeComponent } from 's' ; import { NgxBootstrapComponent } from 's' ; import { NotFoundComponent } from 's' ; import { UsersComponent } from 's' ; import { LinkService } from 's' ; import { UserService } from 's' ; export function createTranslateLoader ( http , baseHref ) { if ( baseHref === null && typeof window !== 's' ) { baseHref = window . location . origin ; } return new TranslateHttpLoader ( http , `template` , 's' ) ; } @ NgModule ( { declarations : [ AppComponent , NavMenuComponent , CounterComponent , UsersComponent , UserDetailComponent , HomeComponent , NotFoundComponent , NgxBootstrapComponent ] , imports : [ CommonModule , BrowserModule . withServerTransition ( { appId : 's' } ) , HttpClientModule , TransferHttpCacheModule , BrowserTransferStateModule , FormsModule , ReactiveFormsModule , AccordionModule . forRoot ( ) , TranslateModule . forRoot ( { loader : { provide : TranslateLoader , useFactory : createTranslateLoader , deps : [ HttpClient , [ ORIGIN_URL ] ] } } ) , RouterModule . forRoot ( [ { path : 's' , redirectTo : 's' , pathMatch : 's' } , { path : 's' , component : HomeComponent , data : { title : 's' , meta : [ { name : 's' , content : 's' } ] , links : [ { rel : 's' , href : 's' } , { rel : 's' , hreflang : 's' , href : 's' } ] } } , { path : 's' , component : CounterComponent , data : { title : 's' , meta : [ { name : 's' , content : 's' } ] , links : [ { rel : 's' , href : 's' } , { rel : 's' , hreflang : 's' , href : 's' } ] } } , { path : 's' , component : UsersComponent , data : { title : 's' , meta : [ { name : 's' , content : 's' } ] , links : [ { rel : 's' , href : 's' } , { rel : 's' , hreflang : 's' , href : 's' } ] } } , { path : 's' , component : NgxBootstrapComponent , data : { title : 's' , meta : [ { name : 's' , content : 's' } ] , links : [ { rel : 's' , href : 's' } , { rel : 's' , hreflang : 's' , href : 's' } ] } } , { path : 's' , loadChildren : 's' } , { path : 's' , component : NotFoundComponent , data : { title : 's' , meta : [ { name : 's' , content : 's' } ] , links : [ { rel : 's' , href : 's' } , { rel : 's' , hreflang : 's' , href : 's' } ] } } ] , { useHash : false , preloadingStrategy : PreloadAllModules , initialNavigation : 's' } ) ] , providers : [ LinkService , UserService , TranslateModule ] , bootstrap : [ AppComponent ] } ) export class AppModuleShared { }	O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $HttpClient$ O $any$ O O O O $any$ O O O O $complex$ O O O O $any$ O $complex$ O $Location$ O $string$ O O O O $any$ O $any$ O O O O O O O O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O O $string$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any[]$ O O $any$ O O $any$ O O O O O O $any$ O $any$ O O O $string$ O O O $string$ O O O $string$ O O O O O $string$ O O O $any$ O $any$ O $complex$ O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O O O $complex$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O $string$ O O O O O O O O $string$ O O O $any$ O $any$ O $complex$ O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O O O $complex$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O $string$ O O O O O O O O $string$ O O O $any$ O $any$ O $complex$ O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O O O $complex$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O $string$ O O O O O O O O $string$ O O O $any$ O $any$ O $complex$ O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O O O $complex$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O $string$ O O O O O O O O $string$ O O O $string$ O O O O O $string$ O O O $any$ O $any$ O $complex$ O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O O O $complex$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O $string$ O O O O O O O O O $boolean$ O O O $any$ O $any$ O $string$ O O O O O O $any[]$ O O $any$ O $any$ O $any$ O O $complex$ O O $any$ O O O O O $any$ O O
import { NgModule } from 's' ; import { BrowserAnimationsModule } from 's' ; import { ORIGIN_URL , REQUEST } from 's' ; import { PrebootModule } from 's' ; import { AppComponent } from 's' ; import { AppModuleShared } from 's' ; export function getOriginUrl ( ) { return window . location . origin ; } export function getRequest ( ) { return { cookie : document . cookie } ; } @ NgModule ( { bootstrap : [ AppComponent ] , imports : [ PrebootModule . withConfig ( { appRoot : 's' } ) , BrowserAnimationsModule , AppModuleShared ] , providers : [ { provide : ORIGIN_URL , useFactory : getOriginUrl } , { provide : REQUEST , useFactory : getRequest } ] } ) export class AppModule { }	O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $string$ O O O O $complex$ O $Location$ O $string$ O O O O $complex$ O O O O O $string$ O $Document$ O $string$ O O O O $any$ O O $complex$ O O $any$ O O $any[]$ O O $any$ O $any$ O O $string$ O O O O O $any$ O $any$ O O $complex$ O O O $any$ O $any$ O $string$ O $string$ O O O $any$ O $any$ O $complex$ O $complex$ O O O O O O $any$ O O
import { NgModule } from 's' ; import { NoopAnimationsModule } from 's' ; import { ServerModule } from 's' ; import { PrebootModule } from 's' ; import { AppComponent } from 's' ; import { AppModuleShared } from 's' ; import { TransferHttpCacheModule , StateTransferInitializerModule } from 's' ; @ NgModule ( { bootstrap : [ AppComponent ] , imports : [ AppModuleShared , ServerModule , PrebootModule . withConfig ( { appRoot : 's' } ) , NoopAnimationsModule , TransferHttpCacheModule , ] } ) export class AppModule { constructor ( ) { } }	O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O $any$ O O $complex$ O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O O $string$ O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O O
import { async , ComponentFixture , TestBed } from 's' ; import { CounterComponent } from 's' ; import { } from 's' ; let fixture < CounterComponent > ; describe ( 's' , ( ) => { beforeEach ( ( ) => { TestBed . configureTestingModule ( { declarations : [ CounterComponent ] } ) ; fixture = TestBed . createComponent ( CounterComponent ) ; fixture . detectChanges ( ) ; } ) ; it ( 's' , async ( ( ) => { const titleText = fixture . nativeElement . querySelector ( 's' ) . textContent ; expect ( titleText ) . toEqual ( 's' ) ; } ) ) ; it ( 's' , async ( ( ) => { const countElement = fixture . nativeElement . querySelector ( 's' ) ; expect ( countElement . textContent ) . toEqual ( 's' ) ; const incrementButton = fixture . nativeElement . querySelector ( 's' ) ; incrementButton . click ( ) ; fixture . detectChanges ( ) ; expect ( countElement . textContent ) . toEqual ( 's' ) ; } ) ) ; } ) ;	O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O O O O O O $ComponentFixture$ O $any$ O O $any$ O O O O O O O $any$ O O O O O $any$ O $any$ O O $complex$ O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O O $any$ O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O O O O O O O O $any$ O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O O O O O O O O O O
import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` } ) export class LazyComponent { }	O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O O
import { NgModule } from 's' ; import { RouterModule } from 's' ; import { LazyComponent } from 's' ; @ NgModule ( { declarations : [ LazyComponent ] , imports : [ RouterModule . forChild ( [ { path : 's' , component : LazyComponent , pathMatch : 's' } ] ) ] } ) export class LazyModule { }	O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $complex$ O O $any$ O O $any[]$ O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O $string$ O O O O O O O O O O $any$ O O
import 's' ; import 's' ; import 's' ;	O O O O O O O O O
import 's' ; import { enableProdMode } from 's' ; import { platformBrowserDynamic } from 's' ; import { AppModule } from 's' ; if ( module [ 's' ] ) { module [ 's' ] . accept ( ) ; module [ 's' ] . dispose ( ( ) => { modulePromise . then ( appModule => appModule . destroy ( ) ) ; } ) ; } else { enableProdMode ( ) ; } const modulePromise = platformBrowserDynamic ( ) . bootstrapModule ( AppModule ) ;	O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O $any$ O O O $any$ O O O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O $any$ O O O O O $any$ O $any$ O O O $any$ O $any$ O O
import 's' ; import 's' ;	O O O O O O
import 's' ; import 's' ; import { enableProdMode } from 's' ; import { createServerRenderer } from 's' ; const { AppModuleNgFactory } = require ( 's' ) ; import { ngAspnetCoreEngine , IEngineOptions , createTransferScript } from 's' ; enableProdMode ( ) ; export default createServerRenderer ( params => { const setupOptions = { appSelector : 's' , ngModule : AppModuleNgFactory , request : params , providers : [ ] } ; return ngAspnetCoreEngine ( setupOptions ) . then ( response => { response . globals . transferData = createTransferScript ( { someData : 's' , fromDotnet : params . data . thisCameFromDotNET } ) ; return { html : response . html , globals : response . globals } ; } ) ; } ) ;	O O O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O O O $IEngineOptions$ O O $string$ O O O $any$ O $any$ O $any$ O $any$ O $undefined[]$ O O O O O O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O
import 's' ; import 's' ; import { enableProdMode } from 's' ; import { createTransferScript , IEngineOptions , ngAspnetCoreEngine } from 's' ; import { createServerRenderer } from 's' ; import { AppModule } from 's' ; enableProdMode ( ) ; export default createServerRenderer ( ( params ) => { const setupOptions = { appSelector : 's' , ngModule : AppModule , request : params , providers : [ ] } ; return ngAspnetCoreEngine ( setupOptions ) . then ( response => { response . globals . transferData = createTransferScript ( { someData : 's' , fromDotnet : params . data . thisCameFromDotNET } ) ; return ( { html : response . html , globals : response . globals } ) ; } ) ; } ) ;	O O O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $any$ O O O O O $any$ O O $any$ O O O O $IEngineOptions$ O O $string$ O O O $any$ O $any$ O $any$ O $any$ O $undefined[]$ O O O O O O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O O
import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
'js' Error . stackTraceLimit = Infinity ; require ( 's' ) ; require ( 's' ) ; require ( 's' ) ; require ( 's' ) ; require ( 's' ) ; require ( 's' ) ; require ( 's' ) ; require ( 's' ) ; const testing = require ( 's' ) ; const testingBrowser = require ( 's' ) ; __karma__ . loaded = function ( ) { } ; testing . getTestBed ( ) . initTestEnvironment ( testingBrowser . BrowserDynamicTestingModule , testingBrowser . platformBrowserDynamicTesting ( ) ) ; const context = require . context ( 's' , true , "s" ) ; context . keys ( ) . map ( context ) ; __karma__ . start ( ) ;	O $ErrorConstructor$ O $any$ O $number$ O $any$ O O O O $any$ O O O O $any$ O O O O $any$ O O O O $any$ O O O O $any$ O O O O $any$ O O O O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O $any$ O $void$ O O O O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O O
'js' const ContextReplacementPlugin = require ( 's' ) ; const LoaderOptionsPlugin = require ( 's' ) ; const webpack = require ( 's' ) ; var path = require ( 's' ) ; var rootPath = path . join . bind ( path , path . resolve ( __dirname , 's' ) ) ; module . exports = function ( options ) { return { devtool : 's' , resolve : { extensions : [ 's' , 's' ] , modules : [ rootPath ( 's' ) , 's' ] } , module : { rules : [ { enforce : 's' , test : "s" , loader : 's' , exclude : [ rootPath ( 's' ) , rootPath ( 's' ) ] } , { test : "s" , use : [ { loader : 's' , query : { sourceMap : false , inlineSourceMap : true , compilerOptions : { removeComments : true } } } , 's' ] , exclude : [ "s" ] } , { test : "s" , loader : [ 's' , 's' ] } , { test : "s" , loader : [ 's' , 's' ] } , { test : "s" , loader : 's' } , { enforce : 's' , test : "s" , loader : 's' , options : { esModules : true } , include : rootPath ( 's' ) , exclude : [ "s" , "s" , "s" ] } ] } , plugins : [ new webpack . DllReferencePlugin ( { context : __dirname , manifest : require ( rootPath ( 's' , 's' , 's' ) ) } ) , new ContextReplacementPlugin ( "s" , rootPath ( 's' ) , { } ) , new LoaderOptionsPlugin ( { debug : false , options : { } } ) ] , performance : { hints : false } , node : { global : true , process : false , crypto : 's' , module : false , clearImmediate : false , setImmediate : false } } ; } ;	O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $complex$ O $complex$ O O O $any$ O O O O $string$ O O O $complex$ O O $string[]$ O O O O O O O $any[]$ O O $any$ O O O O O O O O $complex$ O O $complex$ O O O $string$ O O O $RegExp$ O O O $string$ O O O $any[]$ O O $any$ O O O O $any$ O O O O O O O $RegExp$ O O O $complex$ O O O $string$ O O O $complex$ O O $boolean$ O O O $boolean$ O O O $complex$ O O $boolean$ O O O O O O O O O $RegExp[]$ O O O O O O O $RegExp$ O O O $string[]$ O O O O O O O O O $RegExp$ O O O $string[]$ O O O O O O O O O $RegExp$ O O O $string$ O O O O O $string$ O O O $RegExp$ O O O $string$ O O O $complex$ O O $boolean$ O O O O $any$ O $any$ O O O O $RegExp[]$ O O O O O O O O O O O O $any[]$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O O O $any$ O O O $any$ O O O O O O O O O $any$ O O $boolean$ O O O ${}$ O O O O O O O $complex$ O O $boolean$ O O O O $complex$ O O $boolean$ O O O $boolean$ O O O $string$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O O O O O
'js' module . exports = function ( config ) { config . set ( { basePath : 's' , frameworks : [ 's' ] , exclude : [ ] , files : [ 's' , 's' ] , preprocessors : { 's' : [ 's' , 's' , 's' ] } , client : { captureConsole : false } , coverageReporter : { type : 's' } , remapCoverageReporter : { 's' : null , json : 's' , html : 's' } , reporters : [ 's' , 's' , 's' ] , port : 0 , colors : true , logLevel : config . LOG_WARN , autoWatch : false , browsers : [ 's' ] , mime : { 's' : [ 's' , 's' ] } , singleRun : true , webpack : require ( 's' ) ( { env : 's' } ) , webpackMiddleware : { noInfo : true , stats : { chunks : false } } , customLaunchers : { PhantomJS_custom : { base : 's' , options : { windowName : 's' , settings : { webSecurityEnabled : false } } , flags : [ 's' ] } } , phantomjsLauncher : { exitOnResourceError : true } } ) ; } ;	O $void$ O $void$ O O O $any$ O O $any$ O $any$ O O $string$ O O O $string[]$ O O O O O $undefined[]$ O O O O $string[]$ O O O O O O O $complex$ O O O O O O O O O O O O O $complex$ O O $boolean$ O O O O $complex$ O O $string$ O O O O $complex$ O O O O O O $string$ O O O $string$ O O O O $string[]$ O O O O O O O O O $number$ O O O $boolean$ O O O $any$ O $any$ O $any$ O $boolean$ O O O $string[]$ O O O O O $complex$ O O O O O O O O O O O $boolean$ O O O $complex$ O $any$ O O O O O $string$ O O O O O $complex$ O O $boolean$ O O O $complex$ O O $boolean$ O O O O O $complex$ O O $complex$ O O $string$ O O O $complex$ O O $string$ O O O $complex$ O O $boolean$ O O O O O $string[]$ O O O O O O O $complex$ O O $boolean$ O O O O O O O O
'js' const sharedModuleRules = [ { test : "s" , loaders : [ 's' , 's' , 's' ] } , { test : "s" , loader : 's' } ] ; module . exports = { sharedModuleRules } ;	O O $complex$ O O O $RegExp$ O O O $string[]$ O O O O O O O O O O O $RegExp$ O O O $string$ O O O O O $complex$ O $complex$ O O $complex$ O O
'js' const path = require ( 's' ) ; const webpack = require ( 's' ) ; const merge = require ( 's' ) ; const AngularCompilerPlugin = require ( 's' ) . AngularCompilerPlugin ; const CheckerPlugin = require ( 's' ) . CheckerPlugin ; const BundleAnalyzerPlugin = require ( 's' ) . BundleAnalyzerPlugin ; const TerserPlugin = require ( 's' ) ; const { sharedModuleRules } = require ( 's' ) ; module . exports = env => { const isDevBuild = ! ( env && env . prod ) ; const sharedConfig = { mode : isDevBuild ? 's' : 's' , stats : { modules : false } , context : __dirname , resolve : { extensions : [ 's' , 's' ] } , output : { filename : 's' , publicPath : 's' } , module : { rules : [ { test : "s" , use : isDevBuild ? [ 's' , 's' , 's' ] : 's' } , { test : "s" , use : 's' } , { test : "s" , use : [ 's' , isDevBuild ? 's' : 's' ] } , { test : "s" , use : 's' } , ... sharedModuleRules ] } , plugins : [ new CheckerPlugin ( ) ] } ; const clientBundleOutputDir = 's' ; const clientBundleConfig = merge ( sharedConfig , { entry : { 's' : 's' } , output : { path : path . join ( __dirname , clientBundleOutputDir ) } , plugins : [ new webpack . DllReferencePlugin ( { context : __dirname , manifest : require ( 's' ) } ) ] . concat ( isDevBuild ? [ new webpack . SourceMapDevToolPlugin ( { filename : 's' , moduleFilenameTemplate : path . relative ( clientBundleOutputDir , 's' ) } ) ] : [ new AngularCompilerPlugin ( { mainPath : path . join ( __dirname , 's' ) , tsConfigPath : 's' , entryModule : path . join ( __dirname , 's' ) , exclude : [ 's' ] , sourceMap : isDevBuild } ) ] ) , devtool : isDevBuild ? 's' : false , node : { fs : 's' } , optimization : { minimizer : [ ] . concat ( isDevBuild ? [ ] : [ new TerserPlugin ( { sourceMap : true , terserOptions : { compress : true , ecma : 0 , mangle : true , keep_classnames : true , keep_fnames : true , } , } ) , ] ) } } ) ; const serverBundleConfig = merge ( sharedConfig , { entry : { 's' : isDevBuild ? 's' : 's' } , plugins : [ new webpack . DllReferencePlugin ( { context : __dirname , manifest : require ( 's' ) , sourceType : 's' , name : 's' } ) ] . concat ( isDevBuild ? [ new webpack . ContextReplacementPlugin ( "s" , path . join ( __dirname , 's' ) , { } ) , new webpack . ContextReplacementPlugin ( "s" , path . join ( __dirname , 's' ) , { } ) ] : [ new AngularCompilerPlugin ( { mainPath : path . join ( __dirname , 's' ) , tsConfigPath : 's' , entryModule : path . join ( __dirname , 's' ) , exclude : [ 's' ] , sourceMap : isDevBuild } ) ] ) , output : { libraryTarget : 's' , path : path . join ( __dirname , 's' ) } , target : 's' , devtool : isDevBuild ? 's' : false , optimization : { minimizer : [ ] . concat ( isDevBuild ? [ ] : [ new TerserPlugin ( { cache : true , parallel : true , sourceMap : true , terserOptions : { compress : false , ecma : 0 , mangle : true , keep_classnames : true , keep_fnames : true , } , } ) ] ) } } ) ; return [ clientBundleConfig , serverBundleConfig ] ; } ;	O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O $any$ O O $any$ O $any$ O O O O $any$ O O $any$ O $any$ O O O O $any$ O O $any$ O $any$ O O O O O O $complex$ O O $any$ O O O O $any[]$ O $any[]$ O $any$ O O O $boolean$ O O O $any$ O $any$ O $any$ O O O $complex$ O O $string$ O $boolean$ O O O O O $complex$ O O $boolean$ O O O O $any$ O $any$ O $complex$ O O $string[]$ O O O O O O O O $complex$ O O $string$ O O O $string$ O O O O $complex$ O O $complex$ O O O $RegExp$ O O O $complex$ O $boolean$ O O O O O O O O O O O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string[]$ O O O O $boolean$ O O O O O O O O $RegExp$ O O O $string$ O O O O O $complex$ O O O $any[]$ O O O $any$ O O O O O O O O O O O $any$ O $any$ O $complex$ O O $complex$ O O O O O O O $complex$ O O $any$ O $any$ O $any$ O $any$ O O O O O $any[]$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O O O $complex$ O $boolean$ O O O $any$ O $any$ O O $string$ O O O $any$ O $any$ O $any$ O O O O O O O O O O O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $string$ O O O $any$ O $any$ O $any$ O $any$ O O O O $string[]$ O O O O O $boolean$ O $boolean$ O O O O O $complex$ O $boolean$ O O O O O $complex$ O O $string$ O O O O $complex$ O O $any[]$ O O O O $complex$ O $boolean$ O O O O O O $any$ O O $boolean$ O O O $complex$ O O $boolean$ O O O $number$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O O O O O O O O O O O O O $any$ O $any$ O $complex$ O O $complex$ O O O O $boolean$ O O O O O O $any[]$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $string$ O O O $string$ O O O O O O $complex$ O $boolean$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O O O O O O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $string$ O O O $any$ O $any$ O $any$ O $any$ O O O O $string[]$ O O O O O $boolean$ O $boolean$ O O O O O $complex$ O O $string$ O O O $any$ O $any$ O $any$ O $any$ O O O O O $string$ O O O $complex$ O $boolean$ O O O O O $complex$ O O $any[]$ O O O O $complex$ O $boolean$ O O O O O O $any$ O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $complex$ O O $boolean$ O O O $number$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O O O O O O O O O O O O O $any$ O $any$ O O O O
'js' const path = require ( 's' ) ; const webpack = require ( 's' ) ; const MiniCssExtractPlugin = require ( 's' ) ; const merge = require ( 's' ) ; const TerserPlugin = require ( 's' ) ; const treeShakableModules = [ 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , ] ; const nonTreeShakableModules = [ 's' , 's' , ] ; const allModules = treeShakableModules . concat ( nonTreeShakableModules ) ; module . exports = ( env ) => { console . log ( `template` ) const extractCSS = new MiniCssExtractPlugin ( { filename : "s" , chunkFilename : "s" } ) ; const isDevBuild = ! ( env && env . prod ) ; const sharedConfig = { mode : isDevBuild ? "s" : "s" , stats : { modules : false } , resolve : { extensions : [ 's' ] } , module : { rules : [ { test : "s" , use : 's' } ] } , output : { publicPath : 's' , filename : 's' , library : 's' } , plugins : [ new webpack . ContextReplacementPlugin ( "s" , path . join ( __dirname , 's' ) ) , new webpack . ContextReplacementPlugin ( "s" , path . join ( __dirname , 's' ) ) , new webpack . IgnorePlugin ( "s" ) ] } ; const clientBundleConfig = merge ( sharedConfig , { entry : { vendor : isDevBuild ? allModules : nonTreeShakableModules } , output : { path : path . join ( __dirname , 's' , 's' ) } , module : { rules : [ { test : "s" , use : [ MiniCssExtractPlugin . loader , isDevBuild ? 's' : 's' ] } ] } , plugins : [ new MiniCssExtractPlugin ( { filename : 's' , } ) , new webpack . DllPlugin ( { path : path . join ( __dirname , 's' , 's' , 's' ) , name : 's' } ) ] . concat ( isDevBuild ? [ ] : [ ] ) , optimization : { minimizer : [ ] . concat ( isDevBuild ? [ ] : [ new TerserPlugin ( { cache : true , parallel : true , sourceMap : true , terserOptions : { compress : false , ecma : 0 , mangle : true , keep_classnames : true , keep_fnames : true , } , } ) ] ) } } ) ; const serverBundleConfig = merge ( sharedConfig , { target : 's' , resolve : { mainFields : [ 's' ] } , entry : { vendor : allModules . concat ( [ 's' ] ) } , output : { path : path . join ( __dirname , 's' , 's' ) , libraryTarget : 's' , } , module : { rules : [ { test : "s" , use : [ MiniCssExtractPlugin . loader , isDevBuild ? 's' : 's' ] } ] } , plugins : [ new webpack . DllPlugin ( { path : path . join ( __dirname , 's' , 's' , 's' ) , name : 's' } ) ] . concat ( isDevBuild ? [ ] : [ ] ) , optimization : { minimizer : [ ] . concat ( isDevBuild ? [ ] : [ new TerserPlugin ( { cache : true , parallel : true , sourceMap : true , terserOptions : { compress : false , ecma : 0 , mangle : true , keep_classnames : true , keep_fnames : true , } , } ) ] ) } } ) ; return [ clientBundleConfig , serverBundleConfig ] ; }	O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $string[]$ O O O O O O O O O O O O O O O O O O O O O O O O O O O $string[]$ O O O O O O O O O $string[]$ O $string[]$ O $complex$ O $string[]$ O O $any[]$ O $any[]$ O O $any$ O O O $Console$ O $void$ O O O O $any$ O O $any$ O O $string$ O O O $string$ O O O O O O $boolean$ O O O $any$ O $any$ O $any$ O O O $complex$ O O $string$ O $boolean$ O O O O O $complex$ O O $boolean$ O O O O $complex$ O O $string[]$ O O O O O O $complex$ O O $complex$ O O O $RegExp$ O O O $string$ O O O O O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O O $any[]$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O O $any$ O $any$ O $complex$ O O $complex$ O O $string[]$ O $boolean$ O $string[]$ O $string[]$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O O O O O O O $complex$ O O $complex$ O O O $RegExp$ O O O $any[]$ O O $any$ O $any$ O $boolean$ O O O O O O O O O $any[]$ O O O $any$ O O $string$ O O O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O O O O $string$ O O O O O O $complex$ O $boolean$ O O O O O O O O $complex$ O O $any[]$ O O O O $complex$ O $boolean$ O O O O O O $any$ O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $complex$ O O $boolean$ O O O $number$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O O O O O O O O O O O O $any$ O $any$ O $complex$ O O $string$ O O O $complex$ O O $string[]$ O O O O O O $complex$ O O $string[]$ O $string[]$ O $complex$ O O O O O O O $complex$ O O $any$ O $any$ O $any$ O $any$ O O O O O O $string$ O O O O O $complex$ O O $complex$ O O O $RegExp$ O O O $any[]$ O O $any$ O $any$ O $boolean$ O O O O O O O O O $any[]$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O O O O $string$ O O O O O O $complex$ O $boolean$ O O O O O O O O $complex$ O O $any[]$ O O O O $complex$ O $boolean$ O O O O O O $any$ O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $complex$ O O $boolean$ O O O $number$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O O O O O O O O O O O O O $any$ O $any$ O O O