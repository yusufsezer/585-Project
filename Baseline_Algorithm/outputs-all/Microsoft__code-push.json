'js' 's' ; var gulp = require ( "s" ) ; var plugins = require ( "s" ) ( ) ; require ( "s" ) ( __dirname + "s" ) ;	O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O O O O $any$ O O O O
import AccountManager = require ( "s" ) ; export enum CommandType { accessKeyAdd , accessKeyPatch , accessKeyList , accessKeyRemove , appAdd , appList , appRemove , appRename , appTransfer , collaboratorAdd , collaboratorList , collaboratorRemove , debug , deploymentAdd , deploymentHistory , deploymentHistoryClear , deploymentList , deploymentMetrics , deploymentRemove , deploymentRename , link , login , logout , patch , promote , register , release , releaseCordova , releaseReact , rollback , sessionList , sessionRemove , whoami } export interface ICommand { type : CommandType ; } export interface IAccessKeyAddCommand extends ICommand { name : string ; ttl ? : number ; } export interface IAccessKeyPatchCommand extends ICommand { newName ? : string ; oldName : string ; ttl ? : number ; } export interface IAccessKeyListCommand extends ICommand { format : string ; } export interface IAccessKeyRemoveCommand extends ICommand { accessKey : string ; } export interface IAppAddCommand extends ICommand { appName : string ; os : string ; platform : string ; } export interface IAppListCommand extends ICommand { format : string ; } export interface IAppRemoveCommand extends ICommand { appName : string ; } export interface IAppRenameCommand extends ICommand { currentAppName : string ; newAppName : string ; } export interface IAppTransferCommand extends ICommand { appName : string ; email : string ; } export interface ICollaboratorAddCommand extends ICommand { appName : string ; email : string ; } export interface ICollaboratorListCommand extends ICommand { appName : string ; format : string ; } export interface ICollaboratorRemoveCommand extends ICommand { appName : string ; email : string ; } export interface IDebugCommand extends ICommand { platform : string ; } export interface IDeploymentAddCommand extends ICommand { appName : string ; deploymentName : string ; default : boolean ; } export interface IDeploymentHistoryClearCommand extends ICommand { appName : string ; deploymentName : string ; } export interface IDeploymentHistoryCommand extends ICommand { appName : string ; deploymentName : string ; format : string ; displayAuthor : boolean ; } export interface IDeploymentListCommand extends ICommand { appName : string ; format : string ; displayKeys : boolean ; } export interface IDeploymentRemoveCommand extends ICommand { appName : string ; deploymentName : string ; } export interface IDeploymentRenameCommand extends ICommand { appName : string ; currentDeploymentName : string ; newDeploymentName : string ; } export interface ILinkCommand extends ICommand { serverUrl ? : string ; } export interface ILoginCommand extends ICommand { serverUrl ? : string ; accessKey : string ; proxy ? : string ; noProxy ? : boolean ; } export interface IPackageInfo { description ? : string ; label ? : string ; disabled ? : boolean ; mandatory ? : boolean ; rollout ? : number ; } export interface IPatchCommand extends ICommand , IPackageInfo { appName : string ; appStoreVersion ? : string ; deploymentName : string ; label : string ; } export interface IPromoteCommand extends ICommand , IPackageInfo { appName : string ; appStoreVersion ? : string ; sourceDeploymentName : string ; destDeploymentName : string ; noDuplicateReleaseError ? : boolean ; } export interface IRegisterCommand extends ICommand { serverUrl ? : string ; proxy ? : string ; noProxy ? : boolean ; } export interface IReleaseBaseCommand extends ICommand , IPackageInfo { appName : string ; appStoreVersion : string ; deploymentName : string ; noDuplicateReleaseError ? : boolean ; privateKeyPath ? : string ; } export interface IReleaseCommand extends IReleaseBaseCommand { package : string ; } export interface IReleaseCordovaCommand extends IReleaseBaseCommand { build : boolean ; platform : string ; isReleaseBuildType ? : boolean ; } export interface IReleaseReactCommand extends IReleaseBaseCommand { bundleName ? : string ; development ? : boolean ; entryFile ? : string ; gradleFile ? : string ; platform : string ; plistFile ? : string ; plistFilePrefix ? : string ; sourcemapOutput ? : string ; outputDir ? : string ; config ? : string ; } export interface IRollbackCommand extends ICommand { appName : string ; deploymentName : string ; targetRelease : string ; } export interface ISessionListCommand extends ICommand { format : string ; } export interface ISessionRemoveCommand extends ICommand { machineName : string ; } export type ReleaseHook = ( currentCommand , originalCommand , sdk ) => Q . Promise < IReleaseCommand | void > ; export interface ReleaseFile { sourceLocation : string ; targetLocation : string ; }	O $any$ O O O O O O O O $any$ O $CommandType.accessKeyAdd$ O $CommandType.accessKeyPatch$ O $CommandType.accessKeyList$ O $CommandType.accessKeyRemove$ O $CommandType.appAdd$ O $CommandType.appList$ O $CommandType.appRemove$ O $CommandType.appRename$ O $CommandType.appTransfer$ O $CommandType.collaboratorAdd$ O $CommandType.collaboratorList$ O $CommandType.collaboratorRemove$ O $CommandType.debug$ O $CommandType.deploymentAdd$ O $CommandType.deploymentHistory$ O $CommandType.deploymentHistoryClear$ O $CommandType.deploymentList$ O $CommandType.deploymentMetrics$ O $CommandType.deploymentRemove$ O $CommandType.deploymentRename$ O $CommandType.link$ O $CommandType.login$ O $CommandType.logout$ O $CommandType.patch$ O $CommandType.promote$ O $CommandType.register$ O $CommandType.release$ O $CommandType.releaseCordova$ O $CommandType.releaseReact$ O $CommandType.rollback$ O $CommandType.sessionList$ O $CommandType.sessionRemove$ O $CommandType.whoami$ O O O $any$ O $CommandType$ O $any$ O O O O $any$ O $any$ O $string$ O O O $number$ O O O O O O O $any$ O $any$ O $string$ O O O O $string$ O O O $number$ O O O O O O O $any$ O $any$ O $string$ O O O O O O $any$ O $any$ O $string$ O O O O O O $any$ O $any$ O $string$ O O O $string$ O O O $string$ O O O O O O $any$ O $any$ O $string$ O O O O O O $any$ O $any$ O $string$ O O O O O O $any$ O $any$ O $string$ O O O $string$ O O O O O O $any$ O $any$ O $string$ O O O $string$ O O O O O O $any$ O $any$ O $string$ O O O $string$ O O O O O O $any$ O $any$ O $string$ O O O $string$ O O O O O O $any$ O $any$ O $string$ O O O $string$ O O O O O O $any$ O $any$ O $string$ O O O O O O $any$ O $any$ O $string$ O O O $string$ O O O $boolean$ O O O O O O $any$ O $any$ O $string$ O O O $string$ O O O O O O $any$ O $any$ O $string$ O O O $string$ O O O $string$ O O O $boolean$ O O O O O O $any$ O $any$ O $string$ O O O $string$ O O O $boolean$ O O O O O O $any$ O $any$ O $string$ O O O $string$ O O O O O O $any$ O $any$ O $string$ O O O $string$ O O O $string$ O O O O O O $any$ O $any$ O $string$ O O O O O O O $any$ O $any$ O $string$ O O O O $string$ O O O $string$ O O O O $boolean$ O O O O O O O $any$ O $string$ O O O O $string$ O O O O $boolean$ O O O O $boolean$ O O O O $number$ O O O O O O O $any$ O $any$ O $any$ O $string$ O O O $string$ O O O O $string$ O O O $string$ O O O O O O $any$ O $any$ O $any$ O $string$ O O O $string$ O O O O $string$ O O O $string$ O O O $boolean$ O O O O O O O $any$ O $any$ O $string$ O O O O $string$ O O O O $boolean$ O O O O O O O $any$ O $any$ O $any$ O $string$ O O O $string$ O O O $string$ O O O $boolean$ O O O O $string$ O O O O O O O $any$ O $any$ O $string$ O O O O O O $any$ O $any$ O $boolean$ O O O $string$ O O O $boolean$ O O O O O O O $any$ O $any$ O $string$ O O O O $boolean$ O O O O $string$ O O O O $string$ O O O O $string$ O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O O O O $any$ O $any$ O $string$ O O O $string$ O O O $string$ O O O O O O $any$ O $any$ O $string$ O O O O O O $any$ O $any$ O $string$ O O O O O O $any$ O O $IReleaseCommand$ O $IReleaseCommand$ O $AccountManager$ O O $any$ O $any$ O $any$ O O O O O O $any$ O $string$ O O O $string$ O O O O
import * as yargs from "s" ; import * as cli from "s" ; import * as chalk from "s" ; import * as updateNotifier from "s" ; import backslash = require ( "s" ) ; import parseDuration = require ( "s" ) ; var packageJson = require ( "s" ) ; const ROLLOUT_PERCENTAGE_REGEX = "s" ; const USAGE_PREFIX = "s" ; var isValidCommandCategory = false ; var isValidCommand = false ; var wasHelpShown = false ; export function showHelp ( showRootDescription ? ) { if ( ! wasHelpShown ) { if ( showRootDescription ) { console . log ( chalk . cyan ( "s" + chalk . green ( "s" ) ) ) ; console . log ( chalk . cyan ( "s" + chalk . green ( "s" ) ) ) ; console . log ( chalk . cyan ( "s" + chalk . green ( "s" ) ) ) ; console . log ( chalk . cyan ( "s" + chalk . green ( "s" ) ) + "s" + packageJson . version ) ; console . log ( chalk . cyan ( "s" ) ) ; console . log ( "s" ) ; console . log ( "s" ) ; updateCheck ( ) ; } yargs . showHelp ( ) ; wasHelpShown = true ; } } function updateCheck ( ) { var notifier : updateNotifier . IResult = updateNotifier ( { pkg : packageJson } ) ; if ( notifier . update ) { notifier . notify ( ) ; } } function accessKeyAdd ( commandName , yargs : yargs . Argv ) { isValidCommand = true ; yargs . usage ( USAGE_PREFIX + "s" + commandName + "s" ) . demand ( 0 , 0 ) . example ( "s" + commandName + "s" , "s" ) addCommonConfiguration ( yargs ) ; } function accessKeyPatch ( commandName , yargs : yargs . Argv ) { isValidCommand = true ; yargs . usage ( USAGE_PREFIX + "s" + commandName + "s" ) . demand ( 0 , 0 ) . example ( "s" + commandName + "s" , "s" ) . example ( "s" + commandName + "s" , "s" ) . option ( "s" , { default : null , demand : false , description : "s" , type : "s" } ) . option ( "s" , { default : null , demand : false , description : "s" , type : "s" } ) ; addCommonConfiguration ( yargs ) ; } function accessKeyList ( commandName , yargs : yargs . Argv ) { isValidCommand = true ; yargs . usage ( USAGE_PREFIX + "s" + commandName + "s" ) . demand ( 0 , 0 ) . example ( "s" + commandName , "s" ) . example ( "s" + commandName + "s" , "s" ) . option ( "s" , { default : "s" , demand : false , description : "s" , type : "s" } ) ; addCommonConfiguration ( yargs ) ; } function accessKeyRemove ( commandName , yargs : yargs . Argv ) { isValidCommand = true ; yargs . usage ( USAGE_PREFIX + "s" + commandName + "s" ) . demand ( 0 , 0 ) . example ( "s" + commandName + "s" , "s" ) ; addCommonConfiguration ( yargs ) ; } function addCommonConfiguration ( yargs : yargs . Argv ) { yargs . wrap ( null ) . string ( "s" ) . strict ( ) . fail ( ( msg ) => showHelp ( ) ) ; } function appList ( commandName , yargs : yargs . Argv ) { isValidCommand = true ; yargs . usage ( USAGE_PREFIX + "s" + commandName + "s" ) . demand ( 0 , 0 ) . example ( "s" + commandName , "s" ) . example ( "s" + commandName + "s" , "s" ) . option ( "s" , { default : "s" , demand : false , description : "s" , type : "s" } ) ; addCommonConfiguration ( yargs ) ; } function appRemove ( commandName , yargs : yargs . Argv ) { isValidCommand = true ; yargs . usage ( USAGE_PREFIX + "s" + commandName + "s" ) . demand ( 0 , 0 ) . example ( "s" + commandName + "s" , "s" ) ; addCommonConfiguration ( yargs ) ; } function listCollaborators ( commandName , yargs : yargs . Argv ) { isValidCommand = true ; yargs . usage ( USAGE_PREFIX + "s" + commandName + "s" ) . demand ( 0 , 0 ) . example ( "s" + commandName + "s" , "s" ) . example ( "s" + commandName + "s" , "s" ) . option ( "s" , { default : "s" , demand : false , description : "s" , type : "s" } ) ; addCommonConfiguration ( yargs ) ; } function removeCollaborator ( commandName , yargs : yargs . Argv ) { isValidCommand = true ; yargs . usage ( USAGE_PREFIX + "s" + commandName + "s" ) . demand ( 0 , 0 ) . example ( "s" + commandName + "s" , "s" ) ; addCommonConfiguration ( yargs ) ; } function sessionList ( commandName , yargs : yargs . Argv ) { isValidCommand = true ; yargs . usage ( USAGE_PREFIX + "s" + commandName + "s" ) . demand ( 0 , 0 ) . example ( "s" + commandName , "s" ) . example ( "s" + commandName + "s" , "s" ) . option ( "s" , { default : "s" , demand : false , description : "s" , type : "s" } ) ; addCommonConfiguration ( yargs ) ; } function sessionRemove ( commandName , yargs : yargs . Argv ) { isValidCommand = true ; yargs . usage ( USAGE_PREFIX + "s" + commandName + "s" ) . demand ( 0 , 0 ) . example ( "s" + commandName + "s" , "s" ) ; addCommonConfiguration ( yargs ) ; } function deploymentHistoryClear ( commandName , yargs : yargs . Argv ) { isValidCommand = true ; yargs . usage ( USAGE_PREFIX + "s" + commandName + "s" ) . demand ( 0 , 0 ) . example ( "s" + commandName + "s" , "s" ) ; addCommonConfiguration ( yargs ) ; } function deploymentList ( commandName , yargs : yargs . Argv ) { isValidCommand = true ; yargs . usage ( USAGE_PREFIX + "s" + commandName + "s" ) . demand ( 0 , 0 ) . example ( "s" + commandName + "s" , "s" ) . example ( "s" + commandName + "s" , "s" ) . option ( "s" , { default : "s" , demand : false , description : "s" , type : "s" } ) . option ( "s" , { alias : "s" , default : false , demand : false , description : "s" , type : "s" } ) ; addCommonConfiguration ( yargs ) ; } function deploymentRemove ( commandName , yargs : yargs . Argv ) { isValidCommand = true ; yargs . usage ( USAGE_PREFIX + "s" + commandName + "s" ) . demand ( 0 , 0 ) . example ( "s" + commandName + "s" , "s" ) ; addCommonConfiguration ( yargs ) ; } function deploymentHistory ( commandName , yargs : yargs . Argv ) { isValidCommand = true ; yargs . usage ( USAGE_PREFIX + "s" + commandName + "s" ) . demand ( 0 , 0 ) . example ( "s" + commandName + "s" , "s" ) . example ( "s" + commandName + "s" , "s" ) . option ( "s" , { default : "s" , demand : false , description : "s" , type : "s" } ) . option ( "s" , { alias : "s" , default : false , demand : false , description : "s" , type : "s" } ) ; addCommonConfiguration ( yargs ) ; } var argv = yargs . usage ( USAGE_PREFIX + "s" ) . demand ( 0 , 0 ) . command ( "s" , "s" , ( yargs : yargs . Argv ) => { isValidCommandCategory = true ; yargs . usage ( USAGE_PREFIX + "s" ) . demand ( 0 , 0 ) . command ( "s" , "s" , ( yargs : yargs . Argv ) => accessKeyAdd ( "s" , yargs ) ) . command ( "s" , "s" , ( yargs : yargs . Argv ) => accessKeyRemove ( "s" , yargs ) ) . command ( "s" , "s" , ( yargs : yargs . Argv ) => accessKeyRemove ( "s" , yargs ) ) . command ( "s" , "s" , ( yargs : yargs . Argv ) => accessKeyList ( "s" , yargs ) ) . command ( "s" , "s" , ( yargs : yargs . Argv ) => accessKeyList ( "s" , yargs ) ) . check ( ( argv , aliases : { [ aliases ] : string } ) : any => isValidCommand ) ; addCommonConfiguration ( yargs ) ; } ) . command ( "s" , "s" , ( yargs : yargs . Argv ) => { isValidCommandCategory = true ; yargs . usage ( USAGE_PREFIX + "s" ) . demand ( 0 , 0 ) . command ( "s" , "s" , ( yargs : yargs . Argv ) : void => { isValidCommand = true ; yargs . usage ( USAGE_PREFIX + "s" ) . demand ( 0 , 0 ) . example ( "s" , "s" ) . example ( "s" , "s" ) . example ( "s" , "s" ) ; addCommonConfiguration ( yargs ) ; } ) . command ( "s" , "s" , ( yargs : yargs . Argv ) => appRemove ( "s" , yargs ) ) . command ( "s" , "s" , ( yargs : yargs . Argv ) => appRemove ( "s" , yargs ) ) . command ( "s" , "s" , ( yargs : yargs . Argv ) => { isValidCommand = true ; yargs . usage ( USAGE_PREFIX + "s" ) . demand ( 0 , 0 ) . example ( "s" , "s" ) ; addCommonConfiguration ( yargs ) ; } ) . command ( "s" , "s" , ( yargs : yargs . Argv ) => appList ( "s" , yargs ) ) . command ( "s" , "s" , ( yargs : yargs . Argv ) => appList ( "s" , yargs ) ) . check ( ( argv , aliases : { [ aliases ] : string } ) : any => isValidCommand ) ; addCommonConfiguration ( yargs ) ; } ) . command ( "s" , "s" , ( yargs : yargs . Argv ) => { isValidCommandCategory = true ; yargs . usage ( USAGE_PREFIX + "s" ) . demand ( 0 , 0 ) . command ( "s" , "s" , ( yargs : yargs . Argv ) : void => { isValidCommand = true ; yargs . usage ( USAGE_PREFIX + "s" ) . demand ( 0 , 0 ) . example ( "s" , "s" ) ; addCommonConfiguration ( yargs ) ; } ) . command ( "s" , "s" , ( yargs : yargs . Argv ) => removeCollaborator ( "s" , yargs ) ) . command ( "s" , "s" , ( yargs : yargs . Argv ) => removeCollaborator ( "s" , yargs ) ) . command ( "s" , "s" , ( yargs : yargs . Argv ) => listCollaborators ( "s" , yargs ) ) . command ( "s" , "s" , ( yargs : yargs . Argv ) => listCollaborators ( "s" , yargs ) ) . check ( ( argv , aliases : { [ aliases ] : string } ) : any => isValidCommand ) ; addCommonConfiguration ( yargs ) ; } ) . command ( "s" , "s" , ( yargs : yargs . Argv ) => { isValidCommandCategory = true ; isValidCommand = true ; yargs . usage ( USAGE_PREFIX + "s" ) . demand ( 0 , 0 ) . example ( "s" , "s" ) . example ( "s" , "s" ) ; addCommonConfiguration ( yargs ) ; } ) . command ( "s" , "s" , ( yargs : yargs . Argv ) => { isValidCommandCategory = true ; yargs . usage ( USAGE_PREFIX + "s" ) . demand ( 0 , 0 ) . command ( "s" , "s" , ( yargs : yargs . Argv ) : void => { isValidCommand = true ; yargs . usage ( USAGE_PREFIX + "s" ) . demand ( 0 , 0 ) . option ( "s" , { alias : "s" , demand : false , description : "s" , type : "s" } ) . example ( "s" , "s" ) . example ( "s" , "s" ) ; addCommonConfiguration ( yargs ) ; } ) . command ( "s" , "s" , ( yargs : yargs . Argv ) => deploymentHistoryClear ( "s" , yargs ) ) . command ( "s" , "s" , ( yargs : yargs . Argv ) => deploymentRemove ( "s" , yargs ) ) . command ( "s" , "s" , ( yargs : yargs . Argv ) => deploymentRemove ( "s" , yargs ) ) . command ( "s" , "s" , ( yargs : yargs . Argv ) => { isValidCommand = true ; yargs . usage ( USAGE_PREFIX + "s" ) . demand ( 0 , 0 ) . example ( "s" , "s" ) ; addCommonConfiguration ( yargs ) ; } ) . command ( "s" , "s" , ( yargs : yargs . Argv ) => deploymentList ( "s" , yargs ) ) . command ( "s" , "s" , ( yargs : yargs . Argv ) => deploymentList ( "s" , yargs ) ) . command ( "s" , "s" , ( yargs : yargs . Argv ) => deploymentHistory ( "s" , yargs ) ) . command ( "s" , "s" , ( yargs : yargs . Argv ) => deploymentHistory ( "s" , yargs ) ) . check ( ( argv , aliases : { [ aliases ] : string } ) : any => isValidCommand ) ; addCommonConfiguration ( yargs ) ; } ) . command ( "s" , "s" , ( yargs : yargs . Argv ) => { isValidCommandCategory = true ; isValidCommand = true ; yargs . usage ( USAGE_PREFIX + "s" ) . demand ( 0 , 0 ) . example ( "s" , "s" ) . check ( ( argv , aliases : { [ aliases ] : string } ) : any => isValidCommand ) ; addCommonConfiguration ( yargs ) ; } ) . command ( "s" , "s" , ( yargs : yargs . Argv ) => { isValidCommandCategory = true ; isValidCommand = true ; yargs . usage ( USAGE_PREFIX + "s" ) . demand ( 0 , 0 ) . example ( "s" , "s" ) . example ( "s" , "s" ) . example ( "s" , "s" ) . option ( "s" , { alias : "s" , default : null , demand : false , description : "s" , type : "s" } ) . option ( "s" , { default : null , demand : false , description : "s" , type : "s" } ) . option ( "s" , { default : false , demand : false , description : "s" , type : "s" } ) . check ( ( argv , aliases : { [ aliases ] : string } ) : any => isValidCommand ) ; addCommonConfiguration ( yargs ) ; } ) . command ( "s" , "s" , ( yargs : yargs . Argv ) => { isValidCommandCategory = true ; isValidCommand = true ; yargs . usage ( USAGE_PREFIX + "s" ) . demand ( 0 , 0 ) . example ( "s" , "s" ) ; addCommonConfiguration ( yargs ) ; } ) . command ( "s" , "s" , ( yargs : yargs . Argv ) => { yargs . usage ( USAGE_PREFIX + "s" ) . demand ( 0 , 0 ) . example ( "s" , "s" ) . example ( "s" , "s" ) . option ( "s" , { alias : "s" , default : null , demand : false , description : "s" , type : "s" } ) . option ( "s" , { alias : "s" , default : null , demand : false , description : "s" , type : "s" } ) . option ( "s" , { alias : "s" , default : null , demand : false , description : "s" , type : "s" } ) . option ( "s" , { alias : "s" , default : null , demand : false , description : "s" , type : "s" } ) . option ( "s" , { alias : "s" , default : null , demand : false , description : "s" , type : "s" } ) . option ( "s" , { alias : "s" , default : null , demand : false , description : "s" , type : "s" } ) . check ( ( argv , aliases : { [ aliases ] : string } ) : any => { return isValidRollout ( argv ) ; } ) ; addCommonConfiguration ( yargs ) ; } ) . command ( "s" , "s" , ( yargs : yargs . Argv ) => { yargs . usage ( USAGE_PREFIX + "s" ) . demand ( 0 , 0 ) . example ( "s" , "s" ) . example ( "s" , "s" ) . option ( "s" , { alias : "s" , default : null , demand : false , description : "s" , type : "s" } ) . option ( "s" , { alias : "s" , default : null , demand : false , description : "s" , type : "s" } ) . option ( "s" , { alias : "s" , default : null , demand : false , description : "s" , type : "s" } ) . option ( "s" , { alias : "s" , default : null , demand : false , description : "s" , type : "s" } ) . option ( "s" , { default : false , demand : false , description : "s" , type : "s" } ) . option ( "s" , { alias : "s" , default : "s" , demand : false , description : "s" , type : "s" } ) . option ( "s" , { alias : "s" , default : null , demand : false , description : "s" , type : "s" } ) . check ( ( argv , aliases : { [ aliases ] : string } ) : any => { return isValidRollout ( argv ) ; } ) ; addCommonConfiguration ( yargs ) ; } ) . command ( "s" , "s" , ( yargs : yargs . Argv ) => { isValidCommandCategory = true ; isValidCommand = true ; yargs . usage ( USAGE_PREFIX + "s" ) . demand ( 0 , 0 ) . example ( "s" , "s" ) . example ( "s" , "s" ) . option ( "s" , { default : null , demand : false , description : "s" , type : "s" } ) . option ( "s" , { default : false , demand : false , description : "s" , type : "s" } ) . check ( ( argv , aliases : { [ aliases ] : string } ) : any => isValidCommand ) ; addCommonConfiguration ( yargs ) ; } ) . command ( "s" , "s" , ( yargs : yargs . Argv ) => { yargs . usage ( USAGE_PREFIX + "s" ) . demand ( 0 , 0 ) . example ( "s" , "s" ) . example ( "s" , "s" ) . example ( "s" , "s" ) . option ( "s" , { alias : "s" , default : "s" , demand : false , description : "s" , type : "s" } ) . option ( "s" , { alias : "s" , default : null , demand : false , description : "s" , type : "s" } ) . option ( "s" , { alias : "s" , default : false , demand : false , description : "s" , type : "s" } ) . option ( "s" , { alias : "s" , default : false , demand : false , description : "s" , type : "s" } ) . option ( "s" , { alias : "s" , default : false , demand : false , description : "s" , type : "s" } ) . option ( "s" , { default : false , demand : false , description : "s" , type : "s" } ) . option ( "s" , { alias : "s" , default : "s" , demand : false , description : "s" , type : "s" } ) . check ( ( argv , aliases : { [ aliases ] : string } ) : any => { return checkValidReleaseOptions ( argv ) ; } ) ; addCommonConfiguration ( yargs ) ; } ) . command ( "s" , "s" , ( yargs : yargs . Argv ) => { yargs . usage ( USAGE_PREFIX + "s" ) . demand ( 0 , 0 ) . example ( "s" , "s" ) . example ( "s" , "s" ) . option ( "s" , { alias : "s" , default : false , demand : false , description : "s" , type : "s" } ) . option ( "s" , { alias : "s" , default : false , demand : false , description : "s" , type : "s" } ) . option ( "s" , { alias : "s" , default : "s" , demand : false , description : "s" , type : "s" } ) . option ( "s" , { alias : "s" , default : null , demand : false , description : "s" , type : "s" } ) . option ( "s" , { alias : "s" , default : false , demand : false , description : "s" , type : "s" } ) . option ( "s" , { alias : "s" , default : false , demand : false , description : "s" , type : "s" } ) . option ( "s" , { alias : "s" , default : false , demand : false , description : "s" , type : "s" } ) . option ( "s" , { default : false , demand : false , description : "s" , type : "s" } ) . option ( "s" , { alias : "s" , default : "s" , demand : false , description : "s" , type : "s" } ) . option ( "s" , { alias : "s" , default : null , demand : false , description : "s" , type : "s" } ) . check ( ( argv , aliases : { [ aliases ] : string } ) : any => { return checkValidReleaseOptions ( argv ) ; } ) ; addCommonConfiguration ( yargs ) ; } ) . command ( "s" , "s" , ( yargs : yargs . Argv ) => { yargs . usage ( USAGE_PREFIX + "s" ) . demand ( 0 , 0 ) . example ( "s" , "s" ) . example ( "s" , "s" ) . example ( "s" , "s" ) . option ( "s" , { alias : "s" , default : null , demand : false , description : "s" , type : "s" } ) . option ( "s" , { alias : "s" , default : "s" , demand : false , description : "s" , type : "s" } ) . option ( "s" , { alias : "s" , default : null , demand : false , description : "s" , type : "s" } ) . option ( "s" , { alias : "s" , default : false , demand : false , description : "s" , type : "s" } ) . option ( "s" , { alias : "s" , default : false , demand : false , description : "s" , type : "s" } ) . option ( "s" , { alias : "s" , default : null , demand : false , description : "s" , type : "s" } ) . option ( "s" , { alias : "s" , default : null , demand : false , description : "s" } ) . option ( "s" , { alias : "s" , default : false , demand : false , description : "s" , type : "s" } ) . option ( "s" , { default : false , demand : false , description : "s" , type : "s" } ) . option ( "s" , { alias : "s" , default : null , demand : false , description : "s" } ) . option ( "s" , { alias : "s" , default : null , demand : false , description : "s" } ) . option ( "s" , { alias : "s" , default : "s" , demand : false , description : "s" , type : "s" } ) . option ( "s" , { alias : "s" , default : false , demand : false , description : "s" , type : "s" } ) . option ( "s" , { alias : "s" , default : null , demand : false , description : "s" , type : "s" } ) . option ( "s" , { alias : "s" , default : null , demand : false , description : "s" , type : "s" } ) . option ( "s" , { alias : "s" , default : null , demand : false , description : "s" , type : "s" } ) . option ( "s" , { alias : "s" , default : null , demand : false , description : "s" , type : "s" } ) . check ( ( argv , aliases : { [ aliases ] : string } ) : any => { return checkValidReleaseOptions ( argv ) ; } ) ; addCommonConfiguration ( yargs ) ; } ) . command ( "s" , "s" , ( yargs : yargs . Argv ) => { yargs . usage ( USAGE_PREFIX + "s" ) . demand ( 0 , 0 ) . example ( "s" , "s" ) . example ( "s" , "s" ) . option ( "s" , { alias : "s" , default : null , demand : false , description : "s" , type : "s" } ) ; addCommonConfiguration ( yargs ) ; } ) . command ( "s" , "s" , ( yargs : yargs . Argv ) => { isValidCommandCategory = true ; isValidCommand = true ; yargs . usage ( USAGE_PREFIX + "s" ) . demand ( 0 , 0 ) . example ( "s" , "s" ) ; addCommonConfiguration ( yargs ) ; } ) . alias ( "s" , "s" ) . version ( packageJson . version ) . wrap ( null ) . strict ( ) . check ( ( argv , aliases : { [ aliases ] : string } ) : any => isValidCommandCategory ) . fail ( ( msg ) => showHelp ( true ) ) . argv ; function createCommand ( ) : cli . ICommand { var cmd : cli . ICommand ; if ( ! wasHelpShown && argv . _ && argv . _ . length > 0 ) { var 0 = argv . _ [ 0 ] ; var 0 = argv . _ [ 0 ] ; var 0 = argv . _ [ 0 ] ; var 0 = argv . _ [ 0 ] ; var 0 = argv . _ [ 0 ] ; switch ( 0 ) { case "s" : switch ( 0 ) { case "s" : if ( 0 ) { cmd = { type : cli . CommandType . accessKeyAdd } ; var accessKeyAddCmd = < cli . IAccessKeyAddCommand > cmd ; accessKeyAddCmd . name = 0 ; accessKeyAddCmd . ttl = parseDurationMilliseconds ( "s" ) ; } break ; case "s" : if ( 0 ) { cmd = { type : cli . CommandType . accessKeyPatch } ; var accessKeyPatchCmd = < cli . IAccessKeyPatchCommand > cmd ; accessKeyPatchCmd . oldName = 0 ; var newNameOption = argv [ "s" ] ; var ttlOption = argv [ "s" ] ; if ( isDefined ( newNameOption ) ) { accessKeyPatchCmd . newName = newNameOption ; } if ( isDefined ( ttlOption ) ) { accessKeyPatchCmd . ttl = parseDurationMilliseconds ( ttlOption ) ; } } break ; case "s" : case "s" : cmd = { type : cli . CommandType . accessKeyList } ; ( < cli . IAccessKeyListCommand > cmd ) . format = argv [ "s" ] ; break ; case "s" : case "s" : if ( 0 ) { cmd = { type : cli . CommandType . accessKeyRemove } ; ( < cli . IAccessKeyRemoveCommand > cmd ) . accessKey = 0 ; } break ; } break ; case "s" : switch ( 0 ) { case "s" : if ( 0 ) { cmd = { type : cli . CommandType . appAdd } ; var appAddCommand = < cli . IAppAddCommand > cmd ; appAddCommand . appName = 0 ; appAddCommand . os = 0 ; appAddCommand . platform = 0 ; } break ; case "s" : case "s" : cmd = { type : cli . CommandType . appList } ; ( < cli . IAppListCommand > cmd ) . format = argv [ "s" ] ; break ; case "s" : case "s" : if ( 0 ) { cmd = { type : cli . CommandType . appRemove } ; ( < cli . IAppRemoveCommand > cmd ) . appName = 0 ; } break ; case "s" : if ( 0 && 0 ) { cmd = { type : cli . CommandType . appRename } ; var appRenameCommand = < cli . IAppRenameCommand > cmd ; appRenameCommand . currentAppName = 0 ; appRenameCommand . newAppName = 0 ; } break ; case "s" : if ( 0 && 0 ) { cmd = { type : cli . CommandType . appTransfer } ; var appTransferCommand = < cli . IAppTransferCommand > cmd ; appTransferCommand . appName = 0 ; appTransferCommand . email = 0 ; } break ; } break ; case "s" : switch ( 0 ) { case "s" : if ( 0 && 0 ) { cmd = { type : cli . CommandType . collaboratorAdd } ; ( < cli . ICollaboratorAddCommand > cmd ) . appName = 0 ; ( < cli . ICollaboratorAddCommand > cmd ) . email = 0 ; } break ; case "s" : case "s" : if ( 0 ) { cmd = { type : cli . CommandType . collaboratorList } ; ( < cli . ICollaboratorListCommand > cmd ) . appName = 0 ; ( < cli . ICollaboratorListCommand > cmd ) . format = argv [ "s" ] ; } break ; case "s" : case "s" : if ( 0 && 0 ) { cmd = { type : cli . CommandType . collaboratorRemove } ; ( < cli . ICollaboratorRemoveCommand > cmd ) . appName = 0 ; ( < cli . ICollaboratorAddCommand > cmd ) . email = 0 ; } break ; } break ; case "s" : cmd = < cli . IDebugCommand > { type : cli . CommandType . debug , platform : 0 } ; break ; case "s" : switch ( 0 ) { case "s" : if ( 0 && ( 0 || argv [ "s" ] ) ) { cmd = { type : cli . CommandType . deploymentAdd } ; var deploymentAddCommand = < cli . IDeploymentAddCommand > cmd ; deploymentAddCommand . appName = 0 ; deploymentAddCommand . deploymentName = 0 ; deploymentAddCommand . default = argv [ "s" ] ; } break ; case "s" : if ( 0 && 0 ) { cmd = { type : cli . CommandType . deploymentHistoryClear } ; var deploymentHistoryClearCommand = < cli . IDeploymentHistoryClearCommand > cmd ; deploymentHistoryClearCommand . appName = 0 ; deploymentHistoryClearCommand . deploymentName = 0 ; } break ; case "s" : case "s" : if ( 0 ) { cmd = { type : cli . CommandType . deploymentList } ; var deploymentListCommand = < cli . IDeploymentListCommand > cmd ; deploymentListCommand . appName = 0 ; deploymentListCommand . format = argv [ "s" ] ; deploymentListCommand . displayKeys = argv [ "s" ] ; } break ; case "s" : case "s" : if ( 0 && 0 ) { cmd = { type : cli . CommandType . deploymentRemove } ; var deploymentRemoveCommand = < cli . IDeploymentRemoveCommand > cmd ; deploymentRemoveCommand . appName = 0 ; deploymentRemoveCommand . deploymentName = 0 ; } break ; case "s" : if ( 0 && 0 && 0 ) { cmd = { type : cli . CommandType . deploymentRename } ; var deploymentRenameCommand = < cli . IDeploymentRenameCommand > cmd ; deploymentRenameCommand . appName = 0 ; deploymentRenameCommand . currentDeploymentName = 0 ; deploymentRenameCommand . newDeploymentName = 0 ; } break ; case "s" : case "s" : if ( 0 && 0 ) { cmd = { type : cli . CommandType . deploymentHistory } ; var deploymentHistoryCommand = < cli . IDeploymentHistoryCommand > cmd ; deploymentHistoryCommand . appName = 0 ; deploymentHistoryCommand . deploymentName = 0 ; deploymentHistoryCommand . format = argv [ "s" ] ; deploymentHistoryCommand . displayAuthor = argv [ "s" ] ; } break ; } break ; case "s" : cmd = < cli . ILinkCommand > { type : cli . CommandType . link , serverUrl : getServerUrl ( 0 ) } ; break ; case "s" : cmd = { type : cli . CommandType . login } ; var loginCommand = < cli . ILoginCommand > cmd ; loginCommand . serverUrl = getServerUrl ( 0 ) ; loginCommand . accessKey = argv [ "s" ] ; loginCommand . proxy = argv [ "s" ] ; loginCommand . noProxy = argv [ "s" ] ; break ; case "s" : cmd = { type : cli . CommandType . logout } ; break ; case "s" : if ( 0 && 0 ) { cmd = { type : cli . CommandType . patch } ; var patchCommand = < cli . IPatchCommand > cmd ; patchCommand . appName = 0 ; patchCommand . deploymentName = 0 ; patchCommand . label = argv [ "s" ] ; patchCommand . description = argv [ "s" ] ? backslash ( argv [ "s" ] ) : null ; patchCommand . disabled = argv [ "s" ] ; patchCommand . mandatory = argv [ "s" ] ; patchCommand . rollout = getRolloutValue ( argv [ "s" ] ) ; patchCommand . appStoreVersion = argv [ "s" ] ; } break ; case "s" : if ( 0 && 0 && 0 ) { cmd = { type : cli . CommandType . promote } ; var deploymentPromoteCommand = < cli . IPromoteCommand > cmd ; deploymentPromoteCommand . appName = 0 ; deploymentPromoteCommand . sourceDeploymentName = 0 ; deploymentPromoteCommand . destDeploymentName = 0 ; deploymentPromoteCommand . description = argv [ "s" ] ? backslash ( argv [ "s" ] ) : "s" ; deploymentPromoteCommand . label = argv [ "s" ] ; deploymentPromoteCommand . disabled = argv [ "s" ] ; deploymentPromoteCommand . mandatory = argv [ "s" ] ; deploymentPromoteCommand . noDuplicateReleaseError = argv [ "s" ] ; deploymentPromoteCommand . rollout = getRolloutValue ( argv [ "s" ] ) ; deploymentPromoteCommand . appStoreVersion = argv [ "s" ] ; } break ; case "s" : cmd = { type : cli . CommandType . register } ; var registerCommand = < cli . IRegisterCommand > cmd ; registerCommand . serverUrl = getServerUrl ( 0 ) ; registerCommand . proxy = argv [ "s" ] ; registerCommand . noProxy = argv [ "s" ] ; break ; case "s" : if ( 0 && 0 && 0 ) { cmd = { type : cli . CommandType . release } ; var releaseCommand = < cli . IReleaseCommand > cmd ; releaseCommand . appName = 0 ; releaseCommand . package = 0 ; releaseCommand . appStoreVersion = 0 ; releaseCommand . deploymentName = argv [ "s" ] ; releaseCommand . description = argv [ "s" ] ? backslash ( argv [ "s" ] ) : "s" ; releaseCommand . disabled = argv [ "s" ] ; releaseCommand . mandatory = argv [ "s" ] ; releaseCommand . noDuplicateReleaseError = argv [ "s" ] ; releaseCommand . rollout = getRolloutValue ( argv [ "s" ] ) ; releaseCommand . privateKeyPath = argv [ "s" ] ; } break ; case "s" : if ( 0 && 0 ) { cmd = { type : cli . CommandType . releaseCordova } ; var releaseCordovaCommand = < cli . IReleaseCordovaCommand > cmd ; releaseCordovaCommand . appName = 0 ; releaseCordovaCommand . platform = 0 ; releaseCordovaCommand . build = argv [ "s" ] ; releaseCordovaCommand . deploymentName = argv [ "s" ] ; releaseCordovaCommand . description = argv [ "s" ] ? backslash ( argv [ "s" ] ) : "s" ; releaseCordovaCommand . disabled = argv [ "s" ] ; releaseCordovaCommand . mandatory = argv [ "s" ] ; releaseCordovaCommand . noDuplicateReleaseError = argv [ "s" ] ; releaseCordovaCommand . rollout = getRolloutValue ( argv [ "s" ] ) ; releaseCordovaCommand . appStoreVersion = argv [ "s" ] ; releaseCordovaCommand . isReleaseBuildType = argv [ "s" ] ; releaseCordovaCommand . privateKeyPath = argv [ "s" ] ; } break ; case "s" : if ( 0 && 0 ) { cmd = { type : cli . CommandType . releaseReact } ; var releaseReactCommand = < cli . IReleaseReactCommand > cmd ; releaseReactCommand . appName = 0 ; releaseReactCommand . platform = 0 ; releaseReactCommand . appStoreVersion = argv [ "s" ] ; releaseReactCommand . bundleName = argv [ "s" ] ; releaseReactCommand . deploymentName = argv [ "s" ] ; releaseReactCommand . disabled = argv [ "s" ] ; releaseReactCommand . description = argv [ "s" ] ? backslash ( argv [ "s" ] ) : "s" ; releaseReactCommand . development = argv [ "s" ] ; releaseReactCommand . entryFile = argv [ "s" ] ; releaseReactCommand . gradleFile = argv [ "s" ] ; releaseReactCommand . mandatory = argv [ "s" ] ; releaseReactCommand . noDuplicateReleaseError = argv [ "s" ] ; releaseReactCommand . plistFile = argv [ "s" ] ; releaseReactCommand . plistFilePrefix = argv [ "s" ] ; releaseReactCommand . rollout = getRolloutValue ( argv [ "s" ] ) ; releaseReactCommand . privateKeyPath = argv [ "s" ] ; releaseReactCommand . sourcemapOutput = argv [ "s" ] ; releaseReactCommand . outputDir = argv [ "s" ] ; releaseReactCommand . config = argv [ "s" ] ; } break ; case "s" : if ( 0 && 0 ) { cmd = { type : cli . CommandType . rollback } ; var rollbackCommand = < cli . IRollbackCommand > cmd ; rollbackCommand . appName = 0 ; rollbackCommand . deploymentName = 0 ; rollbackCommand . targetRelease = argv [ "s" ] ; } break ; case "s" : switch ( 0 ) { case "s" : case "s" : cmd = { type : cli . CommandType . sessionList } ; ( < cli . ISessionListCommand > cmd ) . format = argv [ "s" ] ; break ; case "s" : case "s" : if ( 0 ) { cmd = { type : cli . CommandType . sessionRemove } ; ( < cli . ISessionRemoveCommand > cmd ) . machineName = 0 ; } break ; } break ; case "s" : cmd = { type : cli . CommandType . whoami } ; break ; } return cmd ; } } function isValidRollout ( args ) { var rollout = args [ "s" ] ; if ( rollout && ! ROLLOUT_PERCENTAGE_REGEX . test ( rollout ) ) { return false ; } return true ; } function checkValidReleaseOptions ( args ) { return isValidRollout ( args ) && ! ! args [ "s" ] ; } function getRolloutValue ( input ) { return input ? parseInt ( input . replace ( "s" , "s" ) ) : null ; } function getServerUrl ( url ) { if ( ! url ) return null ; url = url . trim ( ) ; if ( url [ url . length - 0 ] === "s" ) { url = url . substring ( 0 , url . length - 0 ) ; } url = url . replace ( "s" , "s" ) ; return url ; } function isDefined ( object ) { return object !== undefined && object !== null ; } function parseDurationMilliseconds ( durationString ) { return Math . floor ( parseDuration ( durationString ) ) ; } export var command = createCommand ( ) ;	O O O $Argv$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $string$ O O O O O O O $number$ O O O O O O O $any$ O $any$ O O O O O $RegExp$ O O O O O O O O O $boolean$ O O O O $boolean$ O O O O $boolean$ O O O O O $void$ O $boolean$ $boolean$ O O O O O $boolean$ O O O O $boolean$ O O $Console$ O $void$ O $any$ O $any$ O O O $any$ O $any$ O O O O O O $Console$ O $void$ O $any$ O $any$ O O O $any$ O $any$ O O O O O O $Console$ O $void$ O $any$ O $any$ O O O $any$ O $any$ O O O O O O $Console$ O $void$ O $any$ O $any$ O O O $any$ O $any$ O O O O O O O $any$ O $any$ O O $Console$ O $void$ O $any$ O $any$ O O O O O $Console$ O $void$ O O O O $Console$ O $void$ O O O O $void$ O O O O $Argv$ O $Argv$ O O O $boolean$ O O O O O O $void$ O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O $any$ O $any$ O O $any$ O $any$ O O O O O O $void$ O $string$ O $Argv$ O $Argv$ O $any$ O O $boolean$ O O O $Argv$ O $complex$ O O O O O $string$ O O O O $complex$ O O O O O O $Argv$ O O O $string$ O O O O O $void$ O $Argv$ O O O O $void$ O $string$ O $Argv$ O $Argv$ O $any$ O O $boolean$ O O O $Argv$ O $complex$ O O O O O $string$ O O O O $complex$ O O O O O O $Argv$ O O O $string$ O O O O O O $Argv$ O O O $string$ O O O O O O $complex$ O O O O $null$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $complex$ O O O O $null$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $void$ O $Argv$ O O O O $void$ O $string$ O $Argv$ O $Argv$ O $any$ O O $boolean$ O O O $Argv$ O $complex$ O O O O O $string$ O O O O $complex$ O O O O O O $Argv$ O O O $string$ O O O O $Argv$ O O O $string$ O O O O O O $complex$ O O O O $string$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $void$ O $Argv$ O O O O $void$ O $string$ O $Argv$ O $Argv$ O $any$ O O $boolean$ O O O $Argv$ O $complex$ O O O O O $string$ O O O O $complex$ O O O O O O $Argv$ O O O $string$ O O O O O O $void$ O $Argv$ O O O O $void$ O $Argv$ O $Argv$ O $any$ O O $Argv$ O $Argv$ O O O O $complex$ O O O O $Argv$ O O O $Argv$ O O $string$ O O $void$ O O O O O O $void$ O $string$ O $Argv$ O $Argv$ O $any$ O O $boolean$ O O O $Argv$ O $complex$ O O O O O $string$ O O O O $complex$ O O O O O O $Argv$ O O O $string$ O O O O $Argv$ O O O $string$ O O O O O O $complex$ O O O O $string$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $void$ O $Argv$ O O O O $void$ O $string$ O $Argv$ O $Argv$ O $any$ O O $boolean$ O O O $Argv$ O $complex$ O O O O O $string$ O O O O $complex$ O O O O O O $Argv$ O O O $string$ O O O O O O $void$ O $Argv$ O O O O $void$ O $string$ O $Argv$ O $Argv$ O $any$ O O $boolean$ O O O $Argv$ O $complex$ O O O O O $string$ O O O O $complex$ O O O O O O $Argv$ O O O $string$ O O O O O O $Argv$ O O O $string$ O O O O O O $complex$ O O O O $string$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $void$ O $Argv$ O O O O $void$ O $string$ O $Argv$ O $Argv$ O $any$ O O $boolean$ O O O $Argv$ O $complex$ O O O O O $string$ O O O O $complex$ O O O O O O $Argv$ O O O $string$ O O O O O O $void$ O $Argv$ O O O O $void$ O $string$ O $Argv$ O $Argv$ O $any$ O O $boolean$ O O O $Argv$ O $complex$ O O O O O $string$ O O O O $complex$ O O O O O O $Argv$ O O O $string$ O O O O $Argv$ O O O $string$ O O O O O O $complex$ O O O O $string$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $void$ O $Argv$ O O O O $void$ O $string$ O $Argv$ O $Argv$ O $any$ O O $boolean$ O O O $Argv$ O $complex$ O O O O O $string$ O O O O $complex$ O O O O O O $Argv$ O O O $string$ O O O O O O $void$ O $Argv$ O O O O $void$ O $string$ O $Argv$ O $Argv$ O $any$ O O $boolean$ O O O $Argv$ O $complex$ O O O O O $string$ O O O O $complex$ O O O O O O $Argv$ O O O $string$ O O O O O O $void$ O $Argv$ O O O O $void$ O $string$ O $Argv$ O $Argv$ O $any$ O O $boolean$ O O O $Argv$ O $complex$ O O O O O $string$ O O O O $complex$ O O O O O O $Argv$ O O O $string$ O O O O O O $Argv$ O O O $string$ O O O O O O $complex$ O O O O $string$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $complex$ O O O O $string$ O O O $boolean$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $void$ O $Argv$ O O O O $void$ O $string$ O $Argv$ O $Argv$ O $any$ O O $boolean$ O O O $Argv$ O $complex$ O O O O O $string$ O O O O $complex$ O O O O O O $Argv$ O O O $string$ O O O O O O $void$ O $Argv$ O O O O $void$ O $string$ O $Argv$ O $Argv$ O $any$ O O $boolean$ O O O $Argv$ O $complex$ O O O O O $string$ O O O O $complex$ O O O O O O $Argv$ O O O $string$ O O O O O O $Argv$ O O O $string$ O O O O O O $complex$ O O O O $string$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $complex$ O O O O $string$ O O O $boolean$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $void$ O $Argv$ O O O O $any$ O $Argv$ O $complex$ O O O O O O $complex$ O O O O O O $Argv$ O O O O O O $Argv$ O $Argv$ O $any$ O O O $boolean$ O O O $Argv$ O $complex$ O O O O O O $complex$ O O O O O O $Argv$ O O O O O O $Argv$ O $Argv$ O $any$ O O $void$ O O O $Argv$ O O O $Argv$ O O O O O O $Argv$ O $Argv$ O $any$ O O $void$ O O O $Argv$ O O O $Argv$ O O O O O O $Argv$ O $Argv$ O $any$ O O $void$ O O O $Argv$ O O O $Argv$ O O O O O O $Argv$ O $Argv$ O $any$ O O $void$ O O O $Argv$ O O O $Argv$ O O O O O O $Argv$ O $Argv$ O $any$ O O $void$ O O O $Argv$ O O O $Argv$ O O $any$ O $complex$ O O O $string$ O O O O O O O O $boolean$ O O $void$ O $Argv$ O O O O O $Argv$ O O O O O O $Argv$ O $Argv$ O $any$ O O O $boolean$ O O O $Argv$ O $complex$ O O O O O O $complex$ O O O O O O $Argv$ O O O O O O $Argv$ O $Argv$ O $any$ O O O O O $boolean$ O O O $Argv$ O $complex$ O O O O O O $complex$ O O O O O O $Argv$ O O O O O O $Argv$ O O O O O O $Argv$ O O O O O O $void$ O $Argv$ O O O O O $Argv$ O O O O O O $Argv$ O $Argv$ O $any$ O O $void$ O O O $Argv$ O O O $Argv$ O O O O O O $Argv$ O $Argv$ O $any$ O O $void$ O O O $Argv$ O O O $Argv$ O O O O O O $Argv$ O $Argv$ O $any$ O O O $boolean$ O O O $Argv$ O $complex$ O O O O O O $complex$ O O O O O O $Argv$ O O O O O O $void$ O $Argv$ O O O O O $Argv$ O O O O O O $Argv$ O $Argv$ O $any$ O O $void$ O O O $Argv$ O O O $Argv$ O O O O O O $Argv$ O $Argv$ O $any$ O O $void$ O O O $Argv$ O O O $Argv$ O O $any$ O $complex$ O O O $string$ O O O O O O O O $boolean$ O O $void$ O $Argv$ O O O O O $Argv$ O O O O O O $Argv$ O $Argv$ O $any$ O O O $boolean$ O O O $Argv$ O $complex$ O O O O O O $complex$ O O O O O O $Argv$ O O O O O O $Argv$ O $Argv$ O $any$ O O O O O $boolean$ O O O $Argv$ O $complex$ O O O O O O $complex$ O O O O O O $Argv$ O O O O O O $void$ O $Argv$ O O O O O $Argv$ O O O O O O $Argv$ O $Argv$ O $any$ O O $void$ O O O $Argv$ O O O $Argv$ O O O O O O $Argv$ O $Argv$ O $any$ O O $void$ O O O $Argv$ O O O $Argv$ O O O O O O $Argv$ O $Argv$ O $any$ O O $void$ O O O $Argv$ O O O $Argv$ O O O O O O $Argv$ O $Argv$ O $any$ O O $void$ O O O $Argv$ O O O $Argv$ O O $any$ O $complex$ O O O $string$ O O O O O O O O $boolean$ O O $void$ O $Argv$ O O O O O $Argv$ O O O O O O $Argv$ O $Argv$ O $any$ O O O $boolean$ O O O $boolean$ O O O $Argv$ O $complex$ O O O O O O $complex$ O O O O O O $Argv$ O O O O O O $Argv$ O O O O O O $void$ O $Argv$ O O O O O $Argv$ O O O O O O $Argv$ O $Argv$ O $any$ O O O $boolean$ O O O $Argv$ O $complex$ O O O O O O $complex$ O O O O O O $Argv$ O O O O O O $Argv$ O $Argv$ O $any$ O O O O O $boolean$ O O O $Argv$ O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O $string$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $Argv$ O O O O O O $Argv$ O O O O O O $void$ O $Argv$ O O O O O $Argv$ O O O O O O $Argv$ O $Argv$ O $any$ O O $void$ O O O $Argv$ O O O $Argv$ O O O O O O $Argv$ O $Argv$ O $any$ O O $void$ O O O $Argv$ O O O $Argv$ O O O O O O $Argv$ O $Argv$ O $any$ O O $void$ O O O $Argv$ O O O $Argv$ O O O O O O $Argv$ O $Argv$ O $any$ O O O $boolean$ O O O $Argv$ O $complex$ O O O O O O $complex$ O O O O O O $Argv$ O O O O O O $void$ O $Argv$ O O O O O $Argv$ O O O O O O $Argv$ O $Argv$ O $any$ O O $void$ O O O $Argv$ O O O $Argv$ O O O O O O $Argv$ O $Argv$ O $any$ O O $void$ O O O $Argv$ O O O $Argv$ O O O O O O $Argv$ O $Argv$ O $any$ O O $void$ O O O $Argv$ O O O $Argv$ O O O O O O $Argv$ O $Argv$ O $any$ O O $void$ O O O $Argv$ O O O $Argv$ O O $any$ O $complex$ O O O $string$ O O O O O O O O $boolean$ O O $void$ O $Argv$ O O O O O $Argv$ O O O O O O $Argv$ O $Argv$ O $any$ O O O $boolean$ O O O $boolean$ O O O $Argv$ O $complex$ O O O O O O $complex$ O O O O O O $Argv$ O O O O O O $Argv$ O O $any$ O $complex$ O O O $string$ O O O O O O O O $boolean$ O O $void$ O $Argv$ O O O O O $Argv$ O O O O O O $Argv$ O $Argv$ O $any$ O O O $boolean$ O O O $boolean$ O O O $Argv$ O $complex$ O O O O O O $complex$ O O O O O O $Argv$ O O O O O O $Argv$ O O O O O O $Argv$ O O O O O O $complex$ O O O O $string$ O O O $null$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $complex$ O O O O $null$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $complex$ O O O O $boolean$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $Argv$ O O $any$ O $complex$ O O O $string$ O O O O O O O O $boolean$ O O $void$ O $Argv$ O O O O O $Argv$ O O O O O O $Argv$ O $Argv$ O $any$ O O O $boolean$ O O O $boolean$ O O O $Argv$ O $complex$ O O O O O O $complex$ O O O O O O $Argv$ O O O O O O $void$ O $Argv$ O O O O O $Argv$ O O O O O O $Argv$ O $Argv$ O $any$ O O O $Argv$ O $complex$ O O O O O O $complex$ O O O O O O $Argv$ O O O O O O $Argv$ O O O O O O $complex$ O O O O $string$ O O O $null$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $complex$ O O O O $string$ O O O $null$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $complex$ O O O O $string$ O O O $null$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $complex$ O O O O $string$ O O O $null$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $complex$ O O O O $string$ O O O $null$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $complex$ O O O O $string$ O O O $null$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $Argv$ O O $any$ O $complex$ O O O $string$ O O O O O O O O O O $boolean$ O $any$ O O O O O $void$ O $Argv$ O O O O O $Argv$ O O O O O O $Argv$ O $Argv$ O $any$ O O O $Argv$ O $complex$ O O O O O O $complex$ O O O O O O $Argv$ O O O O O O $Argv$ O O O O O O $complex$ O O O O $string$ O O O $null$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $complex$ O O O O $string$ O O O $null$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $complex$ O O O O $string$ O O O $null$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $complex$ O O O O $string$ O O O $null$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $complex$ O O O O $boolean$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $complex$ O O O O $string$ O O O $string$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $complex$ O O O O $string$ O O O $null$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $Argv$ O O $any$ O $complex$ O O O $string$ O O O O O O O O O O $boolean$ O $any$ O O O O O $void$ O $Argv$ O O O O O $Argv$ O O O O O O $Argv$ O $Argv$ O $any$ O O O $boolean$ O O O $boolean$ O O O $Argv$ O $complex$ O O O O O O $complex$ O O O O O O $Argv$ O O O O O O $Argv$ O O O O O O $complex$ O O O O $null$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $complex$ O O O O $boolean$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $Argv$ O O $any$ O $complex$ O O O $string$ O O O O O O O O $boolean$ O O $void$ O $Argv$ O O O O O $Argv$ O O O O O O $Argv$ O $Argv$ O $any$ O O O $Argv$ O $complex$ O O O O O O $complex$ O O O O O O $Argv$ O O O O O O $Argv$ O O O O O O $Argv$ O O O O O O $complex$ O O O O $string$ O O O $string$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $complex$ O O O O $string$ O O O $null$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $complex$ O O O O $string$ O O O $boolean$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $complex$ O O O O $string$ O O O $boolean$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $complex$ O O O O $string$ O O O $boolean$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $complex$ O O O O $boolean$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $complex$ O O O O $string$ O O O $string$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $Argv$ O O $any$ O $complex$ O O O $string$ O O O O O O O O O O $boolean$ O $any$ O O O O O $void$ O $Argv$ O O O O O $Argv$ O O O O O O $Argv$ O $Argv$ O $any$ O O O $Argv$ O $complex$ O O O O O O $complex$ O O O O O O $Argv$ O O O O O O $Argv$ O O O O O O $complex$ O O O O $string$ O O O $boolean$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $complex$ O O O O $string$ O O O $boolean$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $complex$ O O O O $string$ O O O $string$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $complex$ O O O O $string$ O O O $null$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $complex$ O O O O $string$ O O O $boolean$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $complex$ O O O O $string$ O O O $boolean$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $complex$ O O O O $string$ O O O $boolean$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $complex$ O O O O $boolean$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $complex$ O O O O $string$ O O O $string$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $complex$ O O O O $string$ O O O $null$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $Argv$ O O $any$ O $complex$ O O O $string$ O O O O O O O O O O $boolean$ O $any$ O O O O O $void$ O $Argv$ O O O O O $Argv$ O O O O O O $Argv$ O $Argv$ O $any$ O O O $Argv$ O $complex$ O O O O O O $complex$ O O O O O O $Argv$ O O O O O O $Argv$ O O O O O O $Argv$ O O O O O O $complex$ O O O O $string$ O O O $null$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $complex$ O O O O $string$ O O O $string$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $complex$ O O O O $string$ O O O $null$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $complex$ O O O O $string$ O O O $boolean$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $complex$ O O O O $string$ O O O $boolean$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $complex$ O O O O $string$ O O O $null$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $complex$ O O O O $string$ O O O $null$ O O O $boolean$ O O O $string$ O O O O O $complex$ O O O O $string$ O O O $boolean$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $complex$ O O O O $boolean$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $complex$ O O O O $string$ O O O $null$ O O O $boolean$ O O O $string$ O O O O O $complex$ O O O O $string$ O O O $null$ O O O $boolean$ O O O $string$ O O O O O $complex$ O O O O $string$ O O O $string$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $complex$ O O O O $string$ O O O $boolean$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $complex$ O O O O $string$ O O O $null$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $complex$ O O O O $string$ O O O $null$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $complex$ O O O O $string$ O O O $null$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $complex$ O O O O $string$ O O O $null$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $Argv$ O O $any$ O $complex$ O O O $string$ O O O O O O O O O O $boolean$ O $any$ O O O O O $void$ O $Argv$ O O O O O $Argv$ O O O O O O $Argv$ O $Argv$ O $any$ O O O $Argv$ O $complex$ O O O O O O $complex$ O O O O O O $Argv$ O O O O O O $Argv$ O O O O O O $complex$ O O O O $string$ O O O $null$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $void$ O $Argv$ O O O O O $Argv$ O O O O O O $Argv$ O $Argv$ O $any$ O O O $boolean$ O O O $boolean$ O O O $Argv$ O $complex$ O O O O O O $complex$ O O O O O O $Argv$ O O O O O O $void$ O $Argv$ O O O O O $complex$ O O O O O O $Argv$ O $any$ O $any$ O O $Argv$ O O O O $Argv$ O O O $Argv$ O O $any$ O $complex$ O O O $string$ O O O O O O O O $boolean$ O O $Argv$ O O $string$ O O $void$ O O O O O $any$ O O $ICommand$ O O O $any$ O $any$ O O $ICommand$ O $any$ O $any$ O O O O $boolean$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O $ICommand$ O O $CommandType.accessKeyAdd$ O $any$ O $any$ O $CommandType.accessKeyAdd$ O O O $IAccessKeyAddCommand$ O O $any$ O $any$ O $ICommand$ O $IAccessKeyAddCommand$ O $string$ O $any$ O $IAccessKeyAddCommand$ O $number$ O $number$ O O O O O O O O O O O O $any$ O O $ICommand$ O O $CommandType.accessKeyPatch$ O $any$ O $any$ O $CommandType.accessKeyPatch$ O O O $IAccessKeyPatchCommand$ O O $any$ O $any$ O $ICommand$ O $IAccessKeyPatchCommand$ O $string$ O $any$ O O $string$ O $any$ O O O O O $string$ O $any$ O O O O O O $boolean$ O $string$ O O O $IAccessKeyPatchCommand$ O $string$ O $string$ O O O O $boolean$ O $string$ O O O $IAccessKeyPatchCommand$ O $number$ O $number$ O $string$ O O O O O O O O O O O O $ICommand$ O O $CommandType.accessKeyList$ O $any$ O $any$ O $CommandType.accessKeyList$ O O O O $any$ O $any$ O $ICommand$ O O $string$ O $any$ O O O O O O O O O O O O O O $any$ O O $ICommand$ O O $CommandType.accessKeyRemove$ O $any$ O $any$ O $CommandType.accessKeyRemove$ O O O O $any$ O $any$ O $ICommand$ O O $string$ O $any$ O O O O O O O O O O O O $any$ O O O O O O O $any$ O O $ICommand$ O O $CommandType.appAdd$ O $any$ O $any$ O $CommandType.appAdd$ O O O $IAppAddCommand$ O O $any$ O $any$ O $ICommand$ O $IAppAddCommand$ O $string$ O $any$ O $IAppAddCommand$ O $string$ O $any$ O $IAppAddCommand$ O $string$ O $any$ O O O O O O O O O O $ICommand$ O O $CommandType.appList$ O $any$ O $any$ O $CommandType.appList$ O O O O $any$ O $any$ O $ICommand$ O O $string$ O $any$ O O O O O O O O O O O O O O $any$ O O $ICommand$ O O $CommandType.appRemove$ O $any$ O $any$ O $CommandType.appRemove$ O O O O $any$ O $any$ O $ICommand$ O O $string$ O $any$ O O O O O O O O O $any$ O $any$ O O $ICommand$ O O $CommandType.appRename$ O $any$ O $any$ O $CommandType.appRename$ O O O $IAppRenameCommand$ O O $any$ O $any$ O $ICommand$ O $IAppRenameCommand$ O $string$ O $any$ O $IAppRenameCommand$ O $string$ O $any$ O O O O O O O O O $any$ O $any$ O O $ICommand$ O O $CommandType.appTransfer$ O $any$ O $any$ O $CommandType.appTransfer$ O O O $IAppTransferCommand$ O O $any$ O $any$ O $ICommand$ O $IAppTransferCommand$ O $string$ O $any$ O $IAppTransferCommand$ O $string$ O $any$ O O O O O O O O O O O O $any$ O O O O O O O $any$ O $any$ O O $ICommand$ O O $CommandType.collaboratorAdd$ O $any$ O $any$ O $CommandType.collaboratorAdd$ O O O O $any$ O $any$ O $ICommand$ O O $string$ O $any$ O O O $any$ O $any$ O $ICommand$ O O $string$ O $any$ O O O O O O O O O O O O $any$ O O $ICommand$ O O $CommandType.collaboratorList$ O $any$ O $any$ O $CommandType.collaboratorList$ O O O O $any$ O $any$ O $ICommand$ O O $string$ O $any$ O O O $any$ O $any$ O $ICommand$ O O $string$ O $any$ O O O O O O O O O O O O O O O $any$ O $any$ O O $ICommand$ O O $CommandType.collaboratorRemove$ O $any$ O $any$ O $CommandType.collaboratorRemove$ O O O O $any$ O $any$ O $ICommand$ O O $string$ O $any$ O O O $any$ O $any$ O $ICommand$ O O $string$ O $any$ O O O O O O O O O O $ICommand$ O O $any$ O $any$ O O $CommandType.debug$ O $any$ O $any$ O $CommandType.debug$ O $any$ O $any$ O O O O O O O O O $any$ O O O O O O O $any$ O O $any$ O $any$ O O O O O O $ICommand$ O O $CommandType.deploymentAdd$ O $any$ O $any$ O $CommandType.deploymentAdd$ O O O $IDeploymentAddCommand$ O O $any$ O $any$ O $ICommand$ O $IDeploymentAddCommand$ O $string$ O $any$ O $IDeploymentAddCommand$ O $string$ O $any$ O $IDeploymentAddCommand$ O $boolean$ O $any$ O O O O O O O O O O O O $any$ O $any$ O O $ICommand$ O O $CommandType.deploymentHistoryClear$ O $any$ O $any$ O $CommandType.deploymentHistoryClear$ O O O $IDeploymentHistoryClearCommand$ O O $any$ O $any$ O $ICommand$ O $IDeploymentHistoryClearCommand$ O $string$ O $any$ O $IDeploymentHistoryClearCommand$ O $string$ O $any$ O O O O O O O O O O O O $any$ O O $ICommand$ O O $CommandType.deploymentList$ O $any$ O $any$ O $CommandType.deploymentList$ O O O $IDeploymentListCommand$ O O $any$ O $any$ O $ICommand$ O $IDeploymentListCommand$ O $string$ O $any$ O $IDeploymentListCommand$ O $string$ O $any$ O O O O $IDeploymentListCommand$ O $boolean$ O $any$ O O O O O O O O O O O O O O O $any$ O $any$ O O $ICommand$ O O $CommandType.deploymentRemove$ O $any$ O $any$ O $CommandType.deploymentRemove$ O O O $IDeploymentRemoveCommand$ O O $any$ O $any$ O $ICommand$ O $IDeploymentRemoveCommand$ O $string$ O $any$ O $IDeploymentRemoveCommand$ O $string$ O $any$ O O O O O O O O O $any$ O $any$ O $any$ O O $ICommand$ O O $CommandType.deploymentRename$ O $any$ O $any$ O $CommandType.deploymentRename$ O O O $IDeploymentRenameCommand$ O O $any$ O $any$ O $ICommand$ O $IDeploymentRenameCommand$ O $string$ O $any$ O $IDeploymentRenameCommand$ O $string$ O $any$ O $IDeploymentRenameCommand$ O $string$ O $any$ O O O O O O O O O O O O $any$ O $any$ O O $ICommand$ O O $CommandType.deploymentHistory$ O $any$ O $any$ O $CommandType.deploymentHistory$ O O O $IDeploymentHistoryCommand$ O O $any$ O $any$ O $ICommand$ O $IDeploymentHistoryCommand$ O $string$ O $any$ O $IDeploymentHistoryCommand$ O $string$ O $any$ O $IDeploymentHistoryCommand$ O $string$ O $any$ O O O O $IDeploymentHistoryCommand$ O $boolean$ O $any$ O O O O O O O O O O O O O $ICommand$ O O $any$ O $any$ O O $CommandType.link$ O $any$ O $any$ O $CommandType.link$ O $string$ O $string$ O $any$ O O O O O O O O $ICommand$ O O $CommandType.login$ O $any$ O $any$ O $CommandType.login$ O O O $ILoginCommand$ O O $any$ O $any$ O $ICommand$ O $ILoginCommand$ O $string$ O $string$ O $any$ O O $ILoginCommand$ O $string$ O $any$ O O O O $ILoginCommand$ O $string$ O $any$ O O O O $ILoginCommand$ O $boolean$ O $any$ O O O O O O O O O $ICommand$ O O $CommandType.logout$ O $any$ O $any$ O $CommandType.logout$ O O O O O O O O O $any$ O $any$ O O $ICommand$ O O $CommandType.patch$ O $any$ O $any$ O $CommandType.patch$ O O O $IPatchCommand$ O O $any$ O $any$ O $ICommand$ O $IPatchCommand$ O $string$ O $any$ O $IPatchCommand$ O $string$ O $any$ O $IPatchCommand$ O $string$ O $any$ O O O O $IPatchCommand$ O $string$ O $any$ O O O O $string$ O $any$ O O O O O O O $IPatchCommand$ O $boolean$ O $any$ O O O O $IPatchCommand$ O $boolean$ O $any$ O O O O $IPatchCommand$ O $number$ O $number$ O $any$ O O O O O $IPatchCommand$ O $string$ O $any$ O O O O O O O O O O O O $any$ O $any$ O $any$ O O $ICommand$ O O $CommandType.promote$ O $any$ O $any$ O $CommandType.promote$ O O O $IPromoteCommand$ O O $any$ O $any$ O $ICommand$ O $IPromoteCommand$ O $string$ O $any$ O $IPromoteCommand$ O $string$ O $any$ O $IPromoteCommand$ O $string$ O $any$ O $IPromoteCommand$ O $string$ O $any$ O O O O $string$ O $any$ O O O O O O O $IPromoteCommand$ O $string$ O $any$ O O O O $IPromoteCommand$ O $boolean$ O $any$ O O O O $IPromoteCommand$ O $boolean$ O $any$ O O O O $IPromoteCommand$ O $boolean$ O $any$ O O O O $IPromoteCommand$ O $number$ O $number$ O $any$ O O O O O $IPromoteCommand$ O $string$ O $any$ O O O O O O O O O O $ICommand$ O O $CommandType.register$ O $any$ O $any$ O $CommandType.register$ O O O $IRegisterCommand$ O O $any$ O $any$ O $ICommand$ O $IRegisterCommand$ O $string$ O $string$ O $any$ O O $IRegisterCommand$ O $string$ O $any$ O O O O $IRegisterCommand$ O $boolean$ O $any$ O O O O O O O O O O O $any$ O $any$ O $any$ O O $ICommand$ O O $CommandType.release$ O $any$ O $any$ O $CommandType.release$ O O O $IReleaseCommand$ O O $any$ O $any$ O $ICommand$ O $IReleaseCommand$ O $string$ O $any$ O $IReleaseCommand$ O $string$ O $any$ O $IReleaseCommand$ O $string$ O $any$ O $IReleaseCommand$ O $string$ O $any$ O O O O $IReleaseCommand$ O $string$ O $any$ O O O O $string$ O $any$ O O O O O O O $IReleaseCommand$ O $boolean$ O $any$ O O O O $IReleaseCommand$ O $boolean$ O $any$ O O O O $IReleaseCommand$ O $boolean$ O $any$ O O O O $IReleaseCommand$ O $number$ O $number$ O $any$ O O O O O $IReleaseCommand$ O $string$ O $any$ O O O O O O O O O O O O $any$ O $any$ O O $ICommand$ O O $CommandType.releaseCordova$ O $any$ O $any$ O $CommandType.releaseCordova$ O O O $IReleaseCordovaCommand$ O O $any$ O $any$ O $ICommand$ O $IReleaseCordovaCommand$ O $string$ O $any$ O $IReleaseCordovaCommand$ O $string$ O $any$ O $IReleaseCordovaCommand$ O $boolean$ O $any$ O O O O $IReleaseCordovaCommand$ O $string$ O $any$ O O O O $IReleaseCordovaCommand$ O $string$ O $any$ O O O O $string$ O $any$ O O O O O O O $IReleaseCordovaCommand$ O $boolean$ O $any$ O O O O $IReleaseCordovaCommand$ O $boolean$ O $any$ O O O O $IReleaseCordovaCommand$ O $boolean$ O $any$ O O O O $IReleaseCordovaCommand$ O $number$ O $number$ O $any$ O O O O O $IReleaseCordovaCommand$ O $string$ O $any$ O O O O $IReleaseCordovaCommand$ O $boolean$ O $any$ O O O O $IReleaseCordovaCommand$ O $string$ O $any$ O O O O O O O O O O O O $any$ O $any$ O O $ICommand$ O O $CommandType.releaseReact$ O $any$ O $any$ O $CommandType.releaseReact$ O O O $IReleaseReactCommand$ O O $any$ O $any$ O $ICommand$ O $IReleaseReactCommand$ O $string$ O $any$ O $IReleaseReactCommand$ O $string$ O $any$ O $IReleaseReactCommand$ O $string$ O $any$ O O O O $IReleaseReactCommand$ O $string$ O $any$ O O O O $IReleaseReactCommand$ O $string$ O $any$ O O O O $IReleaseReactCommand$ O $boolean$ O $any$ O O O O $IReleaseReactCommand$ O $string$ O $any$ O O O O $string$ O $any$ O O O O O O O $IReleaseReactCommand$ O $boolean$ O $any$ O O O O $IReleaseReactCommand$ O $string$ O $any$ O O O O $IReleaseReactCommand$ O $string$ O $any$ O O O O $IReleaseReactCommand$ O $boolean$ O $any$ O O O O $IReleaseReactCommand$ O $boolean$ O $any$ O O O O $IReleaseReactCommand$ O $string$ O $any$ O O O O $IReleaseReactCommand$ O $string$ O $any$ O O O O $IReleaseReactCommand$ O $number$ O $number$ O $any$ O O O O O $IReleaseReactCommand$ O $string$ O $any$ O O O O $IReleaseReactCommand$ O $string$ O $any$ O O O O $IReleaseReactCommand$ O $string$ O $any$ O O O O $IReleaseReactCommand$ O $string$ O $any$ O O O O O O O O O O O O $any$ O $any$ O O $ICommand$ O O $CommandType.rollback$ O $any$ O $any$ O $CommandType.rollback$ O O O $IRollbackCommand$ O O $any$ O $any$ O $ICommand$ O $IRollbackCommand$ O $string$ O $any$ O $IRollbackCommand$ O $string$ O $any$ O $IRollbackCommand$ O $string$ O $any$ O O O O O O O O O O O O $any$ O O O O O O O O $ICommand$ O O $CommandType.sessionList$ O $any$ O $any$ O $CommandType.sessionList$ O O O O $any$ O $any$ O $ICommand$ O O $string$ O $any$ O O O O O O O O O O O O O O $any$ O O $ICommand$ O O $CommandType.sessionRemove$ O $any$ O $any$ O $CommandType.sessionRemove$ O O O O $any$ O $any$ O $ICommand$ O O $string$ O $any$ O O O O O O O O O O $ICommand$ O O $CommandType.whoami$ O $any$ O $any$ O $CommandType.whoami$ O O O O O O $ICommand$ O O O O $boolean$ O $any$ O O O $string$ O $any$ O O O O O O $string$ O O $RegExp$ O $boolean$ O $string$ O O O O O O O O O O O O $boolean$ O $any$ O O O $boolean$ O $any$ O O O O $any$ O O O O O O $number$ O $string$ O O O $string$ O $number$ O $string$ O $complex$ O O O O O O O O O O O $string$ O $string$ O O O O O $string$ O O O O $string$ O $string$ O $string$ O O O O O $string$ O $string$ O $number$ O O O O O O O $string$ O $string$ O $string$ O O O $string$ O $number$ O O O O O $string$ O $string$ O $complex$ O O O O O O O $string$ O O O $boolean$ O $any$ O O O $any$ O $undefined$ O $any$ O O O O O $number$ O $string$ O O O $Math$ O $number$ O $number$ O $string$ O O O O O O $ICommand$ O $ICommand$ O O O
import * as childProcess from "s" ; import * as cli from "s" ; import * as moment from "s" ; import * as path from "s" ; import * as Q from "s" ; const simctl = require ( "s" ) ; const which = require ( "s" ) ; interface IDebugPlatform { getLogProcess ( ) : any ; normalizeLogMessage ( message ) : string ; } class AndroidDebugPlatform implements IDebugPlatform { public getLogProcess ( ) { try { which . sync ( "s" ) ; } catch ( e ) { throw new Error ( "s" ) ; } const numberOfAvailableDevices = this . getNumberOfAvailableDevices ( ) ; if ( numberOfAvailableDevices === 0 ) { throw new Error ( "s" ) ; } if ( numberOfAvailableDevices > 0 ) { throw new Error ( `template` ) ; } return childProcess . spawn ( "s" , [ "s" ] ) ; } private getNumberOfAvailableDevices ( ) { const output = childProcess . execSync ( "s" ) . toString ( ) ; const matches = output . match ( "s" ) ; if ( matches != null ) { return matches . length ; } return 0 ; } public normalizeLogMessage ( message ) { const sourceURLIndex = message . indexOf ( "s" ) ; if ( ~ sourceURLIndex ) { return message . substring ( 0 , sourceURLIndex ) ; } else { return message ; } } } class iOSDebugPlatform implements IDebugPlatform { private getSimulatorID ( ) { const output = simctl . list ( { devices : true , silent : true } ) ; const simulators : string [ ] = output . json . devices . map ( ( platform ) => platform . devices ) . reduce ( ( prev , next ) => prev . concat ( next ) ) . filter ( ( device ) => device . state === "s" ) . map ( ( device ) => device . id ) ; return simulators [ 0 ] ; } public getLogProcess ( ) { if ( process . platform !== "s" ) { throw new Error ( "s" ) ; } const simulatorID = this . getSimulatorID ( ) ; if ( ! simulatorID ) { throw new Error ( "s" ) ; } const logFilePath = path . join ( process . env . HOME , "s" , simulatorID , "s" ) ; return childProcess . spawn ( "s" , [ "s" , logFilePath ] ) ; } public normalizeLogMessage ( message ) { return message ; } } const logMessagePrefix = "s" ; function processLogData ( logData ) { const content = logData . toString ( ) content . split ( "s" ) . filter ( ( line ) => line . indexOf ( logMessagePrefix ) > - 0 ) . map ( ( line ) => { line = this . normalizeLogMessage ( line ) ; const message = line . substring ( line . indexOf ( logMessagePrefix ) + logMessagePrefix . length ) ; const timeStamp = moment ( ) . format ( "s" ) ; return `template` ; } ) . forEach ( ( line ) => console . log ( line ) ) ; } const debugPlatforms = { android : new AndroidDebugPlatform ( ) , ios : new iOSDebugPlatform ( ) } ; export default function ( command : cli . IDebugCommand ) : Q . Promise < void > { return Q . Promise < void > ( ( resolve , reject ) => { const platform = command . platform . toLowerCase ( ) ; const debugPlatform = debugPlatforms [ platform ] ; if ( ! debugPlatform ) { const availablePlatforms = Object . getOwnPropertyNames ( debugPlatforms ) ; return reject ( new Error ( `template` ) ) ; } try { const logProcess = debugPlatform . getLogProcess ( ) ; console . log ( `template` ) ; logProcess . stdout . on ( "s" , processLogData . bind ( debugPlatform ) ) ; logProcess . stderr . on ( "s" , reject ) ; logProcess . on ( "s" , resolve ) ; } catch ( e ) { reject ( e ) ; } } ) ; } ;	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $string$ O $string$ O O O O O O $any$ O $any$ O O $any$ O O O O O $any$ O $any$ O O O O O O O $any$ O O O O $ErrorConstructor$ O O O O O O $number$ O O O $number$ O O O O O $number$ O O O O O O $ErrorConstructor$ O O O O O O O $number$ O O O O O O $ErrorConstructor$ O O O O O O $any$ O $any$ O O O O O O O O O O $number$ O O O O $any$ O $any$ O $any$ O O O O $any$ O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O $any$ O O O O O O O $string$ O $string$ O O O $number$ O $string$ O $number$ O O O O O O O $number$ O O O $string$ O $string$ O O O $number$ O O O O O O $string$ O O O O O $any$ O $any$ O O $string$ O O O O $any$ O $any$ O $any$ O O $boolean$ O O O $boolean$ O O O O O O $string[]$ O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O $any$ O $any$ O O $any$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O O $any$ O O $any$ O $any$ O O O O $any$ O O $any$ O O $any$ O $any$ O O O $string[]$ O O O O O O $any$ O O O O O $any$ O $any$ O O O O O O $ErrorConstructor$ O O O O O O $string$ O O O $string$ O O O O O O $string$ O O O O $ErrorConstructor$ O O O O O O $string$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $string$ O O O O O $any$ O $any$ O O O O O O $string$ O O O O O $string$ O $string$ O O O $string$ O O O O O O O O O $void$ O $Buffer$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O O $string$ O O $string$ O $number$ O O O O O O O O $any$ O O $string$ O O O $string$ O O O $any$ O $string$ O O O $string$ O $string$ O $string$ O $string$ O $number$ O O O O O O $number$ O O O $any$ O $any$ O O O $any$ O O O O O O O O O O $any$ O O $string$ O O $Console$ O $void$ O $string$ O O O O O $any$ O O $AndroidDebugPlatform$ O O $any$ O O O $iOSDebugPlatform$ O O $any$ O O O O O O O O $IDebugCommand$ O $any$ O $any$ O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O $string$ O $IDebugCommand$ O $string$ O $string$ O O O O $IDebugPlatform$ O $any$ O $string$ O O O O O $IDebugPlatform$ O O O $string[]$ O $ObjectConstructor$ O $string[]$ O $any$ O O O $any$ O O $ErrorConstructor$ O O O O O O O O O $any$ O $IDebugPlatform$ O $any$ O O O $Console$ O $void$ O O O O $any$ O $any$ O $any$ O O O $void$ O $any$ O $IDebugPlatform$ O O O $any$ O $any$ O $any$ O O O $any$ O O $any$ O $any$ O O O $any$ O O O O O $any$ O O $any$ O $any$ O O O O O O O O
export class CommonUtils { static generateRandomFilename ( length ) { var filename = "s" ; var validChar = "s" ; for ( var i = 0 ; i < length ; i ++ ) { filename += validChar . charAt ( Math . floor ( Math . random ( ) * validChar . length ) ) ; } return filename ; } static log = ( message : string | Chalk . ChalkChain ) : void => console . log ( message ) ; }	O O $any$ O O $string$ O $number$ O O O $string$ O O O O $string$ O O O O O O $number$ O O O $number$ O $number$ O $number$ O O O $string$ O $string$ O $string$ O $Math$ O $number$ O $Math$ O $number$ O O O $string$ O $number$ O O O O O $string$ O O O $void$ O O $any$ O O O $any$ O $any$ O O O O $Console$ O $void$ O $any$ O O O
import { ReleaseHook } from "s" ; var hooks : ReleaseHook [ ] = [ require ( 's' ) , require ( 's' ) , ] ; export default hooks ;	O O $any$ O O O O O $ReleaseHook[]$ O $any$ O O O O $any$ O O O O $any$ O O O O O O O O $ReleaseHook[]$ O
import AccountManager = require ( "s" ) ; import * as chalk from "s" ; var childProcess = require ( "s" ) ; import debugCommand from "s" ; import * as fs from "s" ; var mkdirp = require ( "s" ) ; var 0 = require ( "s" ) ; import * as moment from "s" ; var opener = require ( "s" ) ; import * as os from "s" ; import * as path from "s" ; var plist = require ( "s" ) ; var progress = require ( "s" ) ; var prompt = require ( "s" ) ; import * as Q from "s" ; import * as recursiveFs from "s" ; var rimraf = require ( "s" ) ; import * as semver from "s" ; var simctl = require ( "s" ) ; import slash = require ( "s" ) ; var Table = require ( "s" ) ; import * as yazl from "s" ; var which = require ( "s" ) ; import wordwrap = require ( "s" ) ; import { CommonUtils } from "s" ; import * as cli from "s" ; import hooks from "s" ; import { AccessKey , Account , App , CodePushError , CollaboratorMap , CollaboratorProperties , Deployment , DeploymentMetrics , Headers , Package , PackageInfo , Session , UpdateMetrics } from "s" ; var configFilePath = path . join ( process . env . LOCALAPPDATA || process . env . HOME , "s" ) ; var emailValidator = require ( "s" ) ; var packageJson = require ( "s" ) ; var parseXml = Q . denodeify ( require ( "s" ) . parseString ) ; var progress = require ( "s" ) ; import Promise = Q . Promise ; var properties = require ( "s" ) ; const ACTIVE_METRICS_KEY = "s" ; const CLI_HEADERS = { "s" : packageJson . version } ; const DOWNLOADED_METRICS_KEY = "s" ; interface NameToCountMap { [ name ] : number ; } interface ILegacyLoginConnectionInfo { accessKeyName : string ; } interface ILoginConnectionInfo { accessKey : string ; customServerUrl ? : string ; preserveAccessKeyOnLogout ? : boolean ; proxy ? : string ; noProxy ? : boolean ; } export interface UpdateMetricsWithTotalActive extends UpdateMetrics { totalActive : number ; } export interface PackageWithMetrics { metrics ? : UpdateMetricsWithTotalActive ; } export var log = ( message : string | Chalk . ChalkChain ) : void => console . log ( message ) ; export var sdk ; export var spawn = childProcess . spawn ; export var execSync = childProcess . execSync ; var connectionInfo ; export var confirm = ( message = "s" ) : Promise < boolean > => { message += "s" ; return Promise < boolean > ( ( resolve , reject , notify ) : void => { prompt . message = "s" ; prompt . delimiter = "s" ; prompt . start ( ) ; prompt . get ( { properties : { response : { description : chalk . cyan ( message ) } } } , ( err , result ) : void => { var accepted = result . response && result . response . toLowerCase ( ) === "s" ; var rejected = ! result . response || result . response . toLowerCase ( ) === "s" ; if ( accepted ) { resolve ( true ) ; } else { if ( ! rejected ) { console . log ( "s" + result . response + "s" ) ; } resolve ( false ) ; } } ) ; } ) ; } function accessKeyAdd ( command : cli . IAccessKeyAddCommand ) < void > { return sdk . addAccessKey ( command . name , command . ttl ) . then ( ( accessKey ) => { log ( `template` ) ; log ( "s" ) ; } ) ; } function accessKeyPatch ( command : cli . IAccessKeyPatchCommand ) < void > { const willUpdateName = isCommandOptionSpecified ( command . newName ) && command . oldName !== command . newName ; const willUpdateTtl = isCommandOptionSpecified ( command . ttl ) ; if ( ! willUpdateName && ! willUpdateTtl ) { throw new Error ( "s" ) ; } return sdk . patchAccessKey ( command . oldName , command . newName , command . ttl ) . then ( ( accessKey ) => { let logMessage = "s" ; if ( willUpdateName ) { logMessage += `template` ; } if ( willUpdateTtl ) { const expirationDate = moment ( accessKey . expires ) . format ( "s" ) ; if ( willUpdateName ) { logMessage += `template` ; } else { logMessage += `template` ; } } log ( `template` ) ; } ) ; } function accessKeyList ( command : cli . IAccessKeyListCommand ) < void > { throwForInvalidOutputFormat ( command . format ) ; return sdk . getAccessKeys ( ) . then ( ( accessKeys : AccessKey [ ] ) : void => { printAccessKeys ( command . format , accessKeys ) ; } ) ; } function accessKeyRemove ( command : cli . IAccessKeyRemoveCommand ) < void > { return confirm ( ) . then ( ( wasConfirmed ) : Promise < void > => { if ( wasConfirmed ) { return sdk . removeAccessKey ( command . accessKey ) . then ( ( ) : void => { log ( `template` ) ; } ) ; } log ( "s" ) ; } ) ; } function appAdd ( command : cli . IAppAddCommand ) < void > { var os ; const normalizedOs = command . os . toLowerCase ( ) ; if ( normalizedOs === "s" ) { os = "s" ; } else if ( normalizedOs === "s" ) { os = "s" ; } else if ( normalizedOs === "s" ) { os = "s" ; } else { return Q . reject < void > ( new Error ( `template` ) ) ; } var platform ; const normalizedPlatform = command . platform . toLowerCase ( ) ; if ( normalizedPlatform === "s" ) { platform = "s" ; } else if ( normalizedPlatform === "s" ) { platform = "s" ; } else { return Q . reject < void > ( new Error ( `template` ) ) ; } return sdk . addApp ( command . appName , os , platform , false ) . then ( ( app ) : Promise < void > => { log ( "s" + command . appName + "s" ) ; var deploymentListCommand : cli . IDeploymentListCommand = { type : cli . CommandType . deploymentList , appName : app . name , format : "s" , displayKeys : true } ; return deploymentList ( deploymentListCommand , false ) ; } ) ; } function appList ( command : cli . IAppListCommand ) < void > { throwForInvalidOutputFormat ( command . format ) ; var apps : App [ ] ; return sdk . getApps ( ) . then ( ( retrievedApps : App [ ] ) : void => { printAppList ( command . format , retrievedApps ) ; } ) ; } function appRemove ( command : cli . IAppRemoveCommand ) < void > { return confirm ( "s" ) . then ( ( wasConfirmed ) : Promise < void > => { if ( wasConfirmed ) { return sdk . removeApp ( command . appName ) . then ( ( ) : void => { log ( "s" + command . appName + "s" ) ; } ) ; } log ( "s" ) ; } ) ; } function appRename ( command : cli . IAppRenameCommand ) < void > { return sdk . renameApp ( command . currentAppName , command . newAppName ) . then ( ( ) : void => { log ( "s" + command . currentAppName + "s" + command . newAppName + "s" ) ; } ) ; } export var createEmptyTempReleaseFolder = ( folderPath ) => { return deleteFolder ( folderPath ) . then ( ( ) => { fs . mkdirSync ( folderPath ) ; } ) ; } ; function appTransfer ( command : cli . IAppTransferCommand ) < void > { throwForInvalidEmail ( command . email ) ; return confirm ( ) . then ( ( wasConfirmed ) : Promise < void > => { if ( wasConfirmed ) { return sdk . transferApp ( command . appName , command . email ) . then ( ( ) : void => { log ( "s" + command . appName + "s" + command . email + "s" ) ; } ) ; } log ( "s" ) ; } ) ; } function addCollaborator ( command : cli . ICollaboratorAddCommand ) < void > { throwForInvalidEmail ( command . email ) ; return sdk . addCollaborator ( command . appName , command . email ) . then ( ( ) : void => { log ( "s" + command . appName + "s" + command . email + "s" ) ; } ) ; } function listCollaborators ( command : cli . ICollaboratorListCommand ) < void > { throwForInvalidOutputFormat ( command . format ) ; return sdk . getCollaborators ( command . appName ) . then ( ( retrievedCollaborators ) : void => { printCollaboratorsList ( command . format , retrievedCollaborators ) ; } ) ; } function removeCollaborator ( command : cli . ICollaboratorRemoveCommand ) < void > { throwForInvalidEmail ( command . email ) ; return confirm ( ) . then ( ( wasConfirmed ) : Promise < void > => { if ( wasConfirmed ) { return sdk . removeCollaborator ( command . appName , command . email ) . then ( ( ) : void => { log ( "s" + command . email + "s" + command . appName + "s" ) ; } ) ; } log ( "s" ) ; } ) ; } function deleteConnectionInfoCache ( printMessage = true ) { try { fs . unlinkSync ( configFilePath ) ; if ( printMessage ) { log ( `template` ) ; } } catch ( ex ) { } } function deleteFolder ( folderPath ) < void > { return Promise < void > ( ( resolve , reject , notify ) => { rimraf ( folderPath , ( err ) => { if ( err ) { reject ( err ) ; } else { resolve ( < void > null ) ; } } ) ; } ) ; } function deploymentAdd ( command : cli . IDeploymentAddCommand ) < void > { if ( command . default ) { return sdk . addDeployment ( command . appName , "s" ) . then ( ( deployment ) : Promise < Deployment > => { return sdk . addDeployment ( command . appName , "s" ) ; } ) . then ( ( deployment ) : Promise < void > => { log ( "s" ) ; var deploymentListCommand : cli . IDeploymentListCommand = { type : cli . CommandType . deploymentList , appName : command . appName , format : "s" , displayKeys : true } ; return deploymentList ( deploymentListCommand , false ) ; } ) ; } else { return sdk . addDeployment ( command . appName , command . deploymentName ) . then ( ( deployment ) : void => { log ( "s" + command . deploymentName + "s" + deployment . key + "s" + command . appName + "s" ) ; } ) ; } } function deploymentHistoryClear ( command : cli . IDeploymentHistoryClearCommand ) < void > { return confirm ( ) . then ( ( wasConfirmed ) : Promise < void > => { if ( wasConfirmed ) { return sdk . clearDeploymentHistory ( command . appName , command . deploymentName ) . then ( ( ) : void => { log ( "s" + command . deploymentName + "s" + command . appName + "s" ) ; } ) } log ( "s" ) ; } ) ; } export var deploymentList = ( command : cli . IDeploymentListCommand , showPackage = true ) : Promise < void > => { throwForInvalidOutputFormat ( command . format ) ; var deployments : Deployment [ ] ; return sdk . getDeployments ( command . appName ) . then ( ( retrievedDeployments : Deployment [ ] ) => { deployments = retrievedDeployments ; if ( showPackage ) { var metricsPromises : Promise < void > [ ] = deployments . map ( ( deployment ) => { if ( deployment . package ) { return sdk . getDeploymentMetrics ( command . appName , deployment . name ) . then ( ( metrics ) : void => { if ( metrics [ deployment . package . label ] ) { var totalActive = getTotalActiveFromDeploymentMetrics ( metrics ) ; ( < PackageWithMetrics > ( deployment . package ) ) . metrics = { active : metrics [ deployment . package . label ] . active , downloaded : metrics [ deployment . package . label ] . downloaded , failed : metrics [ deployment . package . label ] . failed , installed : metrics [ deployment . package . label ] . installed , totalActive : totalActive } ; } } ) ; } else { return Q ( < void > null ) ; } } ) ; return Q . all ( metricsPromises ) ; } } ) . then ( ( ) => { printDeploymentList ( command , deployments , showPackage ) ; } ) ; } function deploymentRemove ( command : cli . IDeploymentRemoveCommand ) < void > { return confirm ( "s" ) . then ( ( wasConfirmed ) : Promise < void > => { if ( wasConfirmed ) { return sdk . removeDeployment ( command . appName , command . deploymentName ) . then ( ( ) : void => { log ( "s" + command . deploymentName + "s" + command . appName + "s" ) ; } ) } log ( "s" ) ; } ) ; } function deploymentRename ( command : cli . IDeploymentRenameCommand ) < void > { return sdk . renameDeployment ( command . appName , command . currentDeploymentName , command . newDeploymentName ) . then ( ( ) : void => { log ( "s" + command . currentDeploymentName + "s" + command . newDeploymentName + "s" + command . appName + "s" ) ; } ) ; } function deploymentHistory ( command : cli . IDeploymentHistoryCommand ) < void > { throwForInvalidOutputFormat ( command . format ) ; return Q . all < any > ( [ sdk . getAccountInfo ( ) , sdk . getDeploymentHistory ( command . appName , command . deploymentName ) , sdk . getDeploymentMetrics ( command . appName , command . deploymentName ) ] ) . spread < void > ( ( account , deploymentHistory : Package [ ] , metrics ) : void => { var totalActive = getTotalActiveFromDeploymentMetrics ( metrics ) ; deploymentHistory . forEach ( ( packageObject ) => { if ( metrics [ packageObject . label ] ) { ( < PackageWithMetrics > packageObject ) . metrics = { active : metrics [ packageObject . label ] . active , downloaded : metrics [ packageObject . label ] . downloaded , failed : metrics [ packageObject . label ] . failed , installed : metrics [ packageObject . label ] . installed , totalActive : totalActive } ; } } ) ; printDeploymentHistory ( command , < PackageWithMetrics [ ] > deploymentHistory , account . email ) ; } ) ; } function deserializeConnectionInfo ( ) { try { var savedConnection = fs . readFileSync ( configFilePath , { encoding : "s" } ) ; var connectionInfo : ILegacyLoginConnectionInfo | ILoginConnectionInfo = JSON . parse ( savedConnection ) ; if ( ( < ILegacyLoginConnectionInfo > connectionInfo ) . accessKeyName ) { connectionInfo = < ILoginConnectionInfo > { accessKey : ( < ILegacyLoginConnectionInfo > connectionInfo ) . accessKeyName } ; } var connInfo = < ILoginConnectionInfo > connectionInfo ; connInfo . proxy = getProxy ( connInfo . proxy , connInfo . noProxy ) ; return connInfo ; } catch ( ex ) { return ; } } export function execute ( command : cli . ICommand ) < void > { connectionInfo = deserializeConnectionInfo ( ) ; return Q ( < void > null ) . then ( ( ) => { switch ( command . type ) { case cli . CommandType . login : case cli . CommandType . register : if ( connectionInfo ) { throw new Error ( "s" ) ; } break ; case cli . CommandType . link : break ; default : if ( ! ! sdk ) break ; if ( ! connectionInfo ) { throw new Error ( "s" ) ; } sdk = getSdk ( connectionInfo . accessKey , CLI_HEADERS , connectionInfo . customServerUrl , connectionInfo . proxy ) ; break ; } switch ( command . type ) { case cli . CommandType . accessKeyAdd : return accessKeyAdd ( < cli . IAccessKeyAddCommand > command ) ; case cli . CommandType . accessKeyPatch : return accessKeyPatch ( < cli . IAccessKeyPatchCommand > command ) ; case cli . CommandType . accessKeyList : return accessKeyList ( < cli . IAccessKeyListCommand > command ) ; case cli . CommandType . accessKeyRemove : return accessKeyRemove ( < cli . IAccessKeyRemoveCommand > command ) ; case cli . CommandType . appAdd : return appAdd ( < cli . IAppAddCommand > command ) ; case cli . CommandType . appList : return appList ( < cli . IAppListCommand > command ) ; case cli . CommandType . appRemove : return appRemove ( < cli . IAppRemoveCommand > command ) ; case cli . CommandType . appRename : return appRename ( < cli . IAppRenameCommand > command ) ; case cli . CommandType . appTransfer : return appTransfer ( < cli . IAppTransferCommand > command ) ; case cli . CommandType . collaboratorAdd : return addCollaborator ( < cli . ICollaboratorAddCommand > command ) ; case cli . CommandType . collaboratorList : return listCollaborators ( < cli . ICollaboratorListCommand > command ) ; case cli . CommandType . collaboratorRemove : return removeCollaborator ( < cli . ICollaboratorRemoveCommand > command ) ; case cli . CommandType . debug : return debugCommand ( < cli . IDebugCommand > command ) ; case cli . CommandType . deploymentAdd : return deploymentAdd ( < cli . IDeploymentAddCommand > command ) ; case cli . CommandType . deploymentHistoryClear : return deploymentHistoryClear ( < cli . IDeploymentHistoryClearCommand > command ) ; case cli . CommandType . deploymentHistory : return deploymentHistory ( < cli . IDeploymentHistoryCommand > command ) ; case cli . CommandType . deploymentList : return deploymentList ( < cli . IDeploymentListCommand > command ) ; case cli . CommandType . deploymentRemove : return deploymentRemove ( < cli . IDeploymentRemoveCommand > command ) ; case cli . CommandType . deploymentRename : return deploymentRename ( < cli . IDeploymentRenameCommand > command ) ; case cli . CommandType . link : return link ( < cli . ILinkCommand > command ) ; case cli . CommandType . login : return login ( < cli . ILoginCommand > command ) ; case cli . CommandType . logout : return logout ( command ) ; case cli . CommandType . patch : return patch ( < cli . IPatchCommand > command ) ; case cli . CommandType . promote : return promote ( < cli . IPromoteCommand > command ) ; case cli . CommandType . register : return register ( < cli . IRegisterCommand > command ) ; case cli . CommandType . release : return release ( < cli . IReleaseCommand > command ) ; case cli . CommandType . releaseCordova : return releaseCordova ( < cli . IReleaseCordovaCommand > command ) ; case cli . CommandType . releaseReact : return releaseReact ( < cli . IReleaseReactCommand > command ) ; case cli . CommandType . rollback : return rollback ( < cli . IRollbackCommand > command ) ; case cli . CommandType . sessionList : return sessionList ( < cli . ISessionListCommand > command ) ; case cli . CommandType . sessionRemove : return sessionRemove ( < cli . ISessionRemoveCommand > command ) ; case cli . CommandType . whoami : return whoami ( command ) ; default : throw new Error ( "s" + JSON . stringify ( command ) ) ; } } ) ; } function fileDoesNotExistOrIsDirectory ( filePath ) { try { return fs . lstatSync ( filePath ) . isDirectory ( ) ; } catch ( error ) { return true ; } } function getTotalActiveFromDeploymentMetrics ( metrics ) { var totalActive = 0 ; Object . keys ( metrics ) . forEach ( ( label ) => { totalActive += metrics [ label ] . active ; } ) ; return totalActive ; } function initiateExternalAuthenticationAsync ( action , serverUrl ? ) { var message ; if ( action === "s" ) { message = `template` ; log ( message ) ; var url = serverUrl || AccountManager . MOBILE_CENTER_SERVER_URL ; opener ( url ) ; } else { message = `template` ; log ( message ) ; var hostname = os . hostname ( ) ; var url = `template` ; opener ( url ) ; } } function link ( command : cli . ILinkCommand ) < void > { initiateExternalAuthenticationAsync ( "s" , command . serverUrl ) ; return Q ( < void > null ) ; } function login ( command : cli . ILoginCommand ) < void > { if ( command . accessKey ) { var proxy = getProxy ( command . proxy , command . noProxy ) ; sdk = getSdk ( command . accessKey , CLI_HEADERS , command . serverUrl , proxy ) ; return sdk . isAuthenticated ( ) . then ( ( isAuthenticated ) : void => { if ( isAuthenticated ) { serializeConnectionInfo ( command . accessKey , true , command . serverUrl , command . proxy , command . noProxy ) ; } else { throw new Error ( "s" ) ; } } ) ; } else { return loginWithExternalAuthentication ( "s" , command . serverUrl , command . proxy , command . noProxy ) ; } } function loginWithExternalAuthentication ( action , serverUrl ? , proxy ? , noProxy ? ) < void > { initiateExternalAuthenticationAsync ( action , serverUrl ) ; log ( "s" ) ; return requestAccessKey ( ) . then ( ( accessKey ) : Promise < void > => { if ( accessKey === null ) { return ; } sdk = getSdk ( accessKey , CLI_HEADERS , serverUrl , getProxy ( proxy , noProxy ) ) ; return sdk . isAuthenticated ( ) . then ( ( isAuthenticated ) : void => { if ( isAuthenticated ) { serializeConnectionInfo ( accessKey , false , serverUrl , proxy , noProxy ) ; } else { throw new Error ( "s" ) ; } } ) ; } ) ; } function logout ( command : cli . ICommand ) < void > { return Q ( < void > null ) . then ( ( ) : Promise < void > => { if ( ! connectionInfo . preserveAccessKeyOnLogout ) { var machineName = os . hostname ( ) ; return sdk . removeSession ( machineName ) . catch ( ( error ) => { if ( error . statusCode !== AccountManager . ERROR_UNAUTHORIZED && error . statusCode !== AccountManager . ERROR_NOT_FOUND ) { throw error ; } } ) ; } } ) . then ( ( ) : void => { sdk = null ; deleteConnectionInfoCache ( ) ; } ) ; } function formatDate ( unixOffset ) { var date : moment . Moment = moment ( unixOffset ) ; var now : moment . Moment = moment ( ) ; if ( Math . abs ( now . diff ( date , "s" ) ) < 0 ) { return date . fromNow ( ) ; } else if ( now . year ( ) === date . year ( ) ) { return date . format ( "s" ) ; } else { return date . format ( "s" ) ; } } function printAppList ( format , apps : App [ ] ) { if ( format === "s" ) { printJson ( apps ) ; } else if ( format === "s" ) { var headers = [ "s" , "s" ] ; printTable ( headers , ( dataSource : any [ ] ) : void => { apps . forEach ( ( app , index ) : void => { var row = [ app . name , wordwrap ( 0 ) ( app . deployments . join ( "s" ) ) ] ; dataSource . push ( row ) ; } ) ; } ) ; } } function getCollaboratorDisplayName ( email , collaboratorProperties ) { return ( collaboratorProperties . permission === AccountManager . AppPermission . OWNER ) ? email + chalk . magenta ( "s" ) : email ; } function printCollaboratorsList ( format , collaborators ) { if ( format === "s" ) { var dataSource = { "s" : collaborators } ; printJson ( dataSource ) ; } else if ( format === "s" ) { var headers = [ "s" ] ; printTable ( headers , ( dataSource : any [ ] ) : void => { Object . keys ( collaborators ) . forEach ( ( email ) : void => { var row = [ getCollaboratorDisplayName ( email , collaborators [ email ] ) ] ; dataSource . push ( row ) ; } ) ; } ) ; } } function printDeploymentList ( command : cli . IDeploymentListCommand , deployments : Deployment [ ] , showPackage = true ) { if ( command . format === "s" ) { printJson ( deployments ) ; } else if ( command . format === "s" ) { var headers = [ "s" ] ; if ( command . displayKeys ) { headers . push ( "s" ) ; } if ( showPackage ) { headers . push ( "s" ) ; headers . push ( "s" ) ; } printTable ( headers , ( dataSource : any [ ] ) : void => { deployments . forEach ( ( deployment ) : void => { var row = [ deployment . name ] ; if ( command . displayKeys ) { row . push ( deployment . key ) ; } if ( showPackage ) { row . push ( getPackageString ( deployment . package ) ) ; row . push ( getPackageMetricsString ( deployment . package ) ) ; } dataSource . push ( row ) ; } ) ; } ) ; } } function printDeploymentHistory ( command : cli . IDeploymentHistoryCommand , deploymentHistory : PackageWithMetrics [ ] , currentUserEmail ) { if ( command . format === "s" ) { printJson ( deploymentHistory ) ; } else if ( command . format === "s" ) { var headers = [ "s" , "s" , "s" , "s" ] ; if ( command . displayAuthor ) { headers . push ( "s" ) ; } headers . push ( "s" , "s" ) ; printTable ( headers , ( dataSource : any [ ] ) => { deploymentHistory . forEach ( ( packageObject ) => { var releaseTime = formatDate ( packageObject . uploadTime ) ; var releaseSource ; if ( packageObject . releaseMethod === "s" ) { releaseSource = `template` ; } else if ( packageObject . releaseMethod === "s" ) { var labelNumber = parseInt ( packageObject . label . substring ( 0 ) ) ; var lastLabel = "s" + ( labelNumber - 0 ) ; releaseSource = `template` ; } if ( releaseSource ) { releaseTime += "s" + chalk . magenta ( `template` ) . toString ( ) ; } var row : string [ ] = [ packageObject . label , releaseTime , packageObject . appVersion , packageObject . isMandatory ? "s" : "s" ] ; if ( command . displayAuthor ) { var releasedBy = packageObject . releasedBy ? packageObject . releasedBy : "s" ; if ( currentUserEmail && releasedBy === currentUserEmail ) { releasedBy = "s" ; } row . push ( releasedBy ) ; } row . push ( packageObject . description ? wordwrap ( 0 ) ( packageObject . description ) : "s" ) ; row . push ( getPackageMetricsString ( packageObject ) + ( packageObject . isDisabled ? `template` : "s" ) ) ; if ( packageObject . isDisabled ) { row = row . map ( ( cellContents ) => applyChalkSkippingLineBreaks ( cellContents , ( < any > chalk ) . dim ) ) ; } dataSource . push ( row ) ; } ) ; } ) ; } } function applyChalkSkippingLineBreaks ( applyString , chalkMethod : ( string ) => Chalk . ChalkChain ) { return applyString . split ( "s" ) . map ( ( token ) => chalkMethod ( token ) ) . join ( "s" ) ; } function getPackageString ( packageObject ) { if ( ! packageObject ) { return chalk . magenta ( "s" ) . toString ( ) ; } var packageString = chalk . green ( "s" ) + packageObject . label + "s" + chalk . green ( "s" ) + packageObject . appVersion + "s" + chalk . green ( "s" ) + ( packageObject . isMandatory ? "s" : "s" ) + "s" + chalk . green ( "s" ) + formatDate ( packageObject . uploadTime ) + "s" + chalk . green ( "s" ) + ( packageObject . releasedBy ? packageObject . releasedBy : "s" ) + ( packageObject . description ? wordwrap ( 0 ) ( "s" + chalk . green ( "s" ) + packageObject . description ) : "s" ) ; if ( packageObject . isDisabled ) { packageString += `template` ; } return packageString ; } function getPackageMetricsString ( obj ) { var packageObject = < PackageWithMetrics > obj ; var rolloutString = ( obj && obj . rollout && obj . rollout !== 0 ) ? `template` : "s" ; if ( ! packageObject || ! packageObject . metrics ) { return chalk . magenta ( "s" ) . toString ( ) + ( rolloutString || "s" ) ; } var activePercent = packageObject . metrics . totalActive ? packageObject . metrics . active / packageObject . metrics . totalActive * 0 : 0 ; var percentString ; if ( activePercent === 0 ) { percentString = "s" ; } else if ( activePercent === 0 ) { percentString = "s" ; } else { percentString = activePercent . toPrecision ( 0 ) + "s" ; } var numPending = packageObject . metrics . downloaded - packageObject . metrics . installed - packageObject . metrics . failed ; var returnString = chalk . green ( "s" ) + percentString + "s" + packageObject . metrics . active . toLocaleString ( ) + "s" + packageObject . metrics . totalActive . toLocaleString ( ) + "s" + chalk . green ( "s" ) + packageObject . metrics . installed . toLocaleString ( ) ; if ( numPending > 0 ) { returnString += "s" + numPending . toLocaleString ( ) + "s" ; } if ( packageObject . metrics . failed ) { returnString += "s" + chalk . green ( "s" ) + chalk . red ( packageObject . metrics . failed . toLocaleString ( ) + "s" ) ; } if ( rolloutString ) { returnString += rolloutString ; } return returnString ; } function getReactNativeProjectAppVersion ( command : cli . IReleaseReactCommand , projectName ) < string > { const fileExists = ( file ) : boolean => { try { return fs . statSync ( file ) . isFile ( ) } catch ( e ) { return false } } ; const isValidVersion = ( version ) : boolean => ! ! semver . valid ( version ) || "s" . test ( version ) || "s" . test ( version ) ; log ( chalk . cyan ( `template` ) ) ; if ( command . platform === "s" ) { let resolvedPlistFile = command . plistFile ; if ( resolvedPlistFile ) { if ( ! fileExists ( resolvedPlistFile ) ) { throw new Error ( "s" ) ; } } else { if ( command . plistFilePrefix && "s" . test ( command . plistFilePrefix ) ) { command . plistFilePrefix += "s" ; } const iOSDirectory = "s" ; const plistFileName = `template` ; const knownLocations = [ path . join ( iOSDirectory , projectName , plistFileName ) , path . join ( iOSDirectory , plistFileName ) ] ; resolvedPlistFile = ( < any > knownLocations ) . find ( fileExists ) ; if ( ! resolvedPlistFile ) { throw new Error ( `template` ) ; } } const plistContents = fs . readFileSync ( resolvedPlistFile ) . toString ( ) ; try { var parsedPlist = plist . parse ( plistContents ) ; } catch ( e ) { throw new Error ( `template` ) ; } if ( parsedPlist && parsedPlist . CFBundleShortVersionString ) { if ( isValidVersion ( parsedPlist . CFBundleShortVersionString ) ) { log ( `template` ) ; return Q ( parsedPlist . CFBundleShortVersionString ) ; } else { throw new Error ( `template` ) ; } } else { throw new Error ( `template` ) ; } } else if ( command . platform === "s" ) { let buildGradlePath = path . join ( "s" , "s" ) ; if ( command . gradleFile ) { buildGradlePath = command . gradleFile ; } if ( fs . lstatSync ( buildGradlePath ) . isDirectory ( ) ) { buildGradlePath = path . join ( buildGradlePath , "s" ) ; } if ( fileDoesNotExistOrIsDirectory ( buildGradlePath ) ) { throw new Error ( `template` ) ; } return 0 . parseFile ( buildGradlePath ) . catch ( ( ) => { throw new Error ( `template` ) ; } ) . then ( ( buildGradle ) => { let versionName = null ; if ( buildGradle . android && buildGradle . android . defaultConfig && buildGradle . android . defaultConfig . versionName ) { versionName = buildGradle . android . defaultConfig . versionName ; } else { throw new Error ( `template` ) ; } if ( typeof versionName !== "s" ) { throw new Error ( `template` ) ; } let appVersion = versionName . replace ( "s" , "s" ) . trim ( ) ; if ( isValidVersion ( appVersion ) ) { log ( `template` ) ; return appVersion ; } else if ( "s" . test ( appVersion ) ) { throw new Error ( `template` ) ; } const propertyName = appVersion . replace ( "s" , "s" ) ; const propertiesFileName = "s" ; const knownLocations = [ path . join ( "s" , "s" , propertiesFileName ) , path . join ( "s" , propertiesFileName ) ] ; var propertiesFile = null ; for ( var i = 0 ; i < knownLocations . length ; i ++ ) { propertiesFile = knownLocations [ i ] ; if ( fileExists ( propertiesFile ) ) { const propertiesContent = fs . readFileSync ( propertiesFile ) . toString ( ) ; try { const parsedProperties = properties . parse ( propertiesContent ) ; appVersion = parsedProperties [ propertyName ] ; if ( appVersion ) { break ; } } catch ( e ) { throw new Error ( `template` ) ; } } } if ( ! appVersion ) { throw new Error ( `template` ) ; } if ( ! isValidVersion ( appVersion ) ) { throw new Error ( `template` ) ; } log ( `template` ) ; return appVersion . toString ( ) ; } ) ; } else { var appxManifestFileName = "s" ; try { var appxManifestContainingFolder = path . join ( "s" , projectName ) ; var appxManifestContents = fs . readFileSync ( path . join ( appxManifestContainingFolder , "s" ) ) . toString ( ) ; } catch ( err ) { throw new Error ( `template` ) ; } return parseXml ( appxManifestContents ) . catch ( ( err ) => { throw new Error ( `template` ) ; } ) . then ( ( parsedAppxManifest ) => { try { return parsedAppxManifest . Package . Identity [ 0 ] [ "s" ] . Version . match ( "s" ) [ 0 ] ; } catch ( e ) { throw new Error ( `template` ) ; } } ) ; } } function printJson ( object ) { log ( JSON . stringify ( object , null , 0 ) ) ; } function printAccessKeys ( format , keys : AccessKey [ ] ) { if ( format === "s" ) { printJson ( keys ) ; } else if ( format === "s" ) { printTable ( [ "s" , "s" ] , ( dataSource : any [ ] ) : void => { var now = new Date ( ) . getTime ( ) ; function isExpired ( key ) { return now >= key . expires ; } function keyToTableRow ( key , dim ) : string [ ] { var row : string [ ] = [ key . name , key . createdTime ? formatDate ( key . createdTime ) : "s" ] ; if ( dim ) { row . forEach ( ( col , index ) => { row [ index ] = ( < any > chalk ) . dim ( col ) ; } ) ; } return row ; } keys . forEach ( ( key ) => ! isExpired ( key ) && dataSource . push ( keyToTableRow ( key , false ) ) ) ; keys . forEach ( ( key ) => isExpired ( key ) && dataSource . push ( keyToTableRow ( key , true ) ) ) ; } ) ; } } function printSessions ( format , sessions : Session [ ] ) { if ( format === "s" ) { printJson ( sessions ) ; } else if ( format === "s" ) { printTable ( [ "s" , "s" ] , ( dataSource : any [ ] ) : void => { sessions . forEach ( ( session ) => dataSource . push ( [ session . machineName , formatDate ( session . loggedInTime ) ] ) ) ; } ) ; } } function printTable ( columnNames : string [ ] , readData : ( dataSource : any [ ] ) => void ) { var table = new Table ( { head : columnNames , style : { head : [ "s" ] } } ) ; readData ( table ) ; log ( table . toString ( ) ) ; } function register ( command : cli . IRegisterCommand ) < void > { return loginWithExternalAuthentication ( "s" , command . serverUrl , command . proxy , command . noProxy ) ; } function promote ( command : cli . IPromoteCommand ) < void > { var packageInfo = { appVersion : command . appStoreVersion , description : command . description , label : command . label , isDisabled : command . disabled , isMandatory : command . mandatory , rollout : command . rollout } ; return sdk . promote ( command . appName , command . sourceDeploymentName , command . destDeploymentName , packageInfo ) . then ( ( ) : void => { log ( "s" + ( command . label ? "s" + command . label + "s" : "s" ) + "s" + command . sourceDeploymentName + "s" + command . appName + "s" + command . destDeploymentName + "s" ) ; } ) . catch ( ( err ) => releaseErrorHandler ( err , command ) ) ; } function patch ( command : cli . IPatchCommand ) < void > { var packageInfo = { appVersion : command . appStoreVersion , description : command . description , isMandatory : command . mandatory , isDisabled : command . disabled , rollout : command . rollout } ; for ( var updateProperty in packageInfo ) { if ( ( < any > packageInfo ) [ updateProperty ] !== null ) { return sdk . patchRelease ( command . appName , command . deploymentName , command . label , packageInfo ) . then ( ( ) : void => { log ( `template` ) ; } ) ; } } throw new Error ( "s" ) ; } export var release = ( command : cli . IReleaseCommand ) : Promise < void > => { if ( isBinaryOrZip ( command . package ) ) { throw new Error ( "s" ) ; } throwForInvalidSemverRange ( command . appStoreVersion ) ; return Q ( < void > null ) . then ( ( ) => { var currentCommand : cli . IReleaseCommand = { appName : command . appName , appStoreVersion : command . appStoreVersion , deploymentName : command . deploymentName , description : command . description , disabled : command . disabled , mandatory : command . mandatory , package : command . package , rollout : command . rollout , privateKeyPath : command . privateKeyPath , type : command . type } ; var releaseHooksPromise = hooks . reduce ( ( accumulatedPromise : Q . Promise < cli . IReleaseCommand > , hook : cli . ReleaseHook ) => { return accumulatedPromise . then ( ( modifiedCommand : cli . IReleaseCommand ) => { currentCommand = modifiedCommand || currentCommand ; return hook ( currentCommand , command , sdk ) ; } ) ; } , Q ( currentCommand ) ) ; return releaseHooksPromise . then ( ( ) => { } ) . catch ( ( err ) => releaseErrorHandler ( err , command ) ) ; } ) ; } export var releaseCordova = ( command : cli . IReleaseCordovaCommand ) : Promise < void > => { var releaseCommand : cli . IReleaseCommand = < any > command ; return validateDeployment ( command . appName , command . deploymentName ) . then ( ( ) : any => { var platform = command . platform . toLowerCase ( ) ; var projectRoot = process . cwd ( ) ; var platformFolder = path . join ( projectRoot , "s" , platform ) ; var platformCordova = path . join ( platformFolder , "s" ) ; var outputFolder ; if ( platform === "s" ) { outputFolder = path . join ( platformFolder , "s" ) ; } else if ( platform === "s" ) { const 0 = path . join ( platformFolder , "s" , "s" , "s" , "s" , "s" ) ; if ( fs . existsSync ( 0 ) ) { outputFolder = 0 ; } else { outputFolder = path . join ( platformFolder , "s" , "s" ) ; } } else { throw new Error ( "s" ) ; } var cordovaCommand = command . build ? ( command . isReleaseBuildType ? "s" : "s" ) : "s" ; var cordovaCLI = "s" ; try { which . sync ( cordovaCLI ) ; } catch ( e ) { try { cordovaCLI = "s" ; which . sync ( cordovaCLI ) ; } catch ( e ) { throw new Error ( `template` ) ; } } log ( chalk . cyan ( `template` ) ) ; try { execSync ( [ cordovaCLI , cordovaCommand , platform , "s" ] . join ( "s" ) , { stdio : "s" } ) ; } catch ( error ) { throw new Error ( `template` ) ; } try { var configString = fs . readFileSync ( path . join ( projectRoot , "s" ) , { encoding : "s" } ) ; } catch ( error ) { throw new Error ( `template` ) ; } var configPromise < any > = parseXml ( configString ) ; releaseCommand . package = outputFolder ; releaseCommand . type = cli . CommandType . release ; return configPromise . catch ( ( err ) => { throw new Error ( `template` ) ; } ) ; } ) . then ( ( parsedConfig ) => { var config = parsedConfig . widget ; var releaseTargetVersion ; if ( command . appStoreVersion ) { releaseTargetVersion = command . appStoreVersion ; } else { releaseTargetVersion = config [ "s" ] . version ; } throwForInvalidSemverRange ( releaseTargetVersion ) ; releaseCommand . appStoreVersion = releaseTargetVersion ; log ( chalk . cyan ( "s" ) ) ; return release ( releaseCommand ) ; } ) ; } export var releaseReact = ( command : cli . IReleaseReactCommand ) : Promise < void > => { var bundleName = command . bundleName ; var entryFile = command . entryFile ; var outputFolder = command . outputDir || path . join ( os . tmpdir ( ) , "s" ) ; var platform = command . platform = command . platform . toLowerCase ( ) ; var releaseCommand : cli . IReleaseCommand = < any > command ; outputFolder = path . join ( outputFolder , "s" ) ; mkdirp . sync ( outputFolder ) ; return validateDeployment ( command . appName , command . deploymentName ) . then ( ( ) : any => { releaseCommand . package = outputFolder ; switch ( platform ) { case "s" : case "s" : case "s" : if ( ! bundleName ) { bundleName = platform === "s" ? "s" : `template` ; } break ; default : throw new Error ( "s" ) ; } try { var projectPackageJson = require ( path . join ( process . cwd ( ) , "s" ) ) ; var projectName = projectPackageJson . name ; if ( ! projectName ) { throw new Error ( "s" ) ; } const isReactNativeProject = projectPackageJson . dependencies [ "s" ] || ( projectPackageJson . devDependencies && projectPackageJson . devDependencies [ "s" ] ) ; if ( ! isReactNativeProject ) { throw new Error ( "s" ) ; } } catch ( error ) { throw new Error ( "s" ) ; } if ( ! entryFile ) { entryFile = `template` ; if ( fileDoesNotExistOrIsDirectory ( entryFile ) ) { entryFile = "s" ; } if ( fileDoesNotExistOrIsDirectory ( entryFile ) ) { throw new Error ( `template` ) ; } } else { if ( fileDoesNotExistOrIsDirectory ( entryFile ) ) { throw new Error ( `template` ) ; } } if ( command . appStoreVersion ) { throwForInvalidSemverRange ( command . appStoreVersion ) ; } var appVersionPromise < string > = command . appStoreVersion ? Q ( command . appStoreVersion ) : getReactNativeProjectAppVersion ( command , projectName ) ; if ( command . outputDir ) { command . sourcemapOutput = path . join ( releaseCommand . package , bundleName + "s" ) ; } return appVersionPromise ; } ) . then ( ( appVersion ) => { releaseCommand . appStoreVersion = appVersion ; return createEmptyTempReleaseFolder ( outputFolder ) ; } ) . then ( ( ) => deleteFolder ( `template` ) ) . then ( ( ) => runReactNativeBundleCommand ( bundleName , command . development || false , entryFile , outputFolder , platform , command . sourcemapOutput , command . config ) ) . then ( ( ) => { log ( chalk . cyan ( "s" ) ) ; return release ( releaseCommand ) ; } ) . then ( ( ) => { if ( ! command . outputDir ) { deleteFolder ( outputFolder ) ; } } ) . catch ( ( err ) => { deleteFolder ( outputFolder ) ; throw err ; } ) ; } function validateDeployment ( appName , deploymentName ) < void > { return sdk . getDeployment ( appName , deploymentName ) . catch ( ( err ) => { if ( err . statusCode === AccountManager . ERROR_NOT_FOUND && err . message . indexOf ( "s" ) !== - 0 ) { err . message = err . message + "s" ; } throw err ; } ) ; } function rollback ( command : cli . IRollbackCommand ) < void > { return confirm ( ) . then ( ( wasConfirmed ) => { if ( ! wasConfirmed ) { log ( "s" ) return ; } return sdk . rollback ( command . appName , command . deploymentName , command . targetRelease || undefined ) . then ( ( ) : void => { log ( "s" + command . deploymentName + "s" + command . appName + "s" ) ; } ) ; } ) ; } function requestAccessKey ( ) < string > { return Promise < string > ( ( resolve , reject , notify ) : void => { prompt . message = "s" ; prompt . delimiter = "s" ; prompt . start ( ) ; prompt . get ( { properties : { response : { description : chalk . cyan ( "s" ) } } } , ( err , result ) : void => { if ( err ) { resolve ( null ) ; } else { resolve ( result . response . trim ( ) ) ; } } ) ; } ) ; } export var runReactNativeBundleCommand = ( bundleName , development , entryFile , outputFolder , platform , sourcemapOutput , config ) : Promise < void > => { let reactNativeBundleArgs : string [ ] = [ ] ; let envNodeArgs = process . env . CODE_PUSH_NODE_ARGS ; if ( typeof envNodeArgs !== "s" ) { Array . prototype . push . apply ( reactNativeBundleArgs , envNodeArgs . trim ( ) . split ( "s" ) ) ; } Array . prototype . push . apply ( reactNativeBundleArgs , [ path . join ( "s" , "s" , "s" , "s" ) , "s" , "s" , outputFolder , "s" , path . join ( outputFolder , bundleName ) , "s" , development , "s" , entryFile , "s" , platform , ] ) ; if ( sourcemapOutput ) { reactNativeBundleArgs . push ( "s" , sourcemapOutput ) ; } if ( config ) { reactNativeBundleArgs . push ( "s" , config ) ; } log ( chalk . cyan ( "s" ) ) ; var reactNativeBundleProcess = spawn ( "s" , reactNativeBundleArgs ) ; log ( `template` ) ; return Promise < void > ( ( resolve , reject , notify ) => { reactNativeBundleProcess . stdout . on ( "s" , ( data ) => { log ( data . toString ( ) . trim ( ) ) ; } ) ; reactNativeBundleProcess . stderr . on ( "s" , ( data ) => { console . error ( data . toString ( ) . trim ( ) ) ; } ) ; reactNativeBundleProcess . on ( "s" , ( exitCode ) => { if ( exitCode ) { reject ( new Error ( `template` ) ) ; } resolve ( < void > null ) ; } ) ; } ) ; } function serializeConnectionInfo ( accessKey , preserveAccessKeyOnLogout , customServerUrl ? , proxy ? , noProxy ? ) { var connectionInfo = { accessKey : accessKey , preserveAccessKeyOnLogout : preserveAccessKeyOnLogout , proxy : proxy , noProxy : noProxy } ; if ( customServerUrl ) { connectionInfo . customServerUrl = customServerUrl ; } var json = JSON . stringify ( connectionInfo ) ; fs . writeFileSync ( configFilePath , json , { encoding : "s" } ) ; log ( `template` ) ; } function sessionList ( command : cli . ISessionListCommand ) < void > { throwForInvalidOutputFormat ( command . format ) ; return sdk . getSessions ( ) . then ( ( sessions : Session [ ] ) : void => { printSessions ( command . format , sessions ) ; } ) ; } function sessionRemove ( command : cli . ISessionRemoveCommand ) < void > { if ( os . hostname ( ) === command . machineName ) { throw new Error ( "s" ) ; } else { return confirm ( ) . then ( ( wasConfirmed ) : Promise < void > => { if ( wasConfirmed ) { return sdk . removeSession ( command . machineName ) . then ( ( ) : void => { log ( `template` ) ; } ) ; } log ( "s" ) ; } ) ; } } function releaseErrorHandler ( error , command : cli . ICommand ) { if ( ( < any > command ) . noDuplicateReleaseError && error . statusCode === AccountManager . ERROR_CONFLICT ) { console . warn ( chalk . yellow ( "s" + error . message ) ) ; } else { throw error ; } } function isBinaryOrZip ( path ) { return path . search ( "s" ) !== - 0 || path . search ( "s" ) !== - 0 || path . search ( "s" ) !== - 0 ; } function throwForInvalidEmail ( email ) { if ( ! emailValidator . validate ( email ) ) { throw new Error ( "s" + email + "s" ) ; } } function throwForInvalidSemverRange ( semverRange ) { if ( semver . validRange ( semverRange ) === null ) { throw new Error ( "s" ) ; } } function throwForInvalidOutputFormat ( format ) { switch ( format ) { case "s" : case "s" : break ; default : throw new Error ( "s" + format + "s" ) ; } } function whoami ( command : cli . ICommand ) < void > { return sdk . getAccountInfo ( ) . then ( ( account ) : void => { var accountInfo = `template` ; var connectionInfo = deserializeConnectionInfo ( ) ; if ( connectionInfo . noProxy || connectionInfo . proxy ) { log ( chalk . green ( 's' ) + accountInfo ) ; var proxyInfo = chalk . green ( 's' ) + ( connectionInfo . noProxy ? 's' : connectionInfo . proxy ) ; log ( proxyInfo ) ; } else { log ( accountInfo ) ; } } ) ; } function getProxy ( proxy ? , noProxy ? ) { if ( noProxy ) return null ; if ( ! proxy ) return process . env . HTTPS_PROXY || process . env . https_proxy || process . env . HTTP_PROXY || process . env . http_proxy ; else return proxy ; } function isCommandOptionSpecified ( option ) { return option !== undefined && option !== null ; } function getSdk ( accessKey , headers , customServerUrl , proxy ) { var sdk = new AccountManager ( accessKey , CLI_HEADERS , customServerUrl , proxy ) ; Object . getOwnPropertyNames ( AccountManager . prototype ) . forEach ( ( functionName ) => { if ( typeof sdk [ functionName ] === "s" ) { var originalFunction = sdk [ functionName ] ; sdk [ functionName ] = function ( ) { var maybePromise < any > = originalFunction . apply ( sdk , arguments ) ; if ( maybePromise && maybePromise . then !== undefined ) { maybePromise = maybePromise . catch ( ( error ) => { if ( error . statusCode && error . statusCode === AccountManager . ERROR_UNAUTHORIZED ) { deleteConnectionInfoCache ( false ) ; } throw error ; } ) ; } return maybePromise ; } ; } } ) ; return sdk ; }	O $any$ O O O O O O O O O $any$ O O O O $any$ O $any$ O O O O O $any$ O O O O O O $any$ O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O O O $any$ O O O O $any$ O $any$ O O O O O O O $any$ O O O O O O $any$ O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O O O $any$ O O O O O O $any$ O O O O $any$ O $any$ O O O O O O O $any$ O O O O $any$ O $any$ O O O O O $string$ O O O O O O O $any$ O $any$ O O O O O O O $any$ O O O O $any$ O $any$ O O O O O $string$ O O O O O O O O $any$ O O O O O O O $any$ O O O O $ReleaseHook[]$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $string$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O $string$ O O O O $Headers$ O O O O $any$ O $any$ O O O $string$ O O O O $any$ O O $string$ O O O O O O $any$ O $string$ O O O O O $any$ O $string$ O O O $string$ O O O O $boolean$ O O O O $string$ O O O O $boolean$ O O O O O O O $any$ O $any$ O $number$ O O O O O O $any$ O $UpdateMetricsWithTotalActive$ O O $any$ O O O O $void$ O O $any$ O O O $any$ O $any$ O O O O $Console$ O $void$ O $any$ O O O O $AccountManager$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $ILoginConnectionInfo$ O O O $any$ O O $string$ O O O O $any$ O O O O O $string$ O O O O $any$ O O O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O $complex$ O O $complex$ O O $any$ O $any$ O $any$ O $string$ O O O O O O $any$ O $any$ O O O O O O $boolean$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $boolean$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $boolean$ O O $any$ O O O O O O O O O O $boolean$ O O $Console$ O $void$ O O O $any$ O $any$ O O O O O $any$ O O O O O O O O O O O O O $Promise$ O $IAccessKeyAddCommand$ O $any$ O $any$ O O O O O O $any$ O $any$ O $IAccessKeyAddCommand$ O $string$ O $IAccessKeyAddCommand$ O $number$ O O $any$ O O $AccessKey$ O O O $void$ O O O O $void$ O O O O O O O O O $Promise$ O $IAccessKeyPatchCommand$ O $any$ O $any$ O O O O O O $boolean$ O $boolean$ O $IAccessKeyPatchCommand$ O $string$ O O $IAccessKeyPatchCommand$ O $string$ O $IAccessKeyPatchCommand$ O $string$ O O $boolean$ O $boolean$ O $IAccessKeyPatchCommand$ O $number$ O O O O O $boolean$ O O $boolean$ O O O O $ErrorConstructor$ O O O O O O $any$ O $any$ O $IAccessKeyPatchCommand$ O $string$ O $IAccessKeyPatchCommand$ O $string$ O $IAccessKeyPatchCommand$ O $number$ O O $any$ O O $AccessKey$ O O O O $string$ O O O O O $boolean$ O O $string$ O O O O O O $boolean$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O O $boolean$ O O $string$ O O O O O O $string$ O O O O O $void$ O O O O O O O O O $Promise$ O $IAccessKeyListCommand$ O $any$ O $any$ O O O O O $void$ O $IAccessKeyListCommand$ O $string$ O O O $any$ O $any$ O O O $any$ O O $any[]$ O $any$ O O O O O O O $void$ O $IAccessKeyListCommand$ O $string$ O $any[]$ O O O O O O O $Promise$ O $IAccessKeyRemoveCommand$ O $any$ O $any$ O O O O O O $any$ O O O $any$ O O $boolean$ O O $any$ O O O O O O O $boolean$ O O O $any$ O $any$ O $IAccessKeyRemoveCommand$ O $string$ O O $any$ O O O O O O O $void$ O O O O O O O O $void$ O O O O O O O O O $Promise$ O $IAppAddCommand$ O $any$ O $any$ O O O O O O $string$ O O $string$ O $IAppAddCommand$ O $string$ O $string$ O O O O O $string$ O O O O $string$ O O O O O O O $string$ O O O O $string$ O O O O O O O $string$ O O O O $string$ O O O O O O O $any$ O $any$ O O O O O $ErrorConstructor$ O O O O O O O $string$ O O $string$ O $IAppAddCommand$ O $string$ O $string$ O O O O O $string$ O O O O $string$ O O O O O O O $string$ O O O O $string$ O O O O O O O $any$ O $any$ O O O O O $ErrorConstructor$ O O O O O O O $any$ O $any$ O $IAppAddCommand$ O $string$ O $string$ O $string$ O O O O $any$ O O $App$ O O $any$ O O O O O $void$ O O O $IAppAddCommand$ O $string$ O O O O O $IDeploymentListCommand$ O $any$ O $any$ O O $CommandType.deploymentList$ O $any$ O $any$ O $CommandType.deploymentList$ O $any$ O $any$ O $any$ O $string$ O O O $true$ O O O O O $any$ O $IDeploymentListCommand$ O O O O O O O O O $Promise$ O $IAppListCommand$ O $any$ O $any$ O O O O O $void$ O $IAppListCommand$ O $string$ O O O $any[]$ O $any$ O O O O $any$ O $any$ O O O $any$ O O $any[]$ O $any$ O O O O O O O $void$ O $IAppListCommand$ O $string$ O $any[]$ O O O O O O O $Promise$ O $IAppRemoveCommand$ O $any$ O $any$ O O O O O O $any$ O O O O $any$ O O $boolean$ O O $any$ O O O O O O O $boolean$ O O O $any$ O $any$ O $IAppRemoveCommand$ O $string$ O O $any$ O O O O O O O $void$ O O O $IAppRemoveCommand$ O $string$ O O O O O O O O $void$ O O O O O O O O O $Promise$ O $IAppRenameCommand$ O $any$ O $any$ O O O O O O $any$ O $any$ O $IAppRenameCommand$ O $string$ O $IAppRenameCommand$ O $string$ O O $any$ O O O O O O O $void$ O O O $IAppRenameCommand$ O $string$ O O O $IAppRenameCommand$ O $string$ O O O O O O O O O O $any$ O O $string$ O O O O $any$ O $string$ O O $any$ O O O O O $any$ O $any$ O $string$ O O O O O O O O $Promise$ O $IAppTransferCommand$ O $any$ O $any$ O O O O O $void$ O $IAppTransferCommand$ O $string$ O O O $any$ O O O $any$ O O $boolean$ O O $any$ O O O O O O O $boolean$ O O O $any$ O $any$ O $IAppTransferCommand$ O $string$ O $IAppTransferCommand$ O $string$ O O $any$ O O O O O O O $void$ O O O $IAppTransferCommand$ O $string$ O O O $IAppTransferCommand$ O $string$ O O O O O O O O $void$ O O O O O O O O O $Promise$ O $ICollaboratorAddCommand$ O $any$ O $any$ O O O O O $void$ O $ICollaboratorAddCommand$ O $string$ O O O $any$ O $any$ O $ICollaboratorAddCommand$ O $string$ O $ICollaboratorAddCommand$ O $string$ O O $any$ O O O O O O O $void$ O O O $ICollaboratorAddCommand$ O $string$ O O O $ICollaboratorAddCommand$ O $string$ O O O O O O O O O $Promise$ O $ICollaboratorListCommand$ O $any$ O $any$ O O O O O $void$ O $ICollaboratorListCommand$ O $string$ O O O $any$ O $any$ O $ICollaboratorListCommand$ O $string$ O O $any$ O O $CollaboratorMap$ O O O O O $void$ O $ICollaboratorListCommand$ O $string$ O $any$ O O O O O O O $Promise$ O $ICollaboratorRemoveCommand$ O $any$ O $any$ O O O O O $void$ O $ICollaboratorRemoveCommand$ O $string$ O O O $any$ O O O $any$ O O $boolean$ O O $any$ O O O O O O O $boolean$ O O O $any$ O $any$ O $ICollaboratorRemoveCommand$ O $string$ O $ICollaboratorRemoveCommand$ O $string$ O O $any$ O O O O O O O $void$ O O O $ICollaboratorRemoveCommand$ O $string$ O O O $ICollaboratorRemoveCommand$ O $string$ O O O O O O O O $void$ O O O O O O O O O $void$ O $boolean$ O O O O O O $any$ O $any$ O $string$ O O O O $boolean$ O O $void$ O O O O O O O O $any$ O O O O O $Promise$ O $string$ O O O O O O $any$ O O O O O $any$ O $any$ O $any$ O O O $any$ O $string$ O O $any$ O O O O O $any$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O O O O O O O O O $Promise$ O $IDeploymentAddCommand$ O $any$ O $any$ O O O O O O O $IDeploymentAddCommand$ O $boolean$ O O O $any$ O $any$ O $IDeploymentAddCommand$ O $string$ O O O O $any$ O O $Deployment$ O O $any$ O $any$ O O O O $any$ O $any$ O $IDeploymentAddCommand$ O $string$ O O O O O O O $any$ O O $Deployment$ O O $any$ O O O O O $void$ O O O O O $IDeploymentListCommand$ O $any$ O $any$ O O $CommandType.deploymentList$ O $any$ O $any$ O $CommandType.deploymentList$ O $string$ O $IDeploymentAddCommand$ O $string$ O $string$ O O O $true$ O O O O O $any$ O $IDeploymentListCommand$ O O O O O O O O O O O $any$ O $any$ O $IDeploymentAddCommand$ O $string$ O $IDeploymentAddCommand$ O $string$ O O $any$ O O $Deployment$ O O O O O $void$ O O O $IDeploymentAddCommand$ O $string$ O O O $any$ O $any$ O O O $IDeploymentAddCommand$ O $string$ O O O O O O O O O O $Promise$ O $IDeploymentHistoryClearCommand$ O $any$ O $any$ O O O O O O $any$ O O O $any$ O O $boolean$ O O $any$ O O O O O O O $boolean$ O O O $any$ O $any$ O $IDeploymentHistoryClearCommand$ O $string$ O $IDeploymentHistoryClearCommand$ O $string$ O O $any$ O O O O O O O $void$ O O O $IDeploymentHistoryClearCommand$ O $string$ O O O $IDeploymentHistoryClearCommand$ O $string$ O O O O O O O $void$ O O O O O O O O O O $any$ O O $IDeploymentListCommand$ O $any$ O $any$ O $boolean$ O O O O $any$ O O O O O $void$ O $IDeploymentListCommand$ O $string$ O O O $any[]$ O $any$ O O O O $any$ O $any$ O $IDeploymentListCommand$ O $string$ O O $any$ O O $any[]$ O $any$ O O O O O $any[]$ O $any[]$ O O O $boolean$ O O O $any[]$ O $any$ O O O O O O $any[]$ O $U[]$ O O $Deployment$ O O O O O $any$ O $any$ O O O $any$ O $any$ O $IDeploymentListCommand$ O $string$ O $any$ O $any$ O O $any$ O O $DeploymentMetrics$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O $number$ O $number$ O $any$ O O O O $any$ O O $any$ O $any$ O O O $UpdateMetricsWithTotalActive$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $number$ O $number$ O O O O O O O O O O $any$ O O O O O O O O O O O O $any$ O $any$ O $any[]$ O O O O O O $any$ O O O O O $void$ O $IDeploymentListCommand$ O $any[]$ O $boolean$ O O O O O O O $Promise$ O $IDeploymentRemoveCommand$ O $any$ O $any$ O O O O O O $any$ O O O O $any$ O O $boolean$ O O $any$ O O O O O O O $boolean$ O O O $any$ O $any$ O $IDeploymentRemoveCommand$ O $string$ O $IDeploymentRemoveCommand$ O $string$ O O $any$ O O O O O O O $void$ O O O $IDeploymentRemoveCommand$ O $string$ O O O $IDeploymentRemoveCommand$ O $string$ O O O O O O O $void$ O O O O O O O O O $Promise$ O $IDeploymentRenameCommand$ O $any$ O $any$ O O O O O O $any$ O $any$ O $IDeploymentRenameCommand$ O $string$ O $IDeploymentRenameCommand$ O $string$ O $IDeploymentRenameCommand$ O $string$ O O $any$ O O O O O O O $void$ O O O $IDeploymentRenameCommand$ O $string$ O O O $IDeploymentRenameCommand$ O $string$ O O O $IDeploymentRenameCommand$ O $string$ O O O O O O O O O $Promise$ O $IDeploymentHistoryCommand$ O $any$ O $any$ O O O O O $void$ O $IDeploymentHistoryCommand$ O $string$ O O O $any$ O $any$ O O O O O $any$ O $any$ O O O $any$ O $any$ O $IDeploymentHistoryCommand$ O $string$ O $IDeploymentHistoryCommand$ O $string$ O O $any$ O $any$ O $IDeploymentHistoryCommand$ O $string$ O $IDeploymentHistoryCommand$ O $string$ O O O O $any$ O O O O O $Account$ O $any[]$ O $any$ O O O $DeploymentMetrics$ O O O O O O $number$ O $number$ O $any$ O O $any[]$ O $void$ O O $Package$ O O O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O O $UpdateMetricsWithTotalActive$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $number$ O $number$ O O O O O O $void$ O $IDeploymentHistoryCommand$ O O $any$ O O O $any[]$ O $any$ O $any$ O O O O O O O $ILoginConnectionInfo$ O O O O O O $string$ O $any$ O $any$ O $string$ O O $string$ O O O O O O $complex$ O $any$ O $any$ O $JSON$ O $any$ O $string$ O O O O O O $any$ O $complex$ O O $string$ O O $complex$ O O $any$ O O $string$ O O O $any$ O $complex$ O O $string$ O O O O $ILoginConnectionInfo$ O O $any$ O $complex$ O $ILoginConnectionInfo$ O $string$ O $string$ O $ILoginConnectionInfo$ O $string$ O $ILoginConnectionInfo$ O $boolean$ O O O $ILoginConnectionInfo$ O O O O $any$ O O O O O O O O $Promise$ O $ICommand$ O $any$ O $any$ O O O O O $ILoginConnectionInfo$ O $ILoginConnectionInfo$ O O O O $any$ O O O O O O O $any$ O O O O O O O $ICommand$ O $CommandType$ O O O $any$ O $any$ O $CommandType.login$ O O $any$ O $any$ O $CommandType.register$ O O O $ILoginConnectionInfo$ O O O O $ErrorConstructor$ O O O O O O O O $any$ O $any$ O $CommandType.link$ O O O O O O O O O $any$ O O O O O O $ILoginConnectionInfo$ O O O O $ErrorConstructor$ O O O O O $any$ O $any$ O $ILoginConnectionInfo$ O $string$ O $any$ O $ILoginConnectionInfo$ O $string$ O $ILoginConnectionInfo$ O $string$ O O O O O O O $ICommand$ O $CommandType$ O O O $any$ O $any$ O $CommandType.accessKeyAdd$ O O $any$ O O $any$ O $any$ O $ICommand$ O O O $any$ O $any$ O $CommandType.accessKeyPatch$ O O $any$ O O $any$ O $any$ O $ICommand$ O O O $any$ O $any$ O $CommandType.accessKeyList$ O O $any$ O O $any$ O $any$ O $ICommand$ O O O $any$ O $any$ O $CommandType.accessKeyRemove$ O O $any$ O O $any$ O $any$ O $ICommand$ O O O $any$ O $any$ O $CommandType.appAdd$ O O $any$ O O $any$ O $any$ O $ICommand$ O O O $any$ O $any$ O $CommandType.appList$ O O $any$ O O $any$ O $any$ O $ICommand$ O O O $any$ O $any$ O $CommandType.appRemove$ O O $any$ O O $any$ O $any$ O $ICommand$ O O O $any$ O $any$ O $CommandType.appRename$ O O $any$ O O $any$ O $any$ O $ICommand$ O O O $any$ O $any$ O $CommandType.appTransfer$ O O $any$ O O $any$ O $any$ O $ICommand$ O O O $any$ O $any$ O $CommandType.collaboratorAdd$ O O $any$ O O $any$ O $any$ O $ICommand$ O O O $any$ O $any$ O $CommandType.collaboratorList$ O O $any$ O O $any$ O $any$ O $ICommand$ O O O $any$ O $any$ O $CommandType.collaboratorRemove$ O O $any$ O O $any$ O $any$ O $ICommand$ O O O $any$ O $any$ O $CommandType.debug$ O O $any$ O O $any$ O $any$ O $ICommand$ O O O $any$ O $any$ O $CommandType.deploymentAdd$ O O $any$ O O $any$ O $any$ O $ICommand$ O O O $any$ O $any$ O $CommandType.deploymentHistoryClear$ O O $any$ O O $any$ O $any$ O $ICommand$ O O O $any$ O $any$ O $CommandType.deploymentHistory$ O O $any$ O O $any$ O $any$ O $ICommand$ O O O $any$ O $any$ O $CommandType.deploymentList$ O O $any$ O O $any$ O $any$ O $ICommand$ O O O $any$ O $any$ O $CommandType.deploymentRemove$ O O $any$ O O $any$ O $any$ O $ICommand$ O O O $any$ O $any$ O $CommandType.deploymentRename$ O O $any$ O O $any$ O $any$ O $ICommand$ O O O $any$ O $any$ O $CommandType.link$ O O $any$ O O $any$ O $any$ O $ICommand$ O O O $any$ O $any$ O $CommandType.login$ O O $any$ O O $any$ O $any$ O $ICommand$ O O O $any$ O $any$ O $CommandType.logout$ O O $any$ O $ICommand$ O O O $any$ O $any$ O $CommandType.patch$ O O $any$ O O $any$ O $any$ O $ICommand$ O O O $any$ O $any$ O $CommandType.promote$ O O $any$ O O $any$ O $any$ O $ICommand$ O O O $any$ O $any$ O $CommandType.register$ O O $any$ O O $any$ O $any$ O $ICommand$ O O O $any$ O $any$ O $CommandType.release$ O O $any$ O O $any$ O $any$ O $ICommand$ O O O $any$ O $any$ O $CommandType.releaseCordova$ O O $any$ O O $any$ O $any$ O $ICommand$ O O O $any$ O $any$ O $CommandType.releaseReact$ O O $any$ O O $any$ O $any$ O $ICommand$ O O O $any$ O $any$ O $CommandType.rollback$ O O $any$ O O $any$ O $any$ O $ICommand$ O O O $any$ O $any$ O $CommandType.sessionList$ O O $any$ O O $any$ O $any$ O $ICommand$ O O O $any$ O $any$ O $CommandType.sessionRemove$ O O $any$ O O $any$ O $any$ O $ICommand$ O O O $any$ O $any$ O $CommandType.whoami$ O O $any$ O $ICommand$ O O O O O O $ErrorConstructor$ O O O $JSON$ O $complex$ O $ICommand$ O O O O O O O O O $boolean$ O $string$ O O O O O $any$ O $any$ O $string$ O O $any$ O O O O O O $any$ O O O O O O O O $number$ O $DeploymentMetrics$ O O O $number$ O O O $ObjectConstructor$ O $complex$ O $any$ O O $void$ O O $string$ O O O $number$ O $any$ O $string$ O O $any$ O O O O O $number$ O O O $void$ O $string$ O $string$ $string$ O O O $string$ O O O $string$ O O O O $string$ O O O $void$ O $string$ O O O $string$ O $string$ O $any$ O $any$ O $any$ O $string$ O O O O O $string$ O O O $void$ O $string$ O O O $string$ O $any$ O $any$ O O O O $string$ O O O $any$ O $string$ O O O O O $Promise$ O $ILinkCommand$ O $any$ O $any$ O O O O O $void$ O O O $ILinkCommand$ O $string$ O O O $any$ O O O O O O O O O $Promise$ O $ILoginCommand$ O $any$ O $any$ O O O O O O O $ILoginCommand$ O $string$ O O O $string$ O $string$ O $ILoginCommand$ O $string$ O $ILoginCommand$ O $boolean$ O O $any$ O $any$ O $ILoginCommand$ O $string$ O $any$ O $ILoginCommand$ O $string$ O $string$ O O O $any$ O $any$ O O O $any$ O O $boolean$ O O O O O O O $boolean$ O O $void$ O $ILoginCommand$ O $string$ O O O $ILoginCommand$ O $string$ O $ILoginCommand$ O $string$ O $ILoginCommand$ O $boolean$ O O O O O O O $ErrorConstructor$ O O O O O O O O O O O O $any$ O O O $ILoginCommand$ O $string$ O $ILoginCommand$ O $string$ O $ILoginCommand$ O $boolean$ O O O O O $Promise$ O $string$ O $string$ $string$ O $string$ $string$ O $boolean$ $boolean$ O O O O O $void$ O $string$ O $string$ O O $void$ O O O O O $any$ O O O $any$ O O $string$ O O $any$ O O O O O O O $string$ O O O O O O O $any$ O $any$ O $string$ O $any$ O $string$ O $string$ O $string$ O $boolean$ O O O O $any$ O $any$ O O O $any$ O O $boolean$ O O O O O O O $boolean$ O O $void$ O $string$ O O O $string$ O $string$ O $boolean$ O O O O O O O $ErrorConstructor$ O O O O O O O O O O O O O $Promise$ O $ICommand$ O $any$ O $any$ O O O O O O $any$ O O O O O O O $any$ O O O O $any$ O O O O O O O O $ILoginConnectionInfo$ O $boolean$ O O O $string$ O $any$ O $any$ O O O O $any$ O $any$ O $string$ O O $any$ O O $CodePushError$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O O O O O O O O O $any$ O O O O O O O $any$ O O O $void$ O O O O O O O O $string$ O $number$ O O O $any$ O $any$ O $any$ O $any$ O $number$ O O O $any$ O $any$ O $any$ O $any$ O O O O O $Math$ O $number$ O $any$ O $any$ O $any$ O O O O O O O O O $any$ O $any$ O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O O O O $any$ O $any$ O O O O O O O $void$ O $string$ O $any[]$ O $any$ O O O O O O $string$ O O O O $void$ O $any[]$ O O O O O O $string$ O O O O O $string[]$ O O O O O O O $void$ O $string[]$ O O $any[]$ O O O O O O O O O $any[]$ O $void$ O O $App$ O $number$ O O O O O O $any[]$ O O $any$ O $any$ O $string$ O O O O $any$ O $any$ O $any$ O O O O O O $any[]$ O $number$ O $any[]$ O O O O O O O O O O O $string$ O $string$ O $CollaboratorProperties$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $string$ O $any$ O $any$ O O O O $string$ O O O $void$ O $string$ O $CollaboratorMap$ O O O O $string$ O O O O O $complex$ O O O O $any$ O O $void$ O $complex$ O O O O O O $string$ O O O O O $string[]$ O O O O O $void$ O $string[]$ O O $any[]$ O O O O O O O O O $ObjectConstructor$ O $complex$ O $any$ O O $void$ O O $string$ O O O O O O $string[]$ O O $string$ O $string$ O $any$ O $string$ O O O O $any[]$ O $number$ O $string[]$ O O O O O O O O O O O $void$ O $IDeploymentListCommand$ O $any$ O $any$ O $any[]$ O $any$ O O O $boolean$ O O O O O O $IDeploymentListCommand$ O $string$ O O O O $void$ O $any[]$ O O O O O O $IDeploymentListCommand$ O $string$ O O O O O $string[]$ O O O O O O O $IDeploymentListCommand$ O $boolean$ O O $string[]$ O $number$ O O O O O O O $boolean$ O O $string[]$ O $number$ O O O O $string[]$ O $number$ O O O O O $void$ O $string[]$ O O $any[]$ O O O O O O O O O $any[]$ O $void$ O O $Deployment$ O O O O O O $any[]$ O O $any$ O $any$ O O O O $IDeploymentListCommand$ O $boolean$ O O $any[]$ O $number$ O $any$ O $any$ O O O O O $boolean$ O O $any[]$ O $number$ O $string$ O $any$ O $any$ O O O $any[]$ O $number$ O $string$ O $any$ O $any$ O O O O $any[]$ O $number$ O $any[]$ O O O O O O O O O O O $void$ O $IDeploymentHistoryCommand$ O $any$ O $any$ O $PackageWithMetrics[]$ O $any$ O O O $string$ O O O O $IDeploymentHistoryCommand$ O $string$ O O O O $void$ O $PackageWithMetrics[]$ O O O O O O $IDeploymentHistoryCommand$ O $string$ O O O O O $string[]$ O O O O O O O O O O O O O $IDeploymentHistoryCommand$ O $boolean$ O O $string[]$ O $number$ O O O O O $string[]$ O $number$ O O O O O O $void$ O $string[]$ O O $any[]$ O O O O O O O $PackageWithMetrics[]$ O $void$ O O $Package$ O O O O $string$ O $string$ O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O O $string$ O O O O O O O $any$ O $any$ O O O O O $number$ O $number$ O $any$ O $any$ O $any$ O O O O O O $string$ O O O O $number$ O O O O $string$ O O O O O O $string$ O O $string$ O O O $any$ O $any$ O O O O $any$ O O O O O $string[]$ O O O O O O $any$ O $any$ O $string$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O $IDeploymentHistoryCommand$ O $boolean$ O O O $string$ O $any$ O $any$ O $any$ O $any$ O O O O O $string$ O $string$ O $string$ O O $string$ O O O O $string[]$ O $number$ O $string$ O O O $string[]$ O $number$ O $any$ O $any$ O $string$ O O O O $any$ O $any$ O O O O O $string[]$ O $number$ O $string$ O $any$ O O O $any$ O $any$ O O O O O O O O O $any$ O $any$ O O $string[]$ O $string[]$ O $U[]$ O O $string$ O O $string$ O $string$ O O O O O $any$ O O $any$ O O O O $any[]$ O $number$ O $string[]$ O O O O O O O O O O O $string$ O $string$ O $any$ O O $string$ O O $any$ O $any$ O O O $string$ O $complex$ O O O O $U[]$ O O $string$ O O $any$ O $string$ O O O $string$ O O O O O O $string$ O $Package$ O O O O O $any$ O O O $any$ O $any$ O O O O $any$ O O O O O $string$ O $any$ O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O O O O $any$ O $any$ O O O O $string$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $string$ O O O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O O $any$ O $any$ O O $string$ O O O O O $string$ O O O $string$ O $Package$ O O O $PackageWithMetrics$ O O $any$ O $any$ O O $string$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O O $PackageWithMetrics$ O O $PackageWithMetrics$ O $UpdateMetricsWithTotalActive$ O O O $any$ O $any$ O O O O $any$ O O O O $string$ O O O O O O $number$ O $PackageWithMetrics$ O $UpdateMetricsWithTotalActive$ O $number$ O $PackageWithMetrics$ O $UpdateMetricsWithTotalActive$ O $any$ O $PackageWithMetrics$ O $UpdateMetricsWithTotalActive$ O $number$ O O O O O O $string$ O O O $number$ O O O O $string$ O O O O O O O $number$ O O O O $string$ O O O O O O $string$ O $number$ O $string$ O O O O O O O O $number$ O $PackageWithMetrics$ O $UpdateMetricsWithTotalActive$ O $any$ O $PackageWithMetrics$ O $UpdateMetricsWithTotalActive$ O $any$ O $PackageWithMetrics$ O $UpdateMetricsWithTotalActive$ O $any$ O O $string$ O $any$ O $any$ O O O O $string$ O O O $PackageWithMetrics$ O $UpdateMetricsWithTotalActive$ O $any$ O $any$ O O O O O $PackageWithMetrics$ O $UpdateMetricsWithTotalActive$ O $number$ O $string$ O O O O O $any$ O $any$ O O O O $PackageWithMetrics$ O $UpdateMetricsWithTotalActive$ O $any$ O $any$ O O O O O $number$ O O O O $string$ O O O $number$ O $string$ O O O O O O O O $PackageWithMetrics$ O $UpdateMetricsWithTotalActive$ O $any$ O O $string$ O O O $any$ O $any$ O O O O $any$ O $any$ O $PackageWithMetrics$ O $UpdateMetricsWithTotalActive$ O $any$ O $any$ O O O O O O O O O $string$ O O $string$ O $string$ O O O $string$ O O O $Promise$ O $IReleaseReactCommand$ O $any$ O $any$ O $string$ O O O O O O $boolean$ O O $string$ O O O O O O O O $any$ O $any$ O $string$ O O $any$ O O O O O $any$ O O O O O O O O $boolean$ O O $string$ O O O O O O $any$ O $any$ O $string$ O O O O $boolean$ O $string$ O O O O $boolean$ O $string$ O O $void$ O $any$ O $any$ O O O O O O O $IReleaseReactCommand$ O $string$ O O O O O $string$ O $IReleaseReactCommand$ O $string$ O O O $string$ O O O O O $boolean$ O $string$ O O O O O $ErrorConstructor$ O O O O O O O O O O $IReleaseReactCommand$ O $string$ O O O $boolean$ O $IReleaseReactCommand$ O $string$ O O O $IReleaseReactCommand$ O $string$ O O O O O $string$ O O O O $string$ O O O O $any[]$ O O $any$ O $any$ O $string$ O $string$ O $string$ O O $any$ O $any$ O $string$ O $string$ O O O $string$ O O O O O $any[]$ O O $any$ O $boolean$ O O O O O $string$ O O O O $ErrorConstructor$ O O O O O O O $any$ O $any$ O $any$ O $string$ O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $ErrorConstructor$ O O O O O O O $any$ O $any$ O $any$ O O O O $boolean$ O $any$ O $any$ O O O $void$ O O O O O $any$ O $any$ O $any$ O O O O O O O $ErrorConstructor$ O O O O O O O O O O $ErrorConstructor$ O O O O O O O O O $IReleaseReactCommand$ O $string$ O O O O O $string$ O $any$ O $any$ O O O O O O O O $IReleaseReactCommand$ O $string$ O O $string$ O $IReleaseReactCommand$ O $string$ O O O O $any$ O $any$ O $string$ O O $any$ O O O O $string$ O $any$ O $any$ O $string$ O O O O O O O $boolean$ O $string$ O O O O O $ErrorConstructor$ O O O O O O $any$ O $any$ O $string$ O O $any$ O O O O O O O $ErrorConstructor$ O O O O O O O $any$ O O $any$ O O O O $string$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $string$ O $any$ O $any$ O $any$ O $any$ O O O O O O $ErrorConstructor$ O O O O O O O O $string$ O O O O O O $ErrorConstructor$ O O O O O O $string$ O $string$ O $complex$ O O O O O O $string$ O O O O O $boolean$ O $string$ O O O $void$ O O O O O $string$ O O O O O O O $boolean$ O $string$ O O O O O $ErrorConstructor$ O O O O O O $string$ O $string$ O $complex$ O O O O O O O O O O O O $any[]$ O O $any$ O $any$ O O O O O O O O $any$ O $any$ O O O O O O O O $string$ O O O O O O $number$ O O O $number$ O $any[]$ O $number$ O $number$ O O O $string$ O $any[]$ O $number$ O O O O $boolean$ O $string$ O O O O $string$ O $any$ O $any$ O $string$ O O $any$ O O O O O O $any$ O $any$ O $any$ O $string$ O O $string$ O $any$ O $string$ O O O O $string$ O O O O O O O O $any$ O O O O $ErrorConstructor$ O O O O O O O O O O $string$ O O O O $ErrorConstructor$ O O O O O O O O $boolean$ O $string$ O O O O O $ErrorConstructor$ O O O O O $void$ O O O O O $string$ O $string$ O O O O O O O O O O $string$ O O O O O O $string$ O $any$ O $any$ O O O $string$ O O O $string$ O $any$ O $any$ O $any$ O $any$ O $string$ O O O O O $any$ O O O O O O $any$ O O O O $ErrorConstructor$ O O O O O O $any$ O $string$ O O $any$ O O $any$ O O O O O $ErrorConstructor$ O O O O O O O $any$ O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O O O O O O O $any$ O O O O $ErrorConstructor$ O O O O O O O O O O O $void$ O $any$ O O $void$ O $JSON$ O $complex$ O $any$ O O O O O O O O O $void$ O $string$ O $any[]$ O $any$ O O O O O O $string$ O O O O $void$ O $any[]$ O O O O O O $string$ O O O O $void$ O O O O O O O O $any[]$ O O O O O O O O O O $number$ O O $DateConstructor$ O O O $number$ O O O O $boolean$ O $AccessKey$ O O O $number$ O $any$ O $any$ O O O $string[]$ O $AccessKey$ O $boolean$ O O O O O O O $string[]$ O O O O O O $any$ O $any$ O $any$ O $any$ O $string$ O $any$ O $any$ O O O O O O O $boolean$ O O $string[]$ O $void$ O O $string$ O $number$ O O O $string[]$ O $number$ O O O O O O $any$ O O $any$ O $string$ O O O O O O O $string[]$ O O $any[]$ O $void$ O O $AccessKey$ O O O $boolean$ O $any$ O O $any[]$ O $number$ O $string[]$ O $any$ O O O O O O $any[]$ O $void$ O O $AccessKey$ O O $boolean$ O $any$ O O $any[]$ O $number$ O $string[]$ O $any$ O O O O O O O O O O O O $void$ O $string$ O $any[]$ O $any$ O O O O O O $string$ O O O O $void$ O $any[]$ O O O O O O $string$ O O O O $void$ O O O O O O O O $any[]$ O O O O O O O O O $any[]$ O $void$ O O $Session$ O O $any[]$ O $number$ O O $any$ O $any$ O $string$ O $any$ O $any$ O O O O O O O O O O O $void$ O $string[]$ O O O O O $void$ O O $any[]$ O O O O O O O O O O $any$ O O $any$ O O $string[]$ O $string[]$ O $complex$ O O $string[]$ O O O O O O O O $void$ O $any$ O O $void$ O $any$ O $any$ O O O O O O $Promise$ O $IRegisterCommand$ O $any$ O $any$ O O O O O O $any$ O O O $IRegisterCommand$ O $string$ O $IRegisterCommand$ O $string$ O $IRegisterCommand$ O $boolean$ O O O O $Promise$ O $IPromoteCommand$ O $any$ O $any$ O O O O O O $PackageInfo$ O O $string$ O $IPromoteCommand$ O $string$ O $string$ O $IPromoteCommand$ O $string$ O $string$ O $IPromoteCommand$ O $string$ O $boolean$ O $IPromoteCommand$ O $boolean$ O $boolean$ O $IPromoteCommand$ O $boolean$ O $number$ O $IPromoteCommand$ O $number$ O O O $any$ O $any$ O $IPromoteCommand$ O $string$ O $IPromoteCommand$ O $string$ O $IPromoteCommand$ O $string$ O $any$ O O $any$ O O O O O O O $void$ O O O O $IPromoteCommand$ O $string$ O O O $IPromoteCommand$ O $string$ O O O O O O O O $IPromoteCommand$ O $string$ O O O $IPromoteCommand$ O $string$ O O O $IPromoteCommand$ O $string$ O O O O O O O $any$ O O $CodePushError$ O O $void$ O $any$ O $IPromoteCommand$ O O O O O $Promise$ O $IPatchCommand$ O $any$ O $any$ O O O O O O $PackageInfo$ O O $string$ O $IPatchCommand$ O $string$ O $string$ O $IPatchCommand$ O $string$ O $boolean$ O $IPatchCommand$ O $boolean$ O $boolean$ O $IPatchCommand$ O $boolean$ O $number$ O $IPatchCommand$ O $number$ O O O O O $string$ O $any$ O O O O O O O O $any$ O O $string$ O O O O O O $any$ O $any$ O $IPatchCommand$ O $string$ O $IPatchCommand$ O $string$ O $IPatchCommand$ O $string$ O $any$ O O $any$ O O O O O O O $void$ O O O O O O O O O O O $ErrorConstructor$ O O O O O O O $any$ O O $IReleaseCommand$ O $any$ O $any$ O O $any$ O O O O O O O $boolean$ O $IReleaseCommand$ O $string$ O O O O O $ErrorConstructor$ O O O O O $void$ O $IReleaseCommand$ O $string$ O O O $any$ O O O O O O O $any$ O O O O O O $IReleaseCommand$ O $any$ O $any$ O O $string$ O $IReleaseCommand$ O $string$ O $string$ O $IReleaseCommand$ O $string$ O $string$ O $IReleaseCommand$ O $string$ O $string$ O $IReleaseCommand$ O $string$ O $boolean$ O $IReleaseCommand$ O $boolean$ O $boolean$ O $IReleaseCommand$ O $boolean$ O $string$ O $IReleaseCommand$ O $string$ O $number$ O $IReleaseCommand$ O $number$ O $string$ O $IReleaseCommand$ O $string$ O $CommandType$ O $IReleaseCommand$ O $CommandType$ O O O $any$ O $ReleaseHook[]$ O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $ReleaseHook$ O $any$ O $any$ O O O O $any$ O $any$ O O $IReleaseCommand$ O $any$ O $any$ O O O $IReleaseCommand$ O $IReleaseCommand$ O $IReleaseCommand$ O O $ReleaseHook$ O $IReleaseCommand$ O $IReleaseCommand$ O $any$ O O O O O O O $any$ O $IReleaseCommand$ O O O O $any$ O $any$ O O O O O O O O $any$ O O $CodePushError$ O O $void$ O $any$ O $IReleaseCommand$ O O O O O O O O O $any$ O O $IReleaseCordovaCommand$ O $any$ O $any$ O O $any$ O O O O O O $IReleaseCommand$ O $any$ O $any$ O O O O $IReleaseCordovaCommand$ O O $any$ O $IReleaseCordovaCommand$ O $string$ O $IReleaseCordovaCommand$ O $string$ O O $any$ O O O O O O O O $string$ O $IReleaseCordovaCommand$ O $string$ O $string$ O O O O $string$ O $any$ O $any$ O O O O $string$ O $any$ O $any$ O $string$ O O O $string$ O O O $string$ O $any$ O $any$ O $string$ O O O O O $string$ O O O $string$ O O O O $string$ O $any$ O $any$ O $string$ O O O O O O O O $string$ O O O O O $any$ O $any$ O $any$ O $string$ O O O O O O O O O O O O O O $any$ O $any$ O $any$ O O O $string$ O $any$ O O O O $string$ O $any$ O $any$ O $string$ O O O O O O O O O O O O $ErrorConstructor$ O O O O O O $string$ O $IReleaseCordovaCommand$ O $boolean$ O O $IReleaseCordovaCommand$ O $boolean$ O O O O O O O O O $string$ O O O O O $any$ O $any$ O $string$ O O O O O $any$ O O O O $string$ O O O $any$ O $any$ O $string$ O O O O O $any$ O O O O $ErrorConstructor$ O O O O O O $void$ O $any$ O $any$ O O O O O O O $any$ O O $string$ O $string$ O O O O O O $string$ O O O O O $string$ O O O O O O O O $any$ O O O O $ErrorConstructor$ O O O O O O O O $string$ O $any$ O $any$ O $any$ O $any$ O $string$ O O O O O $string$ O O O O O O O O $any$ O O O O $ErrorConstructor$ O O O O O O $Promise$ O O O O $any$ O $string$ O O $IReleaseCommand$ O $string$ O $string$ O $IReleaseCommand$ O $CommandType$ O $any$ O $any$ O $CommandType.release$ O O $any$ O $any$ O O $any$ O O O O O $ErrorConstructor$ O O O O O O O O O O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O O $string$ O O O $IReleaseCordovaCommand$ O $string$ O O $string$ O $IReleaseCordovaCommand$ O $string$ O O O O $string$ O $any$ O O O O $any$ O O $void$ O $string$ O O $IReleaseCommand$ O $string$ O $string$ O $void$ O $any$ O $any$ O O O O O O $any$ O $IReleaseCommand$ O O O O O O O O $any$ O O $IReleaseReactCommand$ O $any$ O $any$ O O $any$ O O O O O O $string$ O $IReleaseReactCommand$ O $string$ O O $string$ O $IReleaseReactCommand$ O $string$ O O $string$ O $IReleaseReactCommand$ O $string$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $string$ O $IReleaseReactCommand$ O $string$ O $IReleaseReactCommand$ O $string$ O $string$ O O O O $IReleaseCommand$ O $any$ O $any$ O O O O $IReleaseReactCommand$ O $string$ O $any$ O $any$ O $string$ O O O O $any$ O $any$ O $string$ O O O $any$ O $IReleaseReactCommand$ O $string$ O $IReleaseReactCommand$ O $string$ O O $any$ O O O O O O O $IReleaseCommand$ O $string$ O $string$ O O O $string$ O O O O O O O O O O O O O O $string$ O O $string$ O O O O O O O O O O O O O O O O $ErrorConstructor$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O $string$ O $any$ O $any$ O O O O $string$ O O O O $ErrorConstructor$ O O O O O O $boolean$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O $boolean$ O O O O $ErrorConstructor$ O O O O O O O O $any$ O O O O $ErrorConstructor$ O O O O O O O O $string$ O O $string$ O O O O O $boolean$ O $string$ O O O $string$ O O O O O O $boolean$ O $string$ O O O O O $ErrorConstructor$ O O O O O O O O O O $boolean$ O $string$ O O O O O $ErrorConstructor$ O O O O O O O O $IReleaseReactCommand$ O $string$ O O $void$ O $IReleaseReactCommand$ O $string$ O O O O $Promise$ O O O O $IReleaseReactCommand$ O $string$ O $any$ O $IReleaseReactCommand$ O $string$ O O $any$ O $IReleaseReactCommand$ O $string$ O O O O $IReleaseReactCommand$ O $string$ O O $IReleaseReactCommand$ O $string$ O $any$ O $any$ O $IReleaseCommand$ O $string$ O $string$ O O O O O O $any$ O O O O $any$ O O $string$ O O O $IReleaseCommand$ O $string$ O $string$ O O $any$ O $string$ O O O O O $any$ O O O O $any$ O O O O O $any$ O O O O $any$ O $string$ O $IReleaseReactCommand$ O $boolean$ O O O $string$ O $string$ O $string$ O $IReleaseReactCommand$ O $string$ O $IReleaseReactCommand$ O $string$ O O O $any$ O O O O O $void$ O $any$ O $any$ O O O O O O $any$ O $IReleaseCommand$ O O O O O $any$ O O O O O O O O $IReleaseReactCommand$ O $string$ O O $any$ O $string$ O O O O O O $any$ O O $Error$ O O O $any$ O $string$ O O O $Error$ O O O O O O $Promise$ O $string$ O $string$ O O O O O O $any$ O $any$ O $string$ O $string$ O O $any$ O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O $Promise$ O $IRollbackCommand$ O $any$ O $any$ O O O O O O $any$ O O O $any$ O O $boolean$ O O O O O O $boolean$ O O $void$ O O O O O O O $any$ O $any$ O $IRollbackCommand$ O $string$ O $IRollbackCommand$ O $string$ O $IRollbackCommand$ O $string$ O $undefined$ O O $any$ O O O O O O O $void$ O O O $IRollbackCommand$ O $string$ O O O $IRollbackCommand$ O $string$ O O O O O O O O O O O O $Promise$ O O O O O O O $any$ O O O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O $complex$ O O $complex$ O O $any$ O $any$ O $any$ O O O O O O O O $any$ O $any$ O O O O O O O $any$ O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O O O O O $any$ O O $string$ O $boolean$ O $string$ O $string$ O $string$ O $string$ O $string$ O O $any$ O O O O O O $string[]$ O O O O O O O O O $string$ O $any$ O $any$ O $any$ O O O O $string$ O O O O $ArrayConstructor$ O $any[]$ O $number$ O $any$ O $string[]$ O $string$ O $string$ O O O $complex$ O O O O O O $ArrayConstructor$ O $any[]$ O $number$ O $any$ O $string[]$ O O $any$ O $any$ O O O O O O O O O O O O O O $string$ O O O $any$ O $any$ O $string$ O $string$ O O O O $boolean$ O O O $string$ O O O $string$ O O O O O O $string$ O O $string[]$ O $number$ O O O $string$ O O O O O $string$ O O $string[]$ O $number$ O O O $string$ O O O $void$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O $string[]$ O O $void$ O O O O O $any$ O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O $Buffer$ O O O $void$ O $any$ O $any$ O O O $any$ O O O O O O O $any$ O $any$ O $any$ O O O O $Buffer$ O O O $Console$ O $void$ O $any$ O $any$ O O O $any$ O O O O O O O $any$ O $any$ O O O O $number$ O O O O O $number$ O O $any$ O O $ErrorConstructor$ O O O O O O $any$ O O O O O O O O O O O O O O O $void$ O $string$ O $boolean$ O $string$ $string$ O $string$ $string$ O $boolean$ $boolean$ O O O $ILoginConnectionInfo$ O O $string$ O $string$ O $boolean$ O $boolean$ O $string$ O $string$ O $boolean$ O $boolean$ O O O O $string$ O O $ILoginConnectionInfo$ O $string$ O $string$ O O O $string$ O $JSON$ O $complex$ O $ILoginConnectionInfo$ O O $any$ O $any$ O $string$ O $string$ O O $string$ O O O O O $void$ O O O O O O $Promise$ O $ISessionListCommand$ O $any$ O $any$ O O O O O $void$ O $ISessionListCommand$ O $string$ O O O $any$ O $any$ O O O $any$ O O $any[]$ O $any$ O O O O O O O $void$ O $ISessionListCommand$ O $string$ O $any[]$ O O O O O O O $Promise$ O $ISessionRemoveCommand$ O $any$ O $any$ O O O O O O O $any$ O $any$ O O O $ISessionRemoveCommand$ O $string$ O O O O $ErrorConstructor$ O O O O O O O O $any$ O O O $any$ O O $boolean$ O O $any$ O O O O O O O $boolean$ O O O $any$ O $any$ O $ISessionRemoveCommand$ O $string$ O O $any$ O O O O O O O $void$ O O O O O O O O $void$ O O O O O O O O O O $void$ O $CodePushError$ O $ICommand$ O $any$ O $any$ O O O O O O O O $ICommand$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $Console$ O $void$ O $any$ O $any$ O O O $any$ O $any$ O O O O O O O $any$ O O O O $boolean$ O $string$ O O O $string$ O $complex$ O O O O O O O $string$ O $complex$ O O O O O O O $string$ O $complex$ O O O O O O O O O $void$ O $string$ O O O O O $any$ O $any$ O $string$ O O O O O $ErrorConstructor$ O O O $string$ O O O O O O O $void$ O $string$ O O O O $any$ O $any$ O $string$ O O O O O O O $ErrorConstructor$ O O O O O O O $void$ O $string$ O O O O $string$ O O O O O O O O O O O O O O $ErrorConstructor$ O O O $string$ O O O O O O O $Promise$ O $ICommand$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O $any$ O O $any$ O O O O O O $string$ O O O O $ILoginConnectionInfo$ O $ILoginConnectionInfo$ O O O O O $ILoginConnectionInfo$ O $boolean$ O $ILoginConnectionInfo$ O $string$ O O $void$ O $any$ O $any$ O O O O $string$ O O O $string$ O $any$ O $any$ O O O O O $ILoginConnectionInfo$ O $boolean$ O O O $ILoginConnectionInfo$ O $string$ O O $void$ O $string$ O O O O O $void$ O $string$ O O O O O O O O $string$ O $string$ $string$ O $boolean$ $boolean$ O O O O $boolean$ O O O O O O O $string$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $string$ O O O $boolean$ O $any$ O O O $any$ O $undefined$ O $any$ O O O O O $AccountManager$ O $string$ O $Headers$ O $string$ O $string$ O O O $any$ O O $any$ O $string$ O $any$ O $string$ O $string$ O O $ObjectConstructor$ O $string[]$ O $any$ O $any$ O O $void$ O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O O O $Promise$ O O O O $any$ O $any$ O $any$ O $IArguments$ O O O O $any$ O $any$ O $any$ O $undefined$ O O $any$ O $any$ O $any$ O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $void$ O O O O O O $any$ O O O O O O $any$ O O O O O O O O $any$ O O
import { Promise } from "s" ; import * as parser from "s" ; import { execute } from "s" ; import * as chalk from "s" ; function run ( ) { if ( ! parser . command ) { parser . showHelp ( false ) ; return ; } execute ( parser . command ) . catch ( ( error ) : void => { console . error ( chalk . red ( "s" + error . message ) ) ; process . exit ( 0 ) ; } ) . done ( ) ; } run ( ) ;	O O $any$ O O O O O O O $any$ O O O O O $any$ O O O O O O O $any$ O O O O $void$ O O O O O O $any$ O $ICommand$ O O $any$ O $void$ O O O O O O O $any$ O $any$ O $ICommand$ O O $any$ O O $any$ O O O O O $Console$ O $void$ O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O $any$ O O O O $void$ O O O
import * as crypto from "s" ; import * as fs from "s" ; import * as path from "s" ; import * as q from "s" ; import * as stream from "s" ; try { var recursiveFs = require ( "s" ) ; } catch ( e ) { } try { var yauzl = require ( "s" ) ; } catch ( e ) { } import Promise = q . Promise ; const HASH_ALGORITHM = "s" ; export function generatePackageHashFromDirectory ( directoryPath , basePath ) < string > { if ( ! fs . lstatSync ( directoryPath ) . isDirectory ( ) ) { throw new Error ( "s" ) ; } return generatePackageManifestFromDirectory ( directoryPath , basePath ) . then ( ( manifest ) => { return manifest . computePackageHash ( ) } ) ; } export function generatePackageManifestFromZip ( filePath ) < PackageManifest > { var deferred : q . Deferred < PackageManifest > = q . defer < PackageManifest > ( ) ; var reject = ( error ) => { if ( deferred . promise . isPending ( ) ) { deferred . reject ( error ) ; } } var resolve = ( manifest ) => { if ( deferred . promise . isPending ( ) ) { deferred . resolve ( manifest ) ; } } var zipFile ; yauzl . open ( filePath , { lazyEntries : true } , ( error ? , openedZipFile ? ) : void => { if ( error ) { resolve ( null ) ; return ; } zipFile = openedZipFile ; var fileHashesMap = new Map < string , string > ( ) ; var hashFilePromises : q . Promise < void > [ ] = [ ] ; zipFile . readEntry ( ) ; zipFile . on ( "s" , ( error ) : void => { reject ( error ) ; } ) . on ( "s" , ( entry ) : void => { var fileName = PackageManifest . normalizePath ( entry . fileName ) ; if ( PackageManifest . isIgnored ( fileName ) ) { zipFile . readEntry ( ) ; return ; } zipFile . openReadStream ( entry , ( error ? , readStream ? : stream . Readable ) : void => { if ( error ) { reject ( error ) ; return ; } hashFilePromises . push ( hashStream ( readStream ) . then ( ( hash ) => { fileHashesMap . set ( fileName , hash ) ; zipFile . readEntry ( ) ; } , reject ) ) ; } ) ; } ) . on ( "s" , ( ) : void => { q . all ( hashFilePromises ) . then ( ( ) => resolve ( new PackageManifest ( fileHashesMap ) ) , reject ) ; } ) ; } ) ; return deferred . promise . finally ( ( ) => zipFile && zipFile . close ( ) ) ; } export function generatePackageManifestFromDirectory ( directoryPath , basePath ) < PackageManifest > { var deferred : q . Deferred < PackageManifest > = q . defer < PackageManifest > ( ) ; var fileHashesMap = new Map < string , string > ( ) ; recursiveFs . readdirr ( directoryPath , ( error ? , directories ? : string [ ] , files ? : string [ ] ) : void => { if ( error ) { deferred . reject ( error ) ; return ; } if ( ! files || files . length === 0 ) { deferred . reject ( "s" ) ; return ; } var generateManifestPromise < void > = files . reduce ( ( soFar < void > , filePath ) => { return soFar . then ( ( ) => { var relativePath = PackageManifest . normalizePath ( path . relative ( basePath , filePath ) ) ; if ( ! PackageManifest . isIgnored ( relativePath ) ) { return hashFile ( filePath ) . then ( ( hash ) => { fileHashesMap . set ( relativePath , hash ) ; } ) ; } } ) ; } , q ( < void > null ) ) ; generateManifestPromise . then ( ( ) => { deferred . resolve ( new PackageManifest ( fileHashesMap ) ) ; } , deferred . reject ) . done ( ) ; } ) ; return deferred . promise ; } export function hashFile ( filePath ) < string > { var readStream : fs . ReadStream = fs . createReadStream ( filePath ) ; return hashStream ( readStream ) ; } export function hashStream ( readStream : stream . Readable ) < string > { var hashStream = < stream . Transform > < any > crypto . createHash ( HASH_ALGORITHM ) ; var deferred : q . Deferred < string > = q . defer < string > ( ) ; readStream . on ( "s" , ( error ) : void => { if ( deferred . promise . isPending ( ) ) { hashStream . end ( ) ; deferred . reject ( error ) ; } } ) . on ( "s" , ( ) : void => { if ( deferred . promise . isPending ( ) ) { hashStream . end ( ) ; var buffer = < Buffer > hashStream . read ( ) ; var hash = buffer . toString ( "s" ) ; deferred . resolve ( hash ) ; } } ) ; readStream . pipe ( hashStream ) ; return deferred . promise ; } export class PackageManifest { private _map : Map < string , string > ; public constructor ( map ? < string , string > ) { if ( ! map ) { map = new Map < string , string > ( ) ; } this . _map = map ; } public toMap ( ) < string , string > { return this . _map ; } public computePackageHash ( ) < string > { var entries : string [ ] = [ ] ; this . _map . forEach ( ( hash , name ) : void => { entries . push ( name + "s" + hash ) ; } ) ; entries = entries . sort ( ) ; return q ( crypto . createHash ( HASH_ALGORITHM ) . update ( JSON . stringify ( entries ) ) . digest ( "s" ) ) ; } public serialize ( ) { var obj = { } ; this . _map . forEach ( function ( value , key ) { obj [ key ] = value ; } ) ; return JSON . stringify ( obj ) ; } public static deserialize ( serializedContents ) { try { var obj = JSON . parse ( serializedContents ) ; var map = new Map < string , string > ( ) ; for ( var key of Object . keys ( obj ) ) { map . set ( key , obj [ key ] ) ; } return new PackageManifest ( map ) ; } catch ( e ) { } } public static normalizePath ( filePath ) { return filePath . replace ( "s" , "s" ) ; } public static isIgnored ( relativeFilePath ) { const __MACOSX = "s" ; const DS_STORE = "s" ; const CODEPUSH_METADATA = "s" ; return startsWith ( relativeFilePath , __MACOSX ) || relativeFilePath === DS_STORE || endsWith ( relativeFilePath , "s" + DS_STORE ) || relativeFilePath === CODEPUSH_METADATA || endsWith ( relativeFilePath , "s" + CODEPUSH_METADATA ) ; } } function startsWith ( str , prefix ) { return str && str . substring ( 0 , prefix . length ) === prefix ; } function endsWith ( str , suffix ) { return str && str . indexOf ( suffix , str . length - suffix . length ) !== - 0 ; }	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O O $any$ O O O O $any$ O $any$ O $any$ O O O O O O O O $Promise$ O $string$ O $string$ O O O O O O O O $any$ O $any$ O $string$ O O $any$ O O O O O O $ErrorConstructor$ O O O O O O $any$ O $string$ O $string$ O O $any$ O O $PackageManifest$ O O O O $PackageManifest$ O $any$ O O O O O O O O $Promise$ O $string$ O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O $void$ O O $Error$ O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $Error$ O O O O O $void$ O O $PackageManifest$ O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $PackageManifest$ O O O O O $any$ O $any$ O $any$ O $string$ O O $boolean$ O O O O O $any$ $any$ O $any$ $any$ O O O O O O O $any$ O O $void$ O O O O O O O $any$ O $any$ O O $complex$ O O $MapConstructor$ O O O O O O O O O $any[]$ O $any$ O $any$ O O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O O O O O $void$ O $any$ O O O O O $any$ O O O O $any$ O O O O O O $string$ O $any$ O $string$ O $any$ O $any$ O O O O $any$ O $boolean$ O $string$ O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O $any$ $any$ O $any$ O O $any$ O $any$ O O O O O O O $any$ O O $void$ O $any$ O O O O O $any[]$ O $number$ O $any$ O $any$ O O $any$ O O $string$ O O O $complex$ O $complex$ O $string$ O $string$ O O $any$ O $any$ O O O O O $void$ O O O O O O O O O $any$ O O O O O O O O O $any$ O $any$ O $any[]$ O O $any$ O O O O $void$ O O $any$ O $complex$ O O O $void$ O O O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O O O $Promise$ O $string$ O $string$ O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O $complex$ O O $MapConstructor$ O O O O O O O O $any$ O $any$ O $string$ O O $any$ $any$ O $string[]$ O O O O O O $string[]$ O O O O O O O O O O O O $any$ O O $any$ O $any$ O $any$ O O O O O O O O $string[]$ O $string[]$ O $number$ O O O O $any$ O $any$ O O O O O O O O $Promise$ O O O O $string[]$ O $complex$ O O $Promise$ O O O O $string$ O O O O $any$ O $any$ O O O O O O $string$ O $any$ O $string$ O $any$ O $any$ O $string$ O $string$ O O O O O O $any$ O $boolean$ O $string$ O O O O $any$ O $string$ O O $any$ O O $string$ O O O $complex$ O $complex$ O $string$ O $string$ O O O O O O O O O O O $any$ O O O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O $any$ O $complex$ O O O O O $any$ O $any$ O O $any$ O O O O O O O $any$ O $any$ O O O O $Promise$ O $string$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $string$ O O O $any$ O $any$ O O O O O $Promise$ O $any$ O $any$ O $any$ O O O O O O $any$ O O $any$ O $any$ O O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O O $any$ O $any$ O $any$ O O O O $string$ O $any$ O $any$ O O O O $any$ O $any$ O $string$ O O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O O $complex$ O $MapConstructor$ O O O O O O O O O $complex$ $Map$ O O O O O O O O O O $complex$ O O $complex$ O O $MapConstructor$ O O O O O O O O O O O $complex$ O $complex$ O O O $Map$ O O O O O O O O O O O $complex$ O O O $Promise$ O O O O O O O $string[]$ O O O O O O O O O O $complex$ O $void$ O O $string$ O $string$ O O O O O $string[]$ O $number$ O $string$ O O O $string$ O O O O O $string[]$ O $string[]$ O $string[]$ O O O O $any$ O $any$ O $any$ O O O O $any$ O $JSON$ O $complex$ O $string[]$ O O O $any$ O O O O O O O $string$ O O O O $any$ O O O O O O $complex$ O $void$ O O O $string$ O $string$ O O $any$ O $string$ O O $string$ O O O O O $JSON$ O $complex$ O $any$ O O O O O $PackageManifest$ O $string$ O O O O O $any$ O $JSON$ O $any$ O $string$ O O O $complex$ O O $MapConstructor$ O O O O O O O O O O O $string$ O $ObjectConstructor$ O $complex$ O $any$ O O O $complex$ O $complex$ O $string$ O $any$ O $string$ O O O O O O $any$ O $complex$ O O O O O $any$ O O O O O O $string$ O $string$ O O O $string$ O $complex$ O O O O O O O O O $boolean$ O $string$ O O O O O O O O O O O O O O O O O O $boolean$ O $string$ O O O O $string$ O O O $boolean$ O $string$ O O O O O O $string$ O O O $boolean$ O $string$ O O O O O O O O O $boolean$ O $string$ O $string$ O O O $string$ O $string$ O $string$ O O O $string$ O $number$ O O $string$ O O O $boolean$ O $string$ O $string$ O O O $string$ O $string$ O $number$ O $string$ O $string$ O $number$ O $string$ O $number$ O O O O O O
import * as fs from "s" ; import * as path from "s" ; import * as recursiveFs from "s" ; import slash = require ( "s" ) ; import * as Q from "s" ; import Promise = Q . Promise ; import * as yazl from "s" ; var progress = require ( "s" ) ; import AccountManager = require ( "s" ) ; import { Package , PackageInfo } from "s" ; import { CommonUtils } from "s" ; var log = CommonUtils . log ; import * as cli from "s" ; import ReleaseFile = cli . ReleaseFile ; var coreReleaseHook : cli . ReleaseHook = ( currentCommand : cli . IReleaseCommand , originalCommand : cli . IReleaseCommand , sdk ) : Promise < cli . IReleaseCommand > => { return Q ( < void > null ) . then ( ( ) => { var releaseFiles : ReleaseFile [ ] = [ ] ; if ( ! fs . lstatSync ( currentCommand . package ) . isDirectory ( ) ) { releaseFiles . push ( { sourceLocation : currentCommand . package , targetLocation : path . basename ( currentCommand . package ) } ) ; return Q ( releaseFiles ) ; } var deferred = Q . defer < ReleaseFile [ ] > ( ) ; var directoryPath = currentCommand . package ; var baseDirectoryPath = path . join ( directoryPath , "s" ) ; recursiveFs . readdirr ( currentCommand . package , ( error ? , directories ? : string [ ] , files ? : string [ ] ) : void => { if ( error ) { deferred . reject ( error ) ; return ; } files . forEach ( ( filePath ) => { var relativePath = path . relative ( baseDirectoryPath , filePath ) ; relativePath = slash ( relativePath ) ; releaseFiles . push ( { sourceLocation : filePath , targetLocation : relativePath } ) ; } ) ; deferred . resolve ( releaseFiles ) ; } ) ; return deferred . promise ; } ) . then ( ( releaseFiles : ReleaseFile [ ] ) => { return Promise < string > ( ( resolve : ( file ) => void , reject : ( reason ) => void ) : void => { var packagePath = path . join ( process . cwd ( ) , CommonUtils . generateRandomFilename ( 0 ) + "s" ) ; var zipFile = new yazl . ZipFile ( ) ; var writeStream : fs . WriteStream = fs . createWriteStream ( packagePath ) ; zipFile . outputStream . pipe ( writeStream ) . on ( "s" , ( error ) : void => { reject ( error ) ; } ) . on ( "s" , ( ) : void => { resolve ( packagePath ) ; } ) ; releaseFiles . forEach ( ( releaseFile ) => { zipFile . addFile ( releaseFile . sourceLocation , releaseFile . targetLocation ) ; } ) ; zipFile . end ( ) ; } ) ; } ) . then ( ( packagePath ) : Promise < cli . IReleaseCommand > => { var lastTotalProgress = 0 ; var progressBar = new progress ( "s" , { complete : "s" , incomplete : "s" , width : 0 , total : 0 } ) ; var uploadProgress = ( currentProgress ) : void => { progressBar . tick ( currentProgress - lastTotalProgress ) ; lastTotalProgress = currentProgress ; } ; var updateMetadata = { description : currentCommand . description , isDisabled : currentCommand . disabled , isMandatory : currentCommand . mandatory , rollout : currentCommand . rollout } ; return sdk . isAuthenticated ( true ) . then ( ( isAuth ) : Promise < Package > => { return sdk . release ( currentCommand . appName , currentCommand . deploymentName , packagePath , currentCommand . appStoreVersion , updateMetadata , uploadProgress ) ; } ) . then ( ( ) : void => { log ( `template` + `template` + `template` ) ; } ) . then ( ( ) => currentCommand ) . finally ( ( ) => { fs . unlinkSync ( packagePath ) ; } ) ; } ) ; } export = coreReleaseHook ;	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $string$ O O O O O O O O O $any$ O O O O $any$ O $any$ O $any$ O O O O $any$ O O O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O $void$ O $any$ O $void$ O O O O $any$ O O O O $any$ O $any$ O $any$ O O $ReleaseHook$ O $any$ O $any$ O O $IReleaseCommand$ O $any$ O $any$ O $IReleaseCommand$ O $any$ O $any$ O $AccountManager$ O O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O $any$ O O O O O O $ReleaseFile[]$ O $any$ O O O O O O O O O $any$ O $any$ O $IReleaseCommand$ O $string$ O O $any$ O O O O $ReleaseFile[]$ O $number$ O O $string$ O $IReleaseCommand$ O $string$ O $any$ O $any$ O $any$ O $IReleaseCommand$ O $string$ O O O O O $any$ O $ReleaseFile[]$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O $string$ O $IReleaseCommand$ O $string$ O O $any$ O $any$ O $any$ O $string$ O O O O $any$ O $complex$ O $IReleaseCommand$ O $string$ O O $any$ $any$ O $string[]$ O O O O O O $string[]$ O O O O O O O O O O O O $any$ O O $any$ O $any$ O $any$ O O O O O $string[]$ O $void$ O O $string$ O O O O $string$ O $any$ O $any$ O $any$ O $string$ O O $string$ O $string$ O $string$ O O $ReleaseFile[]$ O $number$ O O $string$ O $string$ O $string$ O $string$ O O O O O O $any$ O $any$ O $ReleaseFile[]$ O O O O O O $any$ O $any$ O O O O $any$ O O $ReleaseFile[]$ O $any$ O O O O O O $any$ O O O O O $void$ O O $string$ O O O O $void$ O O $Error$ O O O O O O O O O $string$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $string$ O O O O O O O O $ZipFile$ O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $string$ O O $ZipFile$ O $any$ O $any$ O $any$ O O $any$ O O O O $Error$ O O O O O $void$ O $Error$ O O O O O $any$ O O O O O O O O O $void$ O $string$ O O O O O $ReleaseFile[]$ O $void$ O O $ReleaseFile$ O O O $ZipFile$ O $void$ O $ReleaseFile$ O $string$ O $ReleaseFile$ O $string$ O O O O O $ZipFile$ O $void$ O O O O O O O O O $any$ O O $string$ O O $any$ O $any$ O $any$ O O O O $number$ O O O O $any$ O O $any$ O O O O $string$ O O O $string$ O O O $number$ O O O $number$ O O O O O O $void$ O O $number$ O O O O O $any$ O $any$ O $number$ O $number$ O O $number$ O $number$ O O O O $PackageInfo$ O O $string$ O $IReleaseCommand$ O $string$ O $boolean$ O $IReleaseCommand$ O $boolean$ O $boolean$ O $IReleaseCommand$ O $boolean$ O $number$ O $IReleaseCommand$ O $number$ O O O $any$ O $any$ O O O O $any$ O O $boolean$ O O $any$ O $any$ O O O O $any$ O $any$ O $IReleaseCommand$ O $string$ O $IReleaseCommand$ O $string$ O $string$ O $IReleaseCommand$ O $string$ O $any$ O $void$ O O O O O $any$ O O O O O O O $void$ O O O O O O O O O O O $any$ O O O O $IReleaseCommand$ O O $any$ O O O O O $any$ O $any$ O $string$ O O O O O O O O O O O $ReleaseHook$ O
import * as cli from "s" ; import * as crypto from "s" ; import * as fs from "s" ; import * as hashUtils from "s" ; import * as jwt from "s" ; import * as os from "s" ; import * as path from "s" ; import * as q from "s" ; var rimraf = require ( "s" ) ; import AccountManager = require ( "s" ) ; var CURRENT_CLAIM_VERSION = "s" ; var METADATA_FILE_NAME = "s" ; interface CodeSigningClaims { claimVersion : string ; contentHash : string ; } const deletePreviousSignatureIfExists = ( package ) : q . Promise < any > => { let signatureFilePath = path . join ( package , METADATA_FILE_NAME ) ; let prevSignatureExists = true ; try { fs . accessSync ( signatureFilePath , fs . R_OK ) ; } catch ( err ) { if ( err . code === "s" ) { prevSignatureExists = false ; } else { return q . reject ( new Error ( `template` ) ) ; } } if ( prevSignatureExists ) { console . log ( `template` ) ; rimraf . sync ( signatureFilePath ) ; } return q . resolve ( < void > null ) ; } var sign : cli . ReleaseHook = ( currentCommand : cli . IReleaseCommand , originalCommand : cli . IReleaseCommand , sdk ) : q . Promise < cli . IReleaseCommand > => { if ( ! currentCommand . privateKeyPath ) { if ( fs . lstatSync ( currentCommand . package ) . isDirectory ( ) ) { return deletePreviousSignatureIfExists ( currentCommand . package ) . then ( ( ) => { return q . resolve < cli . IReleaseCommand > ( currentCommand ) ; } ) ; } else { return q . resolve < cli . IReleaseCommand > ( currentCommand ) ; } } let privateKey ; let signatureFilePath ; return q ( < void > null ) . then ( ( ) => { signatureFilePath = path . join ( currentCommand . package , METADATA_FILE_NAME ) ; try { privateKey = fs . readFileSync ( currentCommand . privateKeyPath ) ; } catch ( err ) { return q . reject ( new Error ( `template` ) ) ; } if ( ! fs . lstatSync ( currentCommand . package ) . isDirectory ( ) ) { var outputFolderPath = path . join ( os . tmpdir ( ) , "s" ) ; rimraf . sync ( outputFolderPath ) ; fs . mkdirSync ( outputFolderPath ) ; var outputFilePath = path . join ( outputFolderPath , path . basename ( currentCommand . package ) ) ; fs . writeFileSync ( outputFilePath , fs . readFileSync ( currentCommand . package ) ) ; currentCommand . package = outputFolderPath ; } return deletePreviousSignatureIfExists ( currentCommand . package ) ; } ) . then ( ( ) => { return hashUtils . generatePackageHashFromDirectory ( currentCommand . package , path . join ( currentCommand . package , "s" ) ) ; } ) . then ( ( hash ) => { var claims = { claimVersion : CURRENT_CLAIM_VERSION , contentHash : hash } ; return q . nfcall < string > ( jwt . sign , claims , privateKey , { algorithm : "s" } ) . catch ( ( err ) => { return q . reject < string > ( new Error ( "s" ) ) ; } ) ; } ) . then ( ( signedJwt ) => { var deferred = q . defer < void > ( ) ; fs . writeFile ( signatureFilePath , signedJwt , ( err ) => { if ( err ) { deferred . reject ( err ) ; } else { console . log ( `template` ) ; deferred . resolve ( < void > null ) ; } } ) ; return deferred . promise ; } ) . then ( ( ) => { return currentCommand ; } ) . catch ( ( err ) => { err . message = `template` ; return q . reject < cli . IReleaseCommand > ( err ) ; } ) ; } export = sign ;	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $any$ O $any$ O O O O O $any$ O O O O O O O $string$ O O O O $string$ O O O O $any$ O $string$ O O O $string$ O O O O O $any$ O O $string$ O O $any$ O $any$ O O O O O O $string$ O $any$ O $any$ O $string$ O $string$ O O O $boolean$ O O O O O $any$ O $any$ O $string$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O O $boolean$ O O O O O O O $any$ O $any$ O O $ErrorConstructor$ O O O O O O O O O $boolean$ O O $Console$ O $void$ O O O O $any$ O $any$ O $string$ O O O O $any$ O $any$ O O O O O O O O O $ReleaseHook$ O $any$ O $any$ O O $IReleaseCommand$ O $any$ O $any$ O $IReleaseCommand$ O $any$ O $any$ O $AccountManager$ O O $any$ O $any$ O $any$ O $any$ O O O O O O $IReleaseCommand$ O $string$ O O O O $any$ O $any$ O $IReleaseCommand$ O $string$ O O $any$ O O O O O $any$ O $IReleaseCommand$ O $string$ O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O $IReleaseCommand$ O O O O O O O O O $any$ O $any$ O $any$ O $any$ O O $IReleaseCommand$ O O O O O $Buffer$ O O $string$ O O $any$ O O O O O O O $any$ O O O O O $string$ O $any$ O $any$ O $IReleaseCommand$ O $string$ O $string$ O O O O $any$ O $any$ O $any$ O $IReleaseCommand$ O $string$ O O O O O $any$ O O O $any$ O $any$ O O $ErrorConstructor$ O O O O O O O O O $any$ O $any$ O $IReleaseCommand$ O $string$ O O $any$ O O O O O $string$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $string$ O O $any$ O $any$ O $string$ O O O $string$ O $any$ O $any$ O $string$ O $any$ O $any$ O $IReleaseCommand$ O $string$ O O O $any$ O $any$ O $string$ O $any$ O $any$ O $IReleaseCommand$ O $string$ O O O $IReleaseCommand$ O $string$ O $string$ O O O $any$ O $IReleaseCommand$ O $string$ O O O O O $any$ O O O O O O $any$ O $any$ O $IReleaseCommand$ O $string$ O $any$ O $any$ O $IReleaseCommand$ O $string$ O O O O O O O O $any$ O O $string$ O O O O $CodeSigningClaims$ O O $string$ O $string$ O $string$ O $string$ O O O $any$ O $any$ O O O O $any$ O $any$ O $CodeSigningClaims$ O $any$ O O $string$ O O O O O $any$ O O $Error$ O O O O $any$ O $any$ O O O O O $ErrorConstructor$ O O O O O O O O O O O $any$ O O $string$ O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $string$ O $string$ O O $Error$ O O O O O $Error$ O O $any$ O $any$ O $Error$ O O O O O $Console$ O $void$ O O O O $any$ O $any$ O O O O O O O O O O O O $any$ O $any$ O O O O $any$ O O O O O O $IReleaseCommand$ O O O O $any$ O O $Error$ O O O $Error$ O $string$ O O O O $any$ O $any$ O $any$ O $any$ O O $Error$ O O O O O O O O $ReleaseHook$ O
import * as assert from "s" ; import * as sinon from "s" ; import Q = require ( "s" ) ; import * as path from "s" ; import Promise = Q . Promise ; import * as codePush from "s" ; import * as cli from "s" ; import * as cmdexec from "s" ; import * as os from "s" ; function assertJsonDescribesObject ( json , object ) { assert . equal ( json , JSON . stringify ( object , null , 0 ) ) ; } function clone < T > ( obj : T ) : T { return JSON . parse ( JSON . stringify ( obj ) ) ; } function ensureInTestAppDirectory ( ) { if ( ! ~ __dirname . indexOf ( "s" ) ) { process . chdir ( __dirname + "s" ) ; } } function isDefined ( object ) { return object !== undefined && object !== null ; } const NOW = 0 ; const DEFAULT_ACCESS_KEY_MAX_AGE = 0 * 0 * 0 * 0 * 0 ; const TEST_MACHINE_NAME = "s" ; export class SdkStub { private productionDeployment : codePush . Deployment = { name : "s" , key : "s" } ; private stagingDeployment : codePush . Deployment = { name : "s" , key : "s" , package : { appVersion : "s" , description : "s" , label : "s" , packageHash : "s" , isMandatory : true , size : 0 , blobUrl : "s" , uploadTime : 0 } } ; public getAccountInfo ( ) < codePush . Account > { return Q ( < codePush . Account > { email : "s" } ) ; } public addAccessKey ( name , ttl ) < codePush . AccessKey > { return Q ( < codePush . AccessKey > { key : "s" , createdTime : new Date ( ) . getTime ( ) , name , expires : NOW + ( isDefined ( ttl ) ? ttl : DEFAULT_ACCESS_KEY_MAX_AGE ) } ) ; } public patchAccessKey ( oldName , newName ? , newTtl ? ) < codePush . AccessKey > { return Q ( < codePush . AccessKey > { createdTime : new Date ( ) . getTime ( ) , name : newName , expires : NOW + ( isDefined ( newTtl ) ? newTtl : DEFAULT_ACCESS_KEY_MAX_AGE ) } ) ; } public addApp ( name , os , platform , manuallyProvisionDeployments = false ) < codePush . App > { return Q ( < codePush . App > { name : name , os : os , platform : platform , manuallyProvisionDeployments : manuallyProvisionDeployments } ) ; } public addCollaborator ( name , email ) < void > { return Q ( < void > null ) ; } public addDeployment ( appName , deploymentName ) < codePush . Deployment > { return Q ( < codePush . Deployment > { name : deploymentName , key : "s" } ) ; } public clearDeploymentHistory ( appName , deploymentName ) < void > { return Q ( < void > null ) ; } public getAccessKeys ( ) < codePush . AccessKey [ ] > { return Q ( [ < codePush . AccessKey > { createdTime : 0 , name : "s" , expires : NOW + DEFAULT_ACCESS_KEY_MAX_AGE } ] ) ; } public getSessions ( ) < codePush . Session [ ] > { return Q ( [ < codePush . Session > { loggedInTime : 0 , machineName : TEST_MACHINE_NAME } ] ) ; } public getApps ( ) < codePush . App [ ] > { return Q ( [ < codePush . App > { name : "s" , collaborators : { "s" : { permission : "s" , isCurrentAccount : true } } , deployments : [ "s" , "s" ] } , < codePush . App > { name : "s" , collaborators : { "s" : { permission : "s" , isCurrentAccount : true } } , deployments : [ "s" , "s" ] } ] ) ; } public getDeployments ( appName ) < codePush . Deployment [ ] > { if ( appName === "s" ) { return Q ( [ this . productionDeployment , this . stagingDeployment ] ) ; } return Q . reject < codePush . Deployment [ ] > ( ) ; } public getDeployment ( appName , deploymentName ) < codePush . Deployment > { if ( appName === "s" ) { if ( deploymentName === "s" ) { return Q ( this . productionDeployment ) ; } else if ( deploymentName === "s" ) { return Q ( this . stagingDeployment ) ; } } return Q . reject < codePush . Deployment > ( ) ; } public getDeploymentHistory ( appName , deploymentName ) < codePush . Package [ ] > { return Q ( [ < codePush . Package > { description : null , appVersion : "s" , isMandatory : false , packageHash : "s" , blobUrl : "s" , uploadTime : 0 , size : 0 , label : "s" } , < codePush . Package > { description : "s" , appVersion : "s" , isMandatory : false , packageHash : "s" , blobUrl : "s" , uploadTime : 0 , size : 0 , label : "s" } ] ) ; } public getDeploymentMetrics ( appName , deploymentName ) < any > { return Q ( { "s" : { active : 0 } , "s" : { active : 0 , downloaded : 0 , failed : 0 , installed : 0 } , "s" : { active : 0 , downloaded : 0 , failed : 0 , installed : 0 } } ) ; } public getCollaborators ( app : codePush . App ) < any > { return Q ( { "s" : { permission : "s" , isCurrentAccount : true } , "s" : { permission : "s" , isCurrentAccount : false } } ) ; } public patchRelease ( appName , deployment , label , updateMetaData : codePush . PackageInfo ) < void > { return Q ( < void > null ) ; } public promote ( appName , sourceDeployment , destinationDeployment , updateMetaData : codePush . PackageInfo ) < void > { return Q ( < void > null ) ; } public release ( appName , deploymentName ) < string > { return Q ( "s" ) ; } public removeAccessKey ( accessKeyId ) < void > { return Q ( < void > null ) ; } public removeApp ( appName ) < void > { return Q ( < void > null ) ; } public removeCollaborator ( name , email ) < void > { return Q ( < void > null ) ; } public removeDeployment ( appName , deploymentName ) < void > { return Q ( < void > null ) ; } public removeSession ( createdBy ) < void > { return Q ( < void > null ) ; } public renameApp ( app : codePush . App ) < void > { return Q ( < void > null ) ; } public rollback ( appName , deployment , targetRelease ) < void > { return Q ( < void > null ) ; } public transferApp ( app : codePush . App ) < void > { return Q ( < void > null ) ; } public renameDeployment ( appName , deploymentName : codePush . Deployment ) < void > { return Q ( < void > null ) ; } } describe ( "s" , ( ) => { var log : Sinon . SinonStub ; var sandbox : Sinon . SinonSandbox ; var spawn : Sinon . SinonStub ; var wasConfirmed = true ; const INVALID_RELEASE_FILE_ERROR_MESSAGE = "s" ; beforeEach ( ( ) : void => { wasConfirmed = true ; sandbox = sinon . sandbox . create ( ) ; sandbox . stub ( cmdexec , "s" , ( ) : Promise < boolean > => Q ( wasConfirmed ) ) ; sandbox . stub ( cmdexec , "s" , ( ) : Promise < void > => Q ( < void > null ) ) ; log = sandbox . stub ( cmdexec , "s" , ( message ) : void => { } ) ; spawn = sandbox . stub ( cmdexec , "s" , ( command , commandArgs : string [ ] ) : any => { return { stdout : { on : ( ) => { } } , stderr : { on : ( ) => { } } , on : ( event , callback : ( ) => void ) => { callback ( ) ; } } ; } ) ; cmdexec . sdk = < any > new SdkStub ( ) ; } ) ; afterEach ( ( ) : void => { sandbox . restore ( ) ; } ) ; it ( "s" , ( done ) : void => { var command : cli . IAccessKeyAddCommand = { type : cli . CommandType . accessKeyAdd , name : "s" } ; cmdexec . execute ( command ) . done ( ( ) : void => { sinon . assert . calledTwice ( log ) ; assert . equal ( log . args [ 0 ] . length , 0 ) ; var actual = log . args [ 0 ] [ 0 ] ; var expected = `template` ; assert . equal ( actual , expected ) ; actual = log . args [ 0 ] [ 0 ] ; expected = "s" ; assert . equal ( actual , expected ) ; done ( ) ; } ) ; } ) ; it ( "s" , ( done ) : void => { var ttl = 0 ; var command : cli . IAccessKeyAddCommand = { type : cli . CommandType . accessKeyAdd , name : "s" , ttl } ; cmdexec . execute ( command ) . done ( ( ) : void => { sinon . assert . calledTwice ( log ) ; assert . equal ( log . args [ 0 ] . length , 0 ) ; var actual = log . args [ 0 ] [ 0 ] ; var expected = `template` ; assert . equal ( actual , expected ) ; actual = log . args [ 0 ] [ 0 ] ; expected = "s" ; assert . equal ( actual , expected ) ; done ( ) ; } ) ; } ) ; it ( "s" , ( done ) : void => { var command : cli . IAccessKeyPatchCommand = { type : cli . CommandType . accessKeyPatch , oldName : "s" , newName : "s" } ; cmdexec . execute ( command ) . done ( ( ) : void => { sinon . assert . calledOnce ( log ) ; assert . equal ( log . args [ 0 ] . length , 0 ) ; var actual = log . args [ 0 ] [ 0 ] ; var expected = `template` ; assert . equal ( actual , expected ) ; done ( ) ; } ) ; } ) ; it ( "s" , ( done ) : void => { var command : cli . IAccessKeyListCommand = { type : cli . CommandType . accessKeyList , format : "s" } ; cmdexec . execute ( command ) . done ( ( ) : void => { sinon . assert . calledOnce ( log ) ; assert . equal ( log . args [ 0 ] . length , 0 ) ; var actual = log . args [ 0 ] [ 0 ] ; var expected = [ { createdTime : 0 , name : "s" , expires : NOW + DEFAULT_ACCESS_KEY_MAX_AGE } ] ; assertJsonDescribesObject ( actual , expected ) ; done ( ) ; } ) ; } ) ; it ( "s" , ( done ) : void => { var command : cli . IAccessKeyRemoveCommand = { type : cli . CommandType . accessKeyRemove , accessKey : "s" } ; var removeAccessKey : Sinon . SinonSpy = sandbox . spy ( cmdexec . sdk , "s" ) ; cmdexec . execute ( command ) . done ( ( ) : void => { sinon . assert . calledOnce ( removeAccessKey ) ; sinon . assert . calledWithExactly ( removeAccessKey , "s" ) ; sinon . assert . calledOnce ( log ) ; sinon . assert . calledWithExactly ( log , "s" ) ; done ( ) ; } ) ; } ) ; it ( "s" , ( done ) : void => { var command : cli . IAccessKeyRemoveCommand = { type : cli . CommandType . accessKeyRemove , accessKey : "s" } ; var removeAccessKey : Sinon . SinonSpy = sandbox . spy ( cmdexec . sdk , "s" ) ; wasConfirmed = false ; cmdexec . execute ( command ) . done ( ( ) : void => { sinon . assert . notCalled ( removeAccessKey ) ; sinon . assert . calledOnce ( log ) ; sinon . assert . calledWithExactly ( log , "s" ) ; done ( ) ; } ) ; } ) ; it ( "s" , ( done ) : void => { var command : cli . IAppAddCommand = { type : cli . CommandType . appAdd , appName : "s" , os : "s" , platform : "s" } ; var addApp : Sinon . SinonSpy = sandbox . spy ( cmdexec . sdk , "s" ) ; var deploymentList : Sinon . SinonSpy = sandbox . spy ( cmdexec , "s" ) ; cmdexec . execute ( command ) . done ( ( ) : void => { sinon . assert . calledOnce ( addApp ) ; sinon . assert . calledTwice ( log ) ; sinon . assert . calledWithExactly ( log , "s" ) ; sinon . assert . calledOnce ( deploymentList ) ; done ( ) ; } ) ; } ) ; it ( "s" , ( done ) : void => { var command : cli . IAppListCommand = { type : cli . CommandType . appList , format : "s" } ; cmdexec . execute ( command ) . done ( ( ) : void => { sinon . assert . calledOnce ( log ) ; assert . equal ( log . args [ 0 ] . length , 0 ) ; var actual = log . args [ 0 ] [ 0 ] ; var expected = [ { name : "s" , collaborators : { "s" : { permission : "s" , isCurrentAccount : true } } , deployments : [ "s" , "s" ] } , { name : "s" , collaborators : { "s" : { permission : "s" , isCurrentAccount : true } } , deployments : [ "s" , "s" ] } ] ; assertJsonDescribesObject ( actual , expected ) ; done ( ) ; } ) ; } ) ; it ( "s" , ( done ) : void => { var command : cli . IAppRemoveCommand = { type : cli . CommandType . appRemove , appName : "s" } ; var removeApp : Sinon . SinonSpy = sandbox . spy ( cmdexec . sdk , "s" ) ; cmdexec . execute ( command ) . done ( ( ) : void => { sinon . assert . calledOnce ( removeApp ) ; sinon . assert . calledWithExactly ( removeApp , "s" ) ; sinon . assert . calledOnce ( log ) ; sinon . assert . calledWithExactly ( log , "s" ) ; done ( ) ; } ) ; } ) ; it ( "s" , ( done ) : void => { var command : cli . IAppRemoveCommand = { type : cli . CommandType . appRemove , appName : "s" } ; var removeApp : Sinon . SinonSpy = sandbox . spy ( cmdexec . sdk , "s" ) ; wasConfirmed = false ; cmdexec . execute ( command ) . done ( ( ) : void => { sinon . assert . notCalled ( removeApp ) ; sinon . assert . calledOnce ( log ) ; sinon . assert . calledWithExactly ( log , "s" ) ; done ( ) ; } ) ; } ) ; it ( "s" , ( done ) : void => { var command : cli . IAppRenameCommand = { type : cli . CommandType . appRename , currentAppName : "s" , newAppName : "s" } ; var renameApp : Sinon . SinonSpy = sandbox . spy ( cmdexec . sdk , "s" ) ; cmdexec . execute ( command ) . done ( ( ) : void => { sinon . assert . calledOnce ( renameApp ) ; sinon . assert . calledOnce ( log ) ; sinon . assert . calledWithExactly ( log , "s" ) ; done ( ) ; } ) ; } ) ; it ( "s" , ( done ) : void => { var command : cli . IAppTransferCommand = { type : cli . CommandType . appTransfer , appName : "s" , email : "s" } ; var transferApp : Sinon . SinonSpy = sandbox . spy ( cmdexec . sdk , "s" ) ; cmdexec . execute ( command ) . done ( ( ) : void => { sinon . assert . calledOnce ( transferApp ) ; sinon . assert . calledOnce ( log ) ; sinon . assert . calledWithExactly ( log , "s" ) ; done ( ) ; } ) ; } ) ; it ( "s" , ( done ) : void => { var command : cli . ICollaboratorAddCommand = { type : cli . CommandType . collaboratorAdd , appName : "s" , email : "s" } ; var addCollaborator : Sinon . SinonSpy = sandbox . spy ( cmdexec . sdk , "s" ) ; cmdexec . execute ( command ) . done ( ( ) : void => { sinon . assert . calledOnce ( addCollaborator ) ; sinon . assert . calledOnce ( log ) ; sinon . assert . calledWithExactly ( log , "s" ) ; done ( ) ; } ) ; } ) ; it ( "s" , ( done ) : void => { var command : cli . ICollaboratorListCommand = { type : cli . CommandType . collaboratorList , appName : "s" , format : "s" } ; cmdexec . execute ( command ) . done ( ( ) : void => { sinon . assert . calledOnce ( log ) ; assert . equal ( log . args [ 0 ] . length , 0 ) ; var actual = log . args [ 0 ] [ 0 ] ; var expected = { "s" : { "s" : { permission : "s" , isCurrentAccount : true } , "s" : { permission : "s" , isCurrentAccount : false } } } ; assertJsonDescribesObject ( actual , expected ) ; done ( ) ; } ) ; } ) ; it ( "s" , ( done ) : void => { var command : cli . ICollaboratorRemoveCommand = { type : cli . CommandType . collaboratorRemove , appName : "s" , email : "s" } ; var removeCollaborator : Sinon . SinonSpy = sandbox . spy ( cmdexec . sdk , "s" ) ; cmdexec . execute ( command ) . done ( ( ) : void => { sinon . assert . calledOnce ( removeCollaborator ) ; sinon . assert . calledOnce ( log ) ; sinon . assert . calledWithExactly ( log , "s" ) ; done ( ) ; } ) ; } ) ; it ( "s" , ( done ) : void => { var command : cli . IDeploymentAddCommand = { type : cli . CommandType . deploymentAdd , appName : "s" , deploymentName : "s" , default : false } ; var addDeployment : Sinon . SinonSpy = sandbox . spy ( cmdexec . sdk , "s" ) ; cmdexec . execute ( command ) . done ( ( ) : void => { sinon . assert . calledOnce ( addDeployment ) ; sinon . assert . calledOnce ( log ) ; sinon . assert . calledWithExactly ( log , "s" ) ; done ( ) ; } ) ; } ) ; it ( "s" , ( done ) : void => { var command : cli . IDeploymentHistoryClearCommand = { type : cli . CommandType . deploymentHistoryClear , appName : "s" , deploymentName : "s" } ; var clearDeployment : Sinon . SinonSpy = sandbox . spy ( cmdexec . sdk , "s" ) ; cmdexec . execute ( command ) . done ( ( ) : void => { sinon . assert . calledOnce ( clearDeployment ) ; sinon . assert . calledWithExactly ( clearDeployment , "s" , "s" ) ; sinon . assert . calledOnce ( log ) ; sinon . assert . calledWithExactly ( log , "s" ) ; done ( ) ; } ) ; } ) ; it ( "s" , ( done ) : void => { var command : cli . IDeploymentHistoryClearCommand = { type : cli . CommandType . deploymentHistoryClear , appName : "s" , deploymentName : "s" } ; var clearDeployment : Sinon . SinonSpy = sandbox . spy ( cmdexec . sdk , "s" ) ; wasConfirmed = false ; cmdexec . execute ( command ) . done ( ( ) : void => { sinon . assert . notCalled ( clearDeployment ) ; sinon . assert . calledOnce ( log ) ; sinon . assert . calledWithExactly ( log , "s" ) ; done ( ) ; } ) ; } ) ; it ( "s" , ( done ) : void => { var command : cli . IDeploymentListCommand = { type : cli . CommandType . deploymentList , appName : "s" , format : "s" , displayKeys : true } ; cmdexec . execute ( command ) . done ( ( ) : void => { sinon . assert . calledOnce ( log ) ; assert . equal ( log . args [ 0 ] . length , 0 ) ; var actual = log . args [ 0 ] [ 0 ] ; var expected = [ { name : "s" , key : "s" } , { name : "s" , key : "s" , package : { appVersion : "s" , description : "s" , label : "s" , packageHash : "s" , isMandatory : true , size : 0 , blobUrl : "s" , uploadTime : 0 , metrics : { active : 0 , downloaded : 0 , failed : 0 , installed : 0 , totalActive : 0 } } } ] ; assertJsonDescribesObject ( actual , expected ) ; done ( ) ; } ) ; } ) ; it ( "s" , ( done ) : void => { var command : cli . IDeploymentRemoveCommand = { type : cli . CommandType . deploymentRemove , appName : "s" , deploymentName : "s" } ; var removeDeployment : Sinon . SinonSpy = sandbox . spy ( cmdexec . sdk , "s" ) ; cmdexec . execute ( command ) . done ( ( ) : void => { sinon . assert . calledOnce ( removeDeployment ) ; sinon . assert . calledWithExactly ( removeDeployment , "s" , "s" ) ; sinon . assert . calledOnce ( log ) ; sinon . assert . calledWithExactly ( log , "s" ) ; done ( ) ; } ) ; } ) ; it ( "s" , ( done ) : void => { var command : cli . IDeploymentRemoveCommand = { type : cli . CommandType . deploymentRemove , appName : "s" , deploymentName : "s" } ; var removeDeployment : Sinon . SinonSpy = sandbox . spy ( cmdexec . sdk , "s" ) ; wasConfirmed = false ; cmdexec . execute ( command ) . done ( ( ) : void => { sinon . assert . notCalled ( removeDeployment ) ; sinon . assert . calledOnce ( log ) ; sinon . assert . calledWithExactly ( log , "s" ) ; done ( ) ; } ) ; } ) ; it ( "s" , ( done ) : void => { var command : cli . IDeploymentRenameCommand = { type : cli . CommandType . deploymentRename , appName : "s" , currentDeploymentName : "s" , newDeploymentName : "s" } ; var renameDeployment : Sinon . SinonSpy = sandbox . spy ( cmdexec . sdk , "s" ) ; cmdexec . execute ( command ) . done ( ( ) : void => { sinon . assert . calledOnce ( renameDeployment ) ; sinon . assert . calledOnce ( log ) ; sinon . assert . calledWithExactly ( log , "s" ) ; done ( ) ; } ) ; } ) ; it ( "s" , ( done ) : void => { var command : cli . IDeploymentHistoryCommand = { type : cli . CommandType . deploymentHistory , appName : "s" , deploymentName : "s" , format : "s" , displayAuthor : false } ; var getDeploymentHistory : Sinon . SinonSpy = sandbox . spy ( cmdexec . sdk , "s" ) ; cmdexec . execute ( command ) . done ( ( ) : void => { sinon . assert . calledOnce ( getDeploymentHistory ) ; sinon . assert . calledOnce ( log ) ; assert . equal ( log . args [ 0 ] . length , 0 ) ; var actual = log . args [ 0 ] [ 0 ] ; var expected : codePush . Package [ ] = [ { description : null , appVersion : "s" , isMandatory : false , packageHash : "s" , blobUrl : "s" , uploadTime : 0 , size : 0 , label : "s" , metrics : { active : 0 , downloaded : 0 , failed : 0 , installed : 0 , totalActive : 0 } } , { description : "s" , appVersion : "s" , isMandatory : false , packageHash : "s" , blobUrl : "s" , uploadTime : 0 , size : 0 , label : "s" , metrics : { active : 0 , downloaded : 0 , failed : 0 , installed : 0 , totalActive : 0 } } ] ; assertJsonDescribesObject ( actual , expected ) ; done ( ) ; } ) ; } ) ; it ( "s" , ( done ) : void => { var command : cli . IPatchCommand = { type : cli . CommandType . patch , appName : "s" , deploymentName : "s" , label : "s" , disabled : false , description : "s" , mandatory : true , rollout : 0 , appStoreVersion : "s" } ; var patch : Sinon . SinonSpy = sandbox . spy ( cmdexec . sdk , "s" ) ; cmdexec . execute ( command ) . done ( ( ) : void => { sinon . assert . calledOnce ( patch ) ; sinon . assert . calledOnce ( log ) ; sinon . assert . calledWithExactly ( log , `template` ) ; done ( ) ; } ) ; } ) ; it ( "s" , ( done ) : void => { var command : cli . IPatchCommand = { type : cli . CommandType . patch , appName : "s" , deploymentName : "s" , label : null , disabled : false , description : "s" , mandatory : true , rollout : 0 , appStoreVersion : "s" } ; var patch : Sinon . SinonSpy = sandbox . spy ( cmdexec . sdk , "s" ) ; cmdexec . execute ( command ) . done ( ( ) : void => { sinon . assert . calledOnce ( patch ) ; sinon . assert . calledOnce ( log ) ; sinon . assert . calledWithExactly ( log , `template` ) ; done ( ) ; } ) ; } ) ; it ( "s" , ( done ) : void => { var command : cli . IPatchCommand = { type : cli . CommandType . patch , appName : "s" , deploymentName : "s" , label : null , disabled : false , description : "s" , mandatory : true , rollout : 0 , appStoreVersion : null } ; var patch : Sinon . SinonSpy = sandbox . spy ( cmdexec . sdk , "s" ) ; cmdexec . execute ( command ) . done ( ( ) : void => { sinon . assert . calledOnce ( patch ) ; sinon . assert . calledOnce ( log ) ; sinon . assert . calledWithExactly ( log , `template` ) ; done ( ) ; } ) ; } ) ; it ( "s" , ( done ) : void => { var command : cli . IPatchCommand = { type : cli . CommandType . patch , appName : "s" , deploymentName : "s" , label : null , disabled : null , description : null , mandatory : null , rollout : null , appStoreVersion : null } ; var patch : Sinon . SinonSpy = sandbox . spy ( cmdexec . sdk , "s" ) ; cmdexec . execute ( command ) . then ( ( ) => { done ( new Error ( "s" ) ) ; } ) . catch ( ( err ) => { assert . equal ( err . message , "s" ) ; sinon . assert . notCalled ( patch ) ; done ( ) ; } ) . done ( ) ; } ) ; it ( "s" , ( done ) : void => { var command : cli . IPromoteCommand = { type : cli . CommandType . promote , appName : "s" , sourceDeploymentName : "s" , destDeploymentName : "s" , description : "s" , mandatory : true , rollout : 0 , appStoreVersion : "s" } ; var promote : Sinon . SinonSpy = sandbox . spy ( cmdexec . sdk , "s" ) ; cmdexec . execute ( command ) . done ( ( ) : void => { sinon . assert . calledOnce ( promote ) ; sinon . assert . calledOnce ( log ) ; sinon . assert . calledWithExactly ( log , `template` ) ; done ( ) ; } ) ; } ) ; it ( "s" , ( done ) : void => { var command : cli . IPromoteCommand = { type : cli . CommandType . promote , appName : "s" , sourceDeploymentName : "s" , destDeploymentName : "s" , description : "s" , mandatory : true , rollout : 0 , appStoreVersion : null } ; var promote : Sinon . SinonSpy = sandbox . spy ( cmdexec . sdk , "s" ) ; cmdexec . execute ( command ) . done ( ( ) : void => { sinon . assert . calledOnce ( promote ) ; sinon . assert . calledOnce ( log ) ; sinon . assert . calledWithExactly ( log , `template` ) ; done ( ) ; } ) ; } ) ; it ( "s" , ( done ) : void => { var command : cli . IRollbackCommand = { type : cli . CommandType . rollback , appName : "s" , deploymentName : "s" , targetRelease : "s" } ; var rollback : Sinon . SinonSpy = sandbox . spy ( cmdexec . sdk , "s" ) ; cmdexec . execute ( command ) . done ( ( ) : void => { sinon . assert . calledOnce ( rollback ) ; sinon . assert . calledOnce ( log ) ; sinon . assert . calledWithExactly ( log , `template` ) ; done ( ) ; } ) ; } ) ; it ( "s" , ( done ) : void => { var command : cli . IReleaseCommand = { type : cli . CommandType . release , appName : "s" , deploymentName : "s" , description : "s" , mandatory : false , rollout : null , appStoreVersion : "s" , package : "s" } ; releaseHelperFunction ( command , done , "s" ) ; } ) ; it ( "s" , ( done ) : void => { var command : cli . IReleaseCommand = { type : cli . CommandType . release , appName : "s" , deploymentName : "s" , description : "s" , mandatory : false , rollout : null , appStoreVersion : "s" , package : "s" } ; releaseHelperFunction ( command , done , INVALID_RELEASE_FILE_ERROR_MESSAGE ) ; } ) ; it ( "s" , ( done ) : void => { var command : cli . IReleaseCommand = { type : cli . CommandType . release , appName : "s" , deploymentName : "s" , description : "s" , mandatory : false , rollout : null , appStoreVersion : "s" , package : "s" } ; releaseHelperFunction ( command , done , INVALID_RELEASE_FILE_ERROR_MESSAGE ) ; } ) ; it ( "s" , ( done ) : void => { var command : cli . IReleaseCommand = { type : cli . CommandType . release , appName : "s" , deploymentName : "s" , description : "s" , mandatory : false , rollout : null , appStoreVersion : "s" , package : "s" } ; releaseHelperFunction ( command , done , INVALID_RELEASE_FILE_ERROR_MESSAGE ) ; } ) ; it ( "s" , ( done ) : void => { testReleaseCordovaFailure ( false , done ) ; } ) ; it ( "s" , ( done ) : void => { testReleaseCordovaFailure ( true , done ) ; } ) ; function testReleaseCordovaFailure ( build , done ) { var command : cli . IReleaseCordovaCommand = { type : cli . CommandType . releaseCordova , appName : "s" , appStoreVersion : null , build : build , deploymentName : "s" , description : "s" , mandatory : false , rollout : null , platform : "s" } ; var cordovaCommand = build ? "s" : "s" ; var execSync : Sinon . SinonStub = sandbox . stub ( cmdexec , "s" , ( command , options ) => { throw `template` ; } ) ; var release : Sinon . SinonSpy = sandbox . spy ( cmdexec , "s" ) ; var releaseCordova : Sinon . SinonSpy = sandbox . spy ( cmdexec , "s" ) ; cmdexec . execute ( command ) . then ( ( ) => { done ( new Error ( "s" ) ) ; } ) . catch ( ( err ) => { assert . equal ( err . message , `template` ) ; sinon . assert . notCalled ( release ) ; done ( ) ; } ) . done ( ) ; } it ( "s" , ( done ) : void => { var command : cli . IReleaseCordovaCommand = { type : cli . CommandType . releaseCordova , appName : "s" , appStoreVersion : null , build : false , deploymentName : "s" , description : "s" , mandatory : false , rollout : null , platform : "s" } ; var execSync : Sinon . SinonStub = sandbox . stub ( cmdexec , "s" , ( command , options ) => { } ) ; var release : Sinon . SinonSpy = sandbox . spy ( cmdexec , "s" ) ; var releaseCordova : Sinon . SinonSpy = sandbox . spy ( cmdexec , "s" ) ; cmdexec . execute ( command ) . then ( ( ) => { done ( new Error ( "s" ) ) ; } ) . catch ( ( err ) => { assert . equal ( err . message , `template` ) ; sinon . assert . notCalled ( release ) ; sinon . assert . calledOnce ( execSync ) ; done ( ) ; } ) . done ( ) ; } ) ; it ( "s" , ( done ) : void => { var command : cli . IReleaseCordovaCommand = { type : cli . CommandType . releaseCordova , appName : "s" , appStoreVersion : null , build : false , deploymentName : "s" , description : "s" , mandatory : false , rollout : null , platform : "s" , } ; var release : Sinon . SinonSpy = sandbox . spy ( cmdexec , "s" ) ; var releaseCordova : Sinon . SinonSpy = sandbox . spy ( cmdexec , "s" ) ; cmdexec . execute ( command ) . then ( ( ) => { done ( new Error ( "s" ) ) ; } ) . catch ( ( err ) => { assert . equal ( err . message , "s" ) ; sinon . assert . notCalled ( release ) ; sinon . assert . notCalled ( spawn ) ; done ( ) ; } ) . done ( ) ; } ) ; it ( "s" , ( done ) : void => { var command : cli . IReleaseCordovaCommand = { type : cli . CommandType . releaseCordova , appName : "s" , appStoreVersion : null , build : false , deploymentName : "s" , description : "s" , mandatory : false , rollout : null , platform : "s" } ; var oldWd = process . cwd ( ) ; ensureInTestAppDirectory ( ) ; var expectedReleaseCommand = { type : cli . CommandType . release , appName : "s" , appStoreVersion : "s" , build : false , deploymentName : "s" , description : "s" , mandatory : false , rollout : null , package : path . join ( process . cwd ( ) , "s" , "s" , "s" ) , platform : "s" } var execSync : Sinon . SinonStub = sandbox . stub ( cmdexec , "s" , ( command , options ) => { } ) ; var release : Sinon . SinonSpy = sandbox . stub ( cmdexec , "s" ) ; var releaseCordova : Sinon . SinonSpy = sandbox . spy ( cmdexec , "s" ) ; cmdexec . execute ( command ) . then ( ( compiledReleaseCommand ) => { sinon . assert . calledOnce ( execSync ) ; sinon . assert . calledWith ( release , expectedReleaseCommand ) ; done ( ) ; } ) . catch ( ( err ) => { done ( new Error ( "s" + err . message ) ) ; } ) . done ( ( ) => { process . chdir ( oldWd ) ; } ) ; } ) ; it ( "s" , ( done ) : void => { var command : cli . IReleaseCordovaCommand = { type : cli . CommandType . releaseCordova , appName : "s" , appStoreVersion : null , build : true , deploymentName : "s" , description : "s" , mandatory : false , rollout : null , platform : "s" } ; var oldWd = process . cwd ( ) ; ensureInTestAppDirectory ( ) ; var expectedReleaseCommand = { type : cli . CommandType . release , appName : "s" , appStoreVersion : "s" , build : true , deploymentName : "s" , description : "s" , mandatory : false , rollout : null , package : path . join ( process . cwd ( ) , "s" , "s" , "s" , "s" ) , platform : "s" } var execSync : Sinon . SinonStub = sandbox . stub ( cmdexec , "s" , ( command , options ) => { } ) ; var release : Sinon . SinonSpy = sandbox . stub ( cmdexec , "s" ) ; var releaseCordova : Sinon . SinonSpy = sandbox . spy ( cmdexec , "s" ) ; cmdexec . execute ( command ) . then ( ( compiledReleaseCommand ) => { sinon . assert . calledOnce ( execSync ) ; sinon . assert . calledWith ( release , expectedReleaseCommand ) ; done ( ) ; } ) . catch ( ( err ) => { done ( new Error ( "s" + err . message ) ) ; } ) . done ( ( ) => { process . chdir ( oldWd ) ; } ) ; } ) ; it ( "s" , ( done ) : void => { var command : cli . IReleaseReactCommand = { type : cli . CommandType . releaseReact , appName : "s" , appStoreVersion : null , deploymentName : "s" , description : "s" , mandatory : false , rollout : null , platform : "s" } ; var release : Sinon . SinonSpy = sandbox . spy ( cmdexec , "s" ) ; var releaseReact : Sinon . SinonSpy = sandbox . spy ( cmdexec , "s" ) ; cmdexec . execute ( command ) . then ( ( ) => { done ( new Error ( "s" ) ) ; } ) . catch ( ( err ) => { assert . equal ( err . message , "s" ) ; sinon . assert . notCalled ( release ) ; sinon . assert . notCalled ( spawn ) ; done ( ) ; } ) . done ( ) ; } ) ; it ( "s" , ( done ) : void => { var command : cli . IReleaseReactCommand = { type : cli . CommandType . releaseReact , appName : "s" , appStoreVersion : null , deploymentName : "s" , description : "s" , entryFile : "s" , mandatory : false , rollout : null , platform : "s" } ; ensureInTestAppDirectory ( ) ; var release : Sinon . SinonSpy = sandbox . spy ( cmdexec , "s" ) ; var releaseReact : Sinon . SinonSpy = sandbox . spy ( cmdexec , "s" ) ; cmdexec . execute ( command ) . then ( ( ) => { done ( new Error ( "s" ) ) ; } ) . catch ( ( err ) => { assert . equal ( err . message , "s" ) ; sinon . assert . notCalled ( release ) ; sinon . assert . notCalled ( spawn ) ; done ( ) ; } ) . done ( ) ; } ) ; it ( "s" , ( done ) : void => { var command : cli . IReleaseReactCommand = { type : cli . CommandType . releaseReact , appName : "s" , appStoreVersion : null , deploymentName : "s" , description : "s" , mandatory : false , rollout : null , platform : "s" , } ; ensureInTestAppDirectory ( ) ; var release : Sinon . SinonSpy = sandbox . spy ( cmdexec , "s" ) ; var releaseReact : Sinon . SinonSpy = sandbox . spy ( cmdexec , "s" ) ; cmdexec . execute ( command ) . then ( ( ) => { done ( new Error ( "s" ) ) ; } ) . catch ( ( err ) => { assert . equal ( err . message , "s" ) ; sinon . assert . notCalled ( release ) ; sinon . assert . notCalled ( spawn ) ; done ( ) ; } ) . done ( ) ; } ) ; it ( "s" , ( done ) : void => { var bundleName = "s" ; var command : cli . IReleaseReactCommand = { type : cli . CommandType . releaseReact , appName : "s" , appStoreVersion : "s" , bundleName : bundleName , deploymentName : "s" , description : "s" , mandatory : false , rollout : null , platform : "s" , sourcemapOutput : "s" } ; ensureInTestAppDirectory ( ) ; var release : Sinon . SinonSpy = sandbox . stub ( cmdexec , "s" , ( ) => { return Q ( < void > null ) } ) ; var releaseReact : Sinon . SinonSpy = sandbox . spy ( cmdexec , "s" ) ; cmdexec . execute ( command ) . then ( ( ) => { done ( new Error ( "s" ) ) ; } ) . catch ( ( err ) => { assert . equal ( err . message , "s" ) ; sinon . assert . notCalled ( release ) ; sinon . assert . notCalled ( spawn ) ; done ( ) ; } ) . done ( ) ; } ) ; it ( "s" , ( done ) : void => { var bundleName = "s" ; var command : cli . IReleaseReactCommand = { type : cli . CommandType . releaseReact , appName : "s" , appStoreVersion : null , bundleName : bundleName , deploymentName : "s" , description : "s" , mandatory : false , rollout : null , platform : "s" } ; ensureInTestAppDirectory ( ) ; var release : Sinon . SinonSpy = sandbox . stub ( cmdexec , "s" , ( ) => { return Q ( < void > null ) } ) ; cmdexec . execute ( command ) . then ( ( ) => { var releaseCommand : cli . IReleaseCommand = < any > command ; releaseCommand . package = path . join ( os . tmpdir ( ) , "s" ) ; releaseCommand . appStoreVersion = "s" ; sinon . assert . calledOnce ( spawn ) ; var spawnCommand = spawn . args [ 0 ] [ 0 ] ; var spawnCommandArgs = spawn . args [ 0 ] [ 0 ] . join ( "s" ) ; assert . equal ( spawnCommand , "s" ) ; assert . equal ( spawnCommandArgs , `template` ) ; assertJsonDescribesObject ( JSON . stringify ( release . args [ 0 ] [ 0 ] , null , 0 ) , releaseCommand ) ; done ( ) ; } ) . done ( ) ; } ) ; it ( "s" , ( done ) : void => { var command : cli . IReleaseReactCommand = { type : cli . CommandType . releaseReact , appName : "s" , appStoreVersion : null , deploymentName : "s" , description : "s" , mandatory : false , rollout : null , platform : "s" } ; ensureInTestAppDirectory ( ) ; var release : Sinon . SinonSpy = sandbox . stub ( cmdexec , "s" , ( ) => { return Q ( < void > null ) } ) ; cmdexec . execute ( command ) . then ( ( ) => { var releaseCommand : cli . IReleaseCommand = < any > clone ( command ) ; var packagePath = path . join ( os . tmpdir ( ) , "s" ) ; releaseCommand . package = packagePath ; releaseCommand . appStoreVersion = "s" ; sinon . assert . calledOnce ( spawn ) ; var spawnCommand = spawn . args [ 0 ] [ 0 ] ; var spawnCommandArgs = spawn . args [ 0 ] [ 0 ] . join ( "s" ) ; assert . equal ( spawnCommand , "s" ) ; assert . equal ( spawnCommandArgs , `template` ) ; assertJsonDescribesObject ( JSON . stringify ( release . args [ 0 ] [ 0 ] , null , 0 ) , releaseCommand ) ; done ( ) ; } ) . done ( ) ; } ) ; it ( "s" , ( done ) : void => { var command : cli . IReleaseReactCommand = { type : cli . CommandType . releaseReact , appName : "s" , appStoreVersion : null , deploymentName : "s" , description : "s" , mandatory : false , rollout : null , platform : "s" } ; ensureInTestAppDirectory ( ) ; var release : Sinon . SinonSpy = sandbox . stub ( cmdexec , "s" , ( ) => { return Q ( < void > null ) } ) ; cmdexec . execute ( command ) . then ( ( ) => { var releaseCommand : cli . IReleaseCommand = < any > clone ( command ) ; var packagePath = path . join ( os . tmpdir ( ) , "s" ) ; releaseCommand . package = packagePath ; releaseCommand . appStoreVersion = "s" ; sinon . assert . calledOnce ( spawn ) ; var spawnCommand = spawn . args [ 0 ] [ 0 ] ; var spawnCommandArgs = spawn . args [ 0 ] [ 0 ] . join ( "s" ) ; assert . equal ( spawnCommand , "s" ) ; assert . equal ( spawnCommandArgs , `template` ) ; assertJsonDescribesObject ( JSON . stringify ( release . args [ 0 ] [ 0 ] , null , 0 ) , releaseCommand ) ; done ( ) ; } ) . done ( ) ; } ) ; it ( "s" , ( done ) : void => { var command : cli . IReleaseReactCommand = { type : cli . CommandType . releaseReact , appName : "s" , appStoreVersion : null , deploymentName : "s" , description : "s" , mandatory : false , rollout : null , platform : "s" } ; ensureInTestAppDirectory ( ) ; var release : Sinon . SinonSpy = sandbox . stub ( cmdexec , "s" , ( ) => { return Q ( < void > null ) } ) ; cmdexec . execute ( command ) . then ( ( ) => { var releaseCommand : cli . IReleaseCommand = < any > clone ( command ) ; var packagePath = path . join ( os . tmpdir ( ) , "s" ) ; releaseCommand . package = packagePath ; releaseCommand . appStoreVersion = "s" ; sinon . assert . calledOnce ( spawn ) ; var spawnCommand = spawn . args [ 0 ] [ 0 ] ; var spawnCommandArgs = spawn . args [ 0 ] [ 0 ] . join ( "s" ) ; assert . equal ( spawnCommand , "s" ) ; assert . equal ( spawnCommandArgs , `template` ) ; assertJsonDescribesObject ( JSON . stringify ( release . args [ 0 ] [ 0 ] , null , 0 ) , releaseCommand ) ; done ( ) ; } ) . done ( ) ; } ) ; it ( "s" , ( done ) : void => { var bundleName = "s" ; var command : cli . IReleaseReactCommand = { type : cli . CommandType . releaseReact , appName : "s" , appStoreVersion : null , bundleName : bundleName , deploymentName : "s" , development : true , description : "s" , mandatory : false , rollout : null , platform : "s" , sourcemapOutput : "s" } ; ensureInTestAppDirectory ( ) ; var release : Sinon . SinonSpy = sandbox . stub ( cmdexec , "s" , ( ) => { return Q ( < void > null ) } ) ; cmdexec . execute ( command ) . then ( ( ) => { var releaseCommand : cli . IReleaseCommand = < any > command ; releaseCommand . package = path . join ( os . tmpdir ( ) , "s" ) ; releaseCommand . appStoreVersion = "s" ; sinon . assert . calledOnce ( spawn ) ; var spawnCommand = spawn . args [ 0 ] [ 0 ] ; var spawnCommandArgs = spawn . args [ 0 ] [ 0 ] . join ( "s" ) ; assert . equal ( spawnCommand , "s" ) ; assert . equal ( spawnCommandArgs , `template` ) ; assertJsonDescribesObject ( JSON . stringify ( release . args [ 0 ] [ 0 ] , null , 0 ) , releaseCommand ) ; done ( ) ; } ) . done ( ) ; } ) ; it ( "s" , ( done ) : void => { var bundleName = "s" ; var command : cli . IReleaseReactCommand = { type : cli . CommandType . releaseReact , appName : "s" , appStoreVersion : null , bundleName : bundleName , deploymentName : "s" , description : "s" , mandatory : false , rollout : null , platform : "s" , sourcemapOutput : "s" } ; ensureInTestAppDirectory ( ) ; var release : Sinon . SinonSpy = sandbox . stub ( cmdexec , "s" , ( ) => { return Q ( < void > null ) } ) ; cmdexec . execute ( command ) . then ( ( ) => { var releaseCommand : cli . IReleaseCommand = < any > command ; releaseCommand . package = path . join ( os . tmpdir ( ) , "s" ) ; releaseCommand . appStoreVersion = "s" ; sinon . assert . calledOnce ( spawn ) ; var spawnCommand = spawn . args [ 0 ] [ 0 ] ; var spawnCommandArgs = spawn . args [ 0 ] [ 0 ] . join ( "s" ) ; assert . equal ( spawnCommand , "s" ) ; assert . equal ( spawnCommandArgs , `template` ) ; assertJsonDescribesObject ( JSON . stringify ( release . args [ 0 ] [ 0 ] , null , 0 ) , releaseCommand ) ; done ( ) ; } ) . done ( ) ; } ) ; it ( "s" , ( done ) : void => { var bundleName = "s" ; var command : cli . IReleaseReactCommand = { type : cli . CommandType . releaseReact , appName : "s" , appStoreVersion : "s" , bundleName : bundleName , deploymentName : "s" , description : "s" , mandatory : false , rollout : null , platform : "s" , sourcemapOutput : "s" } ; ensureInTestAppDirectory ( ) ; var release : Sinon . SinonSpy = sandbox . stub ( cmdexec , "s" , ( ) => { return Q ( < void > null ) } ) ; cmdexec . execute ( command ) . then ( ( ) => { var releaseCommand : cli . IReleaseCommand = < any > command ; releaseCommand . package = path . join ( os . tmpdir ( ) , "s" ) ; sinon . assert . calledOnce ( spawn ) ; var spawnCommand = spawn . args [ 0 ] [ 0 ] ; var spawnCommandArgs = spawn . args [ 0 ] [ 0 ] . join ( "s" ) ; assert . equal ( spawnCommand , "s" ) ; assert . equal ( spawnCommandArgs , `template` ) ; assertJsonDescribesObject ( JSON . stringify ( release . args [ 0 ] [ 0 ] , null , 0 ) , releaseCommand ) ; done ( ) ; } ) . done ( ) ; } ) ; it ( "s" , ( done ) : void => { var bundleName = "s" ; var command : cli . IReleaseReactCommand = { type : cli . CommandType . releaseReact , appName : "s" , appStoreVersion : null , bundleName : bundleName , deploymentName : "s" , description : "s" , mandatory : false , rollout : null , platform : "s" } ; ensureInTestAppDirectory ( ) ; var release : Sinon . SinonSpy = sandbox . stub ( cmdexec , "s" , ( ) => { return Q ( < void > null ) } ) ; var _CODE_PUSH_NODE_ARGS = process . env . CODE_PUSH_NODE_ARGS ; process . env . CODE_PUSH_NODE_ARGS = "s" ; cmdexec . execute ( command ) . then ( ( ) => { var releaseCommand : cli . IReleaseCommand = < any > command ; releaseCommand . package = path . join ( os . tmpdir ( ) , "s" ) ; releaseCommand . appStoreVersion = "s" ; sinon . assert . calledOnce ( spawn ) ; var spawnCommand = spawn . args [ 0 ] [ 0 ] ; var spawnCommandArgs = spawn . args [ 0 ] [ 0 ] . join ( "s" ) ; assert . equal ( spawnCommand , "s" ) ; assert . equal ( spawnCommandArgs , `template` ) ; assertJsonDescribesObject ( JSON . stringify ( release . args [ 0 ] [ 0 ] , null , 0 ) , releaseCommand ) ; _CODE_PUSH_NODE_ARGS !== undefined ? process . env . CODE_PUSH_NODE_ARGS = _CODE_PUSH_NODE_ARGS : delete process . env . CODE_PUSH_NODE_ARGS ; done ( ) ; } ) . done ( ) ; } ) ; it ( "s" , ( done ) : void => { var bundleName = "s" ; var command : cli . IReleaseReactCommand = { type : cli . CommandType . releaseReact , appName : "s" , appStoreVersion : null , bundleName : bundleName , deploymentName : "s" , description : "s" , mandatory : false , rollout : null , platform : "s" , config : "s" } ; ensureInTestAppDirectory ( ) ; var release : Sinon . SinonSpy = sandbox . stub ( cmdexec , "s" , ( ) => { return Q ( < void > null ) } ) ; cmdexec . execute ( command ) . then ( ( ) => { var releaseCommand : cli . IReleaseCommand = < any > command ; releaseCommand . package = path . join ( os . tmpdir ( ) , "s" ) ; releaseCommand . appStoreVersion = "s" ; sinon . assert . calledOnce ( spawn ) ; var spawnCommand = spawn . args [ 0 ] [ 0 ] ; var spawnCommandArgs = spawn . args [ 0 ] [ 0 ] . join ( "s" ) ; assert . equal ( spawnCommand , "s" ) ; assert . equal ( spawnCommandArgs , `template` ) ; assertJsonDescribesObject ( JSON . stringify ( release . args [ 0 ] [ 0 ] , null , 0 ) , releaseCommand ) ; done ( ) ; } ) . done ( ) ; } ) ; it ( "s" , ( done ) : void => { var command : cli . IAccessKeyListCommand = { type : cli . CommandType . sessionList , format : "s" } ; cmdexec . execute ( command ) . done ( ( ) : void => { sinon . assert . calledOnce ( log ) ; assert . equal ( log . args [ 0 ] . length , 0 ) ; var actual = log . args [ 0 ] [ 0 ] ; var expected = [ { loggedInTime : 0 , machineName : TEST_MACHINE_NAME , } ] ; assertJsonDescribesObject ( actual , expected ) ; done ( ) ; } ) ; } ) ; it ( "s" , ( done ) : void => { var machineName = TEST_MACHINE_NAME ; var command : cli . ISessionRemoveCommand = { type : cli . CommandType . sessionRemove , machineName : machineName } ; var removeSession : Sinon . SinonSpy = sandbox . spy ( cmdexec . sdk , "s" ) ; cmdexec . execute ( command ) . done ( ( ) : void => { sinon . assert . calledOnce ( removeSession ) ; sinon . assert . calledWithExactly ( removeSession , machineName ) ; sinon . assert . calledOnce ( log ) ; sinon . assert . calledWithExactly ( log , `template` ) ; done ( ) ; } ) ; } ) ; it ( "s" , ( done ) : void => { var machineName = TEST_MACHINE_NAME ; var command : cli . ISessionRemoveCommand = { type : cli . CommandType . sessionRemove , machineName : machineName } ; var removeSession : Sinon . SinonSpy = sandbox . spy ( cmdexec . sdk , "s" ) ; wasConfirmed = false ; cmdexec . execute ( command ) . done ( ( ) : void => { sinon . assert . notCalled ( removeSession ) ; sinon . assert . calledOnce ( log ) ; sinon . assert . calledWithExactly ( log , "s" ) ; done ( ) ; } ) ; } ) ; it ( "s" , ( done ) : void => { var machineName = os . hostname ( ) ; var command : cli . ISessionRemoveCommand = { type : cli . CommandType . sessionRemove , machineName : machineName } ; var removeSession : Sinon . SinonSpy = sandbox . spy ( cmdexec . sdk , "s" ) ; wasConfirmed = false ; cmdexec . execute ( command ) . then ( ( ) => { done ( new Error ( "s" ) ) ; } ) . catch ( ( err ) => { done ( ) ; } ) . done ( ) ; } ) ; function releaseHelperFunction ( command : cli . IReleaseCommand , done , expectedError ) { var release : Sinon . SinonSpy = sandbox . spy ( cmdexec . sdk , "s" ) ; cmdexec . execute ( command ) . done ( ( ) : void => { throw "s" ; } , ( error ) : void => { assert ( ! ! error ) ; assert . equal ( error . message , expectedError ) ; done ( ) ; } ) ; } } ) ;	O O O $any$ O O O O O O $any$ O O O O $any$ O O O O O O O O O $any$ O O O O $any$ O $any$ O $any$ O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $void$ O $string$ O $Object$ O O $any$ O $any$ O $string$ O $JSON$ O $complex$ O $Object$ O O O O O O O O O $T$ O $any$ O O $T$ O $any$ O O $any$ O O $JSON$ O $any$ O $JSON$ O $complex$ O $T$ O O O O O $void$ O O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O O O O $boolean$ O $any$ O O O $any$ O $undefined$ O $any$ O O O O O O O O O O $number$ O O O O O O O O O O O O O O O O O O $any$ O O $any$ O $any$ O $any$ O O $string$ O O O $string$ O O O O O $any$ O $any$ O $any$ O O $string$ O O O $string$ O O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $boolean$ O O O $number$ O O O $string$ O O O $number$ O O O O O O $Promise$ O O O $any$ O $any$ O O O $any$ O O $any$ O $any$ O O $string$ O O O O O O O $Promise$ O $string$ O $number$ O O $any$ O $any$ O O O $any$ O O $any$ O $any$ O O $string$ O O O $number$ O O $DateConstructor$ O O O $number$ O O O $string$ O $number$ O O O O $boolean$ O $number$ O O $number$ O $number$ O O O O O O $Promise$ O $string$ O $string$ $string$ O $number$ $number$ O O $any$ O $any$ O O O $any$ O O $any$ O $any$ O O $number$ O O $DateConstructor$ O O O $number$ O O O $string$ O $string$ O $number$ O O O O $boolean$ O $number$ O O $number$ O $number$ O O O O O O $Promise$ O $string$ O $string$ O $string$ O $boolean$ O O O O $any$ O $any$ O O O $any$ O O $any$ O $any$ O O $string$ O $string$ O $string$ O $string$ O $string$ O $string$ O $boolean$ O $boolean$ O O O O O $Promise$ O $string$ O $string$ O O O O O O $any$ O O O O O O O O O $Promise$ O $string$ O $string$ O O $any$ O $any$ O O O $any$ O O $any$ O $any$ O O $string$ O $string$ O $string$ O O O O O O O $Promise$ O $string$ O $string$ O O O O O O $any$ O O O O O O O O O $Promise$ O O O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O O $number$ O O O $string$ O O O $number$ O O O $number$ O O O O O O $Promise$ O O O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O O $number$ O O O $string$ O O O O O O O O $Promise$ O O O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O O $string$ O O O $complex$ O O O O O $string$ O O O $boolean$ O O O O O $string[]$ O O O O O O O O O $any$ O $any$ O O $string$ O O O $complex$ O O O O O $string$ O O O $boolean$ O O O O O $string[]$ O O O O O O O O O O O O $Promise$ O $string$ O O $any$ O $any$ O O O O O O $string$ O O O O O $any$ O O O O $any$ O O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O $Promise$ O $string$ O $string$ O O $any$ O $any$ O O O O $string$ O O O O O O $string$ O O O O O $any$ O O O $any$ O O O O O O $string$ O O O O O $any$ O O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $Promise$ O $string$ O $string$ O O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O O $null$ O O O $string$ O O O $boolean$ O O O $string$ O O O $string$ O O O $number$ O O O $number$ O O O $string$ O O O O O $any$ O $any$ O O $string$ O O O $string$ O O O $boolean$ O O O $string$ O O O $string$ O O O $number$ O O O $number$ O O O $string$ O O O O O O O O $Promise$ O $string$ O $string$ O O O O O O $any$ O O O O O $number$ O O O O O O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O O O O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O O O O O O $Promise$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O $string$ O O O $boolean$ O O O O O O O $string$ O O O $boolean$ O O O O O O O O $Promise$ O $string$ O $string$ O $string$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O O O O $Promise$ O $string$ O $string$ O $string$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O O O O $Promise$ O $string$ O $string$ O O O O O O $any$ O O O O O O $Promise$ O $string$ O O O O O O $any$ O O O O O O O O O $Promise$ O $string$ O O O O O O $any$ O O O O O O O O O $Promise$ O $string$ O $string$ O O O O O O $any$ O O O O O O O O O $Promise$ O $string$ O $string$ O O O O O O $any$ O O O O O O O O O $Promise$ O $string$ O O O O O O $any$ O O O O O O O O O $Promise$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O O O O $Promise$ O $string$ O $string$ O $string$ O O O O O O $any$ O O O O O O O O O $Promise$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O O O O $Promise$ O $string$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O $boolean$ O O O O $string$ O O O $any$ O O O O O O O $boolean$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O $any$ O $boolean$ O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O $string$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O $string$ O $string[]$ O O O O O O O O O O O $complex$ O O $void$ O O O O O O O O $complex$ O O $void$ O O O O O O O O $void$ O O $string$ O $void$ O O O O O O O O $void$ O O O O O O O O O $any$ O $any$ O O O O O $any$ O O O O O O $any$ O O O O O O O $any$ O $any$ O O O O O O $any$ O O O O $MochaDone$ O O O O O O $IAccessKeyAddCommand$ O $any$ O $any$ O O $CommandType.accessKeyAdd$ O $any$ O $any$ O $CommandType.accessKeyAdd$ O $string$ O O O O $any$ O $any$ O $IAccessKeyAddCommand$ O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O $string$ O $any$ O $any$ O O O O O O O O $string$ O O O $any$ O $any$ O $string$ O $string$ O O $string$ O $any$ O $any$ O O O O O O O $string$ O O O $any$ O $any$ O $string$ O $string$ O O $any$ O O O O O O O O O $any$ O O O O $MochaDone$ O O O O O O $number$ O O O O $IAccessKeyAddCommand$ O $any$ O $any$ O O $CommandType.accessKeyAdd$ O $any$ O $any$ O $CommandType.accessKeyAdd$ O $string$ O O O $number$ O O $any$ O $any$ O $IAccessKeyAddCommand$ O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O $string$ O $any$ O $any$ O O O O O O O O $string$ O O O $any$ O $any$ O $string$ O $string$ O O $string$ O $any$ O $any$ O O O O O O O $string$ O O O $any$ O $any$ O $string$ O $string$ O O $any$ O O O O O O O O O $any$ O O O O $MochaDone$ O O O O O O $IAccessKeyPatchCommand$ O $any$ O $any$ O O $CommandType.accessKeyPatch$ O $any$ O $any$ O $CommandType.accessKeyPatch$ O $string$ O O O $string$ O O O O $any$ O $any$ O $IAccessKeyPatchCommand$ O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O $string$ O $any$ O $any$ O O O O O O O O $string$ O O O $any$ O $any$ O $string$ O $string$ O O $any$ O O O O O O O O O $any$ O O O O $MochaDone$ O O O O O O $IAccessKeyListCommand$ O $any$ O $any$ O O $CommandType.accessKeyList$ O $any$ O $any$ O $CommandType.accessKeyList$ O $string$ O O O O $any$ O $any$ O $IAccessKeyListCommand$ O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O $string$ O $any$ O $any$ O O O O O O O O $complex$ O O O $number$ O O O $string$ O O O $number$ O O O $number$ O O O $void$ O $string$ O $complex$ O O $any$ O O O O O O O O O $any$ O O O O $MochaDone$ O O O O O O $IAccessKeyRemoveCommand$ O $any$ O $any$ O O $CommandType.accessKeyRemove$ O $any$ O $any$ O $CommandType.accessKeyRemove$ O $string$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $IAccessKeyRemoveCommand$ O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O O O $any$ O O O O $MochaDone$ O O O O O O $IAccessKeyRemoveCommand$ O $any$ O $any$ O O $CommandType.accessKeyRemove$ O $any$ O $any$ O $CommandType.accessKeyRemove$ O $string$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $boolean$ O O O $any$ O $any$ O $IAccessKeyRemoveCommand$ O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O O O $any$ O O O O $MochaDone$ O O O O O O $IAppAddCommand$ O $any$ O $any$ O O $CommandType.appAdd$ O $any$ O $any$ O $CommandType.appAdd$ O $string$ O O O $string$ O O O $string$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $IAppAddCommand$ O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O O O O O $any$ O O O O $MochaDone$ O O O O O O $IAppListCommand$ O $any$ O $any$ O O $CommandType.appList$ O $any$ O $any$ O $CommandType.appList$ O $string$ O O O O $any$ O $any$ O $IAppListCommand$ O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O $string$ O $any$ O $any$ O O O O O O O O $complex$ O O O $string$ O O O $complex$ O O O O O $string$ O O O $boolean$ O O O O O $string[]$ O O O O O O O O O $string$ O O O $complex$ O O O O O $string$ O O O $boolean$ O O O O O $string[]$ O O O O O O O O O $void$ O $string$ O $complex$ O O $any$ O O O O O O O O O $any$ O O O O $MochaDone$ O O O O O O $IAppRemoveCommand$ O $any$ O $any$ O O $CommandType.appRemove$ O $any$ O $any$ O $CommandType.appRemove$ O $string$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $IAppRemoveCommand$ O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O O O $any$ O O O O $MochaDone$ O O O O O O $IAppRemoveCommand$ O $any$ O $any$ O O $CommandType.appRemove$ O $any$ O $any$ O $CommandType.appRemove$ O $string$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $boolean$ O O O $any$ O $any$ O $IAppRemoveCommand$ O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O O O $any$ O O O O $MochaDone$ O O O O O O $IAppRenameCommand$ O $any$ O $any$ O O $CommandType.appRename$ O $any$ O $any$ O $CommandType.appRename$ O $string$ O O O $string$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $IAppRenameCommand$ O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O O O $any$ O O O O $MochaDone$ O O O O O O $IAppTransferCommand$ O $any$ O $any$ O O $CommandType.appTransfer$ O $any$ O $any$ O $CommandType.appTransfer$ O $string$ O O O $string$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $IAppTransferCommand$ O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O O O $any$ O O O O $MochaDone$ O O O O O O $ICollaboratorAddCommand$ O $any$ O $any$ O O $CommandType.collaboratorAdd$ O $any$ O $any$ O $CommandType.collaboratorAdd$ O $string$ O O O $string$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $ICollaboratorAddCommand$ O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O O O $any$ O O O O $MochaDone$ O O O O O O $ICollaboratorListCommand$ O $any$ O $any$ O O $CommandType.collaboratorList$ O $any$ O $any$ O $CommandType.collaboratorList$ O $string$ O O O $string$ O O O O $any$ O $any$ O $ICollaboratorListCommand$ O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O $string$ O $any$ O $any$ O O O O O O O O $complex$ O O O O O O O O $string$ O O O $boolean$ O O O O O O O $string$ O O O $boolean$ O O O O O O $void$ O $string$ O $complex$ O O $any$ O O O O O O O O O $any$ O O O O $MochaDone$ O O O O O O $ICollaboratorRemoveCommand$ O $any$ O $any$ O O $CommandType.collaboratorRemove$ O $any$ O $any$ O $CommandType.collaboratorRemove$ O $string$ O O O $string$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $ICollaboratorRemoveCommand$ O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O O O $any$ O O O O $MochaDone$ O O O O O O $IDeploymentAddCommand$ O $any$ O $any$ O O $CommandType.deploymentAdd$ O $any$ O $any$ O $CommandType.deploymentAdd$ O $string$ O O O $string$ O O O $false$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $IDeploymentAddCommand$ O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O O O $any$ O O O O $MochaDone$ O O O O O O $IDeploymentHistoryClearCommand$ O $any$ O $any$ O O $CommandType.deploymentHistoryClear$ O $any$ O $any$ O $CommandType.deploymentHistoryClear$ O $string$ O O O $string$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $IDeploymentHistoryClearCommand$ O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O O O $any$ O O O O $MochaDone$ O O O O O O $IDeploymentHistoryClearCommand$ O $any$ O $any$ O O $CommandType.deploymentHistoryClear$ O $any$ O $any$ O $CommandType.deploymentHistoryClear$ O $string$ O O O $string$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $boolean$ O O O $any$ O $any$ O $IDeploymentHistoryClearCommand$ O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O O O $any$ O O O O $MochaDone$ O O O O O O $IDeploymentListCommand$ O $any$ O $any$ O O $CommandType.deploymentList$ O $any$ O $any$ O $CommandType.deploymentList$ O $string$ O O O $string$ O O O $true$ O O O O $any$ O $any$ O $IDeploymentListCommand$ O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O $string$ O $any$ O $any$ O O O O O O O O $complex$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $boolean$ O O O $number$ O O O $string$ O O O $number$ O O O $complex$ O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O O O O O $void$ O $string$ O $complex$ O O $any$ O O O O O O O O O $any$ O O O O $MochaDone$ O O O O O O $IDeploymentRemoveCommand$ O $any$ O $any$ O O $CommandType.deploymentRemove$ O $any$ O $any$ O $CommandType.deploymentRemove$ O $string$ O O O $string$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $IDeploymentRemoveCommand$ O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O O O $any$ O O O O $MochaDone$ O O O O O O $IDeploymentRemoveCommand$ O $any$ O $any$ O O $CommandType.deploymentRemove$ O $any$ O $any$ O $CommandType.deploymentRemove$ O $string$ O O O $string$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $boolean$ O O O $any$ O $any$ O $IDeploymentRemoveCommand$ O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O O O $any$ O O O O $MochaDone$ O O O O O O $IDeploymentRenameCommand$ O $any$ O $any$ O O $CommandType.deploymentRename$ O $any$ O $any$ O $CommandType.deploymentRename$ O $string$ O O O $string$ O O O $string$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $IDeploymentRenameCommand$ O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O O O $any$ O O O O $MochaDone$ O O O O O O $IDeploymentHistoryCommand$ O $any$ O $any$ O O $CommandType.deploymentHistory$ O $any$ O $any$ O $CommandType.deploymentHistory$ O $string$ O O O $string$ O O O $string$ O O O $false$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $IDeploymentHistoryCommand$ O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O $string$ O $any$ O $any$ O O O O O O O O $any[]$ O $any$ O $any$ O O O O O $null$ O O O $string$ O O O $boolean$ O O O $string$ O O O $string$ O O O $number$ O O O $number$ O O O $string$ O O O $complex$ O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O O O O $string$ O O O $string$ O O O $boolean$ O O O $string$ O O O $string$ O O O $number$ O O O $number$ O O O $string$ O O O $complex$ O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O O O O $void$ O $string$ O $any[]$ O O $any$ O O O O O O O O O $any$ O O O O $MochaDone$ O O O O O O $IPatchCommand$ O $any$ O $any$ O O $CommandType.patch$ O $any$ O $any$ O $CommandType.patch$ O $string$ O O O $string$ O O O $string$ O O O $false$ O O O $string$ O O O $true$ O O O $number$ O O O $string$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $IPatchCommand$ O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O O O $any$ O O O O $MochaDone$ O O O O O O $IPatchCommand$ O $any$ O $any$ O O $CommandType.patch$ O $any$ O $any$ O $CommandType.patch$ O $string$ O O O $string$ O O O $null$ O O O $false$ O O O $string$ O O O $true$ O O O $number$ O O O $string$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $IPatchCommand$ O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O O O $any$ O O O O $MochaDone$ O O O O O O $IPatchCommand$ O $any$ O $any$ O O $CommandType.patch$ O $any$ O $any$ O $CommandType.patch$ O $string$ O O O $string$ O O O $null$ O O O $false$ O O O $string$ O O O $true$ O O O $number$ O O O $null$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $IPatchCommand$ O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O O O $any$ O O O O $MochaDone$ O O O O O O $IPatchCommand$ O $any$ O $any$ O O $CommandType.patch$ O $any$ O $any$ O $CommandType.patch$ O $string$ O O O $string$ O O O $null$ O O O $null$ O O O $null$ O O O $null$ O O O $null$ O O O $null$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $IPatchCommand$ O O $any$ O O O O O $any$ O O $ErrorConstructor$ O O O O O O O O $any$ O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $MochaDone$ O O O O O O $IPromoteCommand$ O $any$ O $any$ O O $CommandType.promote$ O $any$ O $any$ O $CommandType.promote$ O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $true$ O O O $number$ O O O $string$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $IPromoteCommand$ O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O O O $any$ O O O O $MochaDone$ O O O O O O $IPromoteCommand$ O $any$ O $any$ O O $CommandType.promote$ O $any$ O $any$ O $CommandType.promote$ O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $true$ O O O $number$ O O O $null$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $IPromoteCommand$ O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O O O $any$ O O O O $MochaDone$ O O O O O O $IRollbackCommand$ O $any$ O $any$ O O $CommandType.rollback$ O $any$ O $any$ O $CommandType.rollback$ O $string$ O O O $string$ O O O $string$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $IRollbackCommand$ O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O O O $any$ O O O O $MochaDone$ O O O O O O $IReleaseCommand$ O $any$ O $any$ O O $CommandType.release$ O $any$ O $any$ O $CommandType.release$ O $string$ O O O $string$ O O O $string$ O O O $false$ O O O $null$ O O O $string$ O O O $string$ O O O O $void$ O $IReleaseCommand$ O $any$ O O O O O O O $any$ O O O O $MochaDone$ O O O O O O $IReleaseCommand$ O $any$ O $any$ O O $CommandType.release$ O $any$ O $any$ O $CommandType.release$ O $string$ O O O $string$ O O O $string$ O O O $false$ O O O $null$ O O O $string$ O O O $string$ O O O O $void$ O $IReleaseCommand$ O $any$ O $string$ O O O O O $any$ O O O O $MochaDone$ O O O O O O $IReleaseCommand$ O $any$ O $any$ O O $CommandType.release$ O $any$ O $any$ O $CommandType.release$ O $string$ O O O $string$ O O O $string$ O O O $false$ O O O $null$ O O O $string$ O O O $string$ O O O O $void$ O $IReleaseCommand$ O $any$ O $string$ O O O O O $any$ O O O O $MochaDone$ O O O O O O $IReleaseCommand$ O $any$ O $any$ O O $CommandType.release$ O $any$ O $any$ O $CommandType.release$ O $string$ O O O $string$ O O O $string$ O O O $false$ O O O $null$ O O O $string$ O O O $string$ O O O O $void$ O $IReleaseCommand$ O $any$ O $string$ O O O O O $any$ O O O O $MochaDone$ O O O O O $void$ O O O $any$ O O O O O $any$ O O O O $MochaDone$ O O O O O $void$ O O O $any$ O O O O O O $void$ O $boolean$ O $MochaDone$ O O O $IReleaseCordovaCommand$ O $any$ O $any$ O O $CommandType.releaseCordova$ O $any$ O $any$ O $CommandType.releaseCordova$ O $string$ O O O $null$ O O O $boolean$ O $boolean$ O $string$ O O O $string$ O O O $false$ O O O $null$ O O O $string$ O O O O O $string$ O $boolean$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $string$ O $any$ O O O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $IReleaseCordovaCommand$ O O $any$ O O O O O $any$ O O $ErrorConstructor$ O O O O O O O O $any$ O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O O $any$ O O O O $any$ O O O O $MochaDone$ O O O O O O $IReleaseCordovaCommand$ O $any$ O $any$ O O $CommandType.releaseCordova$ O $any$ O $any$ O $CommandType.releaseCordova$ O $string$ O O O $null$ O O O $false$ O O O $string$ O O O $string$ O O O $false$ O O O $null$ O O O $string$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $string$ O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $IReleaseCordovaCommand$ O O $any$ O O O O O $any$ O O $ErrorConstructor$ O O O O O O O O $any$ O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $MochaDone$ O O O O O O $IReleaseCordovaCommand$ O $any$ O $any$ O O $CommandType.releaseCordova$ O $any$ O $any$ O $CommandType.releaseCordova$ O $string$ O O O $null$ O O O $false$ O O O $string$ O O O $string$ O O O $false$ O O O $null$ O O O $string$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $IReleaseCordovaCommand$ O O $any$ O O O O O $any$ O O $ErrorConstructor$ O O O O O O O O $any$ O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $MochaDone$ O O O O O O $IReleaseCordovaCommand$ O $any$ O $any$ O O $CommandType.releaseCordova$ O $any$ O $any$ O $CommandType.releaseCordova$ O $string$ O O O $null$ O O O $false$ O O O $string$ O O O $string$ O O O $false$ O O O $null$ O O O $string$ O O O O O $string$ O $any$ O $any$ O O O $void$ O O O O $any$ O O $CommandType$ O $any$ O $any$ O $CommandType.release$ O $string$ O O O $string$ O O O $boolean$ O O O $string$ O O O $string$ O O O $boolean$ O O O $null$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O $string$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $string$ O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $IReleaseCordovaCommand$ O O $any$ O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O O $any$ O O $any$ O O O $any$ O O $ErrorConstructor$ O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O $any$ O $string$ O O O O O O O O $any$ O O O O $MochaDone$ O O O O O O $IReleaseCordovaCommand$ O $any$ O $any$ O O $CommandType.releaseCordova$ O $any$ O $any$ O $CommandType.releaseCordova$ O $string$ O O O $null$ O O O $true$ O O O $string$ O O O $string$ O O O $false$ O O O $null$ O O O $string$ O O O O O $string$ O $any$ O $any$ O O O $void$ O O O O $any$ O O $CommandType$ O $any$ O $any$ O $CommandType.release$ O $string$ O O O $string$ O O O $boolean$ O O O $string$ O O O $string$ O O O $boolean$ O O O $null$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O O O $string$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $string$ O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $IReleaseCordovaCommand$ O O $any$ O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O O $any$ O O $any$ O O O $any$ O O $ErrorConstructor$ O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O $any$ O $string$ O O O O O O O O $any$ O O O O $MochaDone$ O O O O O O $IReleaseReactCommand$ O $any$ O $any$ O O $CommandType.releaseReact$ O $any$ O $any$ O $CommandType.releaseReact$ O $string$ O O O $null$ O O O $string$ O O O $string$ O O O $false$ O O O $null$ O O O $string$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $IReleaseReactCommand$ O O $any$ O O O O O $any$ O O $ErrorConstructor$ O O O O O O O O $any$ O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $MochaDone$ O O O O O O $IReleaseReactCommand$ O $any$ O $any$ O O $CommandType.releaseReact$ O $any$ O $any$ O $CommandType.releaseReact$ O $string$ O O O $null$ O O O $string$ O O O $string$ O O O $string$ O O O $false$ O O O $null$ O O O $string$ O O O O $void$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $IReleaseReactCommand$ O O $any$ O O O O O $any$ O O $ErrorConstructor$ O O O O O O O O $any$ O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $MochaDone$ O O O O O O $IReleaseReactCommand$ O $any$ O $any$ O O $CommandType.releaseReact$ O $any$ O $any$ O $CommandType.releaseReact$ O $string$ O O O $null$ O O O $string$ O O O $string$ O O O $false$ O O O $null$ O O O $string$ O O O O O $void$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $IReleaseReactCommand$ O O $any$ O O O O O $any$ O O $ErrorConstructor$ O O O O O O O O $any$ O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $MochaDone$ O O O O O O $string$ O O O O $IReleaseReactCommand$ O $any$ O $any$ O O $CommandType.releaseReact$ O $any$ O $any$ O $CommandType.releaseReact$ O $string$ O O O $string$ O O O $string$ O $string$ O $string$ O O O $string$ O O O $false$ O O O $null$ O O O $string$ O O O $string$ O O O O $void$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O $any$ O O O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $IReleaseReactCommand$ O O $any$ O O O O O $any$ O O $ErrorConstructor$ O O O O O O O O $any$ O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $MochaDone$ O O O O O O $string$ O O O O $IReleaseReactCommand$ O $any$ O $any$ O O $CommandType.releaseReact$ O $any$ O $any$ O $CommandType.releaseReact$ O $string$ O O O $null$ O O O $string$ O $string$ O $string$ O O O $string$ O O O $false$ O O O $null$ O O O $string$ O O O O $void$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O $any$ O O O O O O O O O $any$ O $any$ O $IReleaseReactCommand$ O O $any$ O O O O O O $IReleaseCommand$ O $any$ O $any$ O O O O $IReleaseReactCommand$ O $IReleaseCommand$ O $string$ O $any$ O $any$ O $any$ O $any$ O O O O O O $IReleaseCommand$ O $string$ O O O $any$ O $any$ O $any$ O $any$ O O O $string$ O $any$ O $any$ O O O O O O O O $string$ O $any$ O $any$ O O O O O O O $any$ O O O O $any$ O $any$ O $string$ O O O O $any$ O $any$ O $string$ O O O O $void$ O $JSON$ O $complex$ O $any$ O $any$ O O O O O O O O O O O O $IReleaseCommand$ O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $MochaDone$ O O O O O O $IReleaseReactCommand$ O $any$ O $any$ O O $CommandType.releaseReact$ O $any$ O $any$ O $CommandType.releaseReact$ O $string$ O O O $null$ O O O $string$ O O O $string$ O O O $false$ O O O $null$ O O O $string$ O O O O $void$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O $any$ O O O O O O O O O $any$ O $any$ O $IReleaseReactCommand$ O O $any$ O O O O O O $IReleaseCommand$ O $any$ O $any$ O O O O $T$ O $IReleaseReactCommand$ O O O $string$ O $any$ O $any$ O $any$ O $any$ O O O O O O $IReleaseCommand$ O $string$ O $string$ O $IReleaseCommand$ O $string$ O O O $any$ O $any$ O $any$ O $any$ O O O $string$ O $any$ O $any$ O O O O O O O O $string$ O $any$ O $any$ O O O O O O O $any$ O O O O $any$ O $any$ O $string$ O O O O $any$ O $any$ O $string$ O O O O $void$ O $JSON$ O $complex$ O $any$ O $any$ O O O O O O O O O O O O $IReleaseCommand$ O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $MochaDone$ O O O O O O $IReleaseReactCommand$ O $any$ O $any$ O O $CommandType.releaseReact$ O $any$ O $any$ O $CommandType.releaseReact$ O $string$ O O O $null$ O O O $string$ O O O $string$ O O O $false$ O O O $null$ O O O $string$ O O O O $void$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O $any$ O O O O O O O O O $any$ O $any$ O $IReleaseReactCommand$ O O $any$ O O O O O O $IReleaseCommand$ O $any$ O $any$ O O O O $T$ O $IReleaseReactCommand$ O O O $string$ O $any$ O $any$ O $any$ O $any$ O O O O O O $IReleaseCommand$ O $string$ O $string$ O $IReleaseCommand$ O $string$ O O O $any$ O $any$ O $any$ O $any$ O O O $string$ O $any$ O $any$ O O O O O O O O $string$ O $any$ O $any$ O O O O O O O $any$ O O O O $any$ O $any$ O $string$ O O O O $any$ O $any$ O $string$ O O O O $void$ O $JSON$ O $complex$ O $any$ O $any$ O O O O O O O O O O O O $IReleaseCommand$ O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $MochaDone$ O O O O O O $IReleaseReactCommand$ O $any$ O $any$ O O $CommandType.releaseReact$ O $any$ O $any$ O $CommandType.releaseReact$ O $string$ O O O $null$ O O O $string$ O O O $string$ O O O $false$ O O O $null$ O O O $string$ O O O O $void$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O $any$ O O O O O O O O O $any$ O $any$ O $IReleaseReactCommand$ O O $any$ O O O O O O $IReleaseCommand$ O $any$ O $any$ O O O O $T$ O $IReleaseReactCommand$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $IReleaseCommand$ O $string$ O $any$ O $IReleaseCommand$ O $string$ O O O $any$ O $any$ O $any$ O $any$ O O O $string$ O $any$ O $any$ O O O O O O O O $string$ O $any$ O $any$ O O O O O O O $any$ O O O O $any$ O $any$ O $string$ O O O O $any$ O $any$ O $string$ O O O O $void$ O $JSON$ O $complex$ O $any$ O $any$ O O O O O O O O O O O O $IReleaseCommand$ O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $MochaDone$ O O O O O O $string$ O O O O $IReleaseReactCommand$ O $any$ O $any$ O O $CommandType.releaseReact$ O $any$ O $any$ O $CommandType.releaseReact$ O $string$ O O O $null$ O O O $string$ O $string$ O $string$ O O O $true$ O O O $string$ O O O $false$ O O O $null$ O O O $string$ O O O $string$ O O O O $void$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O $any$ O O O O O O O O O $any$ O $any$ O $IReleaseReactCommand$ O O $any$ O O O O O O $IReleaseCommand$ O $any$ O $any$ O O O O $IReleaseReactCommand$ O $IReleaseCommand$ O $string$ O $any$ O $any$ O $any$ O $any$ O O O O O O $IReleaseCommand$ O $string$ O O O $any$ O $any$ O $any$ O $any$ O O O $string$ O $any$ O $any$ O O O O O O O O $string$ O $any$ O $any$ O O O O O O O $any$ O O O O $any$ O $any$ O $string$ O O O O $any$ O $any$ O $string$ O O O O $void$ O $JSON$ O $complex$ O $any$ O $any$ O O O O O O O O O O O O $IReleaseCommand$ O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $MochaDone$ O O O O O O $string$ O O O O $IReleaseReactCommand$ O $any$ O $any$ O O $CommandType.releaseReact$ O $any$ O $any$ O $CommandType.releaseReact$ O $string$ O O O $null$ O O O $string$ O $string$ O $string$ O O O $string$ O O O $false$ O O O $null$ O O O $string$ O O O $string$ O O O O $void$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O $any$ O O O O O O O O O $any$ O $any$ O $IReleaseReactCommand$ O O $any$ O O O O O O $IReleaseCommand$ O $any$ O $any$ O O O O $IReleaseReactCommand$ O $IReleaseCommand$ O $string$ O $any$ O $any$ O $any$ O $any$ O O O O O O $IReleaseCommand$ O $string$ O O O $any$ O $any$ O $any$ O $any$ O O O $string$ O $any$ O $any$ O O O O O O O O $string$ O $any$ O $any$ O O O O O O O $any$ O O O O $any$ O $any$ O $string$ O O O O $any$ O $any$ O $string$ O O O O $void$ O $JSON$ O $complex$ O $any$ O $any$ O O O O O O O O O O O O $IReleaseCommand$ O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $MochaDone$ O O O O O O $string$ O O O O $IReleaseReactCommand$ O $any$ O $any$ O O $CommandType.releaseReact$ O $any$ O $any$ O $CommandType.releaseReact$ O $string$ O O O $string$ O O O $string$ O $string$ O $string$ O O O $string$ O O O $false$ O O O $null$ O O O $string$ O O O $string$ O O O O $void$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O $any$ O O O O O O O O O $any$ O $any$ O $IReleaseReactCommand$ O O $any$ O O O O O O $IReleaseCommand$ O $any$ O $any$ O O O O $IReleaseReactCommand$ O $IReleaseCommand$ O $string$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O $string$ O $any$ O $any$ O O O O O O O O $string$ O $any$ O $any$ O O O O O O O $any$ O O O O $any$ O $any$ O $string$ O O O O $any$ O $any$ O $string$ O O O O $void$ O $JSON$ O $complex$ O $any$ O $any$ O O O O O O O O O O O O $IReleaseCommand$ O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $MochaDone$ O O O O O O $string$ O O O O $IReleaseReactCommand$ O $any$ O $any$ O O $CommandType.releaseReact$ O $any$ O $any$ O $CommandType.releaseReact$ O $string$ O O O $null$ O O O $string$ O $string$ O $string$ O O O $string$ O O O $false$ O O O $null$ O O O $string$ O O O O $void$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O $any$ O O O O O O O O O O $string$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $IReleaseReactCommand$ O O $any$ O O O O O O $IReleaseCommand$ O $any$ O $any$ O O O O $IReleaseReactCommand$ O $IReleaseCommand$ O $string$ O $any$ O $any$ O $any$ O $any$ O O O O O O $IReleaseCommand$ O $string$ O O O $any$ O $any$ O $any$ O $any$ O O O $string$ O $any$ O $any$ O O O O O O O O $string$ O $any$ O $any$ O O O O O O O $any$ O O O O $any$ O $any$ O $string$ O O O O $any$ O $any$ O $string$ O O O O $void$ O $JSON$ O $complex$ O $any$ O $any$ O O O O O O O O O O O O $IReleaseCommand$ O O $string$ O $undefined$ O $any$ O $any$ O $any$ O $string$ O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $MochaDone$ O O O O O O $string$ O O O O $IReleaseReactCommand$ O $any$ O $any$ O O $CommandType.releaseReact$ O $any$ O $any$ O $CommandType.releaseReact$ O $string$ O O O $null$ O O O $string$ O $string$ O $string$ O O O $string$ O O O $false$ O O O $null$ O O O $string$ O O O $string$ O O O O $void$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O $any$ O O O O O O O O O $any$ O $any$ O $IReleaseReactCommand$ O O $any$ O O O O O O $IReleaseCommand$ O $any$ O $any$ O O O O $IReleaseReactCommand$ O $IReleaseCommand$ O $string$ O $any$ O $any$ O $any$ O $any$ O O O O O O $IReleaseCommand$ O $string$ O O O $any$ O $any$ O $any$ O $any$ O O O $string$ O $any$ O $any$ O O O O O O O O $string$ O $any$ O $any$ O O O O O O O $any$ O O O O $any$ O $any$ O $string$ O O O O $any$ O $any$ O $string$ O O O O $void$ O $JSON$ O $complex$ O $any$ O $any$ O O O O O O O O O O O O $IReleaseCommand$ O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $MochaDone$ O O O O O O $IAccessKeyListCommand$ O $any$ O $any$ O O $CommandType.sessionList$ O $any$ O $any$ O $CommandType.sessionList$ O $string$ O O O O $any$ O $any$ O $IAccessKeyListCommand$ O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O $string$ O $any$ O $any$ O O O O O O O O $complex$ O O O $number$ O O O $string$ O O O O O O $void$ O $string$ O $complex$ O O $any$ O O O O O O O O O $any$ O O O O $MochaDone$ O O O O O O $string$ O O O O $ISessionRemoveCommand$ O $any$ O $any$ O O $CommandType.sessionRemove$ O $any$ O $any$ O $CommandType.sessionRemove$ O $string$ O $string$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $ISessionRemoveCommand$ O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $string$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O O O $any$ O O O O $MochaDone$ O O O O O O $string$ O O O O $ISessionRemoveCommand$ O $any$ O $any$ O O $CommandType.sessionRemove$ O $any$ O $any$ O $CommandType.sessionRemove$ O $string$ O $string$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $boolean$ O O O $any$ O $any$ O $ISessionRemoveCommand$ O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O O O $any$ O O O O $MochaDone$ O O O O O O $any$ O $any$ O $any$ O O O O $ISessionRemoveCommand$ O $any$ O $any$ O O $CommandType.sessionRemove$ O $any$ O $any$ O $CommandType.sessionRemove$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $boolean$ O O O $any$ O $any$ O $ISessionRemoveCommand$ O O $any$ O O O O O $any$ O O $ErrorConstructor$ O O O O O O O O $any$ O O $any$ O O O $any$ O O O O O O $any$ O O O O O O O $void$ O $IReleaseCommand$ O $any$ O $any$ O $MochaDone$ O $string$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $IReleaseCommand$ O O $any$ O O O O O O O O O O O O O $any$ O O O O O $any$ O O O $any$ O O $any$ O $any$ O $any$ O $any$ O $string$ O O $any$ O O O O O O O O O O
import * as assert from "s" ; import * as crypto from "s" ; import * as fs from "s" ; import * as hashUtils from "s" ; var mkdirp = require ( "s" ) ; import * as os from "s" ; import * as path from "s" ; import * as q from "s" ; var yauzl = require ( "s" ) ; import PackageManifest = hashUtils . PackageManifest ; import Promise = q . Promise ; function randomString ( ) { var stringLength = 0 ; return crypto . randomBytes ( Math . ceil ( stringLength / 0 ) ) . toString ( 's' ) . slice ( 0 , stringLength ) ; } function unzipToDirectory ( zipPath , directoryPath ) < void > { var deferred : q . Deferred < void > = q . defer < void > ( ) ; var originalCwd = process . cwd ( ) ; mkdirp ( directoryPath , ( err ) => { if ( err ) throw err ; process . chdir ( directoryPath ) ; yauzl . open ( zipPath , { lazyEntries : true } , function ( err , zipfile ) { if ( err ) throw err ; zipfile . readEntry ( ) ; zipfile . on ( "s" , function ( entry ) { if ( "s" . test ( entry . fileName ) ) { mkdirp ( entry . fileName , function ( err ) { if ( err ) throw err ; zipfile . readEntry ( ) ; } ) ; } else { zipfile . openReadStream ( entry , function ( err , readStream ) { if ( err ) throw err ; mkdirp ( path . dirname ( entry . fileName ) , function ( err ) { if ( err ) throw err ; readStream . pipe ( fs . createWriteStream ( entry . fileName ) ) ; readStream . on ( "s" , function ( ) { zipfile . readEntry ( ) ; } ) ; } ) ; } ) ; } } ) ; zipfile . on ( "s" , function ( err ) { if ( err ) deferred . reject ( err ) ; else deferred . resolve ( < void > null ) ; } ) ; } ) ; } ) ; return deferred . promise . finally ( ( ) => { process . chdir ( originalCwd ) ; } ) ; } describe ( "s" , ( ) => { const TEST_DIRECTORY = path . join ( os . tmpdir ( ) , "s" , randomString ( ) ) ; const TEST_ARCHIVE_FILE_PATH = path . join ( __dirname , "s" , "s" ) ; const TEST_ZIP_HASH = "s" ; const TEST_ZIP_MANIFEST_HASH = "s" ; const HASH_B = "s" ; const HASH_C = "s" ; const HASH_D = "s" ; const IGNORED_METADATA_ARCHIVE_FILE_PATH = path . join ( __dirname , "s" , "s" ) ; const INDEX_HASH = "s" ; it ( "s" , ( done ) => { hashUtils . hashFile ( TEST_ARCHIVE_FILE_PATH ) . done ( ( packageHash ) : void => { assert . equal ( packageHash , TEST_ZIP_HASH ) ; done ( ) ; } ) ; } ) ; it ( "s" , ( done ) => { hashUtils . generatePackageManifestFromZip ( TEST_ARCHIVE_FILE_PATH ) . done ( ( manifest ) : void => { var fileHashesMap = manifest . toMap ( ) ; assert . equal ( fileHashesMap . size , 0 ) ; var hash = fileHashesMap . get ( "s" ) ; assert . equal ( hash , HASH_B ) ; hash = fileHashesMap . get ( "s" ) ; assert . equal ( hash , HASH_C ) ; hash = fileHashesMap . get ( "s" ) ; assert . equal ( hash , HASH_D ) ; done ( ) ; } ) ; } ) ; it ( "s" , ( done ) => { var directory = path . join ( TEST_DIRECTORY , "s" ) ; unzipToDirectory ( TEST_ARCHIVE_FILE_PATH , directory ) . then ( ( ) => { return hashUtils . generatePackageManifestFromDirectory ( directory , directory ) ; } ) . done ( ( manifest ) : void => { var fileHashesMap = manifest . toMap ( ) ; assert . equal ( fileHashesMap . size , 0 ) ; var hash = fileHashesMap . get ( "s" ) ; assert . equal ( hash , HASH_B ) ; hash = fileHashesMap . get ( "s" ) ; assert . equal ( hash , HASH_C ) ; hash = fileHashesMap . get ( "s" ) ; assert . equal ( hash , HASH_D ) ; done ( ) ; } ) ; } ) ; it ( "s" , ( done ) => { hashUtils . generatePackageManifestFromZip ( TEST_ARCHIVE_FILE_PATH ) . then ( ( manifest ) => { return manifest . computePackageHash ( ) ; } ) . done ( ( packageHash ) : void => { assert . equal ( packageHash , TEST_ZIP_MANIFEST_HASH ) ; done ( ) ; } ) ; } ) ; it ( "s" , ( done ) => { hashUtils . generatePackageManifestFromZip ( IGNORED_METADATA_ARCHIVE_FILE_PATH ) . done ( ( manifest ) : void => { assert . equal ( manifest . toMap ( ) . size , 0 ) ; var hash = manifest . toMap ( ) . get ( "s" ) ; assert . equal ( hash , INDEX_HASH ) ; done ( ) ; } ) ; } ) ; it ( "s" , ( done ) => { var directory = path . join ( TEST_DIRECTORY , "s" ) ; unzipToDirectory ( IGNORED_METADATA_ARCHIVE_FILE_PATH , directory ) . then ( ( ) => { return hashUtils . generatePackageManifestFromDirectory ( directory , directory ) ; } ) . done ( ( manifest ) : void => { assert . equal ( manifest . toMap ( ) . size , 0 ) ; var hash = manifest . toMap ( ) . get ( "s" ) ; assert . equal ( hash , INDEX_HASH ) ; done ( ) ; } ) ; } ) ; } ) ;	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $any$ O $any$ O O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O $string$ O O O O $number$ O O O O $any$ O $any$ O $Math$ O $number$ O $number$ O O O O O $any$ O O O O $any$ O O O $number$ O O O O $Promise$ O $string$ O $string$ O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O O O $string$ O $any$ O $any$ O O O $any$ O $string$ O O $Error$ O O O O O $Error$ O O $Error$ O $any$ O $any$ O $string$ O O $any$ O $any$ O $string$ O O $boolean$ O O O O O O $Error$ O $any$ O O O O $Error$ O O $Error$ O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O O O O O O $boolean$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $Error$ O O O O $Error$ O O $Error$ O $any$ O $any$ O O O O O O O O O $any$ O $any$ O $any$ O O O $Error$ O $any$ O O O O $Error$ O O $Error$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Error$ O O O O $Error$ O O $Error$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O O O O O O O O O O O O O $any$ O $any$ O O O O O $Error$ O O O O $Error$ O $any$ O $any$ O $Error$ O O O $any$ O $any$ O O O O O O O O O O O O O O O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $string$ O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $string$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O O $any$ O O O O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O $string$ O O O O O $any$ O $any$ O $string$ O O O O $any$ O O O O O O O O O $any$ O O O O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O $PackageManifest$ O O O O O O $complex$ O $PackageManifest$ O $complex$ O O O $any$ O $any$ O $complex$ O $number$ O O O O O $string$ O $complex$ O $string$ O O O O $any$ O $any$ O $string$ O O O O $string$ O $complex$ O $string$ O O O O $any$ O $any$ O $string$ O O O O $string$ O $complex$ O $string$ O O O O $any$ O $any$ O $string$ O O O O $any$ O O O O O O O O O $any$ O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O $PackageManifest$ O O O O O O $complex$ O $PackageManifest$ O $complex$ O O O $any$ O $any$ O $complex$ O $number$ O O O O O $string$ O $complex$ O $string$ O O O O $any$ O $any$ O $string$ O O O O $string$ O $complex$ O $string$ O O O O $any$ O $any$ O $string$ O O O O $string$ O $complex$ O $string$ O O O O $any$ O $any$ O $string$ O O O O $any$ O O O O O O O O O $any$ O O O O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O $PackageManifest$ O O O O $PackageManifest$ O $any$ O O O O O O $any$ O O $string$ O O O O O $any$ O $any$ O $string$ O O O O $any$ O O O O O O O O O $any$ O O O O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O $PackageManifest$ O O O O O $any$ O $any$ O $PackageManifest$ O $complex$ O O O $number$ O O O O O $string$ O $PackageManifest$ O $complex$ O O O $string$ O O O O $any$ O $any$ O $string$ O O O O $any$ O O O O O O O O O $any$ O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O $PackageManifest$ O O O O O $any$ O $any$ O $PackageManifest$ O $complex$ O O O $number$ O O O O O $string$ O $PackageManifest$ O $complex$ O O O $string$ O O O O $any$ O $any$ O $string$ O O O O $any$ O O O O O O O O O O O O
'js' "s" ; var gulp = require ( "s" ) ; gulp . task ( "s" , [ "s" , "s" ] ) ; gulp . task ( "s" , [ "s" , "s" ] ) ; gulp . task ( "s" , [ "s" , "s" ] ) ;	O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O O O O O $any$ O $any$ O O O O O O O O O O $any$ O $any$ O O O O O O O O O O
'js' "s" ; var gulp = require ( "s" ) ; var del = require ( "s" ) ; function deleteTask ( glob , next ) { del ( glob , null , next ) ; } var cliCleanList = [ "s" , "s" ] ; var sdkCleanList = [ "s" , "s" ] ; gulp . task ( "s" , function ( next ) { deleteTask ( cliCleanList , next ) ; } ) ; gulp . task ( "s" , function ( next ) { deleteTask ( sdkCleanList , next ) ; } ) ; gulp . task ( "s" , [ "s" , "s" ] ) ;	O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $void$ O $any$ O $any$ O O $any$ O $any$ O O O $any$ O O O O $string[]$ O O O O O O O O $string[]$ O O O O O O O $any$ O $any$ O O O O O $any$ O O $void$ O $string[]$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O O $void$ O $string[]$ O $any$ O O O O O $any$ O $any$ O O O O O O O O O O
'js' "s" ; var gulp = require ( "s" ) ; var merge = require ( "s" ) ; var plugins = require ( "s" ) ( ) ; function contentTask ( cwd ) { var options = { cwd : cwd , base : "s" + cwd } ; return gulp . src ( [ "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" ] , options ) . pipe ( gulp . dest ( "s" , options ) ) ; } gulp . task ( "s" , function ( ) { return contentTask ( "s" ) ; } ) ; gulp . task ( "s" , function ( ) { return contentTask ( "s" ) ; } ) ;	O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O O O $any$ O $any$ O O O $complex$ O O $any$ O $any$ O $string$ O O O $any$ O O O $any$ O $any$ O O O O O O O O O O O O O O O O O O O O O $complex$ O O $any$ O $any$ O $any$ O O O $complex$ O O O O $any$ O $any$ O O O O O O O O $any$ O O O O O O O $any$ O $any$ O O O O O O O O $any$ O O O O O O O
'js' "s" ; var gulp = require ( "s" ) ; gulp . task ( "s" , [ "s" ] ) ;	O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O O O
'js' var gulp = require ( "s" ) ; var install = require ( "s" ) ; var path = require ( "s" ) ; var runSequence = require ( "s" ) ; gulp . task ( "s" , function ( done ) { var packages = [ path . join ( __dirname , "s" , "s" , "s" ) , path . join ( __dirname , "s" , "s" , "s" ) ] ; return gulp . src ( packages ) . pipe ( install ( ) ) ; } ) ;	O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O $any$ O O O $any[]$ O O $any$ O $any$ O $any$ O O O O O O O O $any$ O $any$ O $any$ O O O O O O O O O O $any$ O $any$ O $any[]$ O O $any$ O $any$ O O O O O O O
'js' var gulp = require ( "s" ) ; var which = require ( "s" ) ; var path = require ( "s" ) ; var spawn = require ( "s" ) . spawn ; var runSequence = require ( "s" ) ; function linkPackage ( folder , createBinLinks , callback ) { if ( typeof createBinLinks === "s" ) { callback = createBinLinks ; createBinLinks = false ; } which ( "s" , function ( err , resolvedPath ) { if ( err ) return callback ( err ) ; var args = [ "s" ] ; if ( ! createBinLinks ) { args . push ( "s" ) ; } var link = spawn ( resolvedPath , args , { cwd : folder } ) ; link . stdout . pipe ( process . stdout ) ; link . stderr . pipe ( process . stderr ) ; link . on ( "s" , callback ) ; } ) ; } function linkDependency ( folder , sourcePackage , callback ) { which ( "s" , function ( err , resolvedPath ) { if ( err ) return callback ( err ) ; var link = spawn ( resolvedPath , [ "s" , sourcePackage ] , { cwd : folder } ) ; link . stdout . pipe ( process . stdout ) ; link . stderr . pipe ( process . stderr ) ; link . on ( "s" , callback ) ; } ) ; } gulp . task ( "s" , [ "s" ] , function ( done ) { linkPackage ( path . join ( __dirname , "s" , "s" , "s" ) , done ) ; } ) ; gulp . task ( "s" , function ( done ) { linkDependency ( path . join ( __dirname , "s" , "s" ) , "s" , done ) ; } ) ; gulp . task ( "s" , function ( done ) { linkDependency ( path . join ( __dirname , "s" , "s" ) , "s" , function ( ) { runSequence ( "s" , function ( ) { linkPackage ( path . join ( __dirname , "s" , "s" , "s" ) , true , done ) ; } ) ; } ) ; } ) ; gulp . task ( "s" , function ( done ) { runSequence ( "s" , "s" , done ) ; } ) ; gulp . task ( "s" , function ( done ) { runSequence ( "s" , "s" , done ) ; } ) ;	O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O $any$ O O $any$ O $any$ O O O O O $void$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O O O O $any$ O O $any$ O $any$ O O O $string[]$ O O O O O O O O $any$ O O $string[]$ O $number$ O O O O O O $any$ O $any$ O $any$ O $string[]$ O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O O $any$ O O O O O O O $void$ O $any$ O $any$ O $any$ O O $any$ O O O O O $any$ O $any$ O O O O $any$ O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O O $any$ O O O O O O $any$ O $any$ O O O O O O O O O $any$ O O $void$ O $any$ O $any$ O $any$ O O O O O O O O $any$ O O O O O $any$ O $any$ O O O O O $any$ O O $void$ O $any$ O $any$ O $any$ O O O O O O O O $any$ O O O O O $any$ O $any$ O O O O O $any$ O O $void$ O $any$ O $any$ O $any$ O O O O O O O O O O O O $any$ O O O O O O O $void$ O $any$ O $any$ O $any$ O O O O O O O O O O $any$ O O O O O O O O O O O $any$ O $any$ O O O O O $any$ O O $any$ O O O O O $any$ O O O O O $any$ O $any$ O O O O O $any$ O O $any$ O O O O O $any$ O O O O O
'js' "s" ; var chmod = require ( "s" ) ; var fs = require ( "s" ) ; var gulp = require ( "s" ) ; var plugins = require ( "s" ) ( ) ; var sourcemaps = require ( 's' ) ; var through = require ( "s" ) ; var tsc = require ( "s" ) ; var tsJsxLoader = require ( "s" ) ; var merge = require ( "s" ) ; var dtsGenerator = require ( "s" ) ; var generatedDefinitionDependencies = { sdk : [ ] , cli : [ "s" ] } ; function tsJsxPipe ( file , enc , cb ) { var fileContent = file . contents . toString ( ) ; file . contents = new Buffer ( tsJsxLoader . call ( { cacheable : function ( ) { } } , fileContent ) , enc ) ; cb ( null , file ) ; } function scriptTask ( cwd , jsx ) { var options = { cwd : __dirname + "s" + cwd , base : __dirname + "s" + cwd } ; var generatedDefinitions = [ "s" , "s" ] . concat ( generatedDefinitionDependencies [ cwd ] . map ( function ( dep ) { return "s" + dep + "s" ; } ) ) ; var tsProj = plugins . typescript . createProject ( "s" , { typescript : tsc , declarationFiles : true } ) ; var fullReporter = plugins . typescript . reporter . fullReporter ( true ) ; var errorCatch = through . obj ( ) ; var tsResult = merge ( [ gulp . src ( "s" , options ) , gulp . src ( generatedDefinitions ) ] ) . pipe ( sourcemaps . init ( ) ) . pipe ( plugins . if ( jsx , through . obj ( tsJsxPipe ) ) ) . pipe ( plugins . typescript ( tsProj , undefined , { error : fullReporter . error , finish : function ( results ) { fullReporter . finish ( results ) ; if ( results . syntaxErrors || results . globalErrors || results . semanticErrors || results . emitErrors ) { if ( ! process . env . WATCHING ) { errorCatch . emit ( "s" , new plugins . util . PluginError ( "s" , "s" ) ) ; } } } } ) ) ; return merge ( [ tsResult . js . pipe ( sourcemaps . write ( "s" , { sourceRoot : "s" } ) ) . pipe ( gulp . dest ( "s" , options ) ) , tsResult . dts . pipe ( gulp . dest ( "s" , options ) ) ] ) . pipe ( errorCatch ) ; } function makeExecutable ( path ) { var contents = fs . readFileSync ( path ) ; fs . writeFileSync ( path , "s" + contents ) ; chmod ( path , { execute : true } ) ; } gulp . task ( "s" , [ "s" ] ) ; gulp . task ( "s" , [ "s" ] , function ( ) { return scriptTask ( "s" ) ; } ) ; gulp . task ( "s" , [ "s" , "s" ] , function ( ) { return scriptTask ( "s" ) ; } ) ; gulp . task ( "s" , [ "s" ] , function ( ) { makeExecutable ( __dirname + "s" ) ; } ) ; gulp . task ( "s" , [ "s" ] , function ( ) { dtsGenerator . generate ( { name : "s" , main : "s" , baseDir : "s" , files : [ "s" , "s" ] , out : "s" } ) ; } ) ; gulp . task ( "s" , [ "s" ] ) ; gulp . task ( "s" , [ "s" ] ) ;	O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $complex$ O O $undefined[]$ O O O O $string[]$ O O O O O O O $void$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O $void$ O O O O O O O O $any$ O O $any$ O O $any$ O O O $any$ O O O O $any$ O $any$ O $any$ O O O $complex$ O O $string$ O $any$ O O O $any$ O $string$ O $any$ O O O $any$ O O O $string[]$ O O O O O O O $complex$ O $complex$ O $any$ O O $any$ O O O $any$ O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $boolean$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O O O $complex$ O O $any$ O $any$ O $string[]$ O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $void$ O O O O $any$ O $any$ O $any$ O $any$ O $undefined$ O O $any$ O $any$ O $any$ O $void$ O O O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O O O O O O O O O O O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $string$ O O O O O O $any$ O $any$ O $any$ O O O $complex$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $complex$ O O O O O $any$ O $any$ O O O O $void$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O O $any$ O $any$ O O $boolean$ O O O O O O $any$ O $any$ O O O O O O O O $any$ O $any$ O O O O O O O O O O O O $any$ O O O O O O O $any$ O $any$ O O O O O O O O O O O O O O $any$ O O O O O O O $any$ O $any$ O O O O O O O O O O O $void$ O $any$ O O O O O O O $any$ O $any$ O O O O O O O O O O O $any$ O $any$ O O $string$ O O O $string$ O O O $string$ O O O $string[]$ O O O O O O O $string$ O O O O O O O O $any$ O $any$ O O O O O O O O $any$ O $any$ O O O O O O O O
'js' "s" ; var gulp = require ( "s" ) ; var plugins = require ( "s" ) ( ) ; var mochaConfig = { reporter : process . env . REPORTER || "s" , timeout : parseInt ( process . env . TIMEOUT ) || 0 } ; var projects = { "s" : [ "s" ] , "s" : [ "s" ] } ; var projectNames = Object . keys ( projects ) ; var testPaths = projectNames . map ( testPathFromName ) ; var sourcesPaths = projectNames . map ( sourcePathFromName ) ; function testPathFromName ( name ) { return name + "s" } function sourcePathFromName ( name ) { return name + "s" } function runTests ( sources , tests , done ) { require ( "s" ) . config ( { path : "s" , silent : true } ) ; gulp . src ( sources ) . pipe ( plugins . istanbul ( { includeUntested : true } ) ) . pipe ( plugins . istanbul . hookRequire ( ) ) . on ( "s" , function ( ) { gulp . src ( tests , { read : false } ) . pipe ( plugins . if ( process . env . WATCHING , plugins . plumber ( ) ) ) . pipe ( plugins . mocha ( mochaConfig ) ) . pipe ( plugins . istanbul . writeReports ( ) ) . on ( "s" , done ) ; } ) ; } function testTask ( name , done ) { runTests ( [ sourcePathFromName ( name ) ] , [ testPathFromName ( name ) ] , done ) ; } projectNames . forEach ( function ( projectName ) { var projectDeps = projects [ projectName ] ; gulp . task ( "s" + projectName , projectDeps , function ( done ) { testTask ( projectName , done ) ; } ) ; } ) ; gulp . task ( "s" , [ "s" ] , function ( done ) { runTests ( sourcesPaths , testPaths , done ) ; } ) ;	O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O O O $complex$ O O $any$ O $any$ O $any$ O $any$ O O O $number$ O $number$ O $any$ O $any$ O $any$ O O O O O O $complex$ O O O O O O O O O O O O O O O O $string[]$ O $ObjectConstructor$ O $complex$ O $complex$ O O O $string[]$ O $string[]$ O $U[]$ O $string$ O O O $string[]$ O $string[]$ O $U[]$ O $string$ O O O $string$ O $any$ O O O $any$ O O O O $string$ O $any$ O O O $any$ O O O O $void$ O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O O $string$ O O O $boolean$ O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O $boolean$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O O $boolean$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $complex$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O $any$ O O O O O O O $void$ O $any$ O $any$ O O $void$ O O $string$ O $any$ O O O O $string$ O $any$ O O O $any$ O O O $string[]$ O $void$ O O O $string$ O O O $any$ O $complex$ O $string$ O O $any$ O $any$ O O O $string$ O $any$ O O O $any$ O O $void$ O $string$ O $any$ O O O O O O O O $any$ O $any$ O O O O O O O O O $any$ O O $void$ O $string[]$ O $string[]$ O $any$ O O O O O
'js' "s" ; var gulp = require ( "s" ) ; var plugins = require ( "s" ) ( ) ; gulp . task ( "s" , function ( done ) { plugins . tsd ( { command : "s" , config : "s" } , done ) ; } ) ;	O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O $any$ O O $any$ O $any$ O O $string$ O O O $string$ O O O O $any$ O O O O O
import { UpdateCheckResponse , UpdateCheckRequest , DeploymentStatusReport , DownloadReport } from "s" ; export module Http { export const enum Verb { GET , HEAD , POST , PUT , DELETE , TRACE , OPTIONS , CONNECT , PATCH } export interface Response { statusCode : number ; body ? : string ; } export interface Requester { request ( verb , url , callback < Response > ) : void ; request ( verb , url , requestBody , callback < Response > ) : void ; } } export interface Package { deploymentKey : string ; description : string ; label : string ; appVersion : string ; isMandatory : boolean ; packageHash : string ; packageSize : number ; } export interface RemotePackage extends Package { downloadUrl : string ; } export interface NativeUpdateNotification { updateAppVersion : boolean ; appVersion : string ; } export interface LocalPackage extends Package { localPath : string ; } export interface Callback < T > { ( error , parameter : T ) : void ; } export interface Configuration { appVersion : string ; clientUniqueId : string ; deploymentKey : string ; serverUrl : string ; ignoreAppVersion ? : boolean } export class AcquisitionStatus { public static DeploymentSucceeded = "s" ; public static DeploymentFailed = "s" ; } export class AcquisitionManager { private _appVersion : string ; private _clientUniqueId : string ; private _deploymentKey : string ; private _httpRequester : Http . Requester ; private _ignoreAppVersion : boolean ; private _serverUrl : string ; private _publicPrefixUrl : string = "s" ; constructor ( httpRequester : Http . Requester , configuration ) { this . _httpRequester = httpRequester ; this . _serverUrl = configuration . serverUrl ; if ( this . _serverUrl . slice ( - 0 ) !== "s" ) { this . _serverUrl += "s" ; } this . _appVersion = configuration . appVersion ; this . _clientUniqueId = configuration . clientUniqueId ; this . _deploymentKey = configuration . deploymentKey ; this . _ignoreAppVersion = configuration . ignoreAppVersion ; } public queryUpdateWithCurrentPackage ( currentPackage , callback ? < RemotePackage | NativeUpdateNotification > ) { if ( ! currentPackage || ! currentPackage . appVersion ) { throw new Error ( "s" ) ; } var updateRequest = { deployment_key : this . _deploymentKey , app_version : currentPackage . appVersion , package_hash : currentPackage . packageHash , is_companion : this . _ignoreAppVersion , label : currentPackage . label , client_unique_id : this . _clientUniqueId } ; var requestUrl = this . _serverUrl + this . _publicPrefixUrl + "s" + queryStringify ( updateRequest ) ; this . _httpRequester . request ( Http . Verb . GET , requestUrl , ( error , response : Http . Response ) => { if ( error ) { callback ( error , null ) ; return ; } if ( response . statusCode !== 0 ) { let errorMessage ; if ( response . statusCode === 0 ) { errorMessage = `template` ; } else { errorMessage = `template` ; } callback ( new Error ( errorMessage ) , null ) ; return ; } try { var responseObject = JSON . parse ( response . body ) ; var updateInfo = responseObject . update_info ; } catch ( error ) { callback ( error , null ) ; return ; } if ( ! updateInfo ) { callback ( error , null ) ; return ; } else if ( updateInfo . update_app_version ) { callback ( null , { updateAppVersion : true , appVersion : updateInfo . target_binary_range } ) ; return ; } else if ( ! updateInfo . is_available ) { callback ( null , null ) ; return ; } var remotePackage = { deploymentKey : this . _deploymentKey , description : updateInfo . description , label : updateInfo . label , appVersion : updateInfo . target_binary_range , isMandatory : updateInfo . is_mandatory , packageHash : updateInfo . package_hash , packageSize : updateInfo . package_size , downloadUrl : updateInfo . download_url } ; callback ( null , remotePackage ) ; } ) ; } public reportStatusDeploy ( deployedPackage ? , status ? , previousLabelOrAppVersion ? , previousDeploymentKey ? , callback ? < void > ) { var url = this . _serverUrl + this . _publicPrefixUrl + "s" ; var body = { app_version : this . _appVersion , deployment_key : this . _deploymentKey } ; if ( this . _clientUniqueId ) { body . client_unique_id = this . _clientUniqueId ; } if ( deployedPackage ) { body . label = deployedPackage . label ; body . app_version = deployedPackage . appVersion ; switch ( status ) { case AcquisitionStatus . DeploymentSucceeded : case AcquisitionStatus . DeploymentFailed : body . status = status ; break ; default : if ( callback ) { if ( ! status ) { callback ( new Error ( "s" ) , null ) ; } else { callback ( new Error ( "s" + status + "s" ) , null ) ; } } return ; } } if ( previousLabelOrAppVersion ) { body . previous_label_or_app_version = previousLabelOrAppVersion ; } if ( previousDeploymentKey ) { body . previous_deployment_key = previousDeploymentKey ; } callback = typeof arguments [ arguments . length - 0 ] === "s" && arguments [ arguments . length - 0 ] ; this . _httpRequester . request ( Http . Verb . POST , url , JSON . stringify ( body ) , ( error , response : Http . Response ) : void => { if ( callback ) { if ( error ) { callback ( error , null ) ; return ; } if ( response . statusCode !== 0 ) { callback ( new Error ( response . statusCode + "s" + response . body ) , null ) ; return ; } callback ( null , null ) ; } } ) ; } public reportStatusDownload ( downloadedPackage , callback ? < void > ) { var url = this . _serverUrl + this . _publicPrefixUrl + "s" ; var body = { client_unique_id : this . _clientUniqueId , deployment_key : this . _deploymentKey , label : downloadedPackage . label } ; this . _httpRequester . request ( Http . Verb . POST , url , JSON . stringify ( body ) , ( error , response : Http . Response ) : void => { if ( callback ) { if ( error ) { callback ( error , null ) ; return ; } if ( response . statusCode !== 0 ) { callback ( new Error ( response . statusCode + "s" + response . body ) , null ) ; return ; } callback ( null , null ) ; } } ) ; } } function queryStringify ( object ) { var queryString = "s" ; var isFirst = true ; for ( var property in object ) { if ( object . hasOwnProperty ( property ) ) { var value = ( < any > object ) [ property ] ; if ( value !== null && typeof value !== "s" ) { if ( ! isFirst ) { queryString += "s" ; } queryString += encodeURIComponent ( property ) + "s" ; queryString += encodeURIComponent ( value ) ; } isFirst = false ; } } return queryString ; }	O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O $any$ O $Verb.GET$ O $Verb.HEAD$ O $Verb.POST$ O $Verb.PUT$ O $Verb.DELETE$ O $Verb.TRACE$ O $Verb.OPTIONS$ O $Verb.CONNECT$ O $Verb.PATCH$ O O O $any$ O $number$ O O O $string$ O O O O O O O $any$ O $complex$ O $Verb$ O $string$ O $Callback$ O $any$ O O O O O $complex$ O $Verb$ O $string$ O $string$ O $Callback$ O $any$ O O O O O O O O O $any$ O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $boolean$ O O O $string$ O O O $number$ O O O O O O $any$ O $any$ O $string$ O O O O O O $any$ O $boolean$ O O O $string$ O O O O O O $any$ O $any$ O $string$ O O O O O O $any$ O $any$ O O O $Error$ O $T$ O $any$ O O O O O O O $any$ O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $boolean$ O O O O O O $any$ O O O $string$ O O O O O $string$ O O O O O O $any$ O O $string$ O O O O $string$ O O O O $string$ O O O O $Requester$ O $any$ O $any$ O O $boolean$ O O O O $string$ O O O O $string$ O O O O O O O $Requester$ O $any$ O $any$ O $Configuration$ O O O O $Requester$ O $Requester$ O O O $string$ O $Configuration$ O $string$ O O O O O $string$ O $string$ O O O O O O O O O O $string$ O O O O O O $string$ O $Configuration$ O $string$ O O O $string$ O $Configuration$ O $string$ O O O $string$ O $Configuration$ O $string$ O O O $boolean$ O $Configuration$ O $boolean$ O O O $void$ O $Package$ O $complex$ $Callback$ O $any$ O $any$ O O O O O O $Package$ O O $Package$ O $string$ O O O O $ErrorConstructor$ O O O O O O $UpdateCheckRequest$ O O $string$ O O O $string$ O $string$ O $Package$ O $string$ O $string$ O $Package$ O $string$ O $boolean$ O O O $boolean$ O $string$ O $Package$ O $string$ O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O $UpdateCheckRequest$ O O O O $Requester$ O $complex$ O $any$ O $any$ O $Verb.GET$ O $string$ O O $Error$ O $Response$ O $any$ O $any$ O O O O O $Error$ O O $complex$ O $Error$ O O O O O O O O O $Response$ O $number$ O O O O O $any$ O O O $Response$ O $number$ O O O O $any$ O O O O O O $any$ O O O O $complex$ O O $ErrorConstructor$ O $any$ O O O O O O O O O O O $any$ O $JSON$ O $any$ O $Response$ O $string$ O O O $UpdateCheckResponse$ O $any$ O $any$ O O O O $any$ O O $complex$ O $any$ O O O O O O O O O O $UpdateCheckResponse$ O O $complex$ O $Error$ O O O O O O O O O O $UpdateCheckResponse$ O $boolean$ O O $complex$ O O O O $true$ O O O $string$ O $UpdateCheckResponse$ O $string$ O O O O O O O O O O $UpdateCheckResponse$ O $boolean$ O O $complex$ O O O O O O O O O O $RemotePackage$ O O $string$ O O O $string$ O $string$ O $UpdateCheckResponse$ O $string$ O $string$ O $UpdateCheckResponse$ O $string$ O $string$ O $UpdateCheckResponse$ O $string$ O $boolean$ O $UpdateCheckResponse$ O $boolean$ O $string$ O $UpdateCheckResponse$ O $string$ O $number$ O $UpdateCheckResponse$ O $number$ O $string$ O $UpdateCheckResponse$ O $string$ O O $complex$ O O O $RemotePackage$ O O O O O O O $void$ O $Package$ $Package$ O $string$ $string$ O $string$ $string$ O $string$ $string$ O $Callback<void>$ $Callback$ O O O O O O $string$ O O O $string$ O O O $string$ O O O O $DeploymentStatusReport$ O O $string$ O O O $string$ O $string$ O O O $string$ O O O O O O $string$ O O $DeploymentStatusReport$ O $string$ O O O $string$ O O O O $Package$ O O $DeploymentStatusReport$ O $string$ O $Package$ O $string$ O $DeploymentStatusReport$ O $string$ O $Package$ O $string$ O O O $string$ O O O $any$ O $string$ O O $any$ O $string$ O $DeploymentStatusReport$ O $string$ O $string$ O O O O O O O $Callback<void>$ O O O O O $string$ O O $Callback<void>$ O O $ErrorConstructor$ O O O O O O O O O O $Callback<void>$ O O $ErrorConstructor$ O O O $string$ O O O O O O O O O O O O O O O $string$ O O $DeploymentStatusReport$ O $string$ O $string$ O O O O $string$ O O $DeploymentStatusReport$ O $string$ O $string$ O O $Callback<void>$ O O $IArguments$ O $IArguments$ O $number$ O O O O O O $IArguments$ O $IArguments$ O $number$ O O O O O O $Requester$ O $complex$ O $any$ O $any$ O $Verb.POST$ O $string$ O $JSON$ O $complex$ O $DeploymentStatusReport$ O O O $Error$ O $Response$ O $any$ O $any$ O O O O O O O $Callback<void>$ O O O O $Error$ O O $Callback<void>$ O $Error$ O O O O O O O O O $Response$ O $number$ O O O O $Callback<void>$ O O $ErrorConstructor$ O $Response$ O $number$ O O O $Response$ O $string$ O O O O O O O O $Callback<void>$ O O O O O O O O O O O O $void$ O $Package$ O $Callback<void>$ $Callback$ O O O O O O $string$ O O O $string$ O O O $string$ O O O O $DownloadReport$ O O $string$ O O O $string$ O $string$ O O O $string$ O $string$ O $Package$ O $string$ O O O O $Requester$ O $complex$ O $any$ O $any$ O $Verb.POST$ O $string$ O $JSON$ O $complex$ O $DownloadReport$ O O O $Error$ O $Response$ O $any$ O $any$ O O O O O O O $Callback<void>$ O O O O $Error$ O O $Callback<void>$ O $Error$ O O O O O O O O O $Response$ O $number$ O O O O $Callback<void>$ O O $ErrorConstructor$ O $Response$ O $number$ O O O $Response$ O $string$ O O O O O O O O $Callback<void>$ O O O O O O O O O O O O O $string$ O $Object$ O O O $string$ O O O O $boolean$ O O O O O O $string$ O $Object$ O O O O $Object$ O $boolean$ O $string$ O O O O $string$ O O O O O $Object$ O O $string$ O O O O $string$ O O O O $string$ O O O O O O O $boolean$ O O $string$ O O O O $string$ O $string$ O $string$ O O O O $string$ O $string$ O $string$ O O O $boolean$ O O O O O O $string$ O O
export { AccessKeyRequest , Account , App , AppCreationRequest , CollaboratorMap , CollaboratorProperties , Deployment , DeploymentMetrics , Package , PackageInfo , AccessKey as ServerAccessKey , UpdateMetrics } from "s" ; export interface CodePushError { message : string ; statusCode : number ; } export interface AccessKey { createdTime : number ; expires : number ; name : string ; key ? : string ; } export interface Session { loggedInTime : number ; machineName : string ; } export type Headers = { [ headerName ] : string } ;	O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $string$ O O O $number$ O O O O O O $any$ O $number$ O O O $number$ O O O $string$ O O O $string$ O O O O O O O $any$ O $number$ O O O $string$ O O O O O O $any$ O O O $string$ O O O O O
import * as fs from "s" ; import * as os from "s" ; import * as path from "s" ; import Q = require ( "s" ) ; import slash = require ( "s" ) ; import superagent = require ( "s" ) ; import * as recursiveFs from "s" ; import * as yazl from "s" ; import Promise = Q . Promise ; import { AccessKey , AccessKeyRequest , Account , App , AppCreationRequest , CodePushError , CollaboratorMap , CollaboratorProperties , Deployment , DeploymentMetrics , Headers , Package , PackageInfo , ServerAccessKey , Session , UpdateMetrics } from "s" ; var superproxy = require ( "s" ) ; superproxy ( superagent ) ; var packageJson = require ( "s" ) ; interface JsonResponse { headers : Headers ; body ? : any ; } interface PackageFile { isTemporary : boolean ; path : string ; } function urlEncode ( strings : string [ ] , ... values : string [ ] ) { var result = "s" ; for ( var i = 0 ; i < strings . length ; i ++ ) { result += strings [ i ] ; if ( i < values . length ) { result += encodeURIComponent ( values [ i ] ) ; } } return result ; } class AccountManager { public static AppPermission = { OWNER : "s" , COLLABORATOR : "s" } ; public static SERVER_URL = "s" ; public static MOBILE_CENTER_SERVER_URL = "s" ; private static API_VERSION : number = 0 ; public static ERROR_GATEWAY_TIMEOUT = 0 ; public static ERROR_INTERNAL_SERVER = 0 ; public static ERROR_NOT_FOUND = 0 ; public static ERROR_CONFLICT = 0 ; public static ERROR_UNAUTHORIZED = 0 ; private _accessKey : string ; private _serverUrl : string ; private _customHeaders : Headers ; private _proxy : string ; constructor ( accessKey , customHeaders ? , serverUrl ? , proxy ? ) { if ( ! accessKey ) throw new Error ( "s" ) ; this . _accessKey = accessKey ; this . _customHeaders = customHeaders ; this . _serverUrl = serverUrl || AccountManager . SERVER_URL ; this . _proxy = proxy ; } public get accessKey ( ) : string { return this . _accessKey ; } public isAuthenticated ( throwIfUnauthorized ? ) < boolean > { return Promise < any > ( ( resolve , reject , notify ) => { var request : superagent . Request < any > = superagent . get ( this . _serverUrl + `template` ) ; if ( this . _proxy ) ( < any > request ) . proxy ( this . _proxy ) ; this . attachCredentials ( request ) ; request . end ( ( err , res : superagent . Response ) => { var status = this . getErrorStatus ( err , res ) ; if ( err && status !== AccountManager . ERROR_UNAUTHORIZED ) { reject ( this . getCodePushError ( err , res ) ) ; return ; } var authenticated = status === 0 ; if ( ! authenticated && throwIfUnauthorized ) { reject ( this . getCodePushError ( err , res ) ) ; return ; } resolve ( authenticated ) ; } ) ; } ) ; } public addAccessKey ( friendlyName , ttl ? ) < AccessKey > { if ( ! friendlyName ) { throw new Error ( "s" ) ; } var accessKeyRequest = { createdBy : os . hostname ( ) , friendlyName , ttl } ; return this . post ( `template` , JSON . stringify ( accessKeyRequest ) , true ) . then ( ( response ) => { return { createdTime : response . body . accessKey . createdTime , expires : response . body . accessKey . expires , key : response . body . accessKey . name , name : response . body . accessKey . friendlyName } ; } ) ; } public getAccessKey ( accessKeyName ) < AccessKey > { return this . get ( `template` ) . then ( ( res ) => { return { createdTime : res . body . accessKey . createdTime , expires : res . body . accessKey . expires , name : res . body . accessKey . friendlyName , } ; } ) ; } public getAccessKeys ( ) < AccessKey [ ] > { return this . get ( `template` ) . then ( ( res ) => { var accessKeys : AccessKey [ ] = [ ] ; res . body . accessKeys . forEach ( ( serverAccessKey ) => { ! serverAccessKey . isSession && accessKeys . push ( { createdTime : serverAccessKey . createdTime , expires : serverAccessKey . expires , name : serverAccessKey . friendlyName } ) ; } ) ; return accessKeys ; } ) ; } public getSessions ( ) < Session [ ] > { return this . get ( `template` ) . then ( ( res ) => { var sessionMap : { [ machineName ] : Session } = { } ; var now = new Date ( ) . getTime ( ) ; res . body . accessKeys . forEach ( ( serverAccessKey ) => { if ( serverAccessKey . isSession && serverAccessKey . expires > now ) { sessionMap [ serverAccessKey . createdBy ] = { loggedInTime : serverAccessKey . createdTime , machineName : serverAccessKey . createdBy } ; } } ) ; var sessions : Session [ ] = Object . keys ( sessionMap ) . map ( ( machineName ) => sessionMap [ machineName ] ) ; return sessions ; } ) ; } public patchAccessKey ( oldName , newName ? , ttl ? ) < AccessKey > { var accessKeyRequest = { friendlyName : newName , ttl } ; return this . patch ( `template` , JSON . stringify ( accessKeyRequest ) ) . then ( ( res ) => { return { createdTime : res . body . accessKey . createdTime , expires : res . body . accessKey . expires , name : res . body . accessKey . friendlyName , } ; } ) ; } public removeAccessKey ( name ) < void > { return this . del ( `template` ) . then ( ( ) => null ) ; } public removeSession ( machineName ) < void > { return this . del ( `template` ) . then ( ( ) => null ) ; } public getAccountInfo ( ) < Account > { return this . get ( `template` ) . then ( ( res ) => res . body . account ) ; } public getApps ( ) < App [ ] > { return this . get ( `template` ) . then ( ( res ) => res . body . apps ) ; } public getApp ( appName ) < App > { return this . get ( `template` ) . then ( ( res ) => res . body . app ) ; } public addApp ( appName , appOs , appPlatform , manuallyProvisionDeployments = false ) < App > { var app = { name : appName , os : appOs , platform : appPlatform , manuallyProvisionDeployments : manuallyProvisionDeployments } ; return this . post ( `template` , JSON . stringify ( app ) , false ) . then ( ( ) => app ) ; } public removeApp ( appName ) < void > { return this . del ( `template` ) . then ( ( ) => null ) ; } public renameApp ( oldAppName , newAppName ) < void > { return this . patch ( `template` , JSON . stringify ( { name : newAppName } ) ) . then ( ( ) => null ) ; } public transferApp ( appName , email ) < void > { return this . post ( `template` , null , false ) . then ( ( ) => null ) ; } public getCollaborators ( appName ) < CollaboratorMap > { return this . get ( `template` ) . then ( ( res ) => res . body . collaborators ) ; } public addCollaborator ( appName , email ) < void > { return this . post ( `template` , null , false ) . then ( ( ) => null ) ; } public removeCollaborator ( appName , email ) < void > { return this . del ( `template` ) . then ( ( ) => null ) ; } public addDeployment ( appName , deploymentName ) < Deployment > { var deployment = < Deployment > { name : deploymentName } ; return this . post ( `template` , JSON . stringify ( deployment ) , true ) . then ( ( res ) => res . body . deployment ) ; } public clearDeploymentHistory ( appName , deploymentName ) < void > { return this . del ( `template` ) . then ( ( ) => null ) ; } public getDeployments ( appName ) < Deployment [ ] > { return this . get ( `template` ) . then ( ( res ) => res . body . deployments ) ; } public getDeployment ( appName , deploymentName ) < Deployment > { return this . get ( `template` ) . then ( ( res ) => res . body . deployment ) ; } public renameDeployment ( appName , oldDeploymentName , newDeploymentName ) < void > { return this . patch ( `template` , JSON . stringify ( { name : newDeploymentName } ) ) . then ( ( ) => null ) ; } public removeDeployment ( appName , deploymentName ) < void > { return this . del ( `template` ) . then ( ( ) => null ) ; } public getDeploymentMetrics ( appName , deploymentName ) < DeploymentMetrics > { return this . get ( `template` ) . then ( ( res ) => res . body . metrics ) ; } public getDeploymentHistory ( appName , deploymentName ) < Package [ ] > { return this . get ( `template` ) . then ( ( res ) => res . body . history ) ; } public release ( appName , deploymentName , filePath , targetBinaryVersion , updateMetadata , uploadProgressCallback ? : ( progress ) => void ) < Package > { return Promise < Package > ( ( resolve , reject , notify ) => { updateMetadata . appVersion = targetBinaryVersion ; var request : superagent . Request < any > = superagent . post ( this . _serverUrl + `template` ) ; if ( this . _proxy ) ( < any > request ) . proxy ( this . _proxy ) ; this . attachCredentials ( request ) ; var getPackageFilePromise < PackageFile > = this . packageFileFromPath ( filePath ) ; getPackageFilePromise . then ( ( packageFile ) => { var file = fs . createReadStream ( packageFile . path ) ; request . attach ( "s" , file ) . field ( "s" , JSON . stringify ( updateMetadata ) ) . on ( "s" , ( event ) => { if ( uploadProgressCallback && event && event . total > 0 ) { var currentProgress = event . loaded / event . total * 0 ; uploadProgressCallback ( currentProgress ) ; } } ) . end ( ( err , res : superagent . Response ) => { if ( packageFile . isTemporary ) { fs . unlinkSync ( packageFile . path ) ; } if ( err ) { reject ( this . getCodePushError ( err , res ) ) ; return ; } try { var body = JSON . parse ( res . text ) ; } catch ( err ) { reject ( < CodePushError > { message : `template` , statusCode : AccountManager . ERROR_INTERNAL_SERVER } ) ; return ; } if ( res . ok ) { resolve ( < Package > body . package ) ; } else { reject ( < CodePushError > { message : body . message , statusCode : res && res . status } ) ; } } ) ; } ) ; } ) ; } public patchRelease ( appName , deploymentName , label , updateMetadata ) < void > { updateMetadata . label = label ; var requestBody = JSON . stringify ( { packageInfo : updateMetadata } ) ; return this . patch ( `template` , requestBody , false ) . then ( ( ) => null ) ; } public promote ( appName , sourceDeploymentName , destinationDeploymentName , updateMetadata ) < Package > { var requestBody = JSON . stringify ( { packageInfo : updateMetadata } ) ; return this . post ( `template` , requestBody , true ) . then ( ( res ) => res . body . package ) ; } public rollback ( appName , deploymentName , targetRelease ? ) < void > { return this . post ( `template` , null , false ) . then ( ( ) => null ) ; } private packageFileFromPath ( filePath ) < PackageFile > { var getPackageFilePromise < PackageFile > ; if ( fs . lstatSync ( filePath ) . isDirectory ( ) ) { getPackageFilePromise = Promise < PackageFile > ( ( resolve : ( file ) => void , reject : ( reason ) => void ) : void => { var directoryPath = filePath ; recursiveFs . readdirr ( directoryPath , ( error ? , directories ? : string [ ] , files ? : string [ ] ) : void => { if ( error ) { reject ( error ) ; return ; } var baseDirectoryPath = path . dirname ( directoryPath ) ; var fileName = this . generateRandomFilename ( 0 ) + "s" ; var zipFile = new yazl . ZipFile ( ) ; var writeStream : fs . WriteStream = fs . createWriteStream ( fileName ) ; zipFile . outputStream . pipe ( writeStream ) . on ( "s" , ( error ) : void => { reject ( error ) ; } ) . on ( "s" , ( ) : void => { filePath = path . join ( process . cwd ( ) , fileName ) ; resolve ( { isTemporary : true , path : filePath } ) ; } ) ; for ( var i = 0 ; i < files . length ; ++ i ) { var file = files [ i ] ; var relativePath = path . relative ( baseDirectoryPath , file ) ; relativePath = slash ( relativePath ) ; zipFile . addFile ( file , relativePath ) ; } zipFile . end ( ) ; } ) ; } ) ; } else { getPackageFilePromise = Q ( { isTemporary : false , path : filePath } ) ; } return getPackageFilePromise ; } private generateRandomFilename ( length ) { var filename = "s" ; var validChar = "s" ; for ( var i = 0 ; i < length ; i ++ ) { filename += validChar . charAt ( Math . floor ( Math . random ( ) * validChar . length ) ) ; } return filename ; } private get ( endpoint , expectResponseBody = true ) < JsonResponse > { return this . makeApiRequest ( "s" , endpoint , null , expectResponseBody , null ) ; } private post ( endpoint , requestBody , expectResponseBody , contentType = "s" ) < JsonResponse > { return this . makeApiRequest ( "s" , endpoint , requestBody , expectResponseBody , contentType ) ; } private patch ( endpoint , requestBody , expectResponseBody = false , contentType = "s" ) < JsonResponse > { return this . makeApiRequest ( "s" , endpoint , requestBody , expectResponseBody , contentType ) ; } private del ( endpoint , expectResponseBody = false ) < JsonResponse > { return this . makeApiRequest ( "s" , endpoint , null , expectResponseBody , null ) ; } private makeApiRequest ( method , endpoint , requestBody , expectResponseBody , contentType ) < JsonResponse > { return Promise < JsonResponse > ( ( resolve , reject , notify ) => { var request : superagent . Request < any > = ( < any > superagent ) [ method ] ( this . _serverUrl + endpoint ) ; if ( this . _proxy ) ( < any > request ) . proxy ( this . _proxy ) ; this . attachCredentials ( request ) ; if ( requestBody ) { if ( contentType ) { request = request . set ( "s" , contentType ) ; } request = request . send ( requestBody ) ; } request . end ( ( err , res : superagent . Response ) => { if ( err ) { reject ( this . getCodePushError ( err , res ) ) ; return ; } try { var body = JSON . parse ( res . text ) ; } catch ( err ) { } if ( res . ok ) { if ( expectResponseBody && ! body ) { reject ( < CodePushError > { message : `template` , statusCode : AccountManager . ERROR_INTERNAL_SERVER } ) ; } else { resolve ( < JsonResponse > { headers : res . header , body : body } ) ; } } else { if ( body ) { reject ( < CodePushError > { message : body . message , statusCode : this . getErrorStatus ( err , res ) } ) ; } else { reject ( < CodePushError > { message : res . text , statusCode : this . getErrorStatus ( err , res ) } ) ; } } } ) ; } ) ; } private getCodePushError ( error , response : superagent . Response ) { if ( error . syscall === "s" ) { error . message = `template` ; } return { message : this . getErrorMessage ( error , response ) , statusCode : this . getErrorStatus ( error , response ) } ; } private getErrorStatus ( error , response : superagent . Response ) { return ( error && error . status ) || ( response && response . status ) || AccountManager . ERROR_GATEWAY_TIMEOUT ; } private getErrorMessage ( error , response : superagent . Response ) { return response && response . text ? response . text : error . message ; } private attachCredentials ( request : superagent . Request < any > ) { if ( this . _customHeaders ) { for ( var headerName in this . _customHeaders ) { request . set ( headerName , this . _customHeaders [ headerName ] ) ; } } request . set ( "s" , `template` ) ; request . set ( "s" , `template` ) ; request . set ( "s" , packageJson . version ) ; } private appNameParam ( appName ) { return appName . replace ( "s" , "s" ) ; } } export = AccountManager ;	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $any$ O O O O O O O $string$ O O O O O O O $SuperAgentStatic$ O O O O O O O O O $any$ O O O O O O $any$ O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O O O O $any$ O $SuperAgentStatic$ O O O $any$ O $any$ O O O O O $any$ O $Headers$ O $any$ O $any$ O O O O O O $any$ O $boolean$ O O O $string$ O O O O O $string$ O $string[]$ O O O O O O $string[]$ O O O O O O O $string$ O O O O O O $number$ O O O $number$ O $string[]$ O $number$ O $number$ O O O $string$ O $string[]$ O $number$ O O O O $number$ O $string[]$ O $number$ O O $string$ O $string$ O $string[]$ O $number$ O O O O O O $string$ O O O $any$ O O O $complex$ O O $string$ O O O $string$ O O O O O O $string$ O O O O O $string$ O O O O O $number$ O O O O O O O $number$ O O O O O $number$ O O O O O $number$ O O O O O $number$ O O O O O $number$ O O O O $string$ O O O O $string$ O O O O $Headers$ O $any$ O O $string$ O O O O O $string$ O $Headers$ $Headers$ O $string$ $string$ O $string$ $string$ O O O O O $string$ O O O $ErrorConstructor$ O O O O O O $string$ O $string$ O O O $Headers$ O $Headers$ O O O $string$ O $string$ O $any$ O $string$ O O O $string$ O $string$ O O O O $string$ O O O O O O O O $string$ O O O $Promise$ O $boolean$ $boolean$ O O O O O O $any$ O O O O O $any$ O $any$ O $any$ O O O O $Request<any>$ O $SuperAgentStatic$ O $any$ O O O O $SuperAgentStatic$ O $SuperAgentRequest$ O O O $string$ O O O O O O O O $string$ O O O O O $Request<any>$ O O $any$ O O O $string$ O O O O $void$ O $Request<any>$ O O $Request<any>$ O $any$ O O $any$ O $Response$ O $SuperAgentStatic$ O $any$ O O O O $number$ O O O $number$ O $any$ O $Response$ O O O O $any$ O $number$ O $any$ O $number$ O O $any$ O O O $CodePushError$ O $any$ O $Response$ O O O O O O O $boolean$ O $number$ O O O O O O $boolean$ O $boolean$ O O $any$ O O O $CodePushError$ O $any$ O $Response$ O O O O O O $any$ O $boolean$ O O O O O O O O O O $Promise$ O $string$ O $number$ $number$ O O $any$ O O O O O $string$ O O O O $ErrorConstructor$ O O O O O O $AccessKeyRequest$ O O $any$ O $any$ O $any$ O O O $string$ O $number$ O O O O O $any$ O O O $JSON$ O $complex$ O $AccessKeyRequest$ O O O O O $any$ O O $JsonResponse$ O O O O O $any$ O $JsonResponse$ O $any$ O $any$ O $any$ O $any$ O $JsonResponse$ O $any$ O $any$ O $any$ O $any$ O $JsonResponse$ O $any$ O $any$ O $any$ O $any$ O $JsonResponse$ O $any$ O $any$ O $any$ O O O O O O O $Promise$ O $string$ O O $any$ O O O O O $any$ O O O O $any$ O O $JsonResponse$ O O O O O $any$ O $JsonResponse$ O $any$ O $any$ O $any$ O $any$ O $JsonResponse$ O $any$ O $any$ O $any$ O $any$ O $JsonResponse$ O $any$ O $any$ O $any$ O O O O O O O O $Promise$ O O O $any$ O O O O O O O $any$ O O O O $any$ O O $JsonResponse$ O O O O $AccessKey[]$ O $any$ O O O O O O $JsonResponse$ O $any$ O $any$ O $any$ O O $ServerAccessKey$ O O O O $AccessKey$ O $boolean$ O $AccessKey[]$ O $number$ O O $number$ O $AccessKey$ O $number$ O $number$ O $AccessKey$ O $number$ O $string$ O $AccessKey$ O $string$ O O O O O O O $AccessKey[]$ O O O O O O $Promise$ O O O $any$ O O O O O O O $any$ O O O O $any$ O O $JsonResponse$ O O O O $complex$ O O O $string$ O O $any$ O O O O O O $number$ O O $DateConstructor$ O O O $number$ O O O $JsonResponse$ O $any$ O $any$ O $any$ O O $ServerAccessKey$ O O O O O $AccessKey$ O $boolean$ O $AccessKey$ O $number$ O $number$ O O $complex$ O $AccessKey$ O $string$ O O O $number$ O $AccessKey$ O $number$ O $string$ O $AccessKey$ O $string$ O O O O O O O $Session[]$ O $any$ O O O $ObjectConstructor$ O $complex$ O $complex$ O O $U[]$ O O $string$ O O $complex$ O $string$ O O O O $Session[]$ O O O O O O $Promise$ O $string$ O $string$ $string$ O $number$ $number$ O O $any$ O O O $AccessKeyRequest$ O O $string$ O $string$ O $number$ O O O O O $any$ O O O $JSON$ O $complex$ O $AccessKeyRequest$ O O O $any$ O O $JsonResponse$ O O O O O $any$ O $JsonResponse$ O $any$ O $any$ O $any$ O $any$ O $JsonResponse$ O $any$ O $any$ O $any$ O $any$ O $JsonResponse$ O $any$ O $any$ O $any$ O O O O O O O O $Promise$ O $string$ O O O O O O O O $any$ O O O O $any$ O O O O O O O O O $Promise$ O $string$ O O O O O O O O $any$ O O O O $any$ O O O O O O O O O $Promise$ O O O $any$ O O O O O $any$ O O O O $any$ O O $JsonResponse$ O O $JsonResponse$ O $any$ O $any$ O O O O $Promise$ O O O $any$ O O O O O O O $any$ O O O O $any$ O O $JsonResponse$ O O $JsonResponse$ O $any$ O $any$ O O O O $Promise$ O $string$ O O $any$ O O O O O $any$ O O O O $any$ O O $JsonResponse$ O O $JsonResponse$ O $any$ O $any$ O O O O $Promise$ O $string$ O $string$ O $string$ O $boolean$ O O O O $any$ O O O $AppCreationRequest$ O O $string$ O $string$ O $string$ O $string$ O $string$ O $string$ O $boolean$ O $boolean$ O O O O O $any$ O O O $JSON$ O $complex$ O $AppCreationRequest$ O O O O O $any$ O O O O $AppCreationRequest$ O O O O $Promise$ O $string$ O O O O O O O O $any$ O O O O $any$ O O O O O O O O O $Promise$ O $string$ O $string$ O O O O O O O O $any$ O O O $JSON$ O $complex$ O O $string$ O $string$ O O O O $any$ O O O O O O O O O $Promise$ O $string$ O $string$ O O O O O O O O $any$ O O O O O O O O $any$ O O O O O O O O O $Promise$ O $string$ O O $any$ O O O O O $any$ O O O O $any$ O O $JsonResponse$ O O $JsonResponse$ O $any$ O $any$ O O O O $Promise$ O $string$ O $string$ O O O O O O O O $any$ O O O O O O O O $any$ O O O O O O O O O $Promise$ O $string$ O $string$ O O O O O O O O $any$ O O O O $any$ O O O O O O O O O $Promise$ O $string$ O $string$ O O $any$ O O O $Deployment$ O O $any$ O O $string$ O $string$ O O O O O $any$ O O O $JSON$ O $complex$ O $Deployment$ O O O O O $any$ O O $JsonResponse$ O O $JsonResponse$ O $any$ O $any$ O O O O $Promise$ O $string$ O $string$ O O O O O O O O $any$ O O O O $any$ O O O O O O O O O $Promise$ O $string$ O O $any$ O O O O O O O $any$ O O O O $any$ O O $JsonResponse$ O O $JsonResponse$ O $any$ O $any$ O O O O $Promise$ O $string$ O $string$ O O $any$ O O O O O $any$ O O O O $any$ O O $JsonResponse$ O O $JsonResponse$ O $any$ O $any$ O O O O $Promise$ O $string$ O $string$ O $string$ O O O O O O O O $any$ O O O $JSON$ O $complex$ O O $string$ O $string$ O O O O $any$ O O O O O O O O O $Promise$ O $string$ O $string$ O O O O O O O O $any$ O O O O $any$ O O O O O O O O O $Promise$ O $string$ O $string$ O O $any$ O O O O O $any$ O O O O $any$ O O $JsonResponse$ O O $JsonResponse$ O $any$ O $any$ O O O O $Promise$ O $string$ O $string$ O O $any$ O O O O O O O $any$ O O O O $any$ O O $JsonResponse$ O O $JsonResponse$ O $any$ O $any$ O O O O $Promise$ O $string$ O $string$ O $string$ O $string$ O $PackageInfo$ O $void$ O O O $number$ O O O O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $PackageInfo$ O $string$ O $string$ O O $Request<any>$ O $SuperAgentStatic$ O $any$ O O O O $SuperAgentStatic$ O $SuperAgentRequest$ O O O $string$ O O O O O O O O $string$ O O O O O $Request<any>$ O O $any$ O O O $string$ O O O O $void$ O $Request<any>$ O O O $Promise$ O $any$ O O O O $any$ O $string$ O O $any$ O $any$ O O $PackageFile$ O O O O $any$ O $any$ O $any$ O $PackageFile$ O $string$ O O $Request<any>$ O $any$ O O O $any$ O O $any$ O O O $JSON$ O $complex$ O $PackageInfo$ O O O $any$ O O O O $any$ O O O O O $void$ O $any$ O $any$ O $any$ O O O O O $number$ O $any$ O $any$ O $any$ O $any$ O O O $void$ O $number$ O O O O O O $any$ O O $any$ O $Response$ O $SuperAgentStatic$ O $any$ O O O O O $PackageFile$ O $boolean$ O O $any$ O $any$ O $PackageFile$ O $string$ O O O O O $any$ O O $any$ O O O $CodePushError$ O $any$ O $Response$ O O O O O O O O O $any$ O $JSON$ O $any$ O $Response$ O $string$ O O O O O $any$ O O $any$ O O $any$ O O $string$ O O O $number$ O $any$ O $number$ O O O O O O O O $Response$ O $boolean$ O O $any$ O O $any$ O $any$ O $any$ O O O O O $any$ O O $any$ O O $any$ O $any$ O $any$ O $number$ O $Response$ O $Response$ O $number$ O O O O O O O O O O O O O O O $Promise$ O $string$ O $string$ O $string$ O $PackageInfo$ O O O O O $PackageInfo$ O $string$ O $string$ O O $string$ O $JSON$ O $complex$ O O $PackageInfo$ O $PackageInfo$ O O O O O O $any$ O O O $string$ O O O O $any$ O O O O O O O O O $Promise$ O $string$ O $string$ O $string$ O $PackageInfo$ O O $any$ O O O $string$ O $JSON$ O $complex$ O O $PackageInfo$ O $PackageInfo$ O O O O O O $any$ O O O $string$ O O O O $any$ O O $JsonResponse$ O O $JsonResponse$ O $any$ O $any$ O O O O $Promise$ O $string$ O $string$ O $string$ $string$ O O O O O O O O $any$ O O O O O O O O $any$ O O O O O O O O O $Promise$ O $string$ O O $any$ O O O $Promise$ O $any$ O O O O $any$ O $any$ O $string$ O O $any$ O O O O $any$ O $any$ O $any$ O O O $void$ O O $PackageFile$ O O O O $void$ O O $Error$ O O O O O O O O O $string$ O $string$ O $any$ O $complex$ O $string$ O O $any$ $any$ O $string[]$ O O O O O O $string[]$ O O O O O O O O O O O O $any$ O O $void$ O $any$ O O O O O O $any$ O $any$ O $any$ O $string$ O O O $string$ O O O $string$ O O O O O O O $ZipFile$ O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $string$ O O $ZipFile$ O $any$ O $any$ O $any$ O O $any$ O O O O $Error$ O O O O O $void$ O $Error$ O O O O O $any$ O O O O O O O O O $string$ O $any$ O $any$ O $any$ O $any$ O O O $string$ O O $void$ O O $true$ O O O $string$ O $string$ O O O O O O O O O $number$ O O O $number$ O $string[]$ O $number$ O O $number$ O O O $string$ O $string[]$ O $number$ O O O $string$ O $any$ O $any$ O $any$ O $string$ O O $string$ O $string$ O $string$ O O $ZipFile$ O $void$ O $string$ O $string$ O O O $ZipFile$ O $void$ O O O O O O O O O O O O $any$ O $any$ O O $boolean$ O O O $string$ O $string$ O O O O O $any$ O O O $string$ O $number$ O O O $string$ O O O O $string$ O O O O O O $number$ O O O $number$ O $number$ O $number$ O O O $string$ O $string$ O $string$ O $Math$ O $number$ O $Math$ O $number$ O O O $string$ O $number$ O O O O O $string$ O O O $Promise$ O $string$ O $boolean$ O O O O $any$ O O O O O $any$ O O O $string$ O O O $boolean$ O O O O O O $Promise$ O $string$ O $string$ O $boolean$ O $string$ O O O O $any$ O O O O O $any$ O O O $string$ O $string$ O $boolean$ O $string$ O O O O $Promise$ O $string$ O $string$ O $boolean$ O O O $string$ O O O O $any$ O O O O O $any$ O O O $string$ O $string$ O $boolean$ O $string$ O O O O $Promise$ O $string$ O $boolean$ O O O O $any$ O O O O O $any$ O O O $string$ O O O $boolean$ O O O O O O $Promise$ O $string$ O $string$ O $string$ O $boolean$ O $string$ O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O $Request<any>$ O $SuperAgentStatic$ O $any$ O O O O O O O O $SuperAgentStatic$ O O $string$ O O O O $string$ O $string$ O O O O O O $string$ O O O O O $Request<any>$ O O $any$ O O O $string$ O O O O $void$ O $Request<any>$ O O O O $string$ O O O O $string$ O O $Request<any>$ O $Request<any>$ O $complex$ O O O $string$ O O O $Request<any>$ O $Request<any>$ O $any$ O $string$ O O O $Request<any>$ O $any$ O O $any$ O $Response$ O $SuperAgentStatic$ O $any$ O O O O O $any$ O O $any$ O O O $CodePushError$ O $any$ O $Response$ O O O O O O O O O $any$ O $JSON$ O $any$ O $Response$ O $string$ O O O O O $any$ O O O O O $Response$ O $boolean$ O O O O $boolean$ O O $any$ O O $any$ O O $any$ O O $string$ O O O $number$ O $any$ O $number$ O O O O O O $any$ O O $any$ O O $any$ O $Response$ O $any$ O $any$ O $any$ O O O O O O O O O $any$ O O $any$ O O $any$ O O $any$ O $any$ O $any$ O $number$ O O O $number$ O $any$ O $Response$ O O O O O O O $any$ O O $any$ O O $string$ O $Response$ O $string$ O $number$ O O O $number$ O $any$ O $Response$ O O O O O O O O O O O O O O $CodePushError$ O $any$ O $Response$ O $SuperAgentStatic$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O $string$ O O O $string$ O $any$ O $Response$ O O $number$ O O O $number$ O $any$ O $Response$ O O O O O $number$ O $any$ O $Response$ O $SuperAgentStatic$ O $any$ O O O O $any$ O $any$ O $any$ O O O $Response$ O $Response$ O $number$ O O $any$ O $number$ O O O $string$ O $Error$ O $Response$ O $SuperAgentStatic$ O $any$ O O O $Response$ O $Response$ O $string$ O $Response$ O $string$ O $Error$ O $string$ O O O $void$ O $Request<any>$ O $SuperAgentStatic$ O $any$ O O O O O O O O O $Headers$ O O O O O $string$ O O O $Headers$ O O $Request<any>$ O $complex$ O $string$ O O O $Headers$ O $string$ O O O O O $Request<any>$ O $complex$ O O O O O O $Request<any>$ O $complex$ O O O O O O $Request<any>$ O $complex$ O O O $any$ O $any$ O O O O $string$ O $string$ O O O $string$ O $complex$ O O O O O O O O O O $any$ O
import AccountManager = require ( "s" ) ; export = AccountManager ;	O $any$ O O O O O O O O $any$ O
import * as express from "s" ; import * as querystring from "s" ; import * as acquisitionSdk from "s" ; import * as rest from "s" ; export var validDeploymentKey = "s" ; export var latestPackage = < rest . UpdateCheckResponse > { download_url : "s" , description : "s" , target_binary_range : "s" , label : "s" , is_mandatory : false , is_available : true , update_app_version : false , package_hash : "s" , package_size : 0 } ; export var serverUrl = "s" ; var publicPrefixUrl = "s" ; var reportStatusDeployUrl = serverUrl + publicPrefixUrl + "s" ; var reportStatusDownloadUrl = serverUrl + publicPrefixUrl + "s" ; var updateCheckUrl = serverUrl + publicPrefixUrl + "s" ; export class HttpRequester implements acquisitionSdk . Http . Requester { public request ( verb : acquisitionSdk . Http . Verb , url , requestBodyOrCallback : string | acquisitionSdk . Callback < acquisitionSdk . Http . Response > , callback ? : acquisitionSdk . Callback < acquisitionSdk . Http . Response > ) { if ( ! callback && typeof requestBodyOrCallback === "s" ) { callback = < acquisitionSdk . Callback < acquisitionSdk . Http . Response > > requestBodyOrCallback ; } if ( verb === acquisitionSdk . Http . Verb . GET && url . indexOf ( updateCheckUrl ) === 0 ) { var params = querystring . parse ( url . substring ( updateCheckUrl . length ) ) ; Server . onUpdateCheck ( params , callback ) ; } else if ( verb === acquisitionSdk . Http . Verb . POST && url === reportStatusDeployUrl ) { Server . onReportStatus ( callback ) ; } else if ( verb === acquisitionSdk . Http . Verb . POST && url === reportStatusDownloadUrl ) { Server . onReportStatus ( callback ) ; } else { throw new Error ( "s" ) ; } } } export class CustomResponseHttpRequester implements acquisitionSdk . Http . Requester { response : acquisitionSdk . Http . Response ; constructor ( response : acquisitionSdk . Http . Response ) { this . response = response ; } public request ( verb : acquisitionSdk . Http . Verb , url , requestBodyOrCallback : string | acquisitionSdk . Callback < acquisitionSdk . Http . Response > , callback ? : acquisitionSdk . Callback < acquisitionSdk . Http . Response > ) { if ( typeof requestBodyOrCallback !== "s" ) { throw new Error ( "s" ) ; } callback = < acquisitionSdk . Callback < acquisitionSdk . Http . Response > > requestBodyOrCallback ; callback ( null , this . response ) ; } } class Server { public static onAcquire ( params , callback : acquisitionSdk . Callback < acquisitionSdk . Http . Response > ) { if ( params . deploymentKey !== validDeploymentKey ) { callback ( null , { statusCode : 0 , body : JSON . stringify ( { update_info : { isAvailable : false } } ) } ) ; } else { callback ( null , { statusCode : 0 , body : JSON . stringify ( { update_info : latestPackage } ) } ) ; } } public static onUpdateCheck ( params , callback : acquisitionSdk . Callback < acquisitionSdk . Http . Response > ) { var updateRequest : rest . UpdateCheckRequest = { deployment_key : params . deployment_key , app_version : params . app_version , package_hash : params . package_hash , is_companion : ! ! ( params . is_companion ) , label : params . label } ; if ( ! updateRequest . deployment_key || ! updateRequest . app_version ) { callback ( null , { statusCode : 0 } ) ; } else { var updateInfo = < rest . UpdateCheckResponse > { is_available : false } ; if ( updateRequest . deployment_key === validDeploymentKey ) { if ( updateRequest . is_companion || updateRequest . app_version === latestPackage . target_binary_range ) { if ( updateRequest . package_hash !== latestPackage . package_hash ) { updateInfo = latestPackage ; } } else if ( updateRequest . app_version < latestPackage . target_binary_range ) { updateInfo = < rest . UpdateCheckResponse > < any > { update_app_version : true , target_binary_range : latestPackage . target_binary_range } ; } } callback ( null , { statusCode : 0 , body : JSON . stringify ( { update_info : updateInfo } ) } ) ; } } public static onReportStatus ( callback : acquisitionSdk . Callback < acquisitionSdk . Http . Response > ) { callback ( null , { statusCode : 0 } ) ; } }	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $string$ O O O O O $UpdateCheckResponse$ O O $any$ O $any$ O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $false$ O O O $true$ O O O $false$ O O O $string$ O O O $number$ O O O O O O $string$ O O O O $string$ O O O O $string$ O $string$ O $string$ O O O O $string$ O $string$ O $string$ O O O O $string$ O $string$ O $string$ O O O O O $any$ O $any$ O $any$ O $any$ O O $void$ O $Verb$ O $any$ O $any$ O $any$ O $string$ O $complex$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $Callback<Response>$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $Callback<Response>$ O O $complex$ O O O O $Callback<Response>$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $Callback<Response>$ O O O O $Verb$ O $any$ O $any$ O $any$ O $Verb.GET$ O $string$ O $number$ O $string$ O O O O O O $any$ O $any$ O $any$ O $string$ O $string$ O $string$ O $number$ O O O $any$ O $void$ O $any$ O $Callback<Response>$ O O O O O O $Verb$ O $any$ O $any$ O $any$ O $Verb.POST$ O $string$ O $string$ O O $any$ O $void$ O $Callback<Response>$ O O O O O O $Verb$ O $any$ O $any$ O $any$ O $Verb.POST$ O $string$ O $string$ O O $any$ O $void$ O $Callback<Response>$ O O O O O O O $ErrorConstructor$ O O O O O O O O O $any$ O $any$ O $any$ O $any$ O $Response$ O $any$ O $any$ O $any$ O O O $Response$ O $any$ O $any$ O $any$ O O O O $Response$ O $Response$ O O O $void$ O $Verb$ O $any$ O $any$ O $any$ O $string$ O $complex$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $Callback<Response>$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $complex$ O O O O O O $ErrorConstructor$ O O O O O $Callback<Response>$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $Callback<Response>$ O $Callback<Response>$ O O O O O $Response$ O O O O O $any$ O O O $void$ O $any$ O $Callback<Response>$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $string$ O O $Callback<Response>$ O O O O $number$ O O O $string$ O $JSON$ O $complex$ O O $complex$ O O $boolean$ O O O O O O O O O O O $Callback<Response>$ O O O O $number$ O O O $string$ O $JSON$ O $complex$ O O $UpdateCheckResponse$ O $UpdateCheckResponse$ O O O O O O O O O $void$ O $any$ O $Callback<Response>$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $UpdateCheckRequest$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $boolean$ O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O $UpdateCheckRequest$ O $string$ O O $UpdateCheckRequest$ O $string$ O O $Callback<Response>$ O O O O $number$ O O O O O O O O O $UpdateCheckResponse$ O O $any$ O $any$ O O $false$ O O O O O O $UpdateCheckRequest$ O $string$ O $string$ O O O O $UpdateCheckRequest$ O $boolean$ O $UpdateCheckRequest$ O $string$ O $UpdateCheckResponse$ O $string$ O O O O $UpdateCheckRequest$ O $string$ O $UpdateCheckResponse$ O $string$ O O $UpdateCheckResponse$ O $UpdateCheckResponse$ O O O O O O $UpdateCheckRequest$ O $string$ O $UpdateCheckResponse$ O $string$ O O $UpdateCheckResponse$ O O $any$ O $any$ O O O O O $boolean$ O O O $string$ O $UpdateCheckResponse$ O $string$ O O O O $Callback<Response>$ O O O O $number$ O O O $string$ O $JSON$ O $complex$ O O $UpdateCheckResponse$ O $UpdateCheckResponse$ O O O O O O O O O $void$ O $Callback<Response>$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $Callback<Response>$ O O O O $number$ O O O O O O O
import * as assert from "s" ; import * as express from "s" ; import * as http from "s" ; import * as acquisitionSdk from "s" ; import * as mockApi from "s" ; import * as rest from "s" ; var latestPackage : rest . UpdateCheckResponse = clone ( mockApi . latestPackage ) ; var configuration : acquisitionSdk . Configuration = { appVersion : "s" , clientUniqueId : "s" , deploymentKey : mockApi . validDeploymentKey , serverUrl : mockApi . serverUrl , } var templateCurrentPackage : acquisitionSdk . Package = { deploymentKey : mockApi . validDeploymentKey , description : "s" , label : "s" , appVersion : latestPackage . target_binary_range , packageHash : "s" , isMandatory : false , packageSize : 0 } ; var scriptUpdateResult : acquisitionSdk . RemotePackage = { deploymentKey : mockApi . validDeploymentKey , description : latestPackage . description , downloadUrl : latestPackage . download_url , label : latestPackage . label , appVersion : latestPackage . target_binary_range , isMandatory : latestPackage . is_mandatory , packageHash : latestPackage . package_hash , packageSize : latestPackage . package_size } ; var nativeUpdateResult : acquisitionSdk . NativeUpdateNotification = { updateAppVersion : true , appVersion : latestPackage . target_binary_range } ; describe ( "s" , ( ) => { beforeEach ( ( ) => { mockApi . latestPackage = clone ( latestPackage ) ; } ) ; it ( "s" , ( done ) => { var acquisition = new acquisitionSdk . AcquisitionManager ( new mockApi . HttpRequester ( ) , configuration ) ; acquisition . queryUpdateWithCurrentPackage ( templateCurrentPackage , ( error , returnPackage : acquisitionSdk . RemotePackage | acquisitionSdk . NativeUpdateNotification ) => { assert . equal ( null , error ) ; assert . deepEqual ( scriptUpdateResult , returnPackage ) ; done ( ) ; } ) ; } ) ; it ( "s" , ( done ) => { var equalVersionPackage : acquisitionSdk . Package = clone ( templateCurrentPackage ) ; equalVersionPackage . packageHash = latestPackage . package_hash ; var acquisition = new acquisitionSdk . AcquisitionManager ( new mockApi . HttpRequester ( ) , configuration ) ; acquisition . queryUpdateWithCurrentPackage ( equalVersionPackage , ( error , returnPackage : acquisitionSdk . RemotePackage | acquisitionSdk . NativeUpdateNotification ) => { assert . equal ( null , error ) ; assert . equal ( null , returnPackage ) ; done ( ) ; } ) ; } ) ; it ( "s" , ( done ) => { var higherVersionPackage : acquisitionSdk . Package = clone ( templateCurrentPackage ) ; higherVersionPackage . packageHash = "s" ; var acquisition = new acquisitionSdk . AcquisitionManager ( new mockApi . HttpRequester ( ) , configuration ) ; acquisition . queryUpdateWithCurrentPackage ( higherVersionPackage , ( error , returnPackage : acquisitionSdk . RemotePackage | acquisitionSdk . NativeUpdateNotification ) => { assert . equal ( null , error ) ; assert . deepEqual ( scriptUpdateResult , returnPackage ) ; done ( ) ; } ) ; } ) ; it ( "s" , ( done ) => { var lowerAppVersionPackage : acquisitionSdk . Package = clone ( templateCurrentPackage ) ; lowerAppVersionPackage . appVersion = "s" ; var acquisition = new acquisitionSdk . AcquisitionManager ( new mockApi . HttpRequester ( ) , configuration ) ; acquisition . queryUpdateWithCurrentPackage ( lowerAppVersionPackage , ( error , returnPackage : acquisitionSdk . RemotePackage | acquisitionSdk . NativeUpdateNotification ) => { assert . equal ( null , error ) ; assert . deepEqual ( nativeUpdateResult , returnPackage ) ; done ( ) ; } ) ; } ) ; it ( "s" , ( done ) => { var higherAppVersionPackage : acquisitionSdk . Package = clone ( templateCurrentPackage ) ; higherAppVersionPackage . appVersion = "s" ; var acquisition = new acquisitionSdk . AcquisitionManager ( new mockApi . HttpRequester ( ) , configuration ) ; acquisition . queryUpdateWithCurrentPackage ( higherAppVersionPackage , ( error , returnPackage : acquisitionSdk . RemotePackage | acquisitionSdk . NativeUpdateNotification ) => { assert . equal ( null , error ) ; assert . deepEqual ( null , returnPackage ) ; done ( ) ; } ) ; } ) ; it ( "s" , ( done ) => { var lowerAppVersionPackage : acquisitionSdk . Package = clone ( templateCurrentPackage ) ; lowerAppVersionPackage . appVersion = "s" ; var emptyReponse : acquisitionSdk . Http . Response = { statusCode : 0 , body : JSON . stringify ( { } ) } ; var acquisition = new acquisitionSdk . AcquisitionManager ( new mockApi . CustomResponseHttpRequester ( emptyReponse ) , configuration ) ; acquisition . queryUpdateWithCurrentPackage ( lowerAppVersionPackage , ( error , returnPackage : acquisitionSdk . RemotePackage | acquisitionSdk . NativeUpdateNotification ) => { assert . equal ( null , error ) ; done ( ) ; } ) ; } ) ; it ( "s" , ( done ) => { var lowerAppVersionPackage : acquisitionSdk . Package = clone ( templateCurrentPackage ) ; lowerAppVersionPackage . appVersion = "s" ; var unexpectedResponse : acquisitionSdk . Http . Response = { statusCode : 0 , body : JSON . stringify ( { unexpected : "s" } ) } ; var acquisition = new acquisitionSdk . AcquisitionManager ( new mockApi . CustomResponseHttpRequester ( unexpectedResponse ) , configuration ) ; acquisition . queryUpdateWithCurrentPackage ( lowerAppVersionPackage , ( error , returnPackage : acquisitionSdk . RemotePackage | acquisitionSdk . NativeUpdateNotification ) => { assert . equal ( null , error ) ; done ( ) ; } ) ; } ) ; it ( "s" , ( done ) => { var higherAppVersionCompanionPackage : acquisitionSdk . Package = clone ( templateCurrentPackage ) ; higherAppVersionCompanionPackage . appVersion = "s" ; var companionAppConfiguration = clone ( configuration ) ; configuration . ignoreAppVersion = true ; var acquisition = new acquisitionSdk . AcquisitionManager ( new mockApi . HttpRequester ( ) , configuration ) ; acquisition . queryUpdateWithCurrentPackage ( higherAppVersionCompanionPackage , ( error , returnPackage : acquisitionSdk . RemotePackage | acquisitionSdk . NativeUpdateNotification ) => { assert . equal ( null , error ) ; assert . deepEqual ( scriptUpdateResult , returnPackage ) ; done ( ) ; } ) ; } ) ; it ( "s" , ( done ) => { mockApi . latestPackage . is_mandatory = true ; var acquisition = new acquisitionSdk . AcquisitionManager ( new mockApi . HttpRequester ( ) , configuration ) ; acquisition . queryUpdateWithCurrentPackage ( templateCurrentPackage , ( error , returnPackage : acquisitionSdk . RemotePackage ) => { assert . equal ( null , error ) ; assert . equal ( true , returnPackage . isMandatory ) ; done ( ) ; } ) ; } ) ; it ( "s" , ( done ) => { var invalidPackage : acquisitionSdk . Package = clone ( templateCurrentPackage ) ; invalidPackage . appVersion = null ; var acquisition = new acquisitionSdk . AcquisitionManager ( new mockApi . HttpRequester ( ) , configuration ) ; try { acquisition . queryUpdateWithCurrentPackage ( invalidPackage , ( error , returnPackage : acquisitionSdk . RemotePackage | acquisitionSdk . NativeUpdateNotification ) => { assert . fail ( "s" ) ; done ( ) ; } ) ; } catch ( error ) { done ( ) ; } } ) ; it ( "s" , ( done ) => { var lowerAppVersionPackage : acquisitionSdk . Package = clone ( templateCurrentPackage ) ; lowerAppVersionPackage . appVersion = "s" ; var invalidJsonReponse : acquisitionSdk . Http . Response = { statusCode : 0 , body : "s" } ; var acquisition = new acquisitionSdk . AcquisitionManager ( new mockApi . CustomResponseHttpRequester ( invalidJsonReponse ) , configuration ) ; acquisition . queryUpdateWithCurrentPackage ( lowerAppVersionPackage , ( error , returnPackage : acquisitionSdk . RemotePackage | acquisitionSdk . NativeUpdateNotification ) => { assert . notEqual ( null , error ) ; done ( ) ; } ) ; } ) ; it ( "s" , ( done ) => { done ( ) ; } ) ; it ( "s" , ( done ) : void => { var acquisition = new acquisitionSdk . AcquisitionManager ( new mockApi . HttpRequester ( ) , configuration ) ; acquisition . reportStatusDeploy ( templateCurrentPackage , acquisitionSdk . AcquisitionStatus . DeploymentFailed , "s" , mockApi . validDeploymentKey , ( ( error , parameter ) : void => { if ( error ) { throw error ; } assert . equal ( parameter , null ) ; done ( ) ; } ) ) ; } ) ; it ( "s" , ( done ) : void => { var acquisition = new acquisitionSdk . AcquisitionManager ( new mockApi . HttpRequester ( ) , configuration ) ; acquisition . reportStatusDownload ( templateCurrentPackage , ( ( error , parameter ) : void => { if ( error ) { throw error ; } assert . equal ( parameter , null ) ; done ( ) ; } ) ) ; } ) ; } ) ; function clone < T > ( initialObject : T ) : T { return JSON . parse ( JSON . stringify ( initialObject ) ) ; }	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $UpdateCheckResponse$ O $any$ O $any$ O $T$ O $any$ O $UpdateCheckResponse$ O O O $Configuration$ O $any$ O $any$ O O $string$ O O O $string$ O O O $string$ O $any$ O $string$ O $string$ O $any$ O $string$ O O O $Package$ O $any$ O $any$ O O $string$ O $any$ O $string$ O $string$ O O O $string$ O O O $string$ O $UpdateCheckResponse$ O $string$ O $string$ O O O $false$ O O O $number$ O O O O O $RemotePackage$ O $any$ O $any$ O O $string$ O $any$ O $string$ O $string$ O $UpdateCheckResponse$ O $string$ O $string$ O $UpdateCheckResponse$ O $string$ O $string$ O $UpdateCheckResponse$ O $string$ O $string$ O $UpdateCheckResponse$ O $string$ O $boolean$ O $UpdateCheckResponse$ O $boolean$ O $string$ O $UpdateCheckResponse$ O $string$ O $number$ O $UpdateCheckResponse$ O $number$ O O O $NativeUpdateNotification$ O $any$ O $any$ O O $true$ O O O $string$ O $UpdateCheckResponse$ O $string$ O O $any$ O O O O O O O $any$ O O O O O $any$ O $UpdateCheckResponse$ O $T$ O $UpdateCheckResponse$ O O O O O $any$ O O O O $MochaDone$ O O O O $AcquisitionManager$ O O $any$ O $any$ O O $any$ O $any$ O O O $Configuration$ O O $AcquisitionManager$ O $void$ O $Package$ O O $Error$ O $complex$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $Error$ O O $any$ O $any$ O $RemotePackage$ O $complex$ O O $any$ O O O O O O O O O $any$ O O O O $MochaDone$ O O O O $Package$ O $any$ O $any$ O $T$ O $Package$ O O $Package$ O $string$ O $UpdateCheckResponse$ O $string$ O O $AcquisitionManager$ O O $any$ O $any$ O O $any$ O $any$ O O O $Configuration$ O O $AcquisitionManager$ O $void$ O $Package$ O O $Error$ O $complex$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $Error$ O O $any$ O $any$ O O O $complex$ O O $any$ O O O O O O O O O $any$ O O O O $MochaDone$ O O O O $Package$ O $any$ O $any$ O $T$ O $Package$ O O $Package$ O $string$ O O O O $AcquisitionManager$ O O $any$ O $any$ O O $any$ O $any$ O O O $Configuration$ O O $AcquisitionManager$ O $void$ O $Package$ O O $Error$ O $complex$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $Error$ O O $any$ O $any$ O $RemotePackage$ O $complex$ O O $any$ O O O O O O O O O $any$ O O O O $MochaDone$ O O O O $Package$ O $any$ O $any$ O $T$ O $Package$ O O $Package$ O $string$ O O O O $AcquisitionManager$ O O $any$ O $any$ O O $any$ O $any$ O O O $Configuration$ O O $AcquisitionManager$ O $void$ O $Package$ O O $Error$ O $complex$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $Error$ O O $any$ O $any$ O $NativeUpdateNotification$ O $complex$ O O $any$ O O O O O O O O O $any$ O O O O $MochaDone$ O O O O $Package$ O $any$ O $any$ O $T$ O $Package$ O O $Package$ O $string$ O O O O $AcquisitionManager$ O O $any$ O $any$ O O $any$ O $any$ O O O $Configuration$ O O $AcquisitionManager$ O $void$ O $Package$ O O $Error$ O $complex$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $Error$ O O $any$ O $any$ O O O $complex$ O O $any$ O O O O O O O O O $any$ O O O O $MochaDone$ O O O O $Package$ O $any$ O $any$ O $T$ O $Package$ O O $Package$ O $string$ O O O O $Response$ O $any$ O $any$ O $any$ O O $number$ O O O $string$ O $JSON$ O $complex$ O O O O O O O $AcquisitionManager$ O O $any$ O $any$ O O $any$ O $any$ O $Response$ O O $Configuration$ O O $AcquisitionManager$ O $void$ O $Package$ O O $Error$ O $complex$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $Error$ O O $any$ O O O O O O O O O $any$ O O O O $MochaDone$ O O O O $Package$ O $any$ O $any$ O $T$ O $Package$ O O $Package$ O $string$ O O O O $Response$ O $any$ O $any$ O $any$ O O $number$ O O O $string$ O $JSON$ O $complex$ O O $string$ O O O O O O O $AcquisitionManager$ O O $any$ O $any$ O O $any$ O $any$ O $Response$ O O $Configuration$ O O $AcquisitionManager$ O $void$ O $Package$ O O $Error$ O $complex$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $Error$ O O $any$ O O O O O O O O O $any$ O O O O $MochaDone$ O O O O $Package$ O $any$ O $any$ O $T$ O $Package$ O O $Package$ O $string$ O O O O $Configuration$ O $T$ O $Configuration$ O O $Configuration$ O $boolean$ O O O O $AcquisitionManager$ O O $any$ O $any$ O O $any$ O $any$ O O O $Configuration$ O O $AcquisitionManager$ O $void$ O $Package$ O O $Error$ O $complex$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $Error$ O O $any$ O $any$ O $RemotePackage$ O $complex$ O O $any$ O O O O O O O O O $any$ O O O O $MochaDone$ O O O $any$ O $UpdateCheckResponse$ O $boolean$ O O O O $AcquisitionManager$ O O $any$ O $any$ O O $any$ O $any$ O O O $Configuration$ O O $AcquisitionManager$ O $void$ O $Package$ O O $Error$ O $RemotePackage$ O $any$ O $any$ O O O $any$ O $any$ O O O $Error$ O O $any$ O $any$ O O O $RemotePackage$ O $boolean$ O O $any$ O O O O O O O O O $any$ O O O O $MochaDone$ O O O O $Package$ O $any$ O $any$ O $T$ O $Package$ O O $Package$ O $string$ O O O O $AcquisitionManager$ O O $any$ O $any$ O O $any$ O $any$ O O O $Configuration$ O O O O $AcquisitionManager$ O $void$ O $Package$ O O $Error$ O $complex$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O O O O O O O O O $any$ O O $any$ O O O O O O O $any$ O O O O $MochaDone$ O O O O $Package$ O $any$ O $any$ O $T$ O $Package$ O O $Package$ O $string$ O O O O $Response$ O $any$ O $any$ O $any$ O O $number$ O O O $string$ O O O O O $AcquisitionManager$ O O $any$ O $any$ O O $any$ O $any$ O $Response$ O O $Configuration$ O O $AcquisitionManager$ O $void$ O $Package$ O O $Error$ O $complex$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $Error$ O O $any$ O O O O O O O O O $any$ O O O O $MochaDone$ O O O $any$ O O O O O O $any$ O O O O $MochaDone$ O O O O O O $AcquisitionManager$ O O $any$ O $any$ O O $any$ O $any$ O O O $Configuration$ O O $AcquisitionManager$ O $void$ O $Package$ O $any$ O $any$ O $string$ O O O $any$ O $string$ O O O $Error$ O $void$ O O O O O O O $Error$ O O O $Error$ O O $any$ O $any$ O $void$ O O O O $any$ O O O O O O O O O O $any$ O O O O $MochaDone$ O O O O O O $AcquisitionManager$ O O $any$ O $any$ O O $any$ O $any$ O O O $Configuration$ O O $AcquisitionManager$ O $void$ O $Package$ O O O $Error$ O $void$ O O O O O O O $Error$ O O O $Error$ O O $any$ O $any$ O $void$ O O O O $any$ O O O O O O O O O O O O O O $T$ O $any$ O O $T$ O $any$ O O $any$ O O $JSON$ O $any$ O $JSON$ O $complex$ O $T$ O O O O
import * as assert from "s" ; import * as Q from "s" ; import AccountManager = require ( "s" ) ; var request = require ( "s" ) ; var manager ; describe ( "s" , ( ) => { beforeEach ( ( ) => { manager = new AccountManager ( "s" , null , "s" ) ; } ) ; after ( ( ) => { request . Request . prototype . _callback = function ( ) { } ; } ) ; it ( "s" , ( done ) => { mockReturn ( "s" , 0 ) ; var methodsWithErrorHandling : any [ ] = [ manager . addApp . bind ( manager , "s" , "s" , "s" ) , manager . getApp . bind ( manager , "s" ) , manager . renameApp . bind ( manager , "s" , { } ) , manager . removeApp . bind ( manager , "s" ) , manager . transferApp . bind ( manager , "s" , "s" ) , manager . addDeployment . bind ( manager , "s" , "s" ) , manager . getDeployment . bind ( manager , "s" , "s" ) , manager . getDeployments . bind ( manager , "s" ) , manager . renameDeployment . bind ( manager , "s" , "s" , { name : "s" } ) , manager . removeDeployment . bind ( manager , "s" , "s" ) , manager . addCollaborator . bind ( manager , "s" , "s" ) , manager . getCollaborators . bind ( manager , "s" ) , manager . removeCollaborator . bind ( manager , "s" , "s" ) , manager . patchRelease . bind ( manager , "s" , "s" , "s" , { description : "s" } ) , manager . promote . bind ( manager , "s" , "s" , "s" , { description : "s" } ) , manager . rollback . bind ( manager , "s" , "s" , "s" ) ] ; var result = Q < void > ( null ) ; methodsWithErrorHandling . forEach ( function ( f ) { result = result . then ( ( ) => { return testErrors ( f ) ; } ) ; } ) ; result . done ( ( ) => { done ( ) ; } ) ; function testErrors ( method ) : Q . Promise < void > { return Q . Promise < void > ( ( resolve , reject , notify ) => { method ( ) . done ( ( ) => { assert . fail ( "s" ) ; reject ( ) ; } , ( error ) => { assert . equal ( error . message , "s" ) ; assert ( error . statusCode ) ; resolve ( ) ; } ) ; } ) ; } } ) ; it ( "s" , ( done ) => { mockReturn ( JSON . stringify ( { authenticated : true } ) , 0 , { } ) ; manager . isAuthenticated ( ) . done ( ( authenticated ) => { assert ( authenticated , "s" ) ; done ( ) ; } ) ; } ) ; it ( "s" , ( done ) => { mockReturn ( "s" , 0 , { } ) ; manager . isAuthenticated ( ) . done ( ( authenticated ) => { assert ( ! authenticated , "s" ) ; done ( ) ; } ) ; } ) ; it ( "s" , ( done ) => { mockReturn ( "s" , 0 , { } ) ; manager . isAuthenticated ( true ) . done ( ( authenticated ) => { assert . fail ( "s" ) ; done ( ) ; } , ( err ) => { assert . equal ( err . message , "s" , "s" ) ; done ( ) ; } ) ; } ) ; it ( "s" , ( done ) => { mockReturn ( "s" , 0 , { } ) ; manager . isAuthenticated ( ) . done ( ( authenticated ) => { assert . fail ( "s" ) ; done ( ) ; } , ( err ) => { assert . equal ( err . message , "s" , "s" ) ; done ( ) ; } ) ; } ) ; it ( "s" , ( done ) => { mockReturn ( JSON . stringify ( { success : true } ) , 0 , { location : "s" } ) ; manager . addApp ( "s" , "s" , "s" ) . done ( ( obj ) => { assert . ok ( obj ) ; done ( ) ; } , rejectHandler ) ; } ) ; it ( "s" , ( done ) => { mockReturn ( JSON . stringify ( { success : false } ) , 0 , { } ) ; manager . addApp ( "s" , "s" , "s" ) . done ( ( obj ) => { throw new Error ( "s" ) ; } , ( error ) => done ( ) ) ; } ) ; it ( "s" , ( done ) => { mockReturn ( JSON . stringify ( { app : { } } ) , 0 , { } ) ; manager . getApp ( "s" ) . done ( ( obj ) => { assert . ok ( obj ) ; done ( ) ; } , rejectHandler ) ; } ) ; it ( "s" , ( done ) => { mockReturn ( JSON . stringify ( { apps : [ ] } ) , 0 , { } ) ; manager . renameApp ( "s" , "s" ) . done ( ( obj ) => { assert . ok ( ! obj ) ; done ( ) ; } , rejectHandler ) ; } ) ; it ( "s" , ( done ) => { mockReturn ( "s" , 0 , { } ) ; manager . removeApp ( "s" ) . done ( ( obj ) => { assert . ok ( ! obj ) ; done ( ) ; } , rejectHandler ) ; } ) ; it ( "s" , ( done ) => { mockReturn ( "s" , 0 ) ; manager . transferApp ( "s" , "s" ) . done ( ( obj ) => { assert . ok ( ! obj ) ; done ( ) ; } , rejectHandler ) ; } ) ; it ( "s" , ( done ) => { mockReturn ( JSON . stringify ( { deployment : { name : "s" , key : "s" } } ) , 0 , { location : "s" } ) ; manager . addDeployment ( "s" , "s" ) . done ( ( obj ) => { assert . ok ( obj ) ; done ( ) ; } , rejectHandler ) ; } ) ; it ( "s" , ( done ) => { mockReturn ( JSON . stringify ( { deployment : { } } ) , 0 , { } ) ; manager . getDeployment ( "s" , "s" ) . done ( ( obj ) => { assert . ok ( obj ) ; done ( ) ; } , rejectHandler ) ; } ) ; it ( "s" , ( done ) => { mockReturn ( JSON . stringify ( { deployments : [ ] } ) , 0 , { } ) ; manager . getDeployments ( "s" ) . done ( ( obj ) => { assert . ok ( obj ) ; done ( ) ; } , rejectHandler ) ; } ) ; it ( "s" , ( done ) => { mockReturn ( JSON . stringify ( { apps : [ ] } ) , 0 , { } ) ; manager . renameDeployment ( "s" , "s" , "s" ) . done ( ( obj ) => { assert . ok ( ! obj ) ; done ( ) ; } , rejectHandler ) ; } ) ; it ( "s" , ( done ) => { mockReturn ( "s" , 0 , { } ) ; manager . removeDeployment ( "s" , "s" ) . done ( ( obj ) => { assert . ok ( ! obj ) ; done ( ) ; } , rejectHandler ) ; } ) ; it ( "s" , ( done ) => { mockReturn ( JSON . stringify ( { history : [ ] } ) , 0 ) ; manager . getDeploymentHistory ( "s" , "s" ) . done ( ( obj ) => { assert . ok ( obj ) ; assert . equal ( obj . length , 0 ) ; done ( ) ; } , rejectHandler ) ; } ) ; it ( "s" , ( done ) => { mockReturn ( JSON . stringify ( { history : [ { label : "s" } , { label : "s" } ] } ) , 0 ) ; manager . getDeploymentHistory ( "s" , "s" ) . done ( ( obj ) => { assert . ok ( obj ) ; assert . equal ( obj . length , 0 ) ; assert . equal ( obj [ 0 ] . label , "s" ) ; assert . equal ( obj [ 0 ] . label , "s" ) ; done ( ) ; } , rejectHandler ) ; } ) ; it ( "s" , ( done ) => { mockReturn ( "s" , 0 ) ; manager . getDeploymentHistory ( "s" , "s" ) . done ( ( obj ) => { throw new Error ( "s" ) ; } , ( error ) => done ( ) ) ; } ) ; it ( "s" , ( done ) => { mockReturn ( "s" , 0 ) ; manager . clearDeploymentHistory ( "s" , "s" ) . done ( ( obj ) => { assert . ok ( ! obj ) ; done ( ) ; } , rejectHandler ) ; } ) ; it ( "s" , ( done ) => { mockReturn ( "s" , 0 ) ; manager . clearDeploymentHistory ( "s" , "s" ) . done ( ( obj ) => { throw new Error ( "s" ) ; } , ( error ) => done ( ) ) ; } ) ; it ( "s" , ( done ) => { mockReturn ( "s" , 0 , { location : "s" } ) ; manager . addCollaborator ( "s" , "s" ) . done ( ( obj ) => { assert . ok ( ! obj ) ; done ( ) ; } , rejectHandler ) ; } ) ; it ( "s" , ( done ) => { mockReturn ( "s" , 0 , { } ) ; manager . addCollaborator ( "s" , "s" ) . done ( ( obj ) => { throw new Error ( "s" ) ; } , ( error ) => done ( ) ) ; } ) ; it ( "s" , ( done ) => { mockReturn ( JSON . stringify ( { collaborators : { } } ) , 0 ) ; manager . getCollaborators ( "s" ) . done ( ( obj ) => { assert . ok ( obj ) ; assert . equal ( Object . keys ( obj ) . length , 0 ) ; done ( ) ; } , rejectHandler ) ; } ) ; it ( "s" , ( done ) => { mockReturn ( JSON . stringify ( { collaborators : { "s" : { permission : "s" , isCurrentAccount : true } , "s" : { permission : "s" , isCurrentAccount : false } } } ) , 0 ) ; manager . getCollaborators ( "s" ) . done ( ( obj ) => { assert . ok ( obj ) ; assert . equal ( obj [ "s" ] . permission , "s" ) ; assert . equal ( obj [ "s" ] . permission , "s" ) ; done ( ) ; } , rejectHandler ) ; } ) ; it ( "s" , ( done ) => { mockReturn ( "s" , 0 , { } ) ; manager . removeCollaborator ( "s" , "s" ) . done ( ( obj ) => { assert . ok ( ! obj ) ; done ( ) ; } , rejectHandler ) ; } ) ; it ( "s" , ( done ) => { mockReturn ( JSON . stringify ( { package : { description : "s" } } ) , 0 ) ; manager . patchRelease ( "s" , "s" , "s" , { description : "s" } ) . done ( ( obj ) => { assert . ok ( ! obj ) ; done ( ) ; } , rejectHandler ) ; } ) ; it ( "s" , ( done ) => { mockReturn ( "s" , 0 ) ; manager . patchRelease ( "s" , "s" , "s" , { } ) . done ( ( obj ) => { throw new Error ( "s" ) ; } , ( error ) => done ( ) ) ; } ) ; it ( "s" , ( done ) => { mockReturn ( JSON . stringify ( { package : { description : "s" } } ) , 0 ) ; manager . promote ( "s" , "s" , "s" , { description : "s" } ) . done ( ( obj ) => { assert . ok ( obj ) ; assert . equal ( obj . description , "s" ) done ( ) ; } , rejectHandler ) ; } ) ; it ( "s" , ( done ) => { mockReturn ( "s" , 0 ) ; manager . promote ( "s" , "s" , "s" , { rollout : 0 } ) . done ( ( obj ) => { throw new Error ( "s" ) ; } , ( error ) => done ( ) ) ; } ) ; it ( "s" , ( done ) => { mockReturn ( JSON . stringify ( { package : { label : "s" } } ) , 0 ) ; manager . rollback ( "s" , "s" , "s" ) . done ( ( obj ) => { assert . ok ( ! obj ) ; done ( ) ; } , rejectHandler ) ; } ) ; it ( "s" , ( done ) => { mockReturn ( "s" , 0 ) ; manager . rollback ( "s" , "s" , "s" ) . done ( ( obj ) => { throw new Error ( "s" ) ; } , ( error ) => done ( ) ) ; } ) ; } ) ; function rejectHandler ( val ) { assert . fail ( ) ; } function mockReturn ( bodyText , statusCode , header = { } ) { require ( "s" ) ( request , [ { pattern : "s" , fixtures : function ( match , params ) : any { var isOk = statusCode >= 0 && statusCode < 0 ; if ( ! isOk ) { var err = new Error ( bodyText ) ; err . status = statusCode ; throw err ; } return { text : bodyText , status : statusCode , ok : isOk , header : header , headers : { } } ; } , callback : function ( match , data ) : any { return data ; } } ] ) ; }	O O O $any$ O O O O O O $any$ O O O O $any$ O O O O O O O $any$ O $any$ O O O O O $AccountManager$ O $any$ O O O O O O O $any$ O O O O O $AccountManager$ O O $any$ O O O O O O O O O O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O $any$ O O O O $MochaDone$ O O O $void$ O O O O O O O $any[]$ O O O O O O $AccountManager$ O $any$ O $any$ O $AccountManager$ O O O O O O O O $AccountManager$ O $any$ O $any$ O $AccountManager$ O O O O $AccountManager$ O $any$ O $any$ O $AccountManager$ O O O O O O O $AccountManager$ O $any$ O $any$ O $AccountManager$ O O O O $AccountManager$ O $any$ O $any$ O $AccountManager$ O O O O O O $AccountManager$ O $any$ O $any$ O $AccountManager$ O O O O O O $AccountManager$ O $any$ O $any$ O $AccountManager$ O O O O O O $AccountManager$ O $any$ O $any$ O $AccountManager$ O O O O $AccountManager$ O $any$ O $any$ O $AccountManager$ O O O O O O $string$ O O O O O $AccountManager$ O $any$ O $any$ O $AccountManager$ O O O O O O $AccountManager$ O $any$ O $any$ O $AccountManager$ O O O O O O $AccountManager$ O $any$ O $any$ O $AccountManager$ O O O O $AccountManager$ O $any$ O $any$ O $AccountManager$ O O O O O O $AccountManager$ O $any$ O $any$ O $AccountManager$ O O O O O O O O $string$ O O O O O $AccountManager$ O $any$ O $any$ O $AccountManager$ O O O O O O O O $string$ O O O O O $AccountManager$ O $any$ O $any$ O $AccountManager$ O O O O O O O O O O $any$ O $any$ O O O O O O O $any[]$ O $void$ O O O $any$ O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O O O $any$ O $any$ O O O O O $any$ O O O O O O O $any$ O $any$ O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O $any$ O O O $any$ O O O O O $any$ O $any$ O O O O $any$ O O O O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O O O O O O O O O O O O O $any$ O O O O $MochaDone$ O O O $void$ O $JSON$ O $complex$ O O $boolean$ O O O O O O O O O O O $AccountManager$ O $any$ O O O $any$ O O $boolean$ O O O $any$ O $boolean$ O O O O $any$ O O O O O O O O O $any$ O O O O $MochaDone$ O O O $void$ O O O O O O O O O $AccountManager$ O $any$ O O O $any$ O O $boolean$ O O O $any$ O O $boolean$ O O O O $any$ O O O O O O O O O $any$ O O O O $MochaDone$ O O O $void$ O O O O O O O O O $AccountManager$ O $any$ O O O O $any$ O O $boolean$ O O O $any$ O $any$ O O O O $any$ O O O O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O O O O $any$ O O O O $MochaDone$ O O O $void$ O O O O O O O O O $AccountManager$ O $any$ O O O $any$ O O $boolean$ O O O $any$ O $any$ O O O O $any$ O O O O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O O O O $any$ O O O O $MochaDone$ O O O $void$ O $JSON$ O $complex$ O O $boolean$ O O O O O O O O $string$ O O O O O $AccountManager$ O $any$ O O O O O O O O $any$ O O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O O O O $void$ O O O O O $any$ O O O O $MochaDone$ O O O $void$ O $JSON$ O $complex$ O O $boolean$ O O O O O O O O O O O $AccountManager$ O $any$ O O O O O O O O $any$ O O $any$ O O O O O $ErrorConstructor$ O O O O O O O $Error$ O O $any$ O O O O O O O $any$ O O O O $MochaDone$ O O O $void$ O $JSON$ O $complex$ O O ${}$ O O O O O O O O O O O O $AccountManager$ O $any$ O O O O $any$ O O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O O O O $void$ O O O O O $any$ O O O O $MochaDone$ O O O $void$ O $JSON$ O $complex$ O O $undefined[]$ O O O O O O O O O O O O $AccountManager$ O $any$ O O O O O O $any$ O O $any$ O O O $any$ O $any$ O O $any$ O O $any$ O O O O O $void$ O O O O O $any$ O O O O $MochaDone$ O O O $void$ O O O O O O O O O $AccountManager$ O $any$ O O O O $any$ O O $any$ O O O $any$ O $any$ O O $any$ O O $any$ O O O O O $void$ O O O O O $any$ O O O O $MochaDone$ O O O $void$ O O O O O O $AccountManager$ O $any$ O O O O O O $any$ O O $any$ O O O $any$ O $any$ O O $any$ O O $any$ O O O O O $void$ O O O O O $any$ O O O O $MochaDone$ O O O $void$ O $JSON$ O $complex$ O O $complex$ O O $string$ O O O $string$ O O O O O O O O O $string$ O O O O O $AccountManager$ O $any$ O O O O O O $any$ O O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O O O O $void$ O O O O O $any$ O O O O $MochaDone$ O O O $void$ O $JSON$ O $complex$ O O ${}$ O O O O O O O O O O O O $AccountManager$ O $any$ O O O O O O $any$ O O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O O O O $void$ O O O O O $any$ O O O O $MochaDone$ O O O $void$ O $JSON$ O $complex$ O O $undefined[]$ O O O O O O O O O O O O $AccountManager$ O $any$ O O O O $any$ O O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O O O O $void$ O O O O O $any$ O O O O $MochaDone$ O O O $void$ O $JSON$ O $complex$ O O $undefined[]$ O O O O O O O O O O O O $AccountManager$ O $any$ O O O O O O O O $any$ O O $any$ O O O $any$ O $any$ O O $any$ O O $any$ O O O O O $void$ O O O O O $any$ O O O O $MochaDone$ O O O $void$ O O O O O O O O O $AccountManager$ O $any$ O O O O O O $any$ O O $any$ O O O $any$ O $any$ O O $any$ O O $any$ O O O O O $void$ O O O O O $any$ O O O O $MochaDone$ O O O $void$ O $JSON$ O $complex$ O O $undefined[]$ O O O O O O O O O $AccountManager$ O $any$ O O O O O O $any$ O O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O $void$ O O O O O $any$ O O O O $MochaDone$ O O O $void$ O $JSON$ O $complex$ O O $complex$ O O O $string$ O O O O O $string$ O O O O O O O O O O $AccountManager$ O $any$ O O O O O O $any$ O O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O $any$ O O O O $any$ O $any$ O $any$ O O O O $any$ O O O O $any$ O O O O O $void$ O O O O O $any$ O O O O $MochaDone$ O O O $void$ O O O O O O $AccountManager$ O $any$ O O O O O O $any$ O O $any$ O O O O O $ErrorConstructor$ O O O O O O O $Error$ O O $any$ O O O O O O O $any$ O O O O $MochaDone$ O O O $void$ O O O O O O $AccountManager$ O $any$ O O O O O O $any$ O O $any$ O O O $any$ O $any$ O O $any$ O O $any$ O O O O O $void$ O O O O O $any$ O O O O $MochaDone$ O O O $void$ O O O O O O $AccountManager$ O $any$ O O O O O O $any$ O O $any$ O O O O O $ErrorConstructor$ O O O O O O O $Error$ O O $any$ O O O O O O O $any$ O O O O $MochaDone$ O O O $void$ O O O O O O $string$ O O O O O $AccountManager$ O $any$ O O O O O O $any$ O O $any$ O O O $any$ O $any$ O O $any$ O O $any$ O O O O O $void$ O O O O O $any$ O O O O $MochaDone$ O O O $void$ O O O O O O O O O $AccountManager$ O $any$ O O O O O O $any$ O O $any$ O O O O O $ErrorConstructor$ O O O O O O O $Error$ O O $any$ O O O O O O O $any$ O O O O $MochaDone$ O O O $void$ O $JSON$ O $complex$ O O ${}$ O O O O O O O O O $AccountManager$ O $any$ O O O O $any$ O O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $ObjectConstructor$ O $complex$ O $any$ O O $number$ O O O O $any$ O O O O O $void$ O O O O O $any$ O O O O $MochaDone$ O O O $void$ O $JSON$ O $complex$ O O O O O O O O $string$ O O O $boolean$ O O O O O O O $string$ O O O $boolean$ O O O O O O O O O O $AccountManager$ O $any$ O O O O $any$ O O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O O O O $any$ O $any$ O $any$ O O O O $any$ O O O O $any$ O O O O O $void$ O O O O O $any$ O O O O $MochaDone$ O O O $void$ O O O O O O O O O $AccountManager$ O $any$ O O O O O O $any$ O O $any$ O O O $any$ O $any$ O O $any$ O O $any$ O O O O O $void$ O O O O O $any$ O O O O $MochaDone$ O O O $void$ O $JSON$ O $complex$ O O $complex$ O O $string$ O O O O O O O O O $AccountManager$ O $any$ O O O O O O O O $string$ O O O O O $any$ O O $any$ O O O $any$ O $any$ O O $any$ O O $any$ O O O O O $void$ O O O O O $any$ O O O O $MochaDone$ O O O $void$ O O O O O O $AccountManager$ O $any$ O O O O O O O O O O O $any$ O O $any$ O O O O O $ErrorConstructor$ O O O O O O O $Error$ O O $any$ O O O O O O O $any$ O O O O $MochaDone$ O O O $void$ O $JSON$ O $complex$ O O $complex$ O O $string$ O O O O O O O O O $AccountManager$ O $any$ O O O O O O O O $string$ O O O O O $any$ O O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O $any$ O O O O O $void$ O O O O O $any$ O O O O $MochaDone$ O O O $void$ O O O O O O $AccountManager$ O $any$ O O O O O O O O $number$ O O O O O $any$ O O $any$ O O O O O $ErrorConstructor$ O O O O O O O $Error$ O O $any$ O O O O O O O $any$ O O O O $MochaDone$ O O O $void$ O $JSON$ O $complex$ O O $complex$ O O $string$ O O O O O O O O O $AccountManager$ O $any$ O O O O O O O O $any$ O O $any$ O O O $any$ O $any$ O O $any$ O O $any$ O O O O O $void$ O O O O O $any$ O O O O $MochaDone$ O O O $void$ O O O O O O $AccountManager$ O $any$ O O O O O O O O $any$ O O $any$ O O O O O $ErrorConstructor$ O O O O O O O $Error$ O O $any$ O O O O O O O O O O O $void$ O $any$ O O $any$ O $any$ O O O O O $void$ O $string$ O $number$ O ${}$ O O O O O $any$ O O O O $any$ O O O $string$ O O O $any$ O O O $any$ O $any$ O O O O O $boolean$ O $number$ O O O $number$ O O O O O O $boolean$ O O O $any$ O O $ErrorConstructor$ O $string$ O O $any$ O $any$ O $number$ O O $any$ O O O O $string$ O $string$ O $number$ O $number$ O $true$ O $true$ O ${}$ O ${}$ O ${}$ O O O O O O O $any$ O O O $any$ O $any$ O O O O O $any$ O O O O O O O
'js' module . exports = [ { pattern : 's' , fixtures : function ( match , params ) { return { text : "s" , status : 0 , ok : false } ; if ( match [ 0 ] === 's' ) { throw new Error ( 0 ) ; } if ( params [ "s" ] ) { return 's' + params [ "s" ] ; } else { return 's' ; } } , callback : function ( match , data ) { return data ; } } , ] ;	O O O O O O O $string$ O O O $complex$ O O O $any$ O $any$ O O O O $string$ O O O $number$ O O O $boolean$ O O O O O O $any$ O O O O O O O O O $ErrorConstructor$ O O O O O O O $any$ O O O O O O O O $any$ O O O O O O O O O O O O O $any$ O O O $any$ O $any$ O O O $any$ O O O O O O