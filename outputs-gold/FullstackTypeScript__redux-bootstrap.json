'js' "s" ; var gulp = require ( "s" ) , tslint = require ( "s" ) , tsc = require ( "s" ) , runSequence = require ( "s" ) , browserify = require ( "s" ) , source = require ( "s" ) , buffer = require ( "s" ) , tsify = require ( "s" ) , istanbul = require ( "s" ) , sourcemaps = require ( "s" ) , karma = require ( "s" ) ; gulp . task ( "s" , function ( ) { var config = { formatter : "s" , emitError : ( process . env . CI ) ? true : false } ; return gulp . src ( [ "s" , "s" ] ) . pipe ( tslint ( config ) ) . pipe ( tslint . report ( ) ) ; } ) ; var tsLibProject = tsc . createProject ( "s" ) ; gulp . task ( "s" , function ( ) { return gulp . src ( [ "s" , "s" ] ) . pipe ( tsLibProject ( ) ) . on ( "s" , function ( err ) { process . exit ( 0 ) ; } ) . js . pipe ( gulp . dest ( "s" ) ) ; } ) ; var tsEsProject = tsc . createProject ( "s" , { target : "s" , module : "s" } ) ; gulp . task ( "s" , function ( ) { return gulp . src ( [ "s" , "s" ] ) . pipe ( tsEsProject ( ) ) . on ( "s" , function ( err ) { process . exit ( 0 ) ; } ) . js . pipe ( gulp . dest ( "s" ) ) ; } ) ; var tsDtsProject = tsc . createProject ( "s" , { declaration : true , noResolve : false } ) ; gulp . task ( "s" , function ( ) { return gulp . src ( [ "s" , "s" ] ) . pipe ( tsDtsProject ( ) ) . on ( "s" , function ( err ) { process . exit ( 0 ) ; } ) . dts . pipe ( gulp . dest ( "s" ) ) ; } ) ; gulp . task ( "s" , function ( ) { var mainFilePath = "s" ; var outputFolder = "s" ; var outputFileName = "s" ; var bundler = browserify ( { debug : true } ) ; return bundler . add ( mainFilePath ) . plugin ( tsify ) . bundle ( ) . pipe ( source ( outputFileName ) ) . pipe ( buffer ( ) ) . pipe ( sourcemaps . init ( { loadMaps : true } ) ) . pipe ( sourcemaps . write ( ) ) . pipe ( gulp . dest ( outputFolder ) ) ; } ) ; gulp . task ( "s" , function ( done ) { new karma . Server ( { configFile : __dirname + "s" } , function ( code ) { if ( code === 0 ) { console . log ( 's' ) ; done ( 's' ) ; } else { console . log ( 's' ) ; done ( ) ; } } ) . start ( ) ; } ) ; gulp . task ( "s" , function ( done ) { var collector = new istanbul . Collector ( ) ; var reporter = new istanbul . Reporter ( ) ; reporter . add ( "s" ) ; reporter . addAll ( [ "s" , "s" ] ) ; var remappedJson = require ( "s" ) ; var keys = Object . keys ( remappedJson ) ; var coverage = { } ; for ( var i = 0 ; i < keys . length ; i ++ ) { if ( keys [ i ] . startsWith ( "s" ) ) { coverage [ keys [ i ] ] = remappedJson [ keys [ i ] ] ; } } collector . add ( coverage ) ; reporter . write ( collector , true , function ( ) { done ( ) ; } ) ; } ) ; gulp . task ( "s" , function ( cb ) { runSequence ( "s" , [ "s" , "s" , "s" ] , "s" , "s" , "s" , cb ) ; } ) ;	
'js' module . exports = function ( config ) { "s" ; config . set ( { singleRun : true , basePath : "s" , frameworks : [ "s" , "s" ] , browsers : [ "s" ] , reporters : [ "s" , "s" , "s" ] , coverageReporter : { dir : "s" } , remapIstanbulReporter : { reports : { json : 's' } } , plugins : [ "s" , "s" , "s" , "s" , "s" , "s" ] , preprocessors : { "s" : [ "s" ] } , files : [ { pattern : "s" , included : true } , { pattern : "s" , included : true } ] , port : 0 , colors : true , autoWatch : false , logLevel : config . LOG_INFO } ) ; } ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import * as History from "s" ; import * as Redux from "s" ; namespace interfaces { export interface ConfigureStore extends Function { ( middlewares : Redux . Middleware [ ] , rootReducer , initialState ) : Redux . Store < any > ; } export interface BoostrapOptions { routes : JSX . Element ; reducers : ReducersOption ; createHistory ? : History . CreateHistory < History . HistoryOptions , History . History > ; historyOptions ? : History . HistoryOptions ; devToolsOptions ? : DevToolsOptions ; middlewares ? : Redux . Middleware [ ] ; enhancers ? : Redux . StoreEnhancer < any > [ ] ; render ? : Function ; initialState ? : any ; container ? : string ; routerProps ? : RouterProps ; } export interface BootstrapResult { store : Redux . Store < any > ; history : History . History ; output : any ; root : JSX . Element ; } export interface ReducersOption { [ index ] : Redux . Reducer < any > ; } export interface RootComponentProps { store : Redux . Store < any > ; history : History . History ; routes : JSX . Element ; } export interface RouterProps { onError ? : ( error ) => any ; onUpdate ? : ( ) => any ; } export interface NodeModule { hot : { accept : ( path , cb : ( ) => void ) => void ; } ; } export interface DevToolsOptions { name ? : string ; actionCreators ? : Array < any > | Object ; latency ? : number ; serialize ? : boolean | Object ; actionSanitizer ? : Function ; stateSanitizer ? : Function ; actionBlacklist ? : string | Array < string > ; actionWhitelist ? : string | Array < string > ; predicate ? : Function ; shouldRecordChanges ? : boolean ; pauseActionType ? : string ; autoPause ? : boolean ; shouldStartLocked ? : boolean ; shouldHotReload ? : boolean ; features ? : Object ; } export interface Compose extends Function { < F extends Function > ( ... f : F [ ] ) : F ; } export interface DevTools extends Function { ( options ) : Compose ; } } export default interfaces ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $Object$ O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $string$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O O O O O O O O O O O O O O O O O $string$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $DevToolsOptions$ O O O O O O O O O O
import { createStore , applyMiddleware , compose } from "s" ; import * as Redux from "s" ; import interfaces from "s" ; function configureStore ( middlewares : Redux . Middleware [ ] , enhancers : Redux . StoreEnhancer < any > [ ] , rootReducer : Redux . Reducer < any > , initialState , devToolsOptions : interfaces . DevToolsOptions ) : Redux . Store < any > { let devTools : interfaces . DevTools = ( window as any ) . __REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ; const composeEnhancers = devTools ? devTools ( devToolsOptions ) : compose ; return createStore ( rootReducer , initialState , composeEnhancers ( ... enhancers , applyMiddleware ( ... middlewares ) ) ) ; } export default configureStore ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O