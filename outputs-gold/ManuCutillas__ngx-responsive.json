import { browser , by , element } from 's' ; export class AppPage { navigateTo ( ) { return browser . get ( 's' ) ; } getParagraphText ( ) { return element ( by . css ( 's' ) ) . getText ( ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { AppPage } from 's' ; describe ( 's' , ( ) => { let page ; beforeEach ( ( ) => { page = new AppPage ( ) ; } ) ; it ( 's' , ( ) => { page . navigateTo ( ) ; expect ( page . getParagraphText ( ) ) . toEqual ( 's' ) ; } ) ; } ) ;	O O O O O O O O O O O O O O O O $AppPage$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { NgModule } from 's' ; import { Routes , RouterModule } from 's' ; const routes = [ ] ; @ NgModule ( { imports : [ RouterModule . forRoot ( routes ) ] , exports : [ RouterModule ] } ) export class AppRoutingModule { }	O O O O O O O O O O O O O O O O O $Routes$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { Component } from 's' ; import { IeInfoRx , ResponsiveSizeInfoRx , OrientationInfoRx , DeviceStandardInfoRx , DeviceInfoRx , UserAgentInfoRx , BrowserInfoRx , } from 's' ; import { OnInit , OnDestroy } from 's' ; import { Subscription } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' , styleUrls : [ 's' ] } ) export class AppComponent implements OnInit , OnDestroy { private _subscriptions : Subscription [ ] = [ ] ; constructor ( public ieInfoRx , public browserInfoRx , public devicesInfoRx , public devicesStandardInfoRx , public orientationInfoRx , public responsiveSizeInfoRx , public userAgentInfoRx ) { } public title = 's' ; public ngOnInit ( ) { this . _subscribe ( ) ; this . ieInfoRx . connect ( ) ; this . browserInfoRx . connect ( ) ; this . devicesInfoRx . connect ( ) ; this . devicesStandardInfoRx . connect ( ) ; this . orientationInfoRx . connect ( ) ; this . responsiveSizeInfoRx . connect ( ) ; this . userAgentInfoRx . connect ( ) ; } public ngOnDestroy ( ) { this . _unsubscribe ( ) ; this . ieInfoRx . disconnect ( ) ; this . browserInfoRx . disconnect ( ) ; this . devicesInfoRx . disconnect ( ) ; this . devicesStandardInfoRx . disconnect ( ) ; this . orientationInfoRx . disconnect ( ) ; this . responsiveSizeInfoRx . disconnect ( ) ; this . userAgentInfoRx . disconnect ( ) ; } public thisUserAgent ( userAgent ) { console . log ( 's' , userAgent ) ; } private _subscribe ( ) { this . _subscriptions . push ( this . ieInfoRx . getIE . subscribe ( ( data ) => { console . log ( 's' , data ) ; } , ( err ) => { console . log ( 's' , err ) ; } ) ) ; this . _subscriptions . push ( this . browserInfoRx . getBrowser . subscribe ( ( data ) => { console . log ( 's' , data ) ; } , ( err ) => { console . log ( 's' , err ) ; } ) ) ; this . _subscriptions . push ( this . devicesInfoRx . getDevice . subscribe ( ( data ) => { console . log ( 's' , data ) ; } , ( err ) => { console . log ( 's' , err ) ; } ) ) ; this . _subscriptions . push ( this . devicesStandardInfoRx . getStandardDevice . subscribe ( ( data ) => { console . log ( 's' , data ) ; } , ( err ) => { console . log ( 's' , err ) ; } ) ) ; this . _subscriptions . push ( this . orientationInfoRx . getOrientation . subscribe ( ( data ) => { console . log ( 's' , data ) ; } , ( err ) => { console . log ( 's' , err ) ; } ) ) ; this . _subscriptions . push ( this . responsiveSizeInfoRx . getResponsiveSize . subscribe ( ( data ) => { console . log ( 's' , data ) ; } , ( err ) => { console . log ( 's' , err ) ; } ) ) ; this . _subscriptions . push ( this . userAgentInfoRx . getUserAgent . subscribe ( ( data ) => { console . log ( 's' , data ) ; } , ( err ) => { console . log ( 's' , err ) ; } ) ) ; } private _unsubscribe ( ) { this . _subscriptions . forEach ( ( subscription ) => subscription . unsubscribe ( ) ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $IeInfoRx$ O O $BrowserInfoRx$ O O $DeviceInfoRx$ O O $DeviceStandardInfoRx$ O O $OrientationInfoRx$ O O $ResponsiveSizeInfoRx$ O O $UserAgentInfoRx$ O O O O O O O O O $void$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $void$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $voidvoid$ O O O O O O O O O O $Subscription$ O O O O O O O O O O O
import { TestBed , async } from 's' ; import { RouterTestingModule } from 's' ; import { AppComponent } from 's' ; describe ( 's' , ( ) => { beforeEach ( async ( ( ) => { TestBed . configureTestingModule ( { imports : [ RouterTestingModule ] , declarations : [ AppComponent ] , } ) . compileComponents ( ) ; } ) ) ; it ( 's' , ( ) => { const fixture = TestBed . createComponent ( AppComponent ) ; const app = fixture . debugElement . componentInstance ; expect ( app ) . toBeTruthy ( ) ; } ) ; it ( `template` , ( ) => { const fixture = TestBed . createComponent ( AppComponent ) ; const app = fixture . debugElement . componentInstance ; expect ( app . title ) . toEqual ( 's' ) ; } ) ; it ( 's' , ( ) => { const fixture = TestBed . createComponent ( AppComponent ) ; fixture . detectChanges ( ) ; const compiled = fixture . debugElement . nativeElement ; expect ( compiled . querySelector ( 's' ) . textContent ) . toContain ( 's' ) ; } ) ; } ) ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { BrowserModule } from 's' ; import { NgModule } from 's' ; import { CommonModule } from 's' ; import { ResponsiveModule , IResponsiveConfig } from 's' ; import { AppRoutingModule } from 's' ; import { AppComponent } from 's' ; const config = { breakPoints : { xs : { max : 0 } , sm : { min : 0 , max : 0 } , md : { min : 0 , max : 0 } , lg : { min : 0 , max : 0 } , xl : { min : 0 } } , debounceTime : 0 } ; @ NgModule ( { declarations : [ AppComponent ] , imports : [ BrowserModule , CommonModule , AppRoutingModule , ResponsiveModule . forRoot ( config ) ] , providers : [ ] , bootstrap : [ AppComponent ] } ) export class AppModule { }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $IResponsiveConfig$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
export const environment = { production : true } ;	O O O O O O O O O O
export const environment = { production : false } ;	O O O O O O O O O O
import { enableProdMode } from 's' ; import { platformBrowserDynamic } from 's' ; import { AppModule } from 's' ; import { environment } from 's' ; if ( environment . production ) { enableProdMode ( ) ; } platformBrowserDynamic ( ) . bootstrapModule ( AppModule ) . catch ( err => console . error ( err ) ) ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import 's' ;	O O O
import 's' ; import { getTestBed } from 's' ; import { BrowserDynamicTestingModule , platformBrowserDynamicTesting } from 's' ; declare const require ; getTestBed ( ) . initTestEnvironment ( BrowserDynamicTestingModule , platformBrowserDynamicTesting ( ) ) ; const context = require . context ( 's' , true , "s" ) ; context . keys ( ) . map ( context ) ;	O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
export type TDebian = 's' ; export type TKnoppix = 's' ; export type TMint = 's' ; export type TUbuntu = 's' ; export type TKubuntu = 's' ; export type TXubuntu = 's' ; export type TLubuntu = 's' ; export type TFedora = 's' ; export type TRedHat = 's' ; export type TMandriva = 's' ; export type TGentoo = 's' ; export type TSabayon = 's' ; export type TSlackware = 's' ; export type TSuse = 's' ; export type TCentOS = 's' ; export type TBacktrack = 's' ; export type TGenericLinux = 's' ; export type TLinuxOS = TDebian | TKnoppix | TMint | TUbuntu | TKubuntu | TXubuntu | TLubuntu | TFedora | TRedHat | TMandriva | TGentoo | TSabayon | TSlackware | TSuse | TCentOS | TBacktrack | TGenericLinux | null ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
export type TWindowsXP = 's' ; export type TWindowsVista = 's' ; export type 0 = 's' ; export type 0 = 's' ; export type 0 = 's' ; export type TGenericWindows = 's' ; export type TWindowsOS = TWindowsXP | TWindowsVista | 0 | 0 | 0 | TGenericWindows | null ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
export type TIphone = 's' ; export type TAndroid = 's' ; export type TWindowsPhone = 's' ; export type TBlackberry = 's' ; export type TGenericMobile = 's' ; export type TMobile = TIphone | TAndroid | TWindowsPhone | TBlackberry | TGenericMobile | null ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { TAndroid , TWindowsPhone } from 's' ; export type TIpad = 's' ; export type TKindle = 's' ; export type TGenericTablet = 's' ; export type TTablet = TIpad | TAndroid | TWindowsPhone | TKindle | TGenericTablet | null ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
export type TWindows = 's' ; export type TIos = 's' ; export type TMacOS = 's' ; export type TLinux = 's' ; export type TFirefoxOS = 's' ; export type TChromeOS = 's' ; export type TosSystems = TWindows | TMacOS | TLinux | TFirefoxOS | TChromeOS | null ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
export type 0 = 's' ; export type 0 = 's' ; export type TXboxOne = 's' ; export type TXbox = 's' ; export type TWii = 's' ; export type TWiiU = 's' ; export type 0 = 's' ; export type TPlaystationVita = 's' ; export type TPsp = 's' ; export type TGameDevices = 0 | 0 | TXboxOne | TXbox | TWii | TWiiU | 0 | TPlaystationVita | TPsp | null ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { 0 , TXboxOne } from 's' ; export type TChromecast = 's' ; export type TAppleTv = 's' ; export type TGoogleTv = 's' ; export type TGenericTv = 's' ; export type TSmartTv = TChromecast | TAppleTv | TGoogleTv | 0 | TXboxOne | TGenericTv ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
export type TGenericBot = 's' ; export type TBots = TGenericBot ;	O O O O O O O O O O O O
export type TChrome = 's' ; export type TFirefox = 's' ; export type TIe = 's' ; export type TSafari = 's' ; export type TOpera = 's' ; export type TSilk = 's' ; export type TYandex = 's' ; export type TNA = 's' ; export type TBrowserNames = TChrome | TFirefox | TIe | TSafari | TOpera | TSilk | TYandex | TNA ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
export type 0 = 's' ; export type 0 = 's' ; export type 0 = 's' ; export type 0 = 's' ; export type 0 = 's' ; export type 0 = 's' ; export type TIE_VERSIONS = 0 | 0 | 0 | 0 | 0 | 0 ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { TDebian , TKnoppix , TMint , TUbuntu , TKubuntu , TXubuntu , TLubuntu , TFedora , TRedHat , TMandriva , TGentoo , TSabayon , TSlackware , TSuse , TCentOS , TBacktrack , TGenericLinux } from 's' ; export interface ILinuxOS { DEBIAN : TDebian ; KNOPPIX : TKnoppix ; MINT : TMint ; UBUNTU : TUbuntu ; KUBUNTU : TKubuntu ; XUBUNTU : TXubuntu ; LUBUNTU : TLubuntu ; FEDORA : TFedora ; RED_HAT : TRedHat ; MANDRIVA : TMandriva ; GENTOO : TGentoo ; SABAYON : TSabayon ; SLACKWARE : TSlackware ; SUSE : TSuse ; CENT_OS : TCentOS ; BACKTRACK : TBacktrack ; GENERIC_LINUX : TGenericLinux ; }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { TWindowsXP , TWindowsVista , 0 , 0 , 0 , TGenericWindows } from 's' ; export interface IWindowsOS { WINDOWS_XP : TWindowsXP ; WINDOWS_VISTA : TWindowsVista ; 0 : 0 ; 0 : 0 ; 0 : 0 ; GENERIC_WINDOWS : TGenericWindows ; }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { TIpad , TAndroid , TWindowsPhone , TKindle , TGenericTablet } from 's' ; export interface ITablet { IPAD : TIpad ; ANDROID : TAndroid ; WINDOWS_PHONE : TWindowsPhone ; KINDLE : TKindle ; GENERIC_TABLET : TGenericTablet ; }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { TIphone , TAndroid , TWindowsPhone , TBlackberry , TGenericMobile } from 's' ; export interface IMobile { IPHONE : TIphone ; ANDROID : TAndroid ; WINDOWS_PHONE : TWindowsPhone ; BLACKBERRY : TBlackberry ; GENERIC_MOBILE : TGenericMobile ; }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { TWindows , TAndroid , TWindowsPhone , TIos , TMacOS , TLinux , TFirefoxOS , TChromeOS } from 's' ; export interface IOsSistems { WINDOWS : TWindows ; ANDROID : TAndroid ; WINDOWS_PHONE : TWindowsPhone ; IOS : TIos ; MAC_OS : TMacOS ; LINUX : TLinux ; FIREFOX_OS : TFirefoxOS ; CHROME_OS : TChromeOS ; }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
export interface IResponsiveConfig { breakPoints : { xs : { max : number } , sm : { min : number , max : number } , md : { min : number , max : number } , lg : { min : number , max : number } , xl : { min : number } } ; debounceTime : number ; }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { TChromecast , TAppleTv , TGoogleTv , 0 , TXboxOne , TGenericTv } from 's' ; export interface ISmartTv { CHROMECAST : TChromecast ; APPLE_TV : TAppleTv ; GOOGLE_TV : TGoogleTv ; 0 : 0 ; XBOX_ONE : TXboxOne ; GENERIC_TV : TGenericTv ; }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { 0 , 0 , TXboxOne , TXbox , TWii , TWiiU , 0 , TPlaystationVita , TPsp } from 's' ; export interface IGameDevices { 0 : 0 ; 0 : 0 ; XBOX_ONE : TXboxOne ; XBOX : TXbox ; WII : TWii ; WII_U : TWiiU ; 0 : 0 ; PLAYSTATION_VITA : TPlaystationVita ; PSP : TPsp ; }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { TGenericBot } from 's' ; export interface IBot { GENERIC_BOT : TGenericBot ; }	O O O O O O O O O O O O O O O O
import { TChrome , TFirefox , TIe , TSafari , TSilk , TYandex , TNA , TOpera } from 's' ; export interface IBrowserNames { CHROME : TChrome ; FIREFOX : TFirefox ; IE : TIe ; SAFARI : TSafari ; OPERA : TOpera ; SILK : TSilk ; YANDEX : TYandex ; NA : TNA ; }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { 0 , 0 , 0 , 0 , 0 , 0 } from 's' ; export interface IIEVersions { 0 : 0 ; 0 : 0 ; 0 : 0 ; 0 : 0 ; 0 : 0 ; 0 : 0 ; }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
export interface IUserAgent { device : string ; browser : string ; pixelratio : string ; ie_version : { name : string ; state : boolean ; } ; game_device : { name : string ; state : boolean ; } ; smart_tv : { name : string ; state : boolean ; } ; desktop : { name : string ; state : boolean ; } ; tablet : { name : string ; state : boolean ; } ; mobile : { name : string ; state : boolean ; } ; window_os : { name : string ; state : boolean ; } ; linux_os : { name : string ; state : boolean ; } ; bot : boolean ; }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
export interface IResponsivePattern { bootstrap ? : string | string [ ] ; browser ? : string | string [ ] ; device ? : string | string [ ] ; pixelratio ? : string | string [ ] ; orientation ? : string | string [ ] ; standard ? : string | string [ ] ; ie ? : string | string [ ] ; sizes ? : number ; } export interface IResponsiveSubscriptions { bootstrap ? : boolean ; browser ? : boolean ; device ? : boolean ; pixelratio ? : boolean ; orientation ? : boolean ; standard ? : boolean ; ie ? : boolean ; sizes ? : boolean ; }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { IBrowserNames } from 's' ; export const BROWSER_NAMES = { CHROME : 's' , FIREFOX : 's' , IE : 's' , SAFARI : 's' , OPERA : 's' , SILK : 's' , YANDEX : 's' , NA : 's' } ;	O O O O O O O O O $IBrowserNames$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
export const DEFAULT_BREACKPOINTS = { breakPoints : { xs : { max : 0 } , sm : { min : 0 , max : 0 } , md : { min : 0 , max : 0 } , lg : { min : 0 , max : 0 } , xl : { min : 0 } } , debounceTime : 0 }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { IGameDevices } from 's' ; export const GAME_DEVICES = { 0 : 's' , 0 : 's' , XBOX_ONE : 's' , XBOX : 's' , WII : 's' , WII_U : 's' , 0 : 's' , PLAYSTATION_VITA : 's' , PSP : 's' } ;	O O O O O O O O O $IGameDevices$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { IBot } from 's' ; export const BOTS = { GENERIC_BOT : 's' } ;	O O O O O O O O O $IBot$ O O O O O O O
import { IIEVersions } from 's' ; export const IE_VERSIONS = { 0 : 's' , 0 : 's' , 0 : 's' , 0 : 's' , 0 : 's' , 0 : 's' } ;	O O O O O O O O O $IIEVersions$ O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { ILinuxOS } from 's' ; export const LINUX_OS = { DEBIAN : 's' , KNOPPIX : 's' , MINT : 's' , UBUNTU : 's' , KUBUNTU : 's' , XUBUNTU : 's' , LUBUNTU : 's' , FEDORA : 's' , RED_HAT : 's' , MANDRIVA : 's' , GENTOO : 's' , SABAYON : 's' , SLACKWARE : 's' , SUSE : 's' , CENT_OS : 's' , BACKTRACK : 's' , GENERIC_LINUX : 's' } ;	O O O O O O O O O $ILinuxOS$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { IWindowsOS } from 's' ; export const WINDOWS_OS = { WINDOWS_XP : 's' , WINDOWS_VISTA : 's' , 0 : 's' , 0 : 's' , 0 : 's' , GENERIC_WINDOWS : 's' } ;	O O O O O O O O O $IWindowsOS$ O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { ITablet } from 's' ; export const TABLET = { IPAD : 's' , ANDROID : 's' , WINDOWS_PHONE : 's' , KINDLE : 's' , GENERIC_TABLET : 's' } ;	O O O O O O O O O $ITablet$ O O O O O O O O O O O O O O O O O O O O O O O
import { IMobile } from 's' ; export const MOBILE = { IPHONE : 's' , ANDROID : 's' , WINDOWS_PHONE : 's' , BLACKBERRY : 's' , GENERIC_MOBILE : 's' } ;	O O O O O O O O O $IMobile$ O O O O O O O O O O O O O O O O O O O O O O O
import { IOsSistems } from 's' ; import { MOBILE } from 's' ; export const OS_SYSTEMS = { WINDOWS : 's' , ANDROID : MOBILE . ANDROID , WINDOWS_PHONE : MOBILE . WINDOWS_PHONE , IOS : 's' , MAC_OS : 's' , LINUX : 's' , FIREFOX_OS : 's' , CHROME_OS : 's' } ;	O O O O O O O O O O O O O O O O $IOsSistems$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { ISmartTv } from 's' ; import { GAME_DEVICES } from 's' ; export const SMART_TV = { CHROMECAST : 's' , APPLE_TV : 's' , GOOGLE_TV : 's' , 0 : GAME_DEVICES . 0 , XBOX_ONE : GAME_DEVICES . XBOX_ONE , GENERIC_TV : 's' } ;	O O O O O O O O O O O O O O O O $ISmartTv$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { LINUX_OS } from 's' ; import { WINDOWS_OS } from 's' ; import { MOBILE } from 's' ; import { TABLET } from 's' ; import { OS_SYSTEMS } from 's' ; import { SMART_TV } from 's' ; import { GAME_DEVICES } from 's' ; import { BOTS } from 's' ; import { BROWSER_NAMES } from 's' ; export const REG_WEARABLES = { IWATCH : 's' } ; export const REG_MOBILES = { ANDROID : { REG : "s" , VALUE : MOBILE . ANDROID } , IPHONE : { REG : "s" , VALUE : MOBILE . IPHONE } , WINDOWS_PHONE : { REG : "s" , VALUE : MOBILE . WINDOWS_PHONE } , BLACKBERRY : { REG : "s" , VALUE : MOBILE . BLACKBERRY } , 0 : { REG : "s" , VALUE : MOBILE . BLACKBERRY } , WEB_OS : { REG : "s" , VALUE : MOBILE . GENERIC_MOBILE } , IPOD : { REG : "s" , VALUE : MOBILE . IPHONE } , FIREFOX_OS : { REG : "s" , VALUE : MOBILE . GENERIC_MOBILE } , MOBI : { REG : "s" , VALUE : MOBILE . GENERIC_MOBILE } , 0 : { REG : "s" , VALUE : MOBILE . GENERIC_MOBILE } , 0 : { REG : "s" , VALUE : MOBILE . GENERIC_MOBILE } } ; export const REG_TABLETS = { IPAD : { REG : "s" , VALUE : TABLET . IPAD } , KINDLE : { REG : "s" , VALUE : TABLET . KINDLE } , TABLET : { REG : "s" , VALUE : TABLET . GENERIC_TABLET } , PLAYBOOK : { REG : "s" , VALUE : TABLET . GENERIC_TABLET } , } ; export const REG_SMARTS_TV = { CHROMECAST : { REG : "s" , VALUE : SMART_TV . CHROMECAST } , APPLE_TV : { REG : "s" , VALUE : SMART_TV . APPLE_TV } , GOOGLE_TV : { REG : "s" , VALUE : SMART_TV . GOOGLE_TV } , 0 : { REG : "s" , VALUE : SMART_TV . 0 } , XBOX_ONE : { REG : "s" , VALUE : SMART_TV . XBOX_ONE } , GENERIC_TV : { REG : "s" , VALUE : SMART_TV . GENERIC_TV } } ; export const REG_GAME_DEVICES = { 0 : { REG : "s" , VALUE : GAME_DEVICES . 0 } , 0 : { REG : "s" , VALUE : GAME_DEVICES . 0 } , XBOX : { REG : "s" , VALUE : GAME_DEVICES . XBOX } , XBOX_ONE : { REG : "s" , VALUE : GAME_DEVICES . XBOX_ONE } , WII_U : { REG : "s" , VALUE : GAME_DEVICES . WII_U } , WII : { REG : "s" , VALUE : GAME_DEVICES . WII } , PS_VITA : { REG : "s" , VALUE : GAME_DEVICES . PLAYSTATION_VITA } , 0 : { REG : "s" , VALUE : GAME_DEVICES . 0 } , PSP : { REG : "s" , VALUE : GAME_DEVICES . PSP } } ; export const REG_IE_VERSIONS = { MS_MSIE : { REG : "s" , VALUE : null } , MS_TRIDENT : { REG : "s" , VALUE : null } , MS_EDGE : { REG : "s" , VALUE : null } } ; export const REG_BROWSERS = { CHROME : { REG : "s" , VALUE : BROWSER_NAMES . CHROME } , FIREFOX : { REG : "s" , VALUE : BROWSER_NAMES . FIREFOX } , WEB_VIEW : { REG : "s" , VALUE : BROWSER_NAMES . SAFARI } , SAFARI : { REG : "s" , VALUE : BROWSER_NAMES . SAFARI } , OPERA : { REG : "s" , VALUE : BROWSER_NAMES . OPERA } , IE : { REG : "s" , VALUE : BROWSER_NAMES . IE } , SILK : { REG : "s" , VALUE : BROWSER_NAMES . SILK } , YANDEX : { REG : "s" , VALUE : BROWSER_NAMES . YANDEX } , NA : { REG : null , VALUE : BROWSER_NAMES . NA } } ; export const REG_OS = { WINDOWS : { REG : "s" , VALUE : OS_SYSTEMS . WINDOWS } , IOS : { REG : "s" , VALUE : OS_SYSTEMS . IOS } , MAC_OS : { REG : "s" , VALUE : OS_SYSTEMS . MAC_OS } , ANDROID : { REG : "s" , VALUE : OS_SYSTEMS . ANDROID } , LINUX : { REG : "s" , VALUE : OS_SYSTEMS . LINUX } , FIREFOX_OS : { REG : "s" , VALUE : OS_SYSTEMS . FIREFOX_OS } , CHROME_OS : { REG : "s" , VALUE : OS_SYSTEMS . CHROME_OS } , WINDOWS_PHONE : { REG : "s" , VALUE : OS_SYSTEMS . WINDOWS_PHONE } } ; export const REG_SORT_NAMES = { MOZILLA : { REG : "s" , VALUE : null } , CHROME : { REG : "s" , VALUE : null } , WEBKIT : { REG : "s" , VALUE : null } , APPLE_WEBKIT : { REG : "s" , VALUE : null } , SAFARI : { REG : "s" , VALUE : null } } ; export const REG_WINDOWS_OS_VERSION = { 0 : { REG : "s" , VALUE : WINDOWS_OS . GENERIC_WINDOWS } , 0 : { REG : "s" , VALUE : WINDOWS_OS . GENERIC_WINDOWS } , WINDOWS_ME : { REG : "s" , VALUE : WINDOWS_OS . GENERIC_WINDOWS } , 0 : { REG : "s" , VALUE : WINDOWS_OS . GENERIC_WINDOWS } , WINDOWS_CE : { REG : "s" , VALUE : WINDOWS_OS . GENERIC_WINDOWS } , 0 : { REG : "s" , VALUE : WINDOWS_OS . GENERIC_WINDOWS } , WINDOWS_XP : { REG : "s" , VALUE : WINDOWS_OS . WINDOWS_XP } , 0 : { REG : "s" , VALUE : WINDOWS_OS . GENERIC_WINDOWS } , WINDOWS_VISTA : { REG : "s" , VALUE : WINDOWS_OS . WINDOWS_VISTA } , 0 : { REG : "s" , VALUE : WINDOWS_OS . 0 } , 0 : { REG : "s" , VALUE : WINDOWS_OS . 0 } , 0 : { REG : "s" , VALUE : WINDOWS_OS . 0 } , 0 : { REG : "s" , VALUE : WINDOWS_OS . GENERIC_WINDOWS } , } ; export const REG_WINDOWS_PHONE_OS_VERSION = { 0 : { REG : "s" , VALUE : WINDOWS_OS . GENERIC_WINDOWS } , 0 : { REG : "s" , VALUE : WINDOWS_OS . GENERIC_WINDOWS } , 0 : { REG : "s" , VALUE : WINDOWS_OS . GENERIC_WINDOWS } } ; export const REG_MAC_OS_VERSION = { MAC_OS : 's' } ; export const REG_LINUX_OS = { DEBIAN : { REG : "s" , VALUE : LINUX_OS . DEBIAN } , KNOPPIX : { REG : "s" , VALUE : LINUX_OS . KNOPPIX } , MINT : { REG : "s" , VALUE : LINUX_OS . MINT } , UBUNTU : { REG : "s" , VALUE : LINUX_OS . UBUNTU } , KUBUNTU : { REG : "s" , VALUE : LINUX_OS . KUBUNTU } , XUBUNTU : { REG : "s" , VALUE : LINUX_OS . XUBUNTU } , LUBUNTU : { REG : "s" , VALUE : LINUX_OS . LUBUNTU } , FEDORA : { REG : "s" , VALUE : LINUX_OS . FEDORA } , RED_HAT : { REG : "s" , VALUE : LINUX_OS . RED_HAT } , MANDRIVA : { REG : "s" , VALUE : LINUX_OS . MANDRIVA } , GENTOO : { REG : "s" , VALUE : LINUX_OS . GENTOO } , SABAYON : { REG : "s" , VALUE : LINUX_OS . SABAYON } , SLACKWARE : { REG : "s" , VALUE : LINUX_OS . SLACKWARE } , SUSE : { REG : "s" , VALUE : LINUX_OS . SUSE } , CENT_OS : { REG : "s" , VALUE : LINUX_OS . CENT_OS } , BACKTRACK : { REG : "s" , VALUE : LINUX_OS . BACKTRACK } } ; export const REG_BOTS = { GENERIC_BOT : { REG : "s" , VALUE : BOTS . GENERIC_BOT } } ;	
export const USER_AGENT = { device : null , browser : null , pixelratio : null , ie_version : { name : null , state : null } , game_device : { name : null , state : null } , smart_tv : { name : null , state : null } , desktop : { name : null , state : null } , tablet : { name : null , state : null } , mobile : { name : null , state : null } , window_os : { name : null , state : null } , linux_os : { name : null , state : null } , bot : null } ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { Injectable , Inject , Optional } from 's' ; import { IResponsiveConfig } from 's' ; @ Injectable ( ) export class ResponsiveConfig { public config : IResponsiveConfig ; constructor ( @ Inject ( 's' ) private _config ? ) { this . config = this . _config ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $IResponsiveConfig$ O O O O O O O O O O O O
export * from 's' ;	O O O O O
import { EventEmitter , TemplateRef , ViewContainerRef , OnInit , OnDestroy , ChangeDetectorRef } from 's' ; import { PLATFORM_ID , Inject } from 's' ; import { isPlatformBrowser } from 's' ; import { Subscription } from 's' ; import { IResponsiveSubscriptions } from 's' ; import { ResponsiveState } from 's' ; export abstract class RESPONSIVE_BASE < T > implements OnInit , OnDestroy { private _noRepeat = 0 ; private _sizes_grid_state : any ; private _others_grid_state : string [ ] ; private _directive : string ; private _subscription_Bootstrap : Subscription ; private _subscription_Browser : Subscription ; private _subscription_Pixel_Ratio : Subscription ; private _subscription_Device : Subscription ; private _subscription_Orientation : Subscription ; private _subscription_Standard : Subscription ; private _subscription_IE_Version : Subscription ; private _subscription_custom_sizes : Subscription ; protected _showWhenTrue : boolean ; private set_active_subscriptions : IResponsiveSubscriptions = { bootstrap : false , browser : false , device : false , pixelratio : false , orientation : false , standard : false , ie : false , sizes : false } ; private _isBrowser : any = null ; constructor ( private templateRef < any > , private viewContainer , private _responsiveState , private cd , @ Inject ( PLATFORM_ID ) protected readonly _platformId ) { this . _isBrowser = isPlatformBrowser ( this . _platformId ) ; } protected eventChanges : EventEmitter < any > = new EventEmitter ( ) ; protected setGrid ( grid_state , directive ) { switch ( directive ) { case 's' : this . set_active_subscriptions . bootstrap = true ; break ; case 's' : this . set_active_subscriptions . device = true ; break ; case 's' : this . set_active_subscriptions . standard = true ; break ; case 's' : this . set_active_subscriptions . orientation = true ; break ; case 's' : this . set_active_subscriptions . browser = true ; break ; case 's' : this . set_active_subscriptions . pixelratio = true ; break ; case 's' : this . set_active_subscriptions . ie = true ; break ; case 's' : this . set_active_subscriptions . sizes = true ; break ; } if ( directive === 's' ) { this . _sizes_grid_state = grid_state ; } else { this . _others_grid_state = < string [ ] > ( Array . isArray ( grid_state ) ? grid_state : [ grid_state ] ) ; } this . _directive = directive ; } public ngOnInit ( ) { if ( this . _isBrowser ) { if ( this . set_active_subscriptions . bootstrap ) { this . _subscription_Bootstrap = this . _responsiveState . elemento$ . subscribe ( this . updateView . bind ( this ) ) ; } if ( this . set_active_subscriptions . bootstrap ) { this . _subscription_Bootstrap = this . _responsiveState . elemento$ . subscribe ( this . updateView . bind ( this ) ) ; } if ( this . set_active_subscriptions . browser ) { this . _subscription_Browser = this . _responsiveState . browser$ . subscribe ( this . updateView . bind ( this ) ) ; } if ( this . set_active_subscriptions . device ) { this . _subscription_Device = this . _responsiveState . device$ . subscribe ( this . updateView . bind ( this ) ) ; } if ( this . set_active_subscriptions . pixelratio ) { this . _subscription_Pixel_Ratio = this . _responsiveState . pixel$ . subscribe ( this . updateView . bind ( this ) ) ; } if ( this . set_active_subscriptions . orientation ) { this . _subscription_Orientation = this . _responsiveState . orientation$ . subscribe ( this . updateView . bind ( this ) ) ; } if ( this . set_active_subscriptions . standard ) { this . _subscription_Standard = this . _responsiveState . standard$ . subscribe ( this . updateView . bind ( this ) ) ; } if ( this . set_active_subscriptions . ie ) { this . _subscription_IE_Version = this . _responsiveState . ieVersion$ . subscribe ( this . updateView . bind ( this ) ) ; } if ( this . set_active_subscriptions . sizes ) { this . _subscription_custom_sizes = this . _responsiveState . ancho$ . subscribe ( this . updateView . bind ( this ) ) ; } } } public ngOnDestroy ( ) { if ( this . _isBrowser ) { if ( this . set_active_subscriptions . bootstrap ) { this . _subscription_Bootstrap . unsubscribe ( ) ; } if ( this . set_active_subscriptions . browser ) { this . _subscription_Browser . unsubscribe ( ) ; } if ( this . set_active_subscriptions . device ) { this . _subscription_Device . unsubscribe ( ) ; } if ( this . set_active_subscriptions . pixelratio ) { this . _subscription_Pixel_Ratio . unsubscribe ( ) ; } if ( this . set_active_subscriptions . orientation ) { this . _subscription_Orientation . unsubscribe ( ) ; } if ( this . set_active_subscriptions . standard ) { this . _subscription_Standard . unsubscribe ( ) ; } if ( this . set_active_subscriptions . ie ) { this . _subscription_IE_Version . unsubscribe ( ) ; } if ( this . set_active_subscriptions . sizes ) { this . _subscription_custom_sizes . unsubscribe ( ) ; } } } private showHide ( show ) { if ( this . _isBrowser ) { if ( show ) { if ( this . _noRepeat === 0 ) { this . _noRepeat = 0 ; this . eventChanges . emit ( true ) ; this . viewContainer . createEmbeddedView ( this . templateRef ) ; this . cd . markForCheck ( ) ; } } else { this . _noRepeat = 0 ; this . eventChanges . emit ( false ) ; this . viewContainer . clear ( ) ; this . cd . markForCheck ( ) ; } } } private updateView ( value ) { const showBoolean = this . _directive === 's' ? ( ( typeof this . _sizes_grid_state . min === 's' || value >= this . _sizes_grid_state . min ) && ( typeof this . _sizes_grid_state . max === 's' || value <= this . _sizes_grid_state . max ) ) : ! ! this . _others_grid_state && this . _others_grid_state . indexOf ( value ) !== - 0 ; this . showHide ( this . _showWhenTrue ? showBoolean : ! showBoolean ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $TemplateRef$ O O O O O $ViewContainerRef$ O O $ResponsiveState$ O O $ChangeDetectorRef$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $void$ O $any$ O $stringvoid$ O $boolean$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $void$ O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { Directive , Input , TemplateRef , ViewContainerRef , ChangeDetectorRef } from 's' ; import { PLATFORM_ID , Inject } from 's' ; import { ResponsiveState } from 's' ; import { RESPONSIVE_BASE } from 's' ; @ Directive ( { selector : 's' } ) export class XlDirective extends RESPONSIVE_BASE < any > { protected _state = 's' ; protected _showWhenTrue = true ; @ Input ( ) set xl ( grid_state : string [ ] | string ) { this . setGrid ( this . _state , 's' ) ; } constructor ( templateRef < any > , viewContainer , _responsiveState , cd , @ Inject ( PLATFORM_ID ) _platformId ) { super ( templateRef , viewContainer , _responsiveState , cd , _platformId ) ; } } @ Directive ( { selector : 's' } ) export class LgDirective extends RESPONSIVE_BASE < any > { protected _state = 's' ; protected _showWhenTrue = true ; @ Input ( ) set lg ( grid_state : string [ ] | string ) { this . setGrid ( this . _state , 's' ) ; } constructor ( templateRef < any > , viewContainer , _responsiveState , cd , @ Inject ( PLATFORM_ID ) _platformId ) { super ( templateRef , viewContainer , _responsiveState , cd , _platformId ) ; } } @ Directive ( { selector : 's' } ) export class MdDirective extends RESPONSIVE_BASE < any > { protected _state = 's' ; protected _showWhenTrue = true ; @ Input ( ) set md ( grid_state : string [ ] | string ) { this . setGrid ( this . _state , 's' ) ; } constructor ( templateRef < any > , viewContainer , _responsiveState , cd , @ Inject ( PLATFORM_ID ) _platformId ) { super ( templateRef , viewContainer , _responsiveState , cd , _platformId ) ; } } @ Directive ( { selector : 's' } ) export class SmDirective extends RESPONSIVE_BASE < any > { protected _state = 's' ; protected _showWhenTrue = true ; @ Input ( ) set sm ( grid_state : string [ ] | string ) { this . setGrid ( this . _state , 's' ) ; } constructor ( templateRef < any > , viewContainer , _responsiveState , cd , @ Inject ( PLATFORM_ID ) _platformId ) { super ( templateRef , viewContainer , _responsiveState , cd , _platformId ) ; } } @ Directive ( { selector : 's' } ) export class XsDirective extends RESPONSIVE_BASE < any > { protected _state = 's' ; protected _showWhenTrue = true ; @ Input ( ) set xs ( grid_state : string [ ] | string ) { this . setGrid ( this . _state , 's' ) ; } constructor ( templateRef < any > , viewContainer , _responsiveState , cd , @ Inject ( PLATFORM_ID ) _platformId ) { super ( templateRef , viewContainer , _responsiveState , cd , _platformId ) ; } } @ Directive ( { selector : 's' } ) export class ShowItBootstrapDirective extends RESPONSIVE_BASE < any > { protected _showWhenTrue = true ; @ Input ( ) set showItBootstrap ( grid_state : string [ ] | string ) { this . setGrid ( grid_state , 's' ) ; } constructor ( templateRef < any > , viewContainer , _responsiveState , cd , @ Inject ( PLATFORM_ID ) _platformId ) { super ( templateRef , viewContainer , _responsiveState , cd , _platformId ) ; } } @ Directive ( { selector : 's' } ) export class HideItBootstrapDirective extends RESPONSIVE_BASE < any > { protected _showWhenTrue = false ; @ Input ( ) set hideItBootstrap ( grid_state : string [ ] | string ) { this . setGrid ( grid_state , 's' ) ; } constructor ( templateRef < any > , viewContainer , _responsiveState , cd , @ Inject ( PLATFORM_ID ) _platformId ) { super ( templateRef , viewContainer , _responsiveState , cd , _platformId ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $TemplateRef$ O O O O $ViewContainerRef$ O $ResponsiveState$ O $ChangeDetectorRef$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $TemplateRef$ O O O O $ViewContainerRef$ O $ResponsiveState$ O $ChangeDetectorRef$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $TemplateRef$ O O O O $ViewContainerRef$ O $ResponsiveState$ O $ChangeDetectorRef$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $TemplateRef$ O O O O $ViewContainerRef$ O $ResponsiveState$ O $ChangeDetectorRef$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $TemplateRef$ O O O O $ViewContainerRef$ O $ResponsiveState$ O $ChangeDetectorRef$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $TemplateRef$ O O O O $ViewContainerRef$ O $ResponsiveState$ O $ChangeDetectorRef$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $TemplateRef$ O O O O $ViewContainerRef$ O $ResponsiveState$ O $ChangeDetectorRef$ O O O O O O O O O O O O O O O O O O O O O O O O
import { Provider } from 's' ; import { XlDirective , LgDirective , MdDirective , SmDirective , XsDirective , ShowItBootstrapDirective , HideItBootstrapDirective } from 's' ; export * from 's' ; export const BOOTSTRAP_DIRECTIVES : Provider [ ] = [ XlDirective , LgDirective , MdDirective , SmDirective , XsDirective , ShowItBootstrapDirective , HideItBootstrapDirective ] ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { Directive , Input , TemplateRef , ViewContainerRef , ChangeDetectorRef } from 's' ; import { PLATFORM_ID , Inject } from 's' ; import { ResponsiveState } from 's' ; import { RESPONSIVE_BASE } from 's' ; @ Directive ( { selector : 's' } ) export class IsChromeDirective extends RESPONSIVE_BASE < any > { protected _state = 's' ; protected _showWhenTrue = true ; @ Input ( ) set isChrome ( grid_state : string [ ] | string ) { this . setGrid ( this . _state , 's' ) ; } constructor ( templateRef < any > , viewContainer , _responsiveState , cd , @ Inject ( PLATFORM_ID ) _platformId ) { super ( templateRef , viewContainer , _responsiveState , cd , _platformId ) ; } } @ Directive ( { selector : 's' } ) export class IsFirefoxDirective extends RESPONSIVE_BASE < any > { protected _state = 's' ; protected _showWhenTrue = true ; @ Input ( ) set isFirefox ( grid_state : string [ ] | string ) { this . setGrid ( this . _state , 's' ) ; } constructor ( templateRef < any > , viewContainer , _responsiveState , cd , @ Inject ( PLATFORM_ID ) _platformId ) { super ( templateRef , viewContainer , _responsiveState , cd , _platformId ) ; } } @ Directive ( { selector : 's' } ) export class IsSafariDirective extends RESPONSIVE_BASE < any > { protected _state = 's' ; protected _showWhenTrue = true ; @ Input ( ) set isSafari ( grid_state : string [ ] | string ) { this . setGrid ( this . _state , 's' ) ; } constructor ( templateRef < any > , viewContainer , _responsiveState , cd , @ Inject ( PLATFORM_ID ) _platformId ) { super ( templateRef , viewContainer , _responsiveState , cd , _platformId ) ; } } @ Directive ( { selector : 's' } ) export class IsOperaDirective extends RESPONSIVE_BASE < any > { protected _state = 's' ; protected _showWhenTrue = true ; @ Input ( ) set isOpera ( grid_state : string [ ] | string ) { this . setGrid ( this . _state , 's' ) ; } constructor ( templateRef < any > , viewContainer , _responsiveState , cd , @ Inject ( PLATFORM_ID ) _platformId ) { super ( templateRef , viewContainer , _responsiveState , cd , _platformId ) ; } } @ Directive ( { selector : 's' } ) export class IsIEDirective extends RESPONSIVE_BASE < any > { protected _state = 's' ; protected _showWhenTrue = true ; @ Input ( ) set isIE ( grid_state : string [ ] | string ) { this . setGrid ( this . _state , 's' ) ; } constructor ( templateRef < any > , viewContainer , _responsiveState , cd , @ Inject ( PLATFORM_ID ) _platformId ) { super ( templateRef , viewContainer , _responsiveState , cd , _platformId ) ; } } @ Directive ( { selector : 's' } ) export class ShowItBrowserDirective extends RESPONSIVE_BASE < any > { protected _showWhenTrue = true ; @ Input ( ) set showItBrowser ( grid_state : string [ ] | string ) { this . setGrid ( grid_state , 's' ) ; } constructor ( templateRef < any > , viewContainer , _responsiveState , cd , @ Inject ( PLATFORM_ID ) _platformId ) { super ( templateRef , viewContainer , _responsiveState , cd , _platformId ) ; } } @ Directive ( { selector : 's' } ) export class HideItBrowserDirective extends RESPONSIVE_BASE < any > { protected _showWhenTrue = false ; @ Input ( ) set hideItBrowser ( grid_state : string [ ] | string ) { this . setGrid ( grid_state , 's' ) ; } constructor ( templateRef < any > , viewContainer , _responsiveState , cd , @ Inject ( PLATFORM_ID ) _platformId ) { super ( templateRef , viewContainer , _responsiveState , cd , _platformId ) ; } } @ Directive ( { selector : 's' } ) export class 0 extends RESPONSIVE_BASE < any > { protected _state = 's' ; protected _showWhenTrue = true ; @ Input ( ) set 0 ( grid_state : string [ ] | string ) { this . setGrid ( this . _state , 's' ) ; } constructor ( templateRef < any > , viewContainer , _responsiveState , cd , @ Inject ( PLATFORM_ID ) _platformId ) { super ( templateRef , viewContainer , _responsiveState , cd , _platformId ) ; } } @ Directive ( { selector : 's' } ) export class 0 extends RESPONSIVE_BASE < any > { protected _state = 's' ; protected _showWhenTrue = true ; @ Input ( ) set 0 ( grid_state : string [ ] | string ) { this . setGrid ( this . _state , 's' ) ; } constructor ( templateRef < any > , viewContainer , _responsiveState , cd , @ Inject ( PLATFORM_ID ) _platformId ) { super ( templateRef , viewContainer , _responsiveState , cd , _platformId ) ; } } @ Directive ( { selector : 's' } ) export class 0 extends RESPONSIVE_BASE < any > { protected _state = 's' ; protected _showWhenTrue = true ; @ Input ( ) set 0 ( grid_state : string [ ] | string ) { this . setGrid ( this . _state , 's' ) ; } constructor ( templateRef < any > , viewContainer , _responsiveState , cd , @ Inject ( PLATFORM_ID ) _platformId ) { super ( templateRef , viewContainer , _responsiveState , cd , _platformId ) ; } } @ Directive ( { selector : 's' } ) export class 0 extends RESPONSIVE_BASE < any > { protected _state = 's' ; protected _showWhenTrue = true ; @ Input ( ) set 0 ( grid_state : string [ ] | string ) { this . setGrid ( this . _state , 's' ) ; } constructor ( templateRef < any > , viewContainer , _responsiveState , cd , @ Inject ( PLATFORM_ID ) _platformId ) { super ( templateRef , viewContainer , _responsiveState , cd , _platformId ) ; } } @ Directive ( { selector : 's' } ) export class ShowIEVersionDirective extends RESPONSIVE_BASE < any > { protected _showWhenTrue = true ; @ Input ( ) set showIEVersion ( grid_state : string [ ] | string ) { this . setGrid ( grid_state , 's' ) ; } constructor ( templateRef < any > , viewContainer , _responsiveState , cd , @ Inject ( PLATFORM_ID ) _platformId ) { super ( templateRef , viewContainer , _responsiveState , cd , _platformId ) ; } } @ Directive ( { selector : 's' } ) export class HideIEVersionDirective extends RESPONSIVE_BASE < any > { protected _showWhenTrue = false ; @ Input ( ) set hideIEVersion ( grid_state : string [ ] | string ) { this . setGrid ( grid_state , 's' ) ; } constructor ( templateRef < any > , viewContainer , _responsiveState , cd , @ Inject ( PLATFORM_ID ) _platformId ) { super ( templateRef , viewContainer , _responsiveState , cd , _platformId ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $TemplateRef$ O O O O $ViewContainerRef$ O $ResponsiveState$ O $ChangeDetectorRef$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $TemplateRef$ O O O O $ViewContainerRef$ O $ResponsiveState$ O $ChangeDetectorRef$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $TemplateRef$ O O O O $ViewContainerRef$ O $ResponsiveState$ O $ChangeDetectorRef$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $TemplateRef$ O O O O $ViewContainerRef$ O $ResponsiveState$ O $ChangeDetectorRef$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $TemplateRef$ O O O O $ViewContainerRef$ O $ResponsiveState$ O $ChangeDetectorRef$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $TemplateRef$ O O O O $ViewContainerRef$ O $ResponsiveState$ O $ChangeDetectorRef$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $TemplateRef$ O O O O $ViewContainerRef$ O $ResponsiveState$ O $ChangeDetectorRef$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $TemplateRef$ O O O O $ViewContainerRef$ O $ResponsiveState$ O $ChangeDetectorRef$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $TemplateRef$ O O O O $ViewContainerRef$ O $ResponsiveState$ O $ChangeDetectorRef$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $TemplateRef$ O O O O $ViewContainerRef$ O $ResponsiveState$ O $ChangeDetectorRef$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $TemplateRef$ O O O O $ViewContainerRef$ O $ResponsiveState$ O $ChangeDetectorRef$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $TemplateRef$ O O O O $ViewContainerRef$ O $ResponsiveState$ O $ChangeDetectorRef$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $TemplateRef$ O O O O $ViewContainerRef$ O $ResponsiveState$ O $ChangeDetectorRef$ O O O O O O O O O O O O O O O O O O O O O O O O
import { PLATFORM_ID , Inject } from 's' ; import { isPlatformBrowser } from 's' ; import { Subscription } from 's' ; import { ReplaySubject } from 's' ; import { Observable } from 's' ; import { distinctUntilChanged } from 's' ; import { ResponsiveState } from 's' ; export abstract class BrowserInfo { public currentstate : string ; private _subscription : Subscription ; private _isBrowser : boolean = null ; public replaySubject$ : ReplaySubject < any > = new ReplaySubject ( ) ; constructor ( public _responsiveState , @ Inject ( PLATFORM_ID ) protected _platformId ) { this . _isBrowser = isPlatformBrowser ( this . _platformId ) ; } public connect ( ) < any > { if ( this . _isBrowser ) { this . _subscription = this . _responsiveState . browser$ . pipe ( distinctUntilChanged ( ) ) . subscribe ( ( data ) => { this . _updateData ( data ) ; } ) ; } return this . replaySubject$ . asObservable ( ) ; } public disconnect ( ) { if ( this . _isBrowser ) { this . _subscription . unsubscribe ( ) ; } } get getBrowser ( ) : Observable < any > { return this . replaySubject$ . asObservable ( ) ; } protected _updateData ( value ) { this . replaySubject$ . next ( value ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ResponsiveState$ O O O O O O O O O O O O O O O O O O O O O O O $Observable$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $void$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $void$ O $any$ O O O O O O O O O O O O O
import { Injectable } from 's' ; import { PLATFORM_ID , Inject } from 's' ; import { ResponsiveState } from 's' ; import { BrowserInfo } from 's' ; @ Injectable ( ) export class BrowserInfoRx extends BrowserInfo { constructor ( public _responsiveState , @ Inject ( PLATFORM_ID ) protected _platformId ) { super ( _responsiveState , _platformId ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ResponsiveState$ O O O O O O O O O O O O O O O O O O O
import { EventEmitter , Directive , Input , Output , TemplateRef , ViewContainerRef , OnInit , OnDestroy , ChangeDetectorRef } from 's' ; import { PLATFORM_ID , Inject } from 's' ; import { Subscription } from 's' ; import { ResponsiveState } from 's' ; import { BrowserInfo } from 's' ; @ Directive ( { selector : 's' } ) export class BrowserInfoDirective extends BrowserInfo implements OnInit , OnDestroy { @ Output ( ) public browser : EventEmitter < any > = new EventEmitter ( ) ; @ Input ( ) set browserInfo ( grid_state : string [ ] | string ) { this . _updateData ( this . currentstate ) ; } constructor ( public _responsiveState , private viewContainer , private cd , @ Inject ( PLATFORM_ID ) protected _platformId ) { super ( _responsiveState , _platformId ) ; } ngOnInit ( ) { this . connect ( ) ; } ngOnDestroy ( ) { this . disconnect ( ) ; } protected _updateData ( value ) { this . browser . emit ( value ) ; this . cd . markForCheck ( ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ResponsiveState$ O O $ViewContainerRef$ O O $ChangeDetectorRef$ O O O O O O O O O O O O O O O O O O $void$ O O O O O O O O O O $void$ O O O O O O O O O O O O O $any$ O O O O O O O O O O O O O O O O O O O O O
import { PLATFORM_ID , Inject } from 's' ; import { isPlatformBrowser } from 's' ; import { Subscription } from 's' ; import { ReplaySubject } from 's' ; import { Observable } from 's' ; import { distinctUntilChanged } from 's' ; import { ResponsiveState } from 's' ; export abstract class IeInfo { public currentstate : string ; private _subscription : Subscription ; private _isBrowser : boolean = null ; public replaySubject$ : ReplaySubject < any > = new ReplaySubject ( ) ; constructor ( public _responsiveState , @ Inject ( PLATFORM_ID ) protected _platformId ) { this . _isBrowser = isPlatformBrowser ( this . _platformId ) ; } public connect ( ) < any > { if ( this . _isBrowser ) { this . _subscription = this . _responsiveState . ieVersion$ . pipe ( distinctUntilChanged ( ) ) . subscribe ( ( data ) => { this . _updateData ( data ) ; } ) ; } return this . replaySubject$ . asObservable ( ) ; } public disconnect ( ) { if ( this . _isBrowser ) { this . _subscription . unsubscribe ( ) ; } } get getIE ( ) : Observable < any > { return this . replaySubject$ . asObservable ( ) ; } protected _updateData ( value ) { this . replaySubject$ . next ( value ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ResponsiveState$ O O O O O O O O O O O O O O O O O O O O O O O $Observable$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $void$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $void$ O $any$ O O O O O O O O O O O O O
import { Injectable } from 's' ; import { PLATFORM_ID , Inject } from 's' ; import { ResponsiveState } from 's' ; import { IeInfo } from 's' ; @ Injectable ( ) export class IeInfoRx extends IeInfo { constructor ( public _responsiveState , @ Inject ( PLATFORM_ID ) protected _platformId ) { super ( _responsiveState , _platformId ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ResponsiveState$ O O O O O O O O O O O O O O O O O O O
import { EventEmitter , Directive , Input , Output , TemplateRef , ViewContainerRef , OnInit , OnDestroy , ChangeDetectorRef } from 's' ; import { PLATFORM_ID , Inject } from 's' ; import { Subscription } from 's' ; import { ResponsiveState } from 's' ; import { IeInfo } from 's' ; @ Directive ( { selector : 's' } ) export class IeInfoDirective extends IeInfo implements OnInit , OnDestroy { @ Input ( ) set ieInfo ( grid_state : string [ ] | string ) { this . _updateData ( this . currentstate ) ; } @ Output ( ) public ieVersion : EventEmitter < any > = new EventEmitter ( ) ; constructor ( public _responsiveState , private viewContainer , private cd , @ Inject ( PLATFORM_ID ) protected _platformId ) { super ( _responsiveState , _platformId ) ; } ngOnInit ( ) { this . connect ( ) ; } ngOnDestroy ( ) { this . disconnect ( ) ; } protected _updateData ( value ) { this . ieVersion . emit ( value ) ; this . cd . markForCheck ( ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ResponsiveState$ O O $ViewContainerRef$ O O $ChangeDetectorRef$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O O O O O O O O O O O O O O O
import { Provider } from 's' ; import { IsChromeDirective , IsFirefoxDirective , IsSafariDirective , IsOperaDirective , IsIEDirective , 0 , 0 , 0 , 0 , ShowItBrowserDirective , HideItBrowserDirective , ShowIEVersionDirective , HideIEVersionDirective , } from 's' ; import { BrowserInfoRx } from 's' ; import { BrowserInfoDirective } from 's' ; import { IeInfoRx } from 's' ; import { IeInfoDirective } from 's' ; export const BROWSER_DIRECTIVES : Provider [ ] = [ IsChromeDirective , IsFirefoxDirective , IsSafariDirective , IsOperaDirective , IsIEDirective , 0 , 0 , 0 , 0 , ShowItBrowserDirective , HideItBrowserDirective , ShowIEVersionDirective , HideIEVersionDirective , BrowserInfoDirective , IeInfoDirective ] ; export const BROWSER_INFO_RX : Provider [ ] = [ BrowserInfoRx ] ; export const IE_INFO_RX : Provider [ ] = [ IeInfoRx ] ; export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { Directive , Input , TemplateRef , ViewContainerRef , ChangeDetectorRef } from 's' ; import { PLATFORM_ID , Inject } from 's' ; import { ResponsiveState } from 's' ; import { RESPONSIVE_BASE } from 's' ; @ Directive ( { selector : 's' } ) export class ShowItSizesDirective extends RESPONSIVE_BASE < any > { protected _showWhenTrue = true ; constructor ( templateRef < any > , viewContainer , _responsiveState , cd , @ Inject ( PLATFORM_ID ) _platformId ) { super ( templateRef , viewContainer , _responsiveState , cd , _platformId ) ; } @ Input ( ) set showItSizes ( _grid_state ) { this . setGrid ( _grid_state , 's' ) ; } } @ Directive ( { selector : 's' } ) export class HideItSizesDirective extends RESPONSIVE_BASE < any > { protected _showWhenTrue = false ; constructor ( templateRef < any > , viewContainer , _responsiveState , cd , @ Inject ( PLATFORM_ID ) _platformId ) { super ( templateRef , viewContainer , _responsiveState , cd , _platformId ) ; } @ Input ( ) set hideItSizes ( _grid_state ) { this . setGrid ( _grid_state , 's' ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $TemplateRef$ O O O O $ViewContainerRef$ O $ResponsiveState$ O $ChangeDetectorRef$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $TemplateRef$ O O O O $ViewContainerRef$ O $ResponsiveState$ O $ChangeDetectorRef$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O O O O O O O
import { Provider } from 's' ; import { ShowItSizesDirective , HideItSizesDirective } from 's' ; export const CUSTOMSIZES_DIRECTIVES : Provider [ ] = [ ShowItSizesDirective , HideItSizesDirective ] ; export * from 's' ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { Directive , Input , TemplateRef , ViewContainerRef , ChangeDetectorRef } from 's' ; import { PLATFORM_ID , Inject } from 's' ; import { ResponsiveState } from 's' ; import { RESPONSIVE_BASE } from 's' ; @ Directive ( { selector : 's' } ) export class IsSmartTvDirective extends RESPONSIVE_BASE < any > { protected _state = 's' ; protected _showWhenTrue = true ; @ Input ( ) set isSmartTv ( grid_state : string [ ] | string ) { this . setGrid ( this . _state , 's' ) ; } constructor ( templateRef < any > , viewContainer , _responsiveState , cd , @ Inject ( PLATFORM_ID ) _platformId ) { super ( templateRef , viewContainer , _responsiveState , cd , _platformId ) ; } } @ Directive ( { selector : 's' } ) export class IsDesktopDirective extends RESPONSIVE_BASE < any > { protected _state = 's' ; protected _showWhenTrue = true ; @ Input ( ) set isDesktop ( grid_state : string [ ] | string ) { this . setGrid ( this . _state , 's' ) ; } constructor ( templateRef < any > , viewContainer , _responsiveState , cd , @ Inject ( PLATFORM_ID ) _platformId ) { super ( templateRef , viewContainer , _responsiveState , cd , _platformId ) ; } } @ Directive ( { selector : 's' } ) export class IsTabletDirective extends RESPONSIVE_BASE < any > { protected _state = 's' ; protected _showWhenTrue = true ; @ Input ( ) set isTablet ( grid_state : string [ ] | string ) { this . setGrid ( this . _state , 's' ) ; } constructor ( templateRef < any > , viewContainer , _responsiveState , cd , @ Inject ( PLATFORM_ID ) _platformId ) { super ( templateRef , viewContainer , _responsiveState , cd , _platformId ) ; } } @ Directive ( { selector : 's' } ) export class IsMobileDirective extends RESPONSIVE_BASE < any > { protected _state = 's' ; protected _showWhenTrue = true ; @ Input ( ) set isMobile ( grid_state : string [ ] | string ) { this . setGrid ( this . _state , 's' ) ; } constructor ( templateRef < any > , viewContainer , _responsiveState , cd , @ Inject ( PLATFORM_ID ) _platformId ) { super ( templateRef , viewContainer , _responsiveState , cd , _platformId ) ; } } @ Directive ( { selector : 's' } ) export class ShowItDeviceDirective extends RESPONSIVE_BASE < any > { protected _showWhenTrue = true ; @ Input ( ) set showItDevice ( grid_state : string [ ] | string ) { this . setGrid ( grid_state , 's' ) ; } constructor ( templateRef < any > , viewContainer , _responsiveState , cd , @ Inject ( PLATFORM_ID ) _platformId ) { super ( templateRef , viewContainer , _responsiveState , cd , _platformId ) ; } } @ Directive ( { selector : 's' } ) export class HideItDeviceDirective extends RESPONSIVE_BASE < any > { protected _showWhenTrue = false ; @ Input ( ) set hideItDevice ( grid_state : string [ ] | string ) { this . setGrid ( grid_state , 's' ) ; } constructor ( templateRef < any > , viewContainer , _responsiveState , cd , @ Inject ( PLATFORM_ID ) _platformId ) { super ( templateRef , viewContainer , _responsiveState , cd , _platformId ) ; } } @ Directive ( { selector : 's' } ) export class IsIphoneDirective extends RESPONSIVE_BASE < any > { protected _state = 's' ; protected _showWhenTrue = true ; @ Input ( ) set isIphone ( grid_state : string [ ] | string ) { this . setGrid ( this . _state , 's' ) ; } constructor ( templateRef < any > , viewContainer , _responsiveState , cd , @ Inject ( PLATFORM_ID ) _platformId ) { super ( templateRef , viewContainer , _responsiveState , cd , _platformId ) ; } } @ Directive ( { selector : 's' } ) export class IsIpadDirective extends RESPONSIVE_BASE < any > { protected _state = 's' ; protected _showWhenTrue = true ; @ Input ( ) set isIphone ( grid_state : string [ ] | string ) { this . setGrid ( this . _state , 's' ) ; } constructor ( templateRef < any > , viewContainer , _responsiveState , cd , @ Inject ( PLATFORM_ID ) _platformId ) { super ( templateRef , viewContainer , _responsiveState , cd , _platformId ) ; } } @ Directive ( { selector : 's' } ) export class IsAndroidMobileDirective extends RESPONSIVE_BASE < any > { protected _state = 's' ; protected _showWhenTrue = true ; @ Input ( ) set isAndroidMobile ( grid_state : string [ ] | string ) { this . setGrid ( this . _state , 's' ) ; } constructor ( templateRef < any > , viewContainer , _responsiveState , cd , @ Inject ( PLATFORM_ID ) _platformId ) { super ( templateRef , viewContainer , _responsiveState , cd , _platformId ) ; } } @ Directive ( { selector : 's' } ) export class IsAndroidTabletDirective extends RESPONSIVE_BASE < any > { protected _state = 's' ; protected _showWhenTrue = true ; @ Input ( ) set isAndroidTablet ( grid_state : string [ ] | string ) { this . setGrid ( this . _state , 's' ) ; } constructor ( templateRef < any > , viewContainer , _responsiveState , cd , @ Inject ( PLATFORM_ID ) _platformId ) { super ( templateRef , viewContainer , _responsiveState , cd , _platformId ) ; } } @ Directive ( { selector : 's' } ) export class IsWindowsPhoneDirective extends RESPONSIVE_BASE < any > { protected _state = 's' ; protected _showWhenTrue = true ; @ Input ( ) set isWindowsPhone ( grid_state : string [ ] | string ) { this . setGrid ( this . _state , 's' ) ; } constructor ( templateRef < any > , viewContainer , _responsiveState , cd , @ Inject ( PLATFORM_ID ) _platformId ) { super ( templateRef , viewContainer , _responsiveState , cd , _platformId ) ; } } @ Directive ( { selector : 's' } ) export class ShowItStandardDirective extends RESPONSIVE_BASE < any > { protected _showWhenTrue = true ; @ Input ( ) set showItStandard ( grid_state : string [ ] | string ) { this . setGrid ( grid_state , 's' ) ; } constructor ( templateRef < any > , viewContainer , _responsiveState , cd , @ Inject ( PLATFORM_ID ) _platformId ) { super ( templateRef , viewContainer , _responsiveState , cd , _platformId ) ; } } @ Directive ( { selector : 's' } ) export class HideItStandardDirective extends RESPONSIVE_BASE < any > { protected _showWhenTrue = false ; @ Input ( ) set hideItStandard ( grid_state : string [ ] | string ) { this . setGrid ( grid_state , 's' ) ; } constructor ( templateRef < any > , viewContainer , _responsiveState , cd , @ Inject ( PLATFORM_ID ) _platformId ) { super ( templateRef , viewContainer , _responsiveState , cd , _platformId ) ; } } @ Directive ( { selector : 's' } ) export class IsPortraitDirective extends RESPONSIVE_BASE < any > { protected _state = 's' ; protected _showWhenTrue = false ; @ Input ( ) set isPortrait ( grid_state ) { this . setGrid ( this . _state , 's' ) ; } constructor ( templateRef < any > , viewContainer , _responsiveState , cd , @ Inject ( PLATFORM_ID ) _platformId ) { super ( templateRef , viewContainer , _responsiveState , cd , _platformId ) ; } } @ Directive ( { selector : 's' } ) export class IsLandscapeDirective extends RESPONSIVE_BASE < any > { protected _state = 's' ; protected _showWhenTrue = false ; @ Input ( ) set isLandscape ( grid_state ) { this . setGrid ( this . _state , 's' ) ; } constructor ( templateRef < any > , viewContainer , _responsiveState , cd , @ Inject ( PLATFORM_ID ) _platformId ) { super ( templateRef , viewContainer , _responsiveState , cd , _platformId ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $TemplateRef$ O O O O $ViewContainerRef$ O $ResponsiveState$ O $ChangeDetectorRef$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $TemplateRef$ O O O O $ViewContainerRef$ O $ResponsiveState$ O $ChangeDetectorRef$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $TemplateRef$ O O O O $ViewContainerRef$ O $ResponsiveState$ O $ChangeDetectorRef$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $TemplateRef$ O O O O $ViewContainerRef$ O $ResponsiveState$ O $ChangeDetectorRef$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $TemplateRef$ O O O O $ViewContainerRef$ O $ResponsiveState$ O $ChangeDetectorRef$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $TemplateRef$ O O O O $ViewContainerRef$ O $ResponsiveState$ O $ChangeDetectorRef$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $TemplateRef$ O O O O $ViewContainerRef$ O $ResponsiveState$ O $ChangeDetectorRef$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $TemplateRef$ O O O O $ViewContainerRef$ O $ResponsiveState$ O $ChangeDetectorRef$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $TemplateRef$ O O O O $ViewContainerRef$ O $ResponsiveState$ O $ChangeDetectorRef$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $TemplateRef$ O O O O $ViewContainerRef$ O $ResponsiveState$ O $ChangeDetectorRef$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $TemplateRef$ O O O O $ViewContainerRef$ O $ResponsiveState$ O $ChangeDetectorRef$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $TemplateRef$ O O O O $ViewContainerRef$ O $ResponsiveState$ O $ChangeDetectorRef$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $TemplateRef$ O O O O $ViewContainerRef$ O $ResponsiveState$ O $ChangeDetectorRef$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $string$ O O O O O O O O O O O O O O O O $TemplateRef$ O O O O $ViewContainerRef$ O $ResponsiveState$ O $ChangeDetectorRef$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $string$ O O O O O O O O O O O O O O O O $TemplateRef$ O O O O $ViewContainerRef$ O $ResponsiveState$ O $ChangeDetectorRef$ O O O O O O O O O O O O O O O O O O O O O O O O
import { PLATFORM_ID , Inject } from 's' ; import { isPlatformBrowser } from 's' ; import { distinctUntilChanged } from 's' ; import { Subscription } from 's' ; import { ReplaySubject } from 's' ; import { Observable } from 's' ; import { ResponsiveState } from 's' ; export abstract class DevicesInfo { public currentstate : string ; public _subscription : Subscription ; private _isBrowser : boolean = null ; public replaySubject$ : ReplaySubject < any > = new ReplaySubject ( ) ; constructor ( protected _responsiveState , @ Inject ( PLATFORM_ID ) protected _platformId ) { this . _isBrowser = isPlatformBrowser ( this . _platformId ) ; } public connect ( ) < any > { if ( this . _isBrowser ) { this . _subscription = this . _responsiveState . device$ . pipe ( distinctUntilChanged ( ) ) . subscribe ( ( data ) => { this . _updateData ( data ) ; } ) ; } return this . replaySubject$ . asObservable ( ) ; } public disconnect ( ) { if ( this . _isBrowser ) { this . _subscription . unsubscribe ( ) ; } } get getDevice ( ) : Observable < any > { return this . replaySubject$ . asObservable ( ) ; } protected _updateData ( value ) { this . replaySubject$ . next ( value ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ResponsiveState$ O O O O O O O O O O O O O O O O O O O O O O O $Observable$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $void$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $void$ O $any$ O O O O O O O O O O O O O
import { EventEmitter , Directive , Output , ViewContainerRef , OnInit , OnDestroy , ChangeDetectorRef } from 's' ; import { PLATFORM_ID , Inject } from 's' ; import { ResponsiveState } from 's' ; import { DevicesInfo } from 's' ; @ Directive ( { selector : 's' } ) export class DeviceInfoDirective extends DevicesInfo implements OnInit , OnDestroy { @ Output ( ) device : EventEmitter < any > = new EventEmitter ( ) ; constructor ( protected _responsiveState , protected viewContainer , protected cd , @ Inject ( PLATFORM_ID ) protected _platformId ) { super ( _responsiveState , _platformId ) ; } ngOnInit ( ) { this . connect ( ) ; } ngOnDestroy ( ) { this . disconnect ( ) ; } protected _updateData ( value ) { this . device . emit ( value ) ; this . cd . markForCheck ( ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ResponsiveState$ O O $ViewContainerRef$ O O $ChangeDetectorRef$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O O O O O O O O O O O O O O O
import { PLATFORM_ID , Inject } from 's' ; import { isPlatformBrowser } from 's' ; import { distinctUntilChanged } from 's' ; import { Subscription } from 's' ; import { ReplaySubject } from 's' ; import { Observable } from 's' ; import { ResponsiveState } from 's' ; export abstract class DeviceStandardInfo { public currentstate : string ; private _subscription : Subscription ; private _isBrowser : boolean = null ; public replaySubject$ : ReplaySubject < any > = new ReplaySubject ( ) ; constructor ( protected _responsiveState , @ Inject ( PLATFORM_ID ) protected _platformId ) { this . _isBrowser = isPlatformBrowser ( this . _platformId ) ; } public connect ( ) < any > { if ( this . _isBrowser ) { this . _subscription = this . _responsiveState . standard$ . pipe ( distinctUntilChanged ( ) ) . subscribe ( ( data ) => { this . _updateData ( data ) ; } ) ; } return this . replaySubject$ . asObservable ( ) ; } public disconnect ( ) { if ( this . _isBrowser ) { this . _subscription . unsubscribe ( ) ; } } get getStandardDevice ( ) : Observable < any > { return this . replaySubject$ . asObservable ( ) ; } protected _updateData ( value ) { this . replaySubject$ . next ( value ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ResponsiveState$ O O O O O O O O O O O O O O O O O O O O O O O $Observable$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $void$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $void$ O $any$ O O O O O O O O O O O O O
import { EventEmitter , Directive , Input , Output , ViewContainerRef , OnInit , OnDestroy , ChangeDetectorRef } from 's' ; import { PLATFORM_ID , Inject } from 's' ; import { ResponsiveState } from 's' ; import { DeviceStandardInfo } from 's' ; @ Directive ( { selector : 's' } ) export class DeviceStandardInfoDirective extends DeviceStandardInfo implements OnInit , OnDestroy { @ Input ( ) set deviceStandardInfo ( grid_state : string [ ] | string ) { this . _updateData ( this . currentstate ) ; } @ Output ( ) public standard : EventEmitter < any > = new EventEmitter ( ) ; constructor ( protected _responsiveState , protected viewContainer , protected cd , @ Inject ( PLATFORM_ID ) protected _platformId ) { super ( _responsiveState , _platformId ) ; } ngOnInit ( ) { this . connect ( ) ; } ngOnDestroy ( ) { this . disconnect ( ) ; } protected _updateData ( value ) { this . standard . emit ( value ) ; this . cd . markForCheck ( ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ResponsiveState$ O O $ViewContainerRef$ O O $ChangeDetectorRef$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O O O O O O O O O O O O O O O
import { PLATFORM_ID , Inject } from 's' ; import { isPlatformBrowser } from 's' ; import { distinctUntilChanged } from 's' ; import { Subscription } from 's' ; import { ReplaySubject } from 's' ; import { Observable } from 's' ; import { ResponsiveState } from 's' ; export abstract class OrientationInfo { public currentstate : string ; private _subscription : Subscription ; private _isBrowser : boolean = null ; public replaySubject$ : ReplaySubject < any > = new ReplaySubject ( ) ; constructor ( protected _responsiveState , @ Inject ( PLATFORM_ID ) protected _platformId ) { this . _isBrowser = isPlatformBrowser ( this . _platformId ) ; } public connect ( ) < any > { if ( this . _isBrowser ) { this . _subscription = this . _responsiveState . orientation$ . pipe ( distinctUntilChanged ( ) ) . subscribe ( ( data ) => { this . _updateData ( data ) ; } ) ; } return this . replaySubject$ . asObservable ( ) ; } public disconnect ( ) { if ( this . _isBrowser ) { this . _subscription . unsubscribe ( ) ; } } get getOrientation ( ) : Observable < any > { return this . replaySubject$ . asObservable ( ) ; } protected _updateData ( value ) { this . replaySubject$ . next ( value ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ResponsiveState$ O O O O O O O O O O O O O O O O O O O O O O O $Observable$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $void$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $void$ O $any$ O O O O O O O O O O O O O
import { EventEmitter , Directive , Output , ViewContainerRef , OnInit , OnDestroy , ChangeDetectorRef } from 's' ; import { PLATFORM_ID , Inject } from 's' ; import { ResponsiveState } from 's' ; import { OrientationInfo } from 's' ; @ Directive ( { selector : 's' } ) export class OrientationInfoDirective extends OrientationInfo implements OnInit , OnDestroy { @ Output ( ) public orientation : EventEmitter < any > = new EventEmitter ( ) ; constructor ( protected _responsiveState , protected viewContainer , protected cd , @ Inject ( PLATFORM_ID ) protected _platformId ) { super ( _responsiveState , _platformId ) ; } ngOnInit ( ) { this . connect ( ) ; } ngOnDestroy ( ) { this . disconnect ( ) ; } protected _updateData ( value ) { this . orientation . emit ( value ) ; this . cd . markForCheck ( ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ResponsiveState$ O O $ViewContainerRef$ O O $ChangeDetectorRef$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O O O O O O O O O O O O O O O
import { Injectable } from 's' ; import { PLATFORM_ID , Inject } from 's' ; import { ResponsiveState } from 's' ; import { DevicesInfo } from 's' ; @ Injectable ( ) export class DeviceInfoRx extends DevicesInfo { constructor ( public _responsiveState , @ Inject ( PLATFORM_ID ) protected _platformId ) { super ( _responsiveState , _platformId ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ResponsiveState$ O O O O O O O O O O O O O O O O O O O
import { Injectable } from 's' ; import { PLATFORM_ID , Inject } from 's' ; import { ResponsiveState } from 's' ; import { DeviceStandardInfo } from 's' ; @ Injectable ( ) export class DeviceStandardInfoRx extends DeviceStandardInfo { constructor ( public _responsiveState , @ Inject ( PLATFORM_ID ) protected _platformId ) { super ( _responsiveState , _platformId ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ResponsiveState$ O O O O O O O O O O O O O O O O O O O
import { Injectable } from 's' ; import { PLATFORM_ID , Inject } from 's' ; import { ResponsiveState } from 's' ; import { OrientationInfo } from 's' ; @ Injectable ( ) export class OrientationInfoRx extends OrientationInfo { constructor ( public _responsiveState , @ Inject ( PLATFORM_ID ) protected _platformId ) { super ( _responsiveState , _platformId ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ResponsiveState$ O O O O O O O O O O O O O O O O O O O
import { Provider } from 's' ; import { IsDesktopDirective , IsTabletDirective , IsMobileDirective , IsSmartTvDirective , ShowItDeviceDirective , HideItDeviceDirective , IsIphoneDirective , IsIpadDirective , IsAndroidMobileDirective , IsAndroidTabletDirective , IsWindowsPhoneDirective , ShowItStandardDirective , HideItStandardDirective , IsPortraitDirective , IsLandscapeDirective } from 's' ; import { DeviceInfoDirective } from 's' ; import { DeviceStandardInfoDirective } from 's' ; import { OrientationInfoDirective } from 's' ; import { DeviceInfoRx } from 's' ; import { DeviceStandardInfoRx } from 's' ; import { OrientationInfoRx } from 's' ; export const DEVICES_DIRECTIVES : Provider [ ] = [ IsDesktopDirective , IsTabletDirective , IsMobileDirective , IsSmartTvDirective , ShowItDeviceDirective , HideItDeviceDirective , IsIphoneDirective , IsIpadDirective , IsAndroidMobileDirective , IsAndroidTabletDirective , IsWindowsPhoneDirective , ShowItStandardDirective , HideItStandardDirective , IsPortraitDirective , IsLandscapeDirective , DeviceInfoDirective , DeviceStandardInfoDirective , OrientationInfoDirective ] ; export const DEVICES_INFO_RX : Provider [ ] = [ DeviceInfoRx , DeviceStandardInfoRx , OrientationInfoRx ] ; export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { Directive , Input , Output , EventEmitter , TemplateRef , ViewContainerRef , OnInit , OnDestroy , ChangeDetectorRef } from 's' ; import { PLATFORM_ID , Inject } from 's' ; import { isPlatformBrowser } from 's' ; import { Subscription } from 's' ; import { ResponsiveState } from 's' ; import { RESPONSIVE_BASE } from 's' ; @ Directive ( { selector : 's' } ) export class 0 extends RESPONSIVE_BASE < any > { protected _state = 's' ; protected _showWhenTrue = true ; @ Input ( ) set 0 ( grid_state ) { this . setGrid ( this . _state , 's' ) ; } constructor ( templateRef < any > , viewContainer , _responsiveState , cd , @ Inject ( PLATFORM_ID ) _platformId ) { super ( templateRef , viewContainer , _responsiveState , cd , _platformId ) ; } } @ Directive ( { selector : 's' } ) export class IsRetinaDirective extends RESPONSIVE_BASE < any > { protected _state = 's' ; protected _showWhenTrue = true ; @ Input ( ) set isRetina ( grid_state ) { this . setGrid ( this . _state , 's' ) ; } constructor ( templateRef < any > , viewContainer , _responsiveState , cd , @ Inject ( PLATFORM_ID ) _platformId ) { super ( templateRef , viewContainer , _responsiveState , cd , _platformId ) ; } } @ Directive ( { selector : 's' } ) export class 0 extends RESPONSIVE_BASE < any > { protected _state = 's' ; protected _showWhenTrue = true ; @ Input ( ) set isRetina ( grid_state ) { this . setGrid ( this . _state , 's' ) ; } constructor ( templateRef < any > , viewContainer , _responsiveState , cd , @ Inject ( PLATFORM_ID ) _platformId ) { super ( templateRef , viewContainer , _responsiveState , cd , _platformId ) ; } } @ Directive ( { selector : 's' } ) export class PixelRatioInfoDirective implements OnInit , OnDestroy { public currentstate : string ; private _subscription : Subscription ; private noRepeat : string ; private _isBrowser : boolean = null ; @ Input ( ) set pixelratioInfo ( grid_state : string [ ] | string ) { this . updateData ( this . currentstate ) ; } @ Output ( ) pixelratio : EventEmitter < any > = new EventEmitter ( ) ; constructor ( private _responsiveState , private viewContainer , private cd , @ Inject ( PLATFORM_ID ) protected _platformId ) { this . _isBrowser = isPlatformBrowser ( this . _platformId ) ; } ngOnInit ( ) { if ( this . _isBrowser ) { this . _subscription = this . _responsiveState . pixel$ . subscribe ( this . updateData . bind ( this ) ) ; } } ngOnDestroy ( ) { if ( this . _isBrowser ) { this . _subscription . unsubscribe ( ) ; } } updateData ( value ) { const update = this . _ifValueChanged ( this . noRepeat , value ) ; if ( update ) { this . pixelratio . emit ( value ) ; this . cd . markForCheck ( ) ; } } _ifValueChanged ( oldValue , newValue ) { if ( oldValue === newValue ) { return false ; } else { this . noRepeat = newValue ; return true ; } } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $string$ O O O O O O O O O O O O O O O O $TemplateRef$ O O O O $ViewContainerRef$ O $ResponsiveState$ O $ChangeDetectorRef$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $string$ O O O O O O O O O O O O O O O O $TemplateRef$ O O O O $ViewContainerRef$ O $ResponsiveState$ O $ChangeDetectorRef$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $string$ O O O O O O O O O O O O O O O O $TemplateRef$ O O O O $ViewContainerRef$ O $ResponsiveState$ O $ChangeDetectorRef$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ResponsiveState$ O O $ViewContainerRef$ O O $ChangeDetectorRef$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $boolean$ O $any$ O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { Provider } from 's' ; import { 0 , IsRetinaDirective , 0 , PixelRatioInfoDirective } from 's' ; export const PIXELRATIO_DIRECTIVES : Provider [ ] = [ 0 , IsRetinaDirective , 0 , PixelRatioInfoDirective ] ; export * from 's' ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { DoCheck , Directive , Input , ElementRef , OnInit , OnDestroy , ChangeDetectorRef } from 's' ; import { PLATFORM_ID , Inject } from 's' ; import { isPlatformBrowser } from 's' ; import { ResponsiveState } from 's' ; @ Directive ( { selector : "s" , exportAs : "s" } ) export class ResponsiveWindowDirective implements OnInit , OnDestroy , DoCheck { private _noRepeat : string ; private element : HTMLElement ; private _isBrowser : boolean = null ; @ Input ( 's' ) name : string ; constructor ( private _responsiveState , private el , private cd , @ Inject ( PLATFORM_ID ) protected _platformId ) { this . _isBrowser = isPlatformBrowser ( this . _platformId ) ; if ( this . _isBrowser ) { this . element = el . nativeElement ; } } public ngOnInit ( ) { if ( this . _isBrowser ) { this . _responsiveState . registerWindow ( this ) ; } } public ngDoCheck ( ) { if ( this . _isBrowser ) { const _update = this . _ifValueChanged ( this . _noRepeat , this . name ) ; if ( _update ) { this . _responsiveState . unregisterWindow ( this ) ; this . _responsiveState . registerWindow ( this ) ; this . cd . markForCheck ( ) ; } } } public ngOnDestroy ( ) { if ( this . _isBrowser ) { this . _responsiveState . unregisterWindow ( this ) ; } } public getWidth ( ) { return ( this . _isBrowser ) ? this . element . offsetWidth : 0 ; } private _ifValueChanged ( oldValue , newValue ) { if ( oldValue === newValue ) { return false ; } else { this . _noRepeat = newValue ; return true ; } } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ResponsiveState$ O O $ElementRef$ O O $ChangeDetectorRef$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $void$ O O O O O O O O O O O O O O O O O O O O O O $void$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $boolean$ O $any$ O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { Output , EventEmitter , Directive , Input , TemplateRef , ViewContainerRef , OnDestroy , ChangeDetectorRef } from 's' ; import { PLATFORM_ID , Inject } from 's' ; import { isPlatformBrowser } from 's' ; import { Subscription } from 's' ; import { IResponsivePattern , IResponsiveSubscriptions } from 's' ; import { ResponsiveState } from 's' ; import { ComponentType } from "s" ; import { ResponsiveWindowDirective } from "s" ; @ Directive ( { selector : 's' } ) export class ResponsiveDirective implements OnDestroy { private _config : string | string [ ] ; @ Input ( ) set responsive ( config : string | string [ ] ) { this . _config = config ; this . init_responsive ( ) ; } get config ( ) : string | string [ ] { return this . _config ; } private _responsiveContainer : ResponsiveWindowDirective ; @ Input ( ) set responsiveContainer ( value ) { this . _responsiveContainer = value ; if ( this . config ) { if ( this . _sizes_window !== null && this . _sizes_window !== "s" ) { throw new Error ( 's' ) ; } this . init_responsive ( ) ; } } get responsiveContainer ( ) : ResponsiveWindowDirective { return this . _responsiveContainer ; } @ Output ( ) changes : EventEmitter < any > = new EventEmitter ( ) ; private _windows = null ; private _window = null ; private _isBrowser : boolean = null ; public set_values : IResponsivePattern = { bootstrap : 's' , browser : 's' , device : 's' , pixelratio : 's' , orientation : 's' , standard : 's' , ie : 's' , sizes : 0 } ; private set_active_subscriptions : IResponsiveSubscriptions = { bootstrap : false , browser : false , device : false , pixelratio : false , orientation : false , standard : false , ie : false , sizes : false } ; private match_multiple : IResponsiveSubscriptions = { bootstrap : false , browser : false , device : false , pixelratio : false , orientation : false , standard : false , ie : false , sizes : false } ; private _subscription_Bootstrap : Subscription ; private _subscription_Browser : Subscription ; private _subscription_Pixel_Ratio : Subscription ; private _subscription_Device : Subscription ; private _subscription_Orientation : Subscription ; private _subscription_Standard : Subscription ; private _subscription_IE_Version : Subscription ; private _subscription_custom_sizes : Subscription ; protected _showWhenTrue = true ; private _globalNoRepeat = 0 ; private _noRepeatBootstrapName : string ; private _bootstrapNoRepeat = 0 ; private _deviceNoRepeat = 0 ; private _standardNoRepeat = 0 ; private _orientationNoRepeat = 0 ; private _browserNoRepeat = 0 ; private _pixelratioNoRepeat = 0 ; private _ieNoRepeat = 0 ; private _sizesNoRepeat = 0 ; private _bootstrap_user_param : string [ ] = [ ] ; private _devices_user_param : string [ ] = [ ] ; private _standard_user_param : string [ ] = [ ] ; private _orientation_user_param : string [ ] = [ ] ; private _browser_user_param : string [ ] = [ ] ; private _pixelratio_user_param : string [ ] = [ ] ; private _ie_user_param : string [ ] = [ ] ; private _sizes_user_param : [ number , number ] = [ 0 , Number . MAX_VALUE ] ; private _sizes_window = 's' ; protected _actives : string [ ] = [ ] ; constructor ( public templateRef < Object > , private _responsiveState , private viewContainer , private cd , @ Inject ( PLATFORM_ID ) protected _platformId ) { this . _isBrowser = isPlatformBrowser ( this . _platformId ) ; } public init_responsive ( ) { const config = this . config ; if ( this . isJSON ( config ) ) { if ( ! ! config . bootstrap && this . _bootstrapNoRepeat === 0 ) { this . _bootstrap_user_param = < string [ ] > ( Array . isArray ( config . bootstrap ) ? config . bootstrap : [ config . bootstrap ] ) ; this . _bootstrapNoRepeat = 0 ; this . set_active_subscriptions . bootstrap = true ; } if ( ! ! config . device && this . _deviceNoRepeat === 0 ) { this . _devices_user_param = < string [ ] > ( Array . isArray ( config . device ) ? config . device : [ config . device ] ) ; this . _deviceNoRepeat = 0 ; this . set_active_subscriptions . device = true ; } if ( ! ! config . standard && this . _standardNoRepeat === 0 ) { this . _standard_user_param = < string [ ] > ( Array . isArray ( config . standard ) ? config . standard : [ config . standard ] ) ; this . _standardNoRepeat = 0 ; this . set_active_subscriptions . standard = true ; } if ( ! ! config . orientation && this . _orientationNoRepeat === 0 ) { this . _orientation_user_param = < string [ ] > ( Array . isArray ( config . orientation ) ? config . orientation : [ config . orientation ] ) ; this . _orientationNoRepeat = 0 ; this . set_active_subscriptions . orientation = true ; } if ( ! ! config . browser && this . _browserNoRepeat === 0 ) { this . _browser_user_param = < string [ ] > ( Array . isArray ( config . browser ) ? config . browser : [ config . browser ] ) ; this . _browserNoRepeat = 0 ; this . set_active_subscriptions . browser = true ; } if ( ! ! config . pixelratio && this . _pixelratioNoRepeat === 0 ) { this . _pixelratio_user_param = < string [ ] > ( Array . isArray ( config . pixelratio ) ? config . pixelratio : [ config . pixelratio ] ) ; this . _pixelratioNoRepeat = 0 ; this . set_active_subscriptions . pixelratio = true ; } if ( ! ! config . ie && this . _ieNoRepeat === 0 ) { this . _ie_user_param = < string [ ] > ( Array . isArray ( config . ie ) ? config . ie : [ config . ie ] ) ; this . _ieNoRepeat = 0 ; this . set_active_subscriptions . ie = true ; } if ( ! ! config . sizes && this . _sizesNoRepeat === 0 ) { const _min = config . sizes . min || 0 ; const _max = config . sizes . max || Number . MAX_VALUE ; const _win = config . sizes . window ; if ( _win !== undefined ) { this . _sizes_window = _win ; } this . _sizes_user_param = [ _min , _max ] ; this . _sizesNoRepeat = 0 ; this . set_active_subscriptions . sizes = true ; } } else if ( Array . isArray ( config ) ) { throw new Error ( 's' ) ; } else if ( typeof config === 's' ) { throw new Error ( 's' ) ; } else if ( typeof config === 's' ) { throw new Error ( 's' ) ; } else if ( typeof config === 's' || config === null ) { throw new Error ( 's' ) ; } for ( let key in this . set_active_subscriptions ) { if ( this . set_active_subscriptions [ key ] ) { this . _actives . push ( key ) ; } } if ( this . _isBrowser ) { if ( this . set_active_subscriptions . bootstrap ) { this . _subscription_Bootstrap = this . _responsiveState . elemento$ . subscribe ( this . updateBootstrap . bind ( this ) ) ; } if ( this . set_active_subscriptions . browser ) { this . _subscription_Browser = this . _responsiveState . browser$ . subscribe ( this . updateBrowser . bind ( this ) ) ; } if ( this . set_active_subscriptions . device ) { this . _subscription_Device = this . _responsiveState . device$ . subscribe ( this . updateDevice . bind ( this ) ) ; } if ( this . set_active_subscriptions . pixelratio ) { this . _subscription_Pixel_Ratio = this . _responsiveState . pixel$ . subscribe ( this . updatePixelRatio . bind ( this ) ) ; } if ( this . set_active_subscriptions . orientation ) { this . _subscription_Orientation = this . _responsiveState . orientation$ . subscribe ( this . updateOrientation . bind ( this ) ) ; } if ( this . set_active_subscriptions . standard ) { this . _subscription_Standard = this . _responsiveState . standard$ . subscribe ( this . updateStandard . bind ( this ) ) ; } if ( this . set_active_subscriptions . ie ) { this . _subscription_IE_Version = this . _responsiveState . ieVersion$ . subscribe ( this . updateIEversion . bind ( this ) ) ; } if ( this . set_active_subscriptions . sizes ) { this . _subscription_custom_sizes = this . _responsiveState . ancho$ . subscribe ( this . updateSizes . bind ( this ) ) ; } } } private updateBootstrap ( value ) { const _update = this . _ifValueChanged ( this . _noRepeatBootstrapName , value ) ; if ( _update ) { this . set_values . bootstrap = value ; } this . updateEvent ( this . set_values . bootstrap , 's' ) ; } private updateBrowser ( value ) { this . set_values . browser = value ; this . updateEvent ( this . set_values . browser , 's' ) ; } private updateDevice ( value ) { this . set_values . device = value ; this . updateEvent ( this . set_values . device , 's' ) ; } private updatePixelRatio ( value ) { this . set_values . pixelratio = value ; this . updateEvent ( this . set_values . pixelratio , 's' ) ; } private updateOrientation ( value ) { this . set_values . orientation = value ; this . updateEvent ( this . set_values . orientation , 's' ) ; } private updateStandard ( value ) { this . set_values . standard = value ; this . updateEvent ( this . set_values . standard , 's' ) ; } private updateIEversion ( value ) { this . set_values . ie = value ; this . updateEvent ( this . set_values . ie , 's' ) ; } private updateSizes ( value ) { if ( this . responsiveContainer ) { this . set_values . sizes = this . _isBrowser ? this . responsiveContainer . getWidth ( ) : 0 ; } else if ( this . _sizes_window ) { this . set_values . sizes = this . _responsiveState . getWidth ( this . _sizes_window ) ; } else { this . set_values . sizes = value ; } this . updateEvent ( this . set_values . sizes , 's' ) ; } private updateEvent ( param , type_directive ) { if ( ! ! this . _showWhenTrue ) { switch ( type_directive ) { case 's' : this . showHideOperations ( this . _bootstrap_user_param . indexOf ( param ) !== - 0 , type_directive ) ; break ; case 's' : this . showHideOperations ( this . _devices_user_param . indexOf ( param ) !== - 0 , type_directive ) ; break ; case 's' : this . showHideOperations ( this . _standard_user_param . indexOf ( param ) !== - 0 , type_directive ) ; break ; case 's' : this . showHideOperations ( this . _orientation_user_param . indexOf ( param ) !== - 0 , type_directive ) ; break ; case 's' : this . showHideOperations ( this . _browser_user_param . indexOf ( param ) !== - 0 , type_directive ) ; break ; case 's' : this . showHideOperations ( this . _pixelratio_user_param . indexOf ( param ) !== - 0 , type_directive ) ; break ; case 's' : this . showHideOperations ( this . _ie_user_param . indexOf ( param ) !== - 0 , type_directive ) ; break ; case 's' : this . showHideOperations ( ( param >= this . _sizes_user_param [ 0 ] && param < this . _sizes_user_param [ 0 ] ) , type_directive ) ; break ; } } else { switch ( type_directive ) { case 's' : this . showHideOperations ( ! ( this . _bootstrap_user_param . indexOf ( param ) ) , type_directive ) ; break ; case 's' : this . showHideOperations ( ! ( this . _devices_user_param . indexOf ( param ) ) , type_directive ) ; break ; case 's' : this . showHideOperations ( ! ( this . _standard_user_param . indexOf ( param ) ) , type_directive ) ; break ; case 's' : this . showHideOperations ( ! ( this . _orientation_user_param . indexOf ( param ) ) , type_directive ) ; break ; case 's' : this . showHideOperations ( ! ( this . _browser_user_param . indexOf ( param ) ) , type_directive ) ; break ; case 's' : this . showHideOperations ( ! ( this . _pixelratio_user_param . indexOf ( param ) ) , type_directive ) ; break ; case 's' : this . showHideOperations ( ! ( this . _ie_user_param . indexOf ( param ) ) , type_directive ) ; break ; case 's' : this . showHideOperations ( ! ( ( param >= this . _sizes_user_param [ 0 ] && param < this . _sizes_user_param [ 0 ] ) ) , type_directive ) ; break ; } } } private showHideOperations ( show , type_directive ) { const global_state = this . matchValues ( show , type_directive ) ; if ( ! ! global_state ) { if ( this . _globalNoRepeat === 0 ) { this . _globalNoRepeat = 0 ; this . viewContainer . createEmbeddedView ( this . templateRef ) ; this . changes . emit ( true ) ; this . cd . markForCheck ( ) ; } } else { this . _globalNoRepeat = 0 ; this . changes . emit ( false ) ; this . viewContainer . clear ( ) ; this . cd . markForCheck ( ) ; } } private matchValues ( show , type_directive ) { let match = true ; if ( show ) { this . match_multiple [ type_directive ] = true ; } else { this . match_multiple [ type_directive ] = false ; } for ( let all_key in this . match_multiple ) { for ( let active of this . _actives ) { if ( all_key == active && this . match_multiple [ all_key ] === false ) return match = false ; } } return match ; } public ngOnDestroy ( ) { if ( this . _isBrowser ) { if ( this . set_active_subscriptions . bootstrap ) { this . _subscription_Bootstrap . unsubscribe ( ) ; } if ( this . set_active_subscriptions . browser ) { this . _subscription_Browser . unsubscribe ( ) ; } if ( this . set_active_subscriptions . device ) { this . _subscription_Device . unsubscribe ( ) ; } if ( this . set_active_subscriptions . pixelratio ) { this . _subscription_Pixel_Ratio . unsubscribe ( ) ; } if ( this . set_active_subscriptions . orientation ) { this . _subscription_Orientation . unsubscribe ( ) ; } if ( this . set_active_subscriptions . standard ) { this . _subscription_Standard . unsubscribe ( ) ; } if ( this . set_active_subscriptions . ie ) { this . _subscription_IE_Version . unsubscribe ( ) ; } if ( this . set_active_subscriptions . sizes ) { this . _subscription_custom_sizes . unsubscribe ( ) ; } } } private _ifValueChanged ( oldValue , newValue ) { if ( oldValue === newValue ) { return false ; } else { this . _noRepeatBootstrapName = newValue ; return true ; } } private isJSON ( value ) { try { JSON . stringify ( value ) ; return true ; } catch ( ex ) { return false ; } } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ResponsiveWindowDirectiveemplateRef$ O O O O O $ResponsiveState$ O O $ViewContainerRef$ O O $ChangeDetectorRef$ O O O O O O O O O O O O O O O O O O O O O O O $void$ O O O O $anyvoid$ O $string$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $void$ O $string$ O O O O O O O O O O O O O O O O O O O O O O O O O $void$ O $string$ O O O O O O O O O O O O O O O O O O O O O O O O O $void$ O $string$ O O O O O O O O O O O O O O O O O O O O O O O O O $void$ O $string$ O O O O O O O O O O O O O O O O O O O O O O O O O $void$ O $string$ O O O O O O O O O O O O O O O O O O O O O O O O O $void$ O $string$ O O O O O O O O O O O O O O O O O O O O O O O O O $void$ O $number$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $void$ O $any$ O $stringvoid$ O $boolean$ O $string$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $boolean$ O $string$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $void$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $boolean$ O $any$ O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O $boolean$ O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O
import { Provider } from 's' ; import { ResponsiveDirective } from 's' ; export const RESPONSIVE_DIRECTIVE : Provider [ ] = [ ResponsiveDirective ] ; export * from 's' ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { PLATFORM_ID , Inject } from 's' ; import { isPlatformBrowser } from 's' ; import { distinctUntilChanged } from 's' ; import { Subscription } from 's' ; import { ReplaySubject } from 's' ; import { Observable } from 's' ; import { ResponsiveState } from 's' ; export abstract class ResponsiveSizeInfo { private _subscription : Subscription ; private _isBrowser : boolean = null ; public replaySubject$ : ReplaySubject < any > = new ReplaySubject < any > ( ) ; constructor ( public _responsiveState , @ Inject ( PLATFORM_ID ) protected _platformId ) { this . _isBrowser = isPlatformBrowser ( this . _platformId ) ; } public connect ( ) < any > { if ( this . _isBrowser ) { this . _subscription = this . _responsiveState . elemento$ . pipe ( distinctUntilChanged ( ) ) . subscribe ( ( data ) => { this . _updateData ( data ) ; } ) ; } return this . replaySubject$ . asObservable ( ) ; } public disconnect ( ) { if ( this . _isBrowser ) { this . _subscription . unsubscribe ( ) ; } } get getResponsiveSize ( ) : Observable < any > { return this . replaySubject$ . asObservable ( ) ; } protected _updateData ( value ) { this . replaySubject$ . next ( value ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ResponsiveState$ O O O O O O O O O O O O O O O O O O O O O O O $Observable$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $void$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $void$ O $any$ O O O O O O O O O O O O O
import { Directive , EventEmitter , Input , Output , ViewContainerRef , OnInit , OnDestroy , ChangeDetectorRef } from 's' ; import { PLATFORM_ID , Inject } from 's' ; import { ResponsiveState } from 's' ; import { ResponsiveSizeInfo } from 's' ; @ Directive ( { selector : 's' } ) export class ResponsiveSizeInfoDirective extends ResponsiveSizeInfo implements OnInit , OnDestroy { public currentstate : string ; @ Input ( ) set responsiveSizeInfo ( grid_state : string [ ] | string ) { this . _updateData ( this . currentstate ) ; } @ Output ( ) statechanges : EventEmitter < any > = new EventEmitter ( ) ; constructor ( public _responsiveState , public viewContainer , public cd , @ Inject ( PLATFORM_ID ) protected _platformId ) { super ( _responsiveState , _platformId ) ; } ngOnInit ( ) { this . connect ( ) ; } ngOnDestroy ( ) { this . disconnect ( ) ; } protected _updateData ( value ) { this . statechanges . emit ( value ) ; this . cd . markForCheck ( ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ResponsiveState$ O O $ViewContainerRef$ O O $ChangeDetectorRef$ O O O O O O O O O O O O O O O O O O $void$ O O O O O O O O O O $void$ O O O O O O O O O O O $void$ O $any$ O O O O O O O O O O O O O O O O O O O O O
import { Injectable } from 's' ; import { PLATFORM_ID , Inject } from 's' ; import { ResponsiveState } from 's' ; import { ResponsiveSizeInfo } from 's' ; @ Injectable ( ) export class ResponsiveSizeInfoRx extends ResponsiveSizeInfo { constructor ( public _responsiveState , @ Inject ( PLATFORM_ID ) protected _platformId ) { super ( _responsiveState , _platformId ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ResponsiveState$ O O O O O O O O O O O O O O O O O O O
import { Provider } from 's' ; import { ResponsiveSizeInfoDirective } from 's' ; import { ResponsiveSizeInfoRx } from 's' ; export const RESPONSIVE_SIZE_INFO_DIRECTIVE : Provider [ ] = [ ResponsiveSizeInfoDirective ] ; export const RESPONSIVE_SIZE_INFO_RX : Provider [ ] = [ ResponsiveSizeInfoRx ] ; export * from 's' ; export * from 's' ; export * from 's' ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { Provider } from 's' ; import { ResponsiveWindowDirective } from 's' ; export const RESPONSIVEWINDOW_DIRECTIVE : Provider [ ] = [ ResponsiveWindowDirective ] ; export * from 's' ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { PLATFORM_ID , Inject } from 's' ; import { isPlatformBrowser } from 's' ; import { distinctUntilChanged } from 's' ; import { Subscription } from 's' ; import { ReplaySubject } from 's' ; import { Observable } from 's' ; import { ResponsiveState } from 's' ; export abstract class UserAgentInfo { public replaySubject$ : ReplaySubject < any > = new ReplaySubject ( ) ; private _isBrowser : boolean = null ; private _subscription : Subscription ; constructor ( public _responsiveState , @ Inject ( PLATFORM_ID ) protected _platformId ) { this . _isBrowser = isPlatformBrowser ( this . _platformId ) ; } public connect ( ) < any > { if ( this . _isBrowser ) { this . _subscription = this . _responsiveState . userAgent$ . pipe ( distinctUntilChanged ( ) ) . subscribe ( ( data ) => { this . _emitUserAgent ( data ) ; } ) ; } return this . replaySubject$ . asObservable ( ) ; } public disconnect ( ) { if ( this . _isBrowser ) { this . _subscription . unsubscribe ( ) ; } } get getUserAgent ( ) : Observable < any > { return this . replaySubject$ . asObservable ( ) ; } protected _emitUserAgent ( value ) { this . replaySubject$ . next ( value ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ResponsiveState$ O O O O O O O O O O O O O O O O O O O O O O O $Observable$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $void$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $void$ O $any$ O O O O O O O O O O O O O
import { Output , EventEmitter , Directive , OnInit , OnDestroy , ChangeDetectorRef } from 's' ; import { PLATFORM_ID , Inject } from 's' ; import { Subscription } from 's' ; import { ResponsiveState } from 's' ; import { UserAgentInfo } from 's' ; @ Directive ( { selector : 's' } ) export class UserAgentInfoDirective extends UserAgentInfo implements OnInit , OnDestroy { @ Output ( ) info : EventEmitter < any > = new EventEmitter ( ) ; constructor ( public _responsiveState , public cd , @ Inject ( PLATFORM_ID ) protected _platformId ) { super ( _responsiveState , _platformId ) ; } public ngOnInit ( ) { this . connect ( ) ; } public ngOnDestroy ( ) { this . disconnect ( ) ; } protected _emitUserAgent ( value ) { this . info . emit ( value ) ; this . cd . markForCheck ( ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ResponsiveState$ O O $ChangeDetectorRef$ O O O O O O O O O O O O O O O O O O O $void$ O O O O O O O O O O O $void$ O O O O O O O O O O O $void$ O $any$ O O O O O O O O O O O O O O O O O O O O O
import { Injectable } from 's' ; import { PLATFORM_ID , Inject } from 's' ; import { ResponsiveState } from 's' ; import { UserAgentInfo } from 's' ; @ Injectable ( ) export class UserAgentInfoRx extends UserAgentInfo { constructor ( public _responsiveState , @ Inject ( PLATFORM_ID ) protected _platformId ) { super ( _responsiveState , _platformId ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ResponsiveState$ O O O O O O O O O O O O O O O O O O O
import { Provider } from 's' ; import { UserAgentInfoDirective } from 's' ; import { UserAgentInfoRx } from 's' ; export const USERAGENT_INFO_DIRECTIVE : Provider [ ] = [ UserAgentInfoDirective ] ; export const USERAGENT_INFO_RX : Provider [ ] = [ UserAgentInfoRx ] ; export * from 's' ; export * from 's' ; export * from 's' ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { Injectable , PLATFORM_ID , Inject } from 's' ; import { isPlatformBrowser } from 's' ; import { Observable , BehaviorSubject , combineLatest } from 's' ; import { fromEvent } from 's' ; import { debounceTime } from 's' ; import { defaultIfEmpty } from 's' ; import { map } from 's' ; import { startWith } from 's' ; import { ResponsiveWindowDirective } from 's' ; import { REG_TABLETS , REG_MOBILES , REG_SMARTS_TV , REG_BROWSERS , REG_SORT_NAMES , REG_GAME_DEVICES , REG_BOTS , REG_OS , REG_WINDOWS_OS_VERSION , REG_LINUX_OS , USER_AGENT , REG_IE_VERSIONS , TABLET , WINDOWS_OS , LINUX_OS , MOBILE , IE_VERSIONS } from 's' ; import { TLinuxOS , TWindowsOS , TTablet , TMobile , TosSystems , TSmartTv , TGameDevices } from 's' ; import { ResponsiveConfig } from 's' ; @ Injectable ( ) export class ResponsiveState { public _windows : Object = { } ; public _window : any = null ; public elemento$ : Observable < string > ; public ancho$ : Observable < number > ; public browser$ : Observable < string > ; public pixel$ : Observable < string > ; public device$ : Observable < any > ; public orientation$ : Observable < any > ; public standard$ : Observable < any > ; public ieVersion$ : Observable < any > ; public userAgent$ : Observable < any > ; private _width : number ; private _screenWidth : number = null ; private _screenHeight : number = null ; private _userAgent : any = null ; private _isBrowser : boolean = null ; private _forceRefresh$ : BehaviorSubject < null > = new BehaviorSubject < null > ( null ) ; constructor ( private _responsiveConfig , @ Inject ( PLATFORM_ID ) private _platformId ) { this . _isBrowser = isPlatformBrowser ( this . _platformId ) ; this . _window = ( this . _isBrowser ) ? window : null ; this . _screenWidth = ( this . _isBrowser ) ? this . _window . screen . width : 0 ; this . _screenHeight = ( this . _isBrowser ) ? this . _window . screen . height : 0 ; this . _userAgent = ( this . _isBrowser ) ? this . _window . navigator . userAgent . toLowerCase ( ) : null ; if ( this . _isBrowser ) { const _resize$ = combineLatest ( fromEvent ( this . _window , 's' ) . pipe ( debounceTime ( this . _responsiveConfig . config . debounceTime ) , defaultIfEmpty ( ) , startWith ( this . getWidth ( 's' ) ) ) , this . _forceRefresh$ ) . pipe ( debounceTime ( this . _responsiveConfig . config . debounceTime ) ) ; const _pixelRatio$ = fromEvent ( this . _window , 's' ) . pipe ( defaultIfEmpty ( ) , startWith ( this . getDevicePixelRatio ( ) ) ) ; const _device$ = fromEvent ( this . _window , 's' ) . pipe ( defaultIfEmpty ( ) , startWith ( this . getUserAgent ( ) ) ) ; const _userAgent$ = fromEvent ( this . _window , 's' ) . pipe ( defaultIfEmpty ( ) , startWith ( this . userAgentData ( ) ) ) ; const _orientation$ = fromEvent ( this . _window , 's' ) . pipe ( defaultIfEmpty ( ) , startWith ( this . getOrientation ( ) ) ) ; this . elemento$ = _resize$ . pipe ( map ( this . sizeOperations . bind ( this ) ) ) ; this . ancho$ = _resize$ . pipe ( map ( this . sizeObserver . bind ( this ) ) ) ; this . browser$ = _device$ . pipe ( map ( this . browserName . bind ( this ) ) ) ; this . pixel$ = _pixelRatio$ . pipe ( map ( this . pixelRatio . bind ( this ) ) ) ; this . device$ = _device$ . pipe ( map ( this . deviceDetection . bind ( this ) ) ) ; this . orientation$ = _orientation$ . pipe ( map ( this . orientationDevice . bind ( this ) ) ) ; this . standard$ = _device$ . pipe ( map ( this . standardDevices . bind ( this ) ) ) ; this . ieVersion$ = _device$ . pipe ( map ( this . ieVersionDetect . bind ( this ) ) ) ; this . userAgent$ = _userAgent$ . pipe ( map ( this . userAgentData . bind ( this ) ) ) ; } } public forceRefresh ( ) { this . _forceRefresh$ . next ( null ) ; } public registerWindow ( rw , _window = null ) { if ( rw . name && ! this . _windows [ rw . name ] ) { this . _windows [ rw . name ] = rw ; if ( _window !== null ) { _window . dispatchEvent ( new Event ( 's' ) ) ; } } } public unregisterWindow ( rw , _window = null ) { for ( const rwn in this . _windows ) { if ( this . _windows [ rwn ] === rw ) { delete ( this . _windows [ rwn ] ) ; } } if ( _window !== null ) { _window . dispatchEvent ( new Event ( 's' ) ) ; } } public getWidth ( windowName = null ) { if ( this . _windows !== null && this . _isBrowser ) { if ( windowName && this . _windows [ windowName ] ) { return this . _windows [ windowName ] . getWidth ( ) ; } else { return this . _window . innerWidth ; } } return 0 ; } public getDevicePixelRatio ( ) { let ratio = 0 ; if ( this . _isBrowser ) { if ( typeof this . _window . screen . systemXDPI !== 's' && typeof this . _window . screen . logicalXDPI !== 's' && this . _window . screen . systemXDPI > this . _window . screen . logicalXDPI ) { ratio = this . _window . screen . systemXDPI / this . _window . screen . logicalXDPI ; } else if ( typeof this . _window . devicePixelRatio !== 's' ) { ratio = this . _window . devicePixelRatio ; } } return ratio ; } public getOrientation ( ) { return ( this . _isBrowser ) ? window . orientation : null ; } public sizeObserver ( ) { return ( this . _windows !== null && this . _isBrowser ) ? this . getWidth ( 's' ) : 0 ; } public sizeOperations ( ) { let _sizes = null ; const _breackpoints = this . _responsiveConfig . config . breakPoints ; if ( this . _windows !== null && this . _isBrowser && _breackpoints !== null ) { const _width = this . getWidth ( 's' ) ; if ( _breackpoints . xl . min <= _width ) { _sizes = 's' ; } else if ( _breackpoints . lg . max >= _width && _breackpoints . lg . min <= _width ) { _sizes = 's' ; } else if ( _breackpoints . md . max >= _width && _breackpoints . md . min <= _width ) { _sizes = 's' ; } else if ( _breackpoints . sm . max >= _width && _breackpoints . sm . min <= _width ) { _sizes = 's' ; } else if ( _breackpoints . xs . max >= _width ) { _sizes = 's' ; } } return _sizes ; } public pixelRatio ( ) { let _pixelRatio = null ; if ( this . _isBrowser && this . _screenWidth !== 0 && this . _screenHeight !== 0 ) { if ( this . 0 ( ) ) { _pixelRatio = 's' ; } else if ( this . getDevicePixelRatio ( ) > 0 ) { _pixelRatio = 's' ; } else if ( this . getDevicePixelRatio ( ) === 0 ) { _pixelRatio = 's' ; } } return _pixelRatio ; } public 0 ( ) { return ( this . _screenHeight !== 0 && this . _screenWidth !== 0 ) ? ( ( this . _screenHeight < this . _screenWidth ) ? ( this . _screenWidth > 0 ) : ( this . _screenHeight > 0 ) ) : false ; } public orientationDevice ( ) { let _orientationDevice = null ; if ( this . _isBrowser ) { if ( this . isMobile ( ) || this . isTablet ( ) ) { if ( this . _window . innerHeight > this . _window . innerWidth ) { _orientationDevice = 's' ; } else { _orientationDevice = 's' ; } } else if ( this . isSMART ( ) || this . isDesktop ( ) ) { _orientationDevice = 's' ; } } return _orientationDevice ; } public getUserAgent ( ) { return ( this . _isBrowser ) ? this . _window . navigator . userAgent . toLowerCase ( ) : null ; } public userAgentData ( ) { if ( this . _window === null ) { return USER_AGENT ; } const DEFAULT_USER_AGENT_VALUE = 's' ; const _ieVersionState = ( this . ieVersionDetect ( ) !== null ) ; const _isGameDevice = this . isGameDevice ( ) ; const _isSMART = this . isSMART ( ) ; const _isDesktop = this . isDesktop ( ) ; const _isTablet = this . isTablet ( ) ; const _isMobile = this . isMobile ( ) ; const _isWindows = this . isWindows ( ) ; const _isLinux = this . isLinux ( ) ; return { device : this . deviceDetection ( ) , browser : this . browserName ( ) , pixelratio : this . pixelRatio ( ) , ie_version : { name : ( _ieVersionState ) ? this . ieVersionDetect ( ) : DEFAULT_USER_AGENT_VALUE , state : _ieVersionState } , game_device : { name : ( _isGameDevice ) ? this . gameDevices ( ) : DEFAULT_USER_AGENT_VALUE , state : _isGameDevice } , smart_tv : { name : ( _isSMART ) ? this . smartTv ( ) : DEFAULT_USER_AGENT_VALUE , state : _isSMART } , desktop : { name : ( _isDesktop ) ? this . desktop ( ) : DEFAULT_USER_AGENT_VALUE , state : _isDesktop } , tablet : { name : ( _isTablet ) ? this . tablet ( ) : DEFAULT_USER_AGENT_VALUE , state : _isTablet } , mobile : { name : ( _isMobile ) ? this . mobile ( ) : DEFAULT_USER_AGENT_VALUE , state : _isMobile } , window_os : { name : ( _isWindows ) ? this . windows ( ) : DEFAULT_USER_AGENT_VALUE , state : _isWindows } , linux_os : { name : ( _isLinux ) ? this . linux ( ) : DEFAULT_USER_AGENT_VALUE , state : _isLinux } , bot : this . isBot ( ) } ; } public deviceDetection ( ) { if ( this . _isBrowser ) { if ( this . isMobile ( ) ) { return 's' ; } else if ( this . isTablet ( ) ) { return 's' ; } else if ( this . isSMART ( ) ) { return 's' ; } else if ( this . isDesktop ( ) ) { return 's' ; } } return null ; } public standardDevices ( ) { if ( this . _isBrowser ) { if ( REG_MOBILES . IPHONE . REG . test ( this . _userAgent ) ) { return 's' ; } else if ( REG_TABLETS . IPAD . REG . test ( this . _userAgent ) ) { return 's' ; } else if ( this . isMobile ( ) && REG_MOBILES . ANDROID . REG . test ( this . _userAgent ) ) { return 's' ; } else if ( this . isTablet ( ) && REG_MOBILES . ANDROID . REG . test ( this . _userAgent ) ) { return 's' ; } else if ( REG_MOBILES . WINDOWS_PHONE . REG . test ( this . _userAgent ) ) { return 's' ; } } return null ; } public ieVersionDetect ( ) { if ( this . _isBrowser ) { const _userAgent = this . getUserAgent ( ) ; const msie = _userAgent . indexOf ( 's' ) ; let _ieVersion = null ; if ( REG_IE_VERSIONS . MS_MSIE . REG . test ( _userAgent ) ) { _ieVersion = parseInt ( _userAgent . substring ( msie + 0 , _userAgent . indexOf ( 's' , msie ) ) , 0 ) ; if ( _ieVersion === 0 ) { return IE_VERSIONS . 0 ; } else if ( _ieVersion == 0 ) { return IE_VERSIONS . 0 ; } else if ( _ieVersion == 0 ) { return IE_VERSIONS . 0 ; } else if ( _ieVersion == 0 ) { return IE_VERSIONS . 0 ; } } if ( REG_IE_VERSIONS . MS_TRIDENT . REG . test ( _userAgent ) ) { let _rv = _userAgent . indexOf ( 's' ) ; _ieVersion = parseInt ( _userAgent . substring ( _rv + 0 , _userAgent . indexOf ( 's' , _rv ) ) , 0 ) ; if ( _ieVersion == 0 ) { return IE_VERSIONS . 0 ; } } if ( REG_IE_VERSIONS . MS_EDGE . REG . test ( _userAgent ) ) { return IE_VERSIONS . 0 ; } } return null ; } public browserName ( ) { let _browserName = null ; if ( this . _isBrowser ) { if ( REG_SORT_NAMES . WEBKIT . REG . test ( this . _userAgent ) && REG_SORT_NAMES . CHROME . REG . test ( this . _userAgent ) && ! REG_BROWSERS . IE . REG . test ( this . _userAgent ) ) { _browserName = REG_BROWSERS . CHROME . VALUE ; } else if ( REG_SORT_NAMES . MOZILLA . REG . test ( this . _userAgent ) && REG_BROWSERS . FIREFOX . REG . test ( this . _userAgent ) ) { _browserName = REG_BROWSERS . FIREFOX . VALUE ; } else if ( REG_BROWSERS . IE . REG . test ( this . _userAgent ) ) { _browserName = REG_BROWSERS . IE . VALUE ; } else if ( REG_SORT_NAMES . SAFARI . REG . test ( this . _userAgent ) && REG_SORT_NAMES . APPLE_WEBKIT . REG . test ( this . _userAgent ) && ! REG_SORT_NAMES . CHROME . REG . test ( this . _userAgent ) ) { _browserName = REG_BROWSERS . SAFARI . VALUE ; } else if ( REG_BROWSERS . OPERA . REG . test ( this . _userAgent ) ) { _browserName = REG_BROWSERS . OPERA . VALUE ; } else if ( REG_BROWSERS . SILK . REG . test ( this . _userAgent ) ) { _browserName = REG_BROWSERS . SILK . VALUE ; } else if ( REG_BROWSERS . YANDEX . REG . test ( this . _userAgent ) ) { _browserName = REG_BROWSERS . YANDEX . VALUE ; } else { _browserName = REG_BROWSERS . NA . VALUE ; } } return _browserName ; } public gameDevices ( ) { let _gameDevice = null ; if ( this . _userAgent !== null ) { for ( let _reg in REG_GAME_DEVICES ) { if ( REG_GAME_DEVICES [ _reg ] . REG . test ( this . _userAgent ) ) { _gameDevice = REG_GAME_DEVICES [ _reg ] . VALUE ; } } } return _gameDevice ; } public smartTv ( ) { let _smartTv = null ; if ( this . _userAgent !== null ) { if ( REG_SMARTS_TV . CHROMECAST . REG . test ( this . _userAgent ) ) { _smartTv = REG_SMARTS_TV . CHROMECAST . VALUE ; } else if ( REG_SMARTS_TV . APPLE_TV . REG . test ( this . _userAgent ) ) { _smartTv = REG_SMARTS_TV . APPLE_TV . VALUE ; } else if ( REG_SMARTS_TV . GOOGLE_TV . REG . test ( this . _userAgent ) ) { _smartTv = REG_SMARTS_TV . GOOGLE_TV . VALUE ; } else if ( REG_SMARTS_TV . XBOX_ONE . REG . test ( this . _userAgent ) ) { _smartTv = REG_SMARTS_TV . XBOX_ONE . VALUE ; } else if ( REG_SMARTS_TV . 0 . REG . test ( this . _userAgent ) ) { _smartTv = REG_SMARTS_TV . 0 . VALUE ; } else if ( REG_SMARTS_TV . GENERIC_TV . REG . test ( this . _userAgent ) ) { _smartTv = REG_SMARTS_TV . GENERIC_TV . VALUE ; } } return _smartTv ; } public desktop ( ) { let _desktop = null ; if ( this . _userAgent !== null ) { if ( REG_OS . WINDOWS . REG . test ( this . _userAgent ) ) { _desktop = REG_OS . WINDOWS . VALUE ; } else if ( REG_OS . MAC_OS . REG . test ( this . _userAgent ) ) { _desktop = REG_OS . MAC_OS . VALUE ; } else if ( REG_OS . LINUX . REG . test ( this . _userAgent ) ) { _desktop = REG_OS . LINUX . VALUE ; } else if ( REG_OS . FIREFOX_OS . REG . test ( this . _userAgent ) ) { _desktop = REG_OS . FIREFOX_OS . VALUE ; } else if ( REG_OS . FIREFOX_OS . REG . test ( this . _userAgent ) ) { _desktop = REG_OS . CHROME_OS . VALUE ; } } return _desktop ; } public tablet ( ) { let _tablet = null ; if ( this . _userAgent !== null ) { if ( REG_TABLETS . IPAD . REG . test ( this . _userAgent ) ) { _tablet = TABLET . IPAD ; } else if ( REG_TABLETS . TABLET . REG . test ( this . _userAgent ) && REG_MOBILES . ANDROID . REG . test ( this . _userAgent ) ) { _tablet = TABLET . ANDROID ; } else if ( REG_TABLETS . KINDLE . REG . test ( this . _userAgent ) ) { _tablet = TABLET . KINDLE ; } else if ( REG_TABLETS . TABLET . REG . test ( this . _userAgent ) ) { _tablet = TABLET . GENERIC_TABLET ; } } return _tablet ; } public mobile ( ) { let _mobile = null ; if ( this . _userAgent !== null ) { for ( let _reg in REG_MOBILES ) { if ( REG_MOBILES [ _reg ] . REG . test ( this . _userAgent ) ) { _mobile = REG_MOBILES [ _reg ] . VALUE ; } } if ( _mobile === null && this . isMobile ( ) ) { _mobile = MOBILE . GENERIC_MOBILE ; } } return _mobile ; } public windows ( ) { let _windows = null ; if ( this . _userAgent !== null ) { for ( let _reg in REG_WINDOWS_OS_VERSION ) { if ( REG_WINDOWS_OS_VERSION [ _reg ] . REG . test ( this . _userAgent ) ) { _windows = REG_WINDOWS_OS_VERSION [ _reg ] . VALUE ; } } if ( _windows === null && this . isDesktop ( ) && this . isWindows ( ) ) { _windows = WINDOWS_OS . GENERIC_WINDOWS ; } } return _windows ; } public linux ( ) { let _linux = null ; if ( this . _userAgent !== null ) { for ( let _reg in REG_LINUX_OS ) { if ( REG_LINUX_OS [ _reg ] . REG . test ( this . _userAgent ) ) { _linux = REG_LINUX_OS [ _reg ] . VALUE ; } } if ( _linux === null && this . isDesktop ( ) && this . isLinux ( ) ) { _linux = LINUX_OS . GENERIC_LINUX ; } } return _linux ; } public isMobile ( ) { let _result = false ; if ( this . _userAgent !== null ) { let _userAgent = this . _userAgent ; _result = ( REG_MOBILES . 0 . REG . test ( _userAgent ) && this . isTablet ( ) === false || REG_MOBILES . 0 . REG . test ( _userAgent . substr ( 0 , 0 ) ) && this . isTablet ( ) === false ) ; } return _result ; } public isTablet ( ) { let _result = false ; if ( this . _userAgent !== null ) { _result = ( REG_TABLETS . IPAD . REG . test ( this . _userAgent ) || REG_TABLETS . KINDLE . REG . test ( this . _userAgent ) || REG_TABLETS . TABLET . REG . test ( this . _userAgent ) ) ; } return _result ; } public isSMART ( ) { let _result = false ; if ( this . _userAgent !== null ) { _result = ( REG_SMARTS_TV . GENERIC_TV . REG . test ( this . _userAgent ) || REG_SMARTS_TV . 0 . REG . test ( this . _userAgent ) || REG_SMARTS_TV . XBOX_ONE . REG . test ( this . _userAgent ) ) ; } return _result ; } public isDesktop ( ) { let _result = false ; if ( this . _userAgent !== null ) { _result = ! ( this . isMobile ( ) || this . isTablet ( ) || this . isSMART ( ) ) ; } return _result ; } public isGameDevice ( ) { let _result = false ; if ( this . _userAgent !== null ) { _result = ( REG_GAME_DEVICES . 0 . REG . test ( this . _userAgent ) || REG_GAME_DEVICES . 0 . REG . test ( this . _userAgent ) || REG_GAME_DEVICES . XBOX . REG . test ( this . _userAgent ) || REG_GAME_DEVICES . XBOX_ONE . REG . test ( this . _userAgent ) || REG_GAME_DEVICES . WII . REG . test ( this . _userAgent ) || REG_GAME_DEVICES . WII_U . REG . test ( this . _userAgent ) || REG_GAME_DEVICES . 0 . REG . test ( this . _userAgent ) || REG_GAME_DEVICES . PS_VITA . REG . test ( this . _userAgent ) || REG_GAME_DEVICES . PSP . REG . test ( this . _userAgent ) ) ; } return _result ; } public isWindows ( ) { let _result = false ; if ( this . _userAgent !== null ) { _result = ( REG_OS . WINDOWS . REG . test ( this . _userAgent ) ) ; } return _result ; } public isLinux ( ) { let _result = false ; if ( this . _userAgent !== null ) { _result = ( REG_OS . LINUX . REG . test ( this . _userAgent ) ) ; } return _result ; } public isBot ( ) { let _result = false ; if ( this . _userAgent !== null ) { _result = ( REG_BOTS . GENERIC_BOT . REG . test ( this . _userAgent ) ) ; } return _result ; } }	esponsiveConfigesponsiveWindowDirective$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ResponsiveWindowDirective$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O $string$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O O O O O O O O O O O O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $boolean$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O $anyany$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $anyameDevices$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $TSmartTv$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $TosSystems$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $TTablet$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $TMobile$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $TWindowsOS$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $TLinuxOS$ O O O O $TLinuxOS$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $boolean$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $boolean$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $boolean$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $boolean$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $boolean$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $boolean$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $boolean$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $boolean$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
export * from 's' ;	O O O O O
export * from 's' ;	O O O O O
export * from 's' ; export * from 's' ; export * from 's' ;	O O O O O O O O O O O O O O O
export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ;	O O O O O O O O O O O O O O O O O O O O
import { ResponsiveState } from 's' ; import { ResponsiveConfig } from 's' ; import { IResponsiveConfig } from 's' ; describe ( 's' , ( ) => { beforeEach ( ( ) => { let responsiveState ; let responsiveConfig ; const config = { breakPoints : { xs : { max : 0 } , sm : { min : 0 , max : 0 } , md : { min : 0 , max : 0 } , lg : { min : 0 , max : 0 } , xl : { min : 0 } } , debounceTime : 0 } ; beforeEach ( ( ) => { responsiveConfig = new ResponsiveConfig ( config ) ; responsiveState = new ResponsiveState ( responsiveConfig ) ; } ) ; afterEach ( ( ) => { responsiveConfig = null ; responsiveState = null ; } ) ; it ( 's' , ( ) => { const spy = spyOn ( responsiveState , 's' ) . and . returnValue ( 0 ) ; expect ( responsiveState . getDevicePixelRatio ( ) ) . toBe ( 0 ) ; expect ( responsiveState . getDevicePixelRatio ) . toHaveBeenCalled ( ) ; } ) ; } ) ; } ) ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ResponsiveState$ O O $ResponsiveConfig$ O O $IResponsiveConfig$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { NgModule , ModuleWithProviders } from 's' ; import { ResponsiveState } from 's' ; import { ResponsiveConfig } from 's' ; import { InjectionToken } from 's' ; import { BOOTSTRAP_DIRECTIVES } from 's' ; import { BROWSER_DIRECTIVES , BROWSER_INFO_RX , IE_INFO_RX } from 's' ; import { CUSTOMSIZES_DIRECTIVES } from 's' ; import { DEVICES_DIRECTIVES , DEVICES_INFO_RX } from 's' ; import { PIXELRATIO_DIRECTIVES } from 's' ; import { RESPONSIVE_DIRECTIVE } from 's' ; import { RESPONSIVE_SIZE_INFO_DIRECTIVE , RESPONSIVE_SIZE_INFO_RX } from 's' ; import { RESPONSIVEWINDOW_DIRECTIVE } from 's' ; import { USERAGENT_INFO_DIRECTIVE , USERAGENT_INFO_RX } from 's' ; import { IResponsiveConfig } from 's' ; import { DEFAULT_BREACKPOINTS } from 's' ; export const RESPONSIVE_CONFIGURATION = new InjectionToken < IResponsiveConfig > ( 's' ) ; export function responsiveConfiguration ( config ) { return new ResponsiveConfig ( config ) ; } @ NgModule ( { declarations : [ BOOTSTRAP_DIRECTIVES , BROWSER_DIRECTIVES , CUSTOMSIZES_DIRECTIVES , DEVICES_DIRECTIVES , PIXELRATIO_DIRECTIVES , RESPONSIVE_DIRECTIVE , RESPONSIVEWINDOW_DIRECTIVE , USERAGENT_INFO_DIRECTIVE , RESPONSIVE_SIZE_INFO_DIRECTIVE ] , exports : [ BOOTSTRAP_DIRECTIVES , BROWSER_DIRECTIVES , CUSTOMSIZES_DIRECTIVES , DEVICES_DIRECTIVES , PIXELRATIO_DIRECTIVES , RESPONSIVE_DIRECTIVE , RESPONSIVEWINDOW_DIRECTIVE , USERAGENT_INFO_DIRECTIVE , RESPONSIVE_SIZE_INFO_DIRECTIVE ] } ) export class ResponsiveModule { public static forRoot ( config = null ) { return { ngModule : ResponsiveModule , providers : [ { provide : RESPONSIVE_CONFIGURATION , useValue : ( config !== null ) ? config : { breakPoints : { xs : { max : 0 } , sm : { min : 0 , max : 0 } , md : { min : 0 , max : 0 } , lg : { min : 0 , max : 0 } , xl : { min : 0 } } , debounceTime : 0 } } , { provide : ResponsiveConfig , useFactory : responsiveConfiguration , deps : [ RESPONSIVE_CONFIGURATION ] } , ResponsiveState , RESPONSIVE_SIZE_INFO_RX , USERAGENT_INFO_RX , BROWSER_INFO_RX , IE_INFO_RX , DEVICES_INFO_RX ] } ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $IResponsiveConfig$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ModuleWithProviders$ O $IResponsiveConfig$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
export * from 's' ; export * from 's' ; export * from 's' ;	O O O O O O O O O O O O O O O