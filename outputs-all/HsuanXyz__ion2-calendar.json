import { Component } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' } ) export class HomePage { constructor ( ) { } }	O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O O O O O O O
import { Component } from 's' ; import { Platform } from 's' ; import { StatusBar } from 's' ; import { SplashScreen } from 's' ; import { HomePage } from 's' ; @ Component ( { templateUrl : 's' } ) export class MyApp { rootPage : any = HomePage ; constructor ( platform , statusBar , splashScreen ) { platform . ready ( ) . then ( ( ) => { statusBar . styleDefault ( ) ; splashScreen . hide ( ) ; } ) ; } }	O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O O O O $any$ O $any$ O O O $any$ O O O $Platform$ O $StatusBar$ O $SplashScreen$ O O $any$ O $any$ O O O $any$ O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O
import { Component } from 's' ; import { ModalController } from 's' ; import { CalendarModal , CalendarModalOptions , } from 's' @ Component ( { selector : 's' , template : `template` } ) export class DemoModalBasicComponent { date : Date = new Date ( ) ; constructor ( public modalCtrl ) { } openCalendar ( ) { const options = { title : 's' , defaultDate : this . date } ; let myCalendar = this . modalCtrl . create ( CalendarModal , { options : options } ) ; myCalendar . present ( ) ; myCalendar . onDidDismiss ( ( date , type ) => { if ( type === 's' ) { this . date = date . dateObj ; } console . log ( date ) ; console . log ( 's' , type ) ; } ) } }	O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $Date$ O $DateConstructor$ O O $DateConstructor$ O O O O O O $ModalController$ O O O $void$ O O O O $CalendarModalOptions$ O O $string$ O O O $Date$ O O O $Date$ O O O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O O O O $any$ O O O O O O $Date$ O $any$ O $any$ O O $Console$ O $void$ O $any$ O O $Console$ O $void$ O O O $any$ O O O O O O
import { Component } from 's' ; import { ModalController } from 's' ; import { CalendarModal , CalendarModalOptions , } from 's' @ Component ( { selector : 's' , template : `template` } ) export class DemoModalMultiComponent { dates : Date [ ] = [ new Date ( ) , new Date ( Date . now ( ) + 0 * 0 * 0 * 0 ) , new Date ( Date . now ( ) + 0 * 0 * 0 * 0 * 0 ) ] ; constructor ( public modalCtrl ) { } openCalendar ( ) { const options = { pickMode : 's' , title : 's' , defaultDates : this . dates } ; let myCalendar = this . modalCtrl . create ( CalendarModal , { options : options } ) ; myCalendar . present ( ) ; myCalendar . onDidDismiss ( ( dates , type ) => { if ( type === 's' ) { this . dates = [ ... dates . map ( e => e . dateObj ) ] } console . log ( dates ) ; console . log ( type ) ; } ) } }	O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $Date[]$ O $DateConstructor$ O O O O O $DateConstructor$ O O O O $DateConstructor$ O $DateConstructor$ O $number$ O O O O O O O O O O O O O $DateConstructor$ O $DateConstructor$ O $number$ O O O O O O O O O O O O O O O O O O $ModalController$ O O O $void$ O O O O $CalendarModalOptions$ O O $string$ O O O $string$ O O O $Date[]$ O O O $Date[]$ O O O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O O O O $any$ O O O O O O $Date[]$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $Console$ O $void$ O $any$ O O $Console$ O $void$ O $any$ O O O O O O
import { Component } from 's' ; import { ModalController } from 's' ; import { CalendarModal , CalendarModalOptions } from 's' @ Component ( { selector : 's' , template : `template` } ) export class DemoModalRangeComponent { dateRange : { from : Date ; to : Date } = { from : new Date ( ) , to : new Date ( Date . now ( ) + 0 * 0 * 0 * 0 * 0 ) } ; constructor ( public modalCtrl ) { } openCalendar ( ) { const options = { pickMode : 's' , title : 's' , defaultDateRange : this . dateRange } ; let myCalendar = this . modalCtrl . create ( CalendarModal , { options : options } ) ; myCalendar . present ( ) ; myCalendar . onDidDismiss ( ( date , type ) => { if ( type === 's' ) { this . dateRange = Object . assign ( { } , { from : date . from . dateObj , to : date . to . dateObj , } ) } console . log ( date ) ; console . log ( 's' , type ) ; } ) ; } }	O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $complex$ O O $Date$ O $DateConstructor$ O $Date$ O $DateConstructor$ O O O $Date$ O O $DateConstructor$ O O O $Date$ O O $DateConstructor$ O $DateConstructor$ O $number$ O O O O O O O O O O O O O O O O O O $ModalController$ O O O $void$ O O O O $CalendarModalOptions$ O O $string$ O O O $string$ O O O $complex$ O O O $complex$ O O O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O O O O $any$ O O O O O O $complex$ O $ObjectConstructor$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Console$ O $void$ O $any$ O O $Console$ O $void$ O O O $any$ O O O O O O O
import { Component } from 's' ; import { ModalController } from 's' ; import { CalendarModal , CalendarModalOptions , } from 's' @ Component ( { selector : 's' , template : `template` } ) export class DemoModalDisableWeekComponent { date : Date = new Date ( ) ; constructor ( public modalCtrl ) { } openCalendar ( ) { const options = { title : 's' , defaultDate : this . date , disableWeeks : [ 0 , 0 ] , } ; let myCalendar = this . modalCtrl . create ( CalendarModal , { options : options } ) ; myCalendar . present ( ) ; myCalendar . onDidDismiss ( ( date , type ) => { if ( type === 's' ) { this . date = date . dateObj ; } console . log ( date ) ; console . log ( 's' , type ) ; } ) } }	O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $Date$ O $DateConstructor$ O O $DateConstructor$ O O O O O O $ModalController$ O O O $void$ O O O O $CalendarModalOptions$ O O $string$ O O O $Date$ O O O $Date$ O $number[]$ O O O O O O O O O O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O O O O $any$ O O O O O O $Date$ O $any$ O $any$ O O $Console$ O $void$ O $any$ O O $Console$ O $void$ O O O $any$ O O O O O O
import { Component } from 's' ; import { ModalController } from 's' ; import * as moment from 's' ; import { CalendarModal , CalendarModalOptions , } from 's' @ Component ( { selector : 's' , template : `template` } ) export class DemoModalLocaleComponent { date : Date = new Date ( ) ; constructor ( public modalCtrl ) { moment . locale ( 's' ) ; } openCalendar ( ) { const options = { title : 's' , defaultDate : this . date , monthFormat : 's' , weekdays : moment . weekdaysShort ( ) , weekStart : 0 , } ; let myCalendar = this . modalCtrl . create ( CalendarModal , { options : options } ) ; myCalendar . present ( ) ; myCalendar . onDidDismiss ( ( date , type ) => { if ( type === 's' ) { this . date = date . dateObj ; } console . log ( date ) ; console . log ( 's' , type ) ; } ) } }	O O $any$ O O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $Date$ O $DateConstructor$ O O $DateConstructor$ O O O O O O $ModalController$ O O $any$ O $any$ O O O O O $void$ O O O O $CalendarModalOptions$ O O $string$ O O O $Date$ O O O $Date$ O $string$ O O O $any$ O $any$ O $any$ O O O $number$ O O O O O O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O O O O $any$ O O O O O O $Date$ O $any$ O $any$ O O $Console$ O $void$ O $any$ O O $Console$ O $void$ O O O $any$ O O O O O O
import { Component } from 's' ; import { ModalController } from 's' ; import { CalendarModal , CalendarModalOptions , } from 's' @ Component ( { selector : 's' , template : `template` } ) export class DemoModalCustomStyleComponent { date : Date = new Date ( ) ; constructor ( public modalCtrl ) { } openCalendar ( ) { const options = { title : 's' , defaultDate : this . date , cssClass : 's' , } ; let myCalendar = this . modalCtrl . create ( CalendarModal , { options : options } ) ; myCalendar . present ( ) ; myCalendar . onDidDismiss ( ( date , type ) => { if ( type === 's' ) { this . date = date . dateObj ; } console . log ( date ) ; console . log ( 's' , type ) ; } ) } }	O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $Date$ O $DateConstructor$ O O $DateConstructor$ O O O O O O $ModalController$ O O O $void$ O O O O $CalendarModalOptions$ O O $string$ O O O $Date$ O O O $Date$ O $string$ O O O O O O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O O O O $any$ O O O O O O $Date$ O $any$ O $any$ O O $Console$ O $void$ O $any$ O O $Console$ O $void$ O O O $any$ O O O O O O
import { Component } from 's' ; import { ModalController } from 's' ; import { CalendarModal , CalendarModalOptions , } from 's' @ Component ( { selector : 's' , template : `template` } ) export class DemoModalDefaultScrollComponent { date : Date = new Date ( 0 , 0 , 0 ) ; constructor ( public modalCtrl ) { } openCalendar ( ) { const options = { title : 's' , from : new Date ( 0 , 0 , 0 ) , defaultScrollTo : this . date , defaultDate : this . date } ; let myCalendar = this . modalCtrl . create ( CalendarModal , { options : options } ) ; myCalendar . present ( ) ; myCalendar . onDidDismiss ( ( date , type ) => { if ( type === 's' ) { this . date = date . dateObj ; } console . log ( date ) ; console . log ( 's' , type ) ; } ) } }	O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $Date$ O $DateConstructor$ O O $DateConstructor$ O O O O O O O O O O O $ModalController$ O O O $void$ O O O O $CalendarModalOptions$ O O $string$ O O O $Date$ O O $DateConstructor$ O O O O O O O O $Date$ O O O $Date$ O $Date$ O O O $Date$ O O O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O O O O $any$ O O O O O O $Date$ O $any$ O $any$ O O $Console$ O $void$ O $any$ O O $Console$ O $void$ O O O $any$ O O O O O O
import { Component } from 's' ; import { ModalController } from 's' ; import { CalendarModal , CalendarModalOptions , DayConfig } from 's' @ Component ( { selector : 's' , template : `template` } ) export class DemoModalConfigDaysComponent { date : Date = new Date ( 0 , 0 , 0 ) ; constructor ( public modalCtrl ) { } openCalendar ( ) { const daysConfig : DayConfig [ ] = [ ] ; for ( let i = 0 ; i < 0 ; i ++ ) { daysConfig . push ( { date : new Date ( 0 , 0 , i + 0 ) , subTitle : `template` } ) } daysConfig . push ( { date : new Date ( 0 , 0 , 0 ) , disable : true , subTitle : 's' , } ) ; daysConfig . push ( { date : new Date ( 0 , 0 , 0 ) , subTitle : 's' , cssClass : 's' } ) ; const options = { daysConfig , from : new Date ( 0 , 0 , 0 ) , to : new Date ( 0 , 0 ) , title : 's' , defaultDate : this . date } ; let myCalendar = this . modalCtrl . create ( CalendarModal , { options : options } ) ; myCalendar . present ( ) ; myCalendar . onDidDismiss ( ( date , type ) => { if ( type === 's' ) { this . date = date . dateObj ; } console . log ( date ) ; console . log ( 's' , type ) ; } ) } }	O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $Date$ O $DateConstructor$ O O $DateConstructor$ O O O O O O O O O O O $ModalController$ O O O $void$ O O O O $any[]$ O $any$ O O O O O O O O O $number$ O O O $number$ O O O $number$ O O O $any[]$ O $number$ O O $Date$ O O $DateConstructor$ O O O O O $number$ O O O O $string$ O O O O O $any[]$ O $number$ O O $Date$ O O $DateConstructor$ O O O O O O O O $boolean$ O O O $string$ O O O O O O $any[]$ O $number$ O O $Date$ O O $DateConstructor$ O O O O O O O O $string$ O O O $string$ O O O O O O $CalendarModalOptions$ O O $any[]$ O $Date$ O O $DateConstructor$ O O O O O O O O $Date$ O O $DateConstructor$ O O O O O O $string$ O O O $Date$ O O O $Date$ O O O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O O O O $any$ O O O O O O $Date$ O $any$ O $any$ O O $Console$ O $void$ O $any$ O O $Console$ O $void$ O O O $any$ O O O O O O
import { Component } from 's' ; import { ModalController } from 's' ; import { CalendarComponentOptions } from 's' @ Component ( { selector : 's' , template : `template` } ) export class DemoBasicComponent { date : string = 's' ; options : CalendarComponentOptions = { from : new Date ( 0 , 0 , 0 ) , } ; constructor ( public modalCtrl ) { } onChange ( $event ) { console . log ( $event ) } }	O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $string$ O O O O O $any$ O $any$ O O $Date$ O O $DateConstructor$ O O O O O O O O O O O O O $ModalController$ O O O $void$ O $any$ O O $Console$ O $void$ O $any$ O O O
import { Component } from 's' ; import { ModalController } from 's' ; import { CalendarComponentOptions } from 's' @ Component ( { selector : 's' , template : `template` } ) export class DemoMultiComponent { date : string [ ] = [ 's' , 's' , 's' ] ; options : CalendarComponentOptions = { from : new Date ( 0 , 0 , 0 ) , pickMode : 's' } ; constructor ( public modalCtrl ) { } onChange ( $event ) { console . log ( $event ) } }	O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $string[]$ O O O O O O O O O O O O O $any$ O $any$ O O $Date$ O O $DateConstructor$ O O O O O O O O $string$ O O O O O O O $ModalController$ O O O $void$ O $any$ O O $Console$ O $void$ O $any$ O O O
import { Component } from 's' ; import { ModalController } from 's' ; import { CalendarComponentOptions } from 's' @ Component ( { selector : 's' , template : `template` } ) export class DemoRangeComponent { date : { from : string to : string } = { from : 's' , to : 's' } ; options : CalendarComponentOptions = { from : new Date ( 0 , 0 , 0 ) , pickMode : 's' } ; constructor ( public modalCtrl ) { } onChange ( $event ) { console . log ( $event ) } }	O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $complex$ O O $string$ O O $string$ O O O O O $string$ O O O $string$ O O O O $any$ O $any$ O O $Date$ O O $DateConstructor$ O O O O O O O O $string$ O O O O O O O $ModalController$ O O O $void$ O $any$ O O $Console$ O $void$ O $any$ O O O
import { Component } from 's' ; import { ModalController } from 's' ; import { CalendarComponentOptions } from 's' @ Component ( { selector : 's' , template : `template` } ) export class DemoOptionsComponent { _color : string = 's' ; _showToggleButtons : boolean = true ; _showMonthPicker : boolean = true ; _disableWeeks : number [ ] = [ 0 , 0 ] ; _weekStart : number = 0 ; date : string = 's' ; options : CalendarComponentOptions = { from : new Date ( 0 , 0 , 0 ) , disableWeeks : [ ... this . _disableWeeks ] } ; constructor ( public modalCtrl ) { } onChange ( $event ) { console . log ( $event ) } _changeColors ( color ) { this . options = { ... this . options , color } } _changeShowToggleButtons ( showToggleButtons ) { this . options = { ... this . options , showToggleButtons } } _changeShowMonthPicker ( showMonthPicker ) { this . options = { ... this . options , showMonthPicker } } _changeDisableWeeks ( disableWeeks : string [ ] ) { this . options = { ... this . options , disableWeeks : disableWeeks . map ( e => parseInt ( e ) ) } } _changeWeekStart ( weekStart ) { this . options = { ... this . options , weekStart : parseInt ( weekStart ) } ; } }	O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $string$ O O O O O $boolean$ O O O O O $boolean$ O O O O O $number[]$ O O O O O O O O O O O $number$ O O O O O $string$ O O O O O $any$ O $any$ O O $Date$ O O $DateConstructor$ O O O O O O O O $number[]$ O O O O O $number[]$ O O O O O O $ModalController$ O O O $void$ O $any$ O O $Console$ O $void$ O $any$ O O $void$ O $string$ O O O O $any$ O O O O O $any$ O $string$ O O $void$ O $boolean$ O O O O $any$ O O O O O $any$ O $boolean$ O O $void$ O $boolean$ O O O O $any$ O O O O O $any$ O $boolean$ O O $void$ O $string[]$ O O O O O O O O $any$ O O O O O $any$ O $number[]$ O $string[]$ O $U[]$ O $string$ O $number$ O $string$ O O O O $void$ O $string$ O O O O $any$ O O O O O $any$ O $number$ O $number$ O $string$ O O O O O
import { Component } from 's' ; import { ToastController } from 's' ; import { CalendarComponentOptions } from 's' @ Component ( { selector : 's' , template : `template` } ) export class DemoEventsComponent { date : { from : string to : string } = { from : 's' , to : 's' } ; options : CalendarComponentOptions = { from : new Date ( 0 , 0 , 0 ) , pickMode : 's' } ; constructor ( private toastCtrl ) { } _toastWrap ( event , payload : { } ) { let toast = this . toastCtrl . create ( { message : `template` , duration : 0 , } ) ; toast . present ( ) } onChange ( $event ) { console . log ( 's' , $event ) ; this . _toastWrap ( 's' , $event ) } onSelect ( $event ) { console . log ( 's' , $event ) ; this . _toastWrap ( 's' , $event ) } onSelectStart ( $event ) { console . log ( 's' , $event ) ; this . _toastWrap ( 's' , $event ) } onSelectEnd ( $event ) { console . log ( 's' , $event ) ; this . _toastWrap ( 's' , $event ) } monthChange ( $event ) { console . log ( 's' , $event ) ; this . _toastWrap ( 's' , $event ) } }	O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $complex$ O O $string$ O O $string$ O O O O O $string$ O O O $string$ O O O O $any$ O $any$ O O $Date$ O O $DateConstructor$ O O O O O O O O $string$ O O O O O O O $ToastController$ O O O $void$ O $string$ O ${}$ O O O O O O $any$ O O O $any$ O $any$ O O $string$ O O O $number$ O O O O O O $any$ O $any$ O O O $void$ O $any$ O O $Console$ O $void$ O O O $any$ O O O O $void$ O O O $any$ O O $void$ O $any$ O O $Console$ O $void$ O O O $any$ O O O O $void$ O O O $any$ O O $void$ O $any$ O O $Console$ O $void$ O O O $any$ O O O O $void$ O O O $any$ O O $void$ O $any$ O O $Console$ O $void$ O O O $any$ O O O O $void$ O O O $any$ O O $void$ O $any$ O O $Console$ O $void$ O O O $any$ O O O O $void$ O O O $any$ O O O
import { Component , ViewChild } from 's' ; import { ToastController } from 's' ; import { CalendarComponent , CalendarComponentOptions } from 's' @ Component ( { selector : 's' , template : `template` } ) export class DemoMethodsComponent { @ ViewChild ( 's' , { read : CalendarComponent } ) calendarRef : CalendarComponent ; date : { from : string to : string } = { from : 's' , to : 's' } ; options : CalendarComponentOptions = { from : new Date ( 0 , 0 , 0 ) , pickMode : 's' } ; constructor ( private toastCtrl ) { } _toastWrap ( event , payload : { } ) { let toast = this . toastCtrl . create ( { message : `template` , duration : 0 , } ) ; toast . present ( ) } onChange ( $event ) { console . log ( 's' , $event ) ; } getCalendarViewDate ( ) { console . log ( this . calendarRef ) this . _toastWrap ( 's' , this . calendarRef . getViewDate ( ) ) ; console . log ( 's' , this . calendarRef . getViewDate ( ) ) } serCalendarViewDate ( ) { this . calendarRef . setViewDate ( 's' ) } }	O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O $complex$ O O $string$ O O $string$ O O O O O $string$ O O O $string$ O O O O $any$ O $any$ O O $Date$ O O $DateConstructor$ O O O O O O O O $string$ O O O O O O O $ToastController$ O O O $void$ O $string$ O ${}$ O O O O O O $any$ O O O $any$ O $any$ O O $string$ O O O $number$ O O O O O O $any$ O $any$ O O O $void$ O $any$ O O $Console$ O $void$ O O O $any$ O O O $void$ O O O $Console$ O $void$ O O O $any$ O O O $void$ O O O O O $any$ O $any$ O O O O $Console$ O $void$ O O O O O $any$ O $any$ O O O O $void$ O O O O O $any$ O $any$ O O O O O
import { CalendarModule } from 's' import { NgModule } from 's' ; import { DemoModalBasicComponent } from 's' ; import { IonicModule } from "s" ; import { MyApp } from "s" ; import { DemoModalMultiComponent } from "s" ; import { DemoModalRangeComponent } from "s" ; import { DemoModalDisableWeekComponent } from "s" ; import { DemoModalLocaleComponent } from "s" ; import { DemoModalCustomStyleComponent } from "s" ; import { DemoModalDefaultScrollComponent } from "s" ; import { DemoModalConfigDaysComponent } from "s" ; import { DemoBasicComponent } from "s" ; import { DemoMultiComponent } from "s" ; import { DemoRangeComponent } from "s" ; import { DemoOptionsComponent } from "s" ; import { DemoEventsComponent } from "s" ; import { DemoMethodsComponent } from "s" ; const COMPONENTS = [ DemoModalBasicComponent , DemoModalMultiComponent , DemoModalRangeComponent , DemoModalDisableWeekComponent , DemoModalLocaleComponent , DemoModalCustomStyleComponent , DemoModalDefaultScrollComponent , DemoModalConfigDaysComponent , DemoBasicComponent , DemoMultiComponent , DemoRangeComponent , DemoOptionsComponent , DemoEventsComponent , DemoMethodsComponent ] ; @ NgModule ( { declarations : [ ... COMPONENTS ] , imports : [ IonicModule . forRoot ( MyApp ) , CalendarModule ] , exports : [ ... COMPONENTS ] , } ) export class DemosModule { }	O O $any$ O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O O $complex$ O O O $complex$ O O $any[]$ O O $any$ O $any$ O $any$ O O $any$ O O $complex$ O O O $complex$ O O O O O O $any$ O O
import { BrowserModule } from 's' ; import { ErrorHandler , NgModule } from 's' ; import { IonicApp , IonicErrorHandler , IonicModule } from 's' ; import { SplashScreen } from 's' ; import { StatusBar } from 's' ; import { MyApp } from 's' ; import { HomePage } from 's' ; import { CalendarModule } from "s" ; import { DemosModule } from "s" ; @ NgModule ( { declarations : [ MyApp , HomePage ] , imports : [ BrowserModule , CalendarModule , DemosModule , IonicModule . forRoot ( MyApp ) , ] , bootstrap : [ IonicApp ] , entryComponents : [ MyApp , HomePage ] , providers : [ StatusBar , SplashScreen , { provide : ErrorHandler , useClass : IonicErrorHandler } ] } ) export class AppModule { }	O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $complex$ O O $any$ O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any[]$ O O $any$ O O $complex$ O O $any$ O $any$ O O $any[]$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O
import { platformBrowserDynamic } from 's' ; import { AppModule } from 's' ; platformBrowserDynamic ( ) . bootstrapModule ( AppModule ) ;	O O $any$ O O O O O O $any$ O O O O $any$ O O O $any$ O $any$ O O
'js' 's' ; importScripts ( 's' ) ; self . toolbox . options . cache = { name : 's' } ; self . toolbox . precache ( [ 's' , 's' , 's' , 's' , 's' , 's' ] ) ; self . toolbox . router . any ( 's' , self . toolbox . cacheFirst ) ; self . toolbox . router . default = self . toolbox . networkFirst ;	O O O $void$ O O O O $complex$ O $any$ O $any$ O $any$ O O $string$ O O O O $complex$ O $any$ O $any$ O O O O O O O O O O O O O O O O $complex$ O $any$ O $any$ O $any$ O O O $complex$ O $any$ O $any$ O O $complex$ O $any$ O $any$ O $any$ O $complex$ O $any$ O $any$ O
import { Component } from 's' ; import { Platform } from 's' ; import { StatusBar } from 's' ; import { SplashScreen } from 's' ; @ Component ( { templateUrl : 's' } ) export class MyApp { rootPage : any = 's' ; constructor ( platform , statusBar , splashScreen ) { platform . ready ( ) . then ( ( ) => { statusBar . styleDefault ( ) ; splashScreen . hide ( ) ; } ) ; } }	O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O O O O $any$ O $any$ O O O O O O O $Platform$ O $StatusBar$ O $SplashScreen$ O O $any$ O $any$ O O O $any$ O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O
import { NgModule , ErrorHandler } from 's' ; import { BrowserModule } from 's' ; import { IonicApp , IonicModule , IonicErrorHandler } from 's' ; import { MyApp } from 's' ; import { StatusBar } from 's' ; import { SplashScreen } from 's' ; import { CalendarModule } from "s" ; @ NgModule ( { declarations : [ MyApp , ] , imports : [ BrowserModule , IonicModule . forRoot ( MyApp ) , CalendarModule ] , bootstrap : [ IonicApp ] , entryComponents : [ MyApp , ] , providers : [ StatusBar , SplashScreen , { provide : ErrorHandler , useClass : IonicErrorHandler } ] } ) export class AppModule { }	O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $complex$ O O $any$ O O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O O $any[]$ O O $any$ O O $complex$ O O $any$ O O O $any[]$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O
import { platformBrowserDynamic } from 's' ; import { AppModule } from 's' ; platformBrowserDynamic ( ) . bootstrapModule ( AppModule ) ;	O O $any$ O O O O O O $any$ O O O O $any$ O O O $any$ O $any$ O O
import { Component } from 's' ; import { IonicPage , NavController , NavParams } from 's' ; @ IonicPage ( ) @ Component ( { selector : 's' , templateUrl : 's' , } ) export class ComponentsModePage { date : string ; type = 's' ; constructor ( public navCtrl , public navParams ) { } onChange ( $event ) { console . log ( $event ) ; } ionViewDidLoad ( ) { console . log ( 's' ) ; } }	O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O $any$ O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O $string$ O O O $string$ O O O O O O $NavController$ O O $NavParams$ O O O $void$ O $any$ O O $Console$ O $void$ O $any$ O O O $void$ O O O $Console$ O $void$ O O O O O O
import { NgModule } from 's' ; import { IonicPageModule } from 's' ; import { ComponentsModePage } from 's' ; import { CalendarModule } from "s" ; @ NgModule ( { declarations : [ ComponentsModePage , ] , imports : [ IonicPageModule . forChild ( ComponentsModePage ) , CalendarModule , ] , } ) export class ComponentsModePageModule { }	O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $complex$ O O $any$ O O O $any[]$ O O $any$ O $any$ O $any$ O O $any$ O O O O O O O $any$ O O
import { Component } from 's' ; import { IonicPage , ModalController } from 's' ; import { CalendarModal , CalendarModalOptions } from "s" ; @ IonicPage ( ) @ Component ( { selector : 's' , templateUrl : 's' , } ) export class ModalModePage { constructor ( public modalCtrl , ) { } openCalendar ( ) { const options = { title : 's' , } ; let myCalendar = this . modalCtrl . create ( CalendarModal , { options : options } ) ; myCalendar . present ( ) ; myCalendar . onDidDismiss ( ( date , type ) => { console . log ( type ) ; console . log ( date ) ; } ) } ionViewDidLoad ( ) { console . log ( 's' ) ; } }	O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O $any$ O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O O O O $ModalController$ O O O O $void$ O O O O $CalendarModalOptions$ O O $string$ O O O O O O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O O $Console$ O $void$ O $any$ O O $Console$ O $void$ O $any$ O O O O O $void$ O O O $Console$ O $void$ O O O O O O
import { NgModule } from 's' ; import { IonicPageModule } from 's' ; import { ModalModePage } from 's' ; @ NgModule ( { declarations : [ ModalModePage , ] , entryComponents : [ ] , imports : [ IonicPageModule . forChild ( ModalModePage ) , ] , } ) export class ModalModePageModule { }	O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $complex$ O O $any$ O O O $undefined[]$ O O O O $any[]$ O O $any$ O $any$ O $any$ O O O O O O O O $any$ O O
import { Component } from 's' ; import { IonicPage } from "s" ; @ IonicPage ( ) @ Component ( { templateUrl : 's' } ) export class TabsPage { 0 = 's' ; 0 = 's' ; constructor ( ) { } }	O O $any$ O O O O O O $any$ O O O O O $any$ O O O $any$ O O $string$ O O O O O O $any$ O $string$ O O O $string$ O O O O O O O O O
import { NgModule } from 's' ; import { IonicPageModule } from 's' ; import { TabsPage } from 's' ; @ NgModule ( { declarations : [ TabsPage ] , imports : [ IonicPageModule . forChild ( TabsPage ) , ] , exports : [ TabsPage ] } ) export class TabsPageModule { }	O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $complex$ O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O O O O $complex$ O O $any$ O O O O O $any$ O O
'js' 's' ; importScripts ( 's' ) ; self . toolbox . options . cache = { name : 's' } ; self . toolbox . precache ( [ 's' , 's' , 's' , 's' , 's' , 's' ] ) ; self . toolbox . router . any ( 's' , self . toolbox . cacheFirst ) ; self . toolbox . router . default = self . toolbox . networkFirst ;	O O O $void$ O O O O $complex$ O $any$ O $any$ O $any$ O O $string$ O O O O $complex$ O $any$ O $any$ O O O O O O O O O O O O O O O O $complex$ O $any$ O $any$ O $any$ O O O $complex$ O $any$ O $any$ O O $complex$ O $any$ O $any$ O $any$ O $complex$ O $any$ O $any$ O
'js' const { SpecReporter } = require ( 's' ) ; exports . config = { allScriptsTimeout : 0 , specs : [ 's' ] , capabilities : { 's' : 's' } , directConnect : true , baseUrl : 's' , framework : 's' , jasmineNodeOpts : { showColors : true , defaultTimeoutInterval : 0 , print : function ( ) { } } , onPrepare ( ) { require ( 's' ) . register ( { project : 's' } ) ; jasmine . getEnv ( ) . addReporter ( new SpecReporter ( { spec : { displayStacktrace : true } } ) ) ; } } ;	O O O $any$ O O $any$ O O O O $complex$ O $complex$ O O $number$ O O O $string[]$ O O O O O $complex$ O O O O O O O $boolean$ O O O $string$ O O O $string$ O O O $complex$ O O $boolean$ O O O $number$ O O O $void$ O O O O O O O O $void$ O O O $any$ O O O O $any$ O O $string$ O O O O O $any$ O $any$ O O O $any$ O O $any$ O O $complex$ O O $boolean$ O O O O O O O O O O
import { browser , by , element } from 's' ; export class AppPage { navigateTo ( ) { return browser . get ( 's' ) ; } getParagraphText ( ) { return element ( by . deepCss ( 's' ) ) . getText ( ) ; } }	O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O $any$ O O O O O $any$ O O O O O
import { AppPage } from 's' ; describe ( 's' , ( ) => { let page ; beforeEach ( ( ) => { page = new AppPage ( ) ; } ) ; it ( 's' , ( ) => { page . navigateTo ( ) ; expect ( page . getParagraphText ( ) ) . toContain ( 's' ) ; } ) ; } ) ;	O O $any$ O O O O $any$ O O O O O O O O $AppPage$ O $any$ O O O O O $AppPage$ O O $any$ O O O O O O $any$ O O O O O O O $AppPage$ O $any$ O O O $any$ O $AppPage$ O $any$ O O O O $any$ O O O O O O O O O O
import { NgModule } from 's' ; import { Routes , RouterModule } from 's' ; const routes = [ { path : 's' , redirectTo : 's' , pathMatch : 's' } , { path : 's' , loadChildren : 's' } , ] ; @ NgModule ( { imports : [ RouterModule . forRoot ( routes ) ] , exports : [ RouterModule ] } ) export class AppRoutingModule { }	O O $any$ O O O O O O $any$ O $any$ O O O O O $Routes$ O O O $string$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O O O $any[]$ O O $any$ O O O O O $any$ O O
import { Component } from 's' ; import { Platform } from 's' ; import { SplashScreen } from 's' ; import { StatusBar } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' } ) export class AppComponent { constructor ( private platform , private splashScreen , private statusBar ) { this . initializeApp ( ) ; } initializeApp ( ) { this . platform . ready ( ) . then ( ( ) => { this . statusBar . styleDefault ( ) ; this . splashScreen . hide ( ) ; } ) ; } }	O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O O O O $Platform$ O O $SplashScreen$ O O $StatusBar$ O O O O $void$ O O O O $void$ O O O O O $any$ O $any$ O O O $any$ O O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O O O O
import { CUSTOM_ELEMENTS_SCHEMA } from 's' ; import { TestBed , async } from 's' ; import { Platform } from 's' ; import { SplashScreen } from 's' ; import { StatusBar } from 's' ; import { AppComponent } from 's' ; describe ( 's' , ( ) => { let statusBarSpy , splashScreenSpy , platformReadySpy , platformSpy ; beforeEach ( async ( ( ) => { statusBarSpy = jasmine . createSpyObj ( 's' , [ 's' ] ) ; splashScreenSpy = jasmine . createSpyObj ( 's' , [ 's' ] ) ; platformReadySpy = Promise . resolve ( ) ; platformSpy = jasmine . createSpyObj ( 's' , { ready : platformReadySpy } ) ; TestBed . configureTestingModule ( { declarations : [ AppComponent ] , schemas : [ CUSTOM_ELEMENTS_SCHEMA ] , providers : [ { provide : StatusBar , useValue : statusBarSpy } , { provide : SplashScreen , useValue : splashScreenSpy } , { provide : Platform , useValue : platformSpy } , ] , } ) . compileComponents ( ) ; } ) ) ; it ( 's' , ( ) => { const fixture = TestBed . createComponent ( AppComponent ) ; const app = fixture . debugElement . componentInstance ; expect ( app ) . toBeTruthy ( ) ; } ) ; it ( 's' , async ( ) => { TestBed . createComponent ( AppComponent ) ; expect ( platformSpy . ready ) . toHaveBeenCalled ( ) ; await platformReadySpy ; expect ( statusBarSpy . styleDefault ) . toHaveBeenCalled ( ) ; expect ( splashScreenSpy . hide ) . toHaveBeenCalled ( ) ; } ) ; } ) ;	O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O O O O O $any$ O $any$ O $any$ O O O O O O O O $any$ O $PromiseConstructor$ O $complex$ O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O $complex$ O O $any$ O O $any[]$ O O $any$ O O $complex$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O O O O O O O O
import { AnimationBuilder } from 's' ; export interface CalendarOriginal { time : number ; date : Date ; year : number ; month : number ; firstWeek : number ; howManyDays : number ; } export interface CalendarDay { time : number ; isToday : boolean ; selected : boolean ; disable : boolean ; cssClass : string ; isLastMonth ? : boolean ; isNextMonth ? : boolean ; title ? : string ; subTitle ? : string ; marked ? : boolean ; style ? : { title ? : string ; subTitle ? : string ; } ; isFirst ? : boolean ; isLast ? : boolean ; } export class CalendarMonth { original : CalendarOriginal ; days : Array < CalendarDay | void > ; } export interface DayConfig { date : Date ; marked ? : boolean ; disable ? : boolean ; title ? : string ; subTitle ? : string ; cssClass ? : string ; } export interface ModalOptions { showBackdrop ? : boolean ; backdropDismiss ? : boolean ; enterAnimation ? : AnimationBuilder ; leaveAnimation ? : AnimationBuilder ; } export interface CalendarModalOptions extends CalendarOptions { autoDone ? : boolean ; format ? : string ; cssClass ? : string ; id ? : string ; isSaveHistory ? : boolean ; closeLabel ? : string ; doneLabel ? : string ; clearLabel ? : string ; closeIcon ? : boolean ; doneIcon ? : boolean ; canBackwardsSelected ? : boolean ; title ? : string ; defaultScrollTo ? : Date ; defaultDate ? : DefaultDate ; defaultDates ? : DefaultDate [ ] ; defaultDateRange ? : { from : DefaultDate ; to ? : DefaultDate } | null ; step ? : number ; showYearPicker ? : boolean ; defaultEndDateToStartDate ? : boolean ; } export interface CalendarOptions { from ? : Date | number ; to ? : Date | number ; pickMode ? : string ; weekStart ? : number ; disableWeeks ? : Array < number > ; weekdays ? : Array < string > ; monthFormat ? : string ; color ? : string ; defaultTitle ? : string ; defaultSubtitle ? : string ; daysConfig ? : Array < DayConfig > ; showAdjacentMonthDay ? : boolean ; } export interface CalendarComponentOptions extends CalendarOptions { showToggleButtons ? : boolean ; showMonthPicker ? : boolean ; monthPickerFormat ? : string [ ] ; } export class CalendarResult { time : number ; unix : number ; dateObj : Date ; string : string ; years : number ; months : number ; date : number ; } export class CalendarComponentMonthChange { oldMonth : CalendarResult ; newMonth : CalendarResult ; } export type DefaultDate = Date | string | number | null ; export type Colors = 's' | 's' | 's' | 's' | 's' | string ; export type PickMode = 's' | 's' | 's' ; export type CalendarComponentTypeProperty = 's' | 's' | 's' | 's' | 's' ; export type CalendarComponentPayloadTypes = string | Date | number | { } ;	O O $any$ O O O O O O $any$ O $number$ O O O $Date$ O $DateConstructor$ O $number$ O O O $number$ O O O $number$ O O O $number$ O O O O O O $any$ O $number$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $string$ O O O $boolean$ O O O O $boolean$ O O O O $string$ O O O O $string$ O O O O $boolean$ O O O O $complex$ O O O $string$ O O O O $string$ O O O O O O $boolean$ O O O O $boolean$ O O O O O O O $any$ O $CalendarOriginal$ O $any$ O $complex$ O $ArrayConstructor$ O $any$ O O O O O O O $any$ O $Date$ O $DateConstructor$ O $boolean$ O O O O $boolean$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O O O O $any$ O $boolean$ O O O O $boolean$ O O O O $any$ O O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O $boolean$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $boolean$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $boolean$ O O O O $boolean$ O O O O $boolean$ O O O O $string$ O O O O $Date$ O O $DateConstructor$ O $complex$ O O $any$ O $complex$ O O $any$ O O O $complex$ O O O $complex$ O $any$ O $complex$ O O $any$ O O O O $number$ O O O O $boolean$ O O O O $boolean$ O O O O O O O $any$ O $complex$ O O $DateConstructor$ O O O $complex$ O O $DateConstructor$ O O O $string$ O O O O $number$ O O O O $number[]$ O O $ArrayConstructor$ O O O O $string[]$ O O $ArrayConstructor$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $DayConfig[]$ O O $ArrayConstructor$ O $any$ O O $boolean$ O O O O O O O $any$ O $any$ O $boolean$ O O O O $boolean$ O O O O $string[]$ O O O O O O O O O $any$ O $number$ O O O $number$ O O O $Date$ O $DateConstructor$ O $string$ O O O $number$ O O O $number$ O O O $number$ O O O O O O $any$ O $CalendarResult$ O $any$ O $CalendarResult$ O $any$ O O O O $any$ O $DateConstructor$ O O O O O O O O O $any$ O O O O O O O O O O O O O O O $any$ O O O O O O O O O $any$ O O O O O O O O O O O O O $any$ O O O $DateConstructor$ O O O O O O
export const defaults = { DATE_FORMAT : 's' , COLOR : 's' , WEEKS_FORMAT : [ 's' , 's' , 's' , 's' , 's' , 's' , 's' ] , MONTH_FORMAT : [ 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' ] } ; export const pickModes = { SINGLE : 's' , RANGE : 's' , MULTI : 's' } ;	O O $complex$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O O O O O O O O O O $string[]$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O O
import { InjectionToken } from 's' ; import { CalendarModalOptions } from 's' ; export const DEFAULT_CALENDAR_OPTIONS = new InjectionToken < CalendarModalOptions > ( 's' ) ;	O O $any$ O O O O O O $any$ O O O O O O $any$ O O $any$ O $any$ O O O O O
import { Inject , Injectable , Optional } from 's' ; import * as moment from 's' ; import { CalendarOriginal , CalendarDay , CalendarMonth , CalendarModalOptions , CalendarResult , DayConfig , } from 's' ; import { defaults , pickModes } from 's' ; import { DEFAULT_CALENDAR_OPTIONS } from 's' ; const isBoolean = ( input ) => input === true || input === false ; @ Injectable ( ) export class CalendarService { private readonly defaultOpts : CalendarModalOptions ; constructor ( @ Optional ( ) @ Inject ( DEFAULT_CALENDAR_OPTIONS ) defaultOpts ) { this . defaultOpts = defaultOpts ; } get DEFAULT_STEP ( ) { return 0 ; } safeOpt ( calendarOptions = { } ) { const _disableWeeks : number [ ] = [ ] ; const _daysConfig : DayConfig [ ] = [ ] ; let { from = new Date ( ) , to = 0 , weekStart = 0 , step = this . DEFAULT_STEP , id = 's' , cssClass = 's' , closeLabel = 's' , doneLabel = 's' , monthFormat = 's' , title = 's' , defaultTitle = 's' , defaultSubtitle = 's' , autoDone = false , canBackwardsSelected = false , closeIcon = false , doneIcon = false , showYearPicker = false , isSaveHistory = false , pickMode = pickModes . SINGLE , color = defaults . COLOR , weekdays = defaults . WEEKS_FORMAT , daysConfig = _daysConfig , disableWeeks = _disableWeeks , showAdjacentMonthDay = true , defaultEndDateToStartDate = false , clearLabel = null , } = { ... this . defaultOpts , ... calendarOptions } ; return { id , from , to , pickMode , autoDone , color , cssClass , weekStart , closeLabel , closeIcon , doneLabel , doneIcon , canBackwardsSelected , isSaveHistory , disableWeeks , monthFormat , title , weekdays , daysConfig , step , showYearPicker , defaultTitle , defaultSubtitle , defaultScrollTo : calendarOptions . defaultScrollTo || from , defaultDate : calendarOptions . defaultDate || null , defaultDates : calendarOptions . defaultDates || null , defaultDateRange : calendarOptions . defaultDateRange || null , showAdjacentMonthDay , defaultEndDateToStartDate , clearLabel } ; } createOriginalCalendar ( time ) { const date = new Date ( time ) ; const year = date . getFullYear ( ) ; const month = date . getMonth ( ) ; const firstWeek = new Date ( year , month , 0 ) . getDay ( ) ; const howManyDays = moment ( time ) . daysInMonth ( ) ; return { year , month , firstWeek , howManyDays , time : new Date ( year , month , 0 ) . getTime ( ) , date : new Date ( time ) , } ; } findDayConfig ( day , opt ) { if ( opt . daysConfig . length <= 0 ) return null ; return opt . daysConfig . find ( n => day . isSame ( n . date , 's' ) ) ; } createCalendarDay ( time , opt , month ? ) { let _time = moment ( time ) ; let date = moment ( time ) ; let isToday = moment ( ) . isSame ( _time , 's' ) ; let dayConfig = this . findDayConfig ( _time , opt ) ; let _rangeBeg = moment ( opt . from ) . valueOf ( ) ; let _rangeEnd = moment ( opt . to ) . valueOf ( ) ; let isBetween = true ; let disableWee = opt . disableWeeks . indexOf ( _time . toDate ( ) . getDay ( ) ) !== - 0 ; if ( _rangeBeg > 0 && _rangeEnd > 0 ) { if ( ! opt . canBackwardsSelected ) { isBetween = ! _time . isBetween ( _rangeBeg , _rangeEnd , 's' , 's' ) ; } else { isBetween = moment ( _time ) . isBefore ( _rangeBeg ) ? false : isBetween ; } } else if ( _rangeBeg > 0 && _rangeEnd === 0 ) { if ( ! opt . canBackwardsSelected ) { let _addTime = _time . add ( 0 , 's' ) ; isBetween = ! _addTime . isAfter ( _rangeBeg ) ; } else { isBetween = false ; } } let _disable = false ; if ( dayConfig && isBoolean ( dayConfig . disable ) ) { _disable = dayConfig . disable ; } else { _disable = disableWee || isBetween ; } let title = new Date ( time ) . getDate ( ) . toString ( ) ; if ( dayConfig && dayConfig . title ) { title = dayConfig . title ; } else if ( opt . defaultTitle ) { title = opt . defaultTitle ; } let subTitle = 's' ; if ( dayConfig && dayConfig . subTitle ) { subTitle = dayConfig . subTitle ; } else if ( opt . defaultSubtitle ) { subTitle = opt . defaultSubtitle ; } return { time , isToday , title , subTitle , selected : false , isLastMonth : date . month ( ) < month , isNextMonth : date . month ( ) > month , marked : dayConfig ? dayConfig . marked || false : false , cssClass : dayConfig ? dayConfig . cssClass || 's' : 's' , disable : _disable , isFirst : date . date ( ) === 0 , isLast : date . date ( ) === date . daysInMonth ( ) , } ; } createCalendarMonth ( original , opt ) { let days < CalendarDay > = new Array ( 0 ) . fill ( null ) ; let len = original . howManyDays ; for ( let i = original . firstWeek ; i < len + original . firstWeek ; i ++ ) { let itemTime = new Date ( original . year , original . month , i - original . firstWeek + 0 ) . getTime ( ) ; days [ i ] = this . createCalendarDay ( itemTime , opt ) ; } let weekStart = opt . weekStart ; if ( weekStart === 0 ) { if ( days [ 0 ] === null ) { days . shift ( ) ; } else { days . unshift ( ... new Array ( 0 ) . fill ( null ) ) ; } } if ( opt . showAdjacentMonthDay ) { const _booleanMap = days . map ( e => ! ! e ) ; const thisMonth = moment ( original . time ) . month ( ) ; let startOffsetIndex = _booleanMap . indexOf ( true ) - 0 ; let endOffsetIndex = _booleanMap . lastIndexOf ( true ) + 0 ; for ( startOffsetIndex ; startOffsetIndex >= 0 ; startOffsetIndex -- ) { const dayBefore = moment ( days [ startOffsetIndex + 0 ] . time ) . clone ( ) . subtract ( 0 , 's' ) ; days [ startOffsetIndex ] = this . createCalendarDay ( dayBefore . valueOf ( ) , opt , thisMonth ) ; } if ( ! ( _booleanMap . length % 0 === 0 && _booleanMap [ _booleanMap . length - 0 ] ) ) { for ( endOffsetIndex ; endOffsetIndex < days . length + ( endOffsetIndex % 0 ) ; endOffsetIndex ++ ) { const dayAfter = moment ( days [ endOffsetIndex - 0 ] . time ) . clone ( ) . add ( 0 , 's' ) ; days [ endOffsetIndex ] = this . createCalendarDay ( dayAfter . valueOf ( ) , opt , thisMonth ) ; } } } return { days , original : original , } ; } createMonthsByPeriod ( startTime , monthsNum , opt ) < CalendarMonth > { let _array < CalendarMonth > = [ ] ; let _start = new Date ( startTime ) ; let _startMonth = new Date ( _start . getFullYear ( ) , _start . getMonth ( ) , 0 ) . getTime ( ) ; for ( let i = 0 ; i < monthsNum ; i ++ ) { let time = moment ( _startMonth ) . add ( i , 's' ) . valueOf ( ) ; let originalCalendar = this . createOriginalCalendar ( time ) ; _array . push ( this . createCalendarMonth ( originalCalendar , opt ) ) ; } return _array ; } wrapResult ( original : CalendarDay [ ] , pickMode ) { let result ; switch ( pickMode ) { case pickModes . SINGLE : result = this . multiFormat ( original [ 0 ] . time ) ; break ; case pickModes . RANGE : result = { from : this . multiFormat ( original [ 0 ] . time ) , to : this . multiFormat ( ( original [ 0 ] || original [ 0 ] ) . time ) , } ; break ; case pickModes . MULTI : result = original . map ( e => this . multiFormat ( e . time ) ) ; break ; default : result = original ; } return result ; } multiFormat ( time ) { const _moment = moment ( time ) ; return { time : _moment . valueOf ( ) , unix : _moment . unix ( ) , dateObj : _moment . toDate ( ) , string : _moment . format ( defaults . DATE_FORMAT ) , years : _moment . year ( ) , months : _moment . month ( ) + 0 , date : _moment . date ( ) , } ; } }	O O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $complex$ O $complex$ O O O O O O $any$ O O O O O $boolean$ O O $any$ O O $any$ O O O $any$ O O O O $any$ O O O O $any$ O O O $CalendarModalOptions$ O $any$ O O O O $any$ O O O $any$ O $any$ O $CalendarModalOptions$ O O O O $CalendarModalOptions$ O $CalendarModalOptions$ O O O $number$ O O O O O O O $CalendarModalOptions$ O $any$ O O O O O O $number[]$ O O O O O O O O O $DayConfig[]$ O $any$ O O O O O O O O $any$ O O $DateConstructor$ O O O $any$ O O O $any$ O O O $any$ O O O $number$ O $any$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O $complex$ O $string$ O $any$ O $complex$ O $string$ O $any$ O $complex$ O $string[]$ O $any$ O $DayConfig[]$ O $any$ O $number[]$ O $any$ O O O $any$ O O O $any$ O O O O O O O O O $CalendarModalOptions$ O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $CalendarOriginal$ O $number$ O O O $Date$ O O $DateConstructor$ O $number$ O O O $number$ O $Date$ O $number$ O O O O $number$ O $Date$ O $number$ O O O O $number$ O O $DateConstructor$ O $number$ O $number$ O O O O $number$ O O O O $any$ O $any$ O $number$ O O $any$ O O O O O $number$ O $number$ O $number$ O $any$ O $number$ O O $DateConstructor$ O $number$ O $number$ O O O O $number$ O O O $Date$ O O $DateConstructor$ O $number$ O O O O O $any$ O $any$ O $CalendarModalOptions$ O O O O $CalendarModalOptions$ O $DayConfig[]$ O $number$ O O O O O O O $CalendarModalOptions$ O $DayConfig[]$ O $complex$ O $DayConfig$ O $any$ O $any$ O $DayConfig$ O $Date$ O O O O O O $CalendarDay$ O $number$ O $CalendarModalOptions$ O $number$ $number$ O O O $any$ O $any$ O $number$ O O O $any$ O $any$ O $number$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O $CalendarModalOptions$ O O O $any$ O $any$ O $CalendarModalOptions$ O $complex$ O O $any$ O O O O $any$ O $any$ O $CalendarModalOptions$ O $complex$ O O $any$ O O O O $boolean$ O O O O $boolean$ O $CalendarModalOptions$ O $number[]$ O $number$ O $any$ O $any$ O O O $any$ O O O O O O O O O $any$ O O O $any$ O O O O O O O $CalendarModalOptions$ O $boolean$ O O $boolean$ O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O $boolean$ O $any$ O $any$ O O $any$ O $any$ O O O O $true$ O O O O O O $any$ O O O $any$ O O O O O O O $CalendarModalOptions$ O $boolean$ O O O $any$ O $any$ O $any$ O O O O O O $boolean$ O O $any$ O $any$ O $any$ O O O O O $boolean$ O O O O O O $boolean$ O O O O O $any$ O $boolean$ O $any$ O $any$ O O O $boolean$ O $any$ O $any$ O O O O $boolean$ O $boolean$ O $boolean$ O O O $string$ O O $DateConstructor$ O $number$ O O $number$ O O O $string$ O O O O O $any$ O $any$ O $any$ O O $string$ O $any$ O $any$ O O O O O $CalendarModalOptions$ O $string$ O O $string$ O $CalendarModalOptions$ O $string$ O O O $string$ O O O O O $any$ O $any$ O $any$ O O $string$ O $any$ O $any$ O O O O O $CalendarModalOptions$ O $string$ O O $string$ O $CalendarModalOptions$ O $string$ O O O O $number$ O $any$ O $string$ O $string$ O $false$ O O O $boolean$ O $any$ O $any$ O O O $number$ O $boolean$ O $any$ O $any$ O O O $number$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $boolean$ O $boolean$ O $boolean$ O $any$ O $any$ O O O O O $boolean$ O $any$ O $any$ O O O $any$ O $any$ O O O O O O $CalendarMonth$ O $CalendarOriginal$ O $CalendarModalOptions$ O O O $Array$ O $any$ O O O $ArrayConstructor$ O O O O $any[]$ O O O O O $number$ O $CalendarOriginal$ O $number$ O O O O $number$ O $CalendarOriginal$ O $number$ O $number$ O $number$ O $CalendarOriginal$ O $number$ O $number$ O O O O $number$ O O $DateConstructor$ O $CalendarOriginal$ O $number$ O $CalendarOriginal$ O $number$ O $number$ O $CalendarOriginal$ O $number$ O O O O $number$ O O O $CalendarDay[]$ O $number$ O O O O $CalendarDay$ O $number$ O $CalendarModalOptions$ O O O O $number$ O $CalendarModalOptions$ O $number$ O O O $number$ O O O O O O $CalendarDay[]$ O O O O O O O $CalendarDay[]$ O $CalendarDay$ O O O O O O $CalendarDay[]$ O $number$ O O O $ArrayConstructor$ O O O O $any[]$ O O O O O O O O O $CalendarModalOptions$ O $boolean$ O O O $boolean[]$ O $CalendarDay[]$ O $U[]$ O $CalendarDay$ O O O $CalendarDay$ O O O $any$ O $any$ O $CalendarOriginal$ O $number$ O O $any$ O O O O $number$ O $boolean[]$ O $number$ O O O O O O O $number$ O $boolean[]$ O $number$ O O O O O O O O $number$ O $number$ O O O $number$ O O O O $any$ O $any$ O $CalendarDay[]$ O $number$ O O O O $number$ O O $any$ O O O $any$ O O O O O O $CalendarDay[]$ O $number$ O O O O $CalendarDay$ O $any$ O $any$ O O O $CalendarModalOptions$ O $any$ O O O O O O O $boolean[]$ O $number$ O O O O O $boolean[]$ O $boolean[]$ O $number$ O O O O O O O O $number$ O $number$ O $CalendarDay[]$ O $number$ O O $number$ O O O O $number$ O O O O $any$ O $any$ O $CalendarDay[]$ O $number$ O O O O $number$ O O $any$ O O O $any$ O O O O O O $CalendarDay[]$ O $number$ O O O O $CalendarDay$ O $any$ O $any$ O O O $CalendarModalOptions$ O $any$ O O O O O O O $CalendarDay[]$ O $CalendarOriginal$ O $CalendarOriginal$ O O O O $Array$ O $number$ O $number$ O $CalendarModalOptions$ O O $any$ O O O $Array$ O $any$ O O O O O O $Date$ O O $DateConstructor$ O $number$ O O O $number$ O O $DateConstructor$ O $Date$ O $number$ O O O $Date$ O $number$ O O O O O O $number$ O O O O O O $number$ O O O $number$ O $number$ O $number$ O O O O $any$ O $any$ O $number$ O O $any$ O $number$ O O O O $any$ O O O O $CalendarOriginal$ O O O $CalendarOriginal$ O $any$ O O $CalendarMonth[]$ O $number$ O O O $CalendarMonth$ O $CalendarOriginal$ O $CalendarModalOptions$ O O O O O $CalendarMonth[]$ O O $any$ O $CalendarDay[]$ O $any$ O O O $string$ O O O $any$ O O O $string$ O O O $complex$ O $string$ O $any$ O O O $CalendarResult$ O $CalendarDay[]$ O O O O $number$ O O O O O $complex$ O $string$ O $any$ O O $CalendarResult$ O O O $CalendarResult$ O $CalendarDay[]$ O O O O $number$ O O $CalendarResult$ O O O $CalendarResult$ O O $CalendarDay[]$ O O O O $CalendarDay[]$ O O O O O $number$ O O O O O O O $complex$ O $string$ O $any$ O $CalendarDay[]$ O $U[]$ O $CalendarDay$ O O O $CalendarResult$ O $CalendarDay$ O $number$ O O O O O O O $any$ O $CalendarDay[]$ O O O $any$ O O $CalendarResult$ O $number$ O O O $any$ O $any$ O $number$ O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $complex$ O $string$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O O O O
import { Component , ViewChild , ElementRef , ChangeDetectorRef , 0 , OnInit , Input , AfterViewInit , HostBinding , } from 's' ; import { NavParams , ModalController , IonContent } from 's' ; import { CalendarDay , CalendarMonth , CalendarModalOptions } from 's' ; import { CalendarService } from 's' ; import * as moment from 's' ; import { pickModes } from 's' ; const NUM_OF_MONTHS_TO_CREATE = 0 ; @ Component ( { selector : 's' , styleUrls : [ 's' ] , template : `template` , } ) export class CalendarModal implements OnInit , AfterViewInit { @ ViewChild ( IonContent ) content : IonContent ; @ ViewChild ( 's' ) monthsEle : ElementRef ; @ HostBinding ( 's' ) ionPage = true ; @ Input ( ) options : CalendarModalOptions ; datesTemp : Array < CalendarDay > = [ null , null ] ; calendarMonths : Array < CalendarMonth > ; step : number ; showYearPicker : boolean ; year : number ; years : Array < number > ; _scrollLock = true ; _d : CalendarModalOptions ; actualFirstTime : number ; constructor ( private _renderer , public _elementRef , public params , public modalCtrl , public ref , public calSvc ) { } ngOnInit ( ) { this . init ( ) ; this . initDefaultDate ( ) ; } ngAfterViewInit ( ) { this . findCssClass ( ) ; if ( this . _d . canBackwardsSelected ) this . backwardsMonth ( ) ; this . scrollToDefaultDate ( ) ; } init ( ) { this . _d = this . calSvc . safeOpt ( this . options ) ; this . _d . showAdjacentMonthDay = false ; this . step = this . _d . step ; if ( this . step < this . calSvc . DEFAULT_STEP ) { this . step = this . calSvc . DEFAULT_STEP ; } this . calendarMonths = this . calSvc . createMonthsByPeriod ( moment ( this . _d . from ) . valueOf ( ) , this . findInitMonthNumber ( this . _d . defaultScrollTo ) + this . step , this . _d ) ; } initDefaultDate ( ) { const { pickMode , defaultDate , defaultDateRange , defaultDates } = this . _d ; switch ( pickMode ) { case pickModes . SINGLE : if ( defaultDate ) { this . datesTemp [ 0 ] = this . calSvc . createCalendarDay ( this . _getDayTime ( defaultDate ) , this . _d ) ; } break ; case pickModes . RANGE : if ( defaultDateRange ) { if ( defaultDateRange . from ) { this . datesTemp [ 0 ] = this . calSvc . createCalendarDay ( this . _getDayTime ( defaultDateRange . from ) , this . _d ) ; } if ( defaultDateRange . to ) { this . datesTemp [ 0 ] = this . calSvc . createCalendarDay ( this . _getDayTime ( defaultDateRange . to ) , this . _d ) ; } } break ; case pickModes . MULTI : if ( defaultDates && defaultDates . length ) { this . datesTemp = defaultDates . map ( e => this . calSvc . createCalendarDay ( this . _getDayTime ( e ) , this . _d ) ) ; } break ; default : this . datesTemp = [ null , null ] ; } } findCssClass ( ) { const { cssClass } = this . _d ; if ( cssClass ) { cssClass . split ( 's' ) . forEach ( ( _class ) => { if ( _class . trim ( ) !== 's' ) this . _renderer . addClass ( this . _elementRef . nativeElement , _class ) ; } ) ; } } onChange ( data ) { const { pickMode , autoDone } = this . _d ; this . datesTemp = data ; this . ref . detectChanges ( ) ; if ( pickMode !== pickModes . MULTI && autoDone && this . canDone ( ) ) { this . done ( ) ; } this . repaintDOM ( ) ; } onCancel ( ) { this . modalCtrl . dismiss ( null , 's' ) ; } done ( ) { const { pickMode } = this . _d ; this . modalCtrl . dismiss ( this . calSvc . wrapResult ( this . datesTemp , pickMode ) , 's' ) ; } canDone ( ) { if ( ! Array . isArray ( this . datesTemp ) ) { return false ; } const { pickMode , defaultEndDateToStartDate } = this . _d ; switch ( pickMode ) { case pickModes . SINGLE : return ! ! ( this . datesTemp [ 0 ] && this . datesTemp [ 0 ] . time ) ; case pickModes . RANGE : if ( defaultEndDateToStartDate ) { return ! ! ( this . datesTemp [ 0 ] && this . datesTemp [ 0 ] . time ) ; } return ! ! ( this . datesTemp [ 0 ] && this . datesTemp [ 0 ] ) && ! ! ( this . datesTemp [ 0 ] . time && this . datesTemp [ 0 ] . time ) ; case pickModes . MULTI : return this . datesTemp . length > 0 && this . datesTemp . every ( e => ! ! e && ! ! e . time ) ; default : return false ; } } clear ( ) { this . datesTemp = [ null , null ] ; } canClear ( ) { return ! ! this . datesTemp [ 0 ] ; } nextMonth ( event ) { const len = this . calendarMonths . length ; const final = this . calendarMonths [ len - 0 ] ; const nextTime = moment ( final . original . time ) . add ( 0 , 's' ) . valueOf ( ) ; const rangeEnd = this . _d . to ? moment ( this . _d . to ) . subtract ( 0 , 's' ) : 0 ; if ( len <= 0 || ( rangeEnd !== 0 && moment ( final . original . time ) . isAfter ( rangeEnd ) ) ) { event . target . disabled = true ; return ; } this . calendarMonths . push ( ... this . calSvc . createMonthsByPeriod ( nextTime , NUM_OF_MONTHS_TO_CREATE , this . _d ) ) ; event . target . complete ( ) ; this . repaintDOM ( ) ; } backwardsMonth ( ) { const first = this . calendarMonths [ 0 ] ; if ( first . original . time <= 0 ) { this . _d . canBackwardsSelected = false ; return ; } const firstTime = ( this . actualFirstTime = moment ( first . original . time ) . subtract ( NUM_OF_MONTHS_TO_CREATE , 's' ) . valueOf ( ) ) ; this . calendarMonths . unshift ( ... this . calSvc . createMonthsByPeriod ( firstTime , NUM_OF_MONTHS_TO_CREATE , this . _d ) ) ; this . ref . detectChanges ( ) ; this . repaintDOM ( ) ; } scrollToDate ( date ) { const defaultDateIndex = this . findInitMonthNumber ( date ) ; const monthElement = this . monthsEle . nativeElement . children [ `template` ] ; const domElemReadyWaitTime = 0 ; setTimeout ( ( ) => { const defaultDateMonth = monthElement ? monthElement . offsetTop : 0 ; if ( defaultDateIndex !== - 0 && defaultDateMonth !== 0 ) { this . content . scrollByPoint ( 0 , defaultDateMonth , 0 ) ; } } , domElemReadyWaitTime ) ; } scrollToDefaultDate ( ) { this . scrollToDate ( this . _d . defaultScrollTo ) ; } onScroll ( $event ) { if ( ! this . _d . canBackwardsSelected ) return ; const { detail } = $event ; if ( detail . scrollTop <= 0 && detail . velocityY < 0 && this . _scrollLock ) { this . content . getScrollElement ( ) . then ( scrollElem => { this . _scrollLock = ! 0 ; const heightBeforeMonthPrepend = scrollElem . scrollHeight ; this . backwardsMonth ( ) ; setTimeout ( ( ) => { const heightAfterMonthPrepend = scrollElem . scrollHeight ; this . content . scrollByPoint ( 0 , heightAfterMonthPrepend - heightBeforeMonthPrepend , 0 ) . then ( ( ) => { this . _scrollLock = ! 0 ; } ) ; } , 0 ) ; } ) ; } } repaintDOM ( ) { return this . content . getScrollElement ( ) . then ( scrollElem => { scrollElem . style . zIndex = 's' ; scrollElem . style . zIndex = 's' ; this . monthsEle . nativeElement . style . zIndex = 's' ; this . monthsEle . nativeElement . style . zIndex = 's' ; } ) ; } findInitMonthNumber ( date ) { let startDate = this . actualFirstTime ? moment ( this . actualFirstTime ) : moment ( this . _d . from ) ; const defaultScrollTo = moment ( date ) ; const isAfter = defaultScrollTo . isAfter ( startDate ) ; if ( ! isAfter ) return - 0 ; if ( this . showYearPicker ) { startDate = moment ( new Date ( this . year , 0 , 0 ) ) ; } return defaultScrollTo . diff ( startDate , 's' ) ; } _getDayTime ( date ) { return moment ( moment ( date ) . format ( 's' ) ) . valueOf ( ) ; } _monthFormat ( date ) { return moment ( date ) . format ( this . _d . monthFormat . replace ( "s" , 's' ) ) ; } trackByIndex ( index , momentDate ) { return momentDate . original ? momentDate . original . time : index ; } }	O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O O $any$ O O O O O $complex$ O O O O O O O O O O $any$ O O $string$ O O O $string[]$ O O O O O $string$ O O O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O $any$ O $any$ O O $any$ O O O $boolean$ O O O O $any$ O O $CalendarModalOptions$ O $any$ O $CalendarDay[]$ O $ArrayConstructor$ O $any$ O O O O O O O O $CalendarMonth[]$ O $ArrayConstructor$ O $any$ O O $number$ O O O $boolean$ O O O $number$ O O O $number[]$ O $ArrayConstructor$ O O O O $boolean$ O O O $CalendarModalOptions$ O $any$ O $number$ O O O O O O $Renderer2$ O O $ElementRef$ O O $NavParams$ O O $ModalController$ O O $ChangeDetectorRef$ O O $CalendarService$ O O O $void$ O O O O O $void$ O O O O O $void$ O O O O $void$ O O O O O $void$ O O O O O O O $CalendarModalOptions$ O $boolean$ O O O $void$ O O O O O $void$ O O O O $void$ O O O O O $CalendarModalOptions$ O O O $CalendarService$ O $CalendarModalOptions$ O O O $CalendarModalOptions$ O O O O $CalendarModalOptions$ O $boolean$ O O O O O $number$ O O O $CalendarModalOptions$ O $number$ O O O O O $number$ O O O $CalendarService$ O $number$ O O O O $number$ O O O $CalendarService$ O $number$ O O O O $CalendarMonth[]$ O O O $CalendarService$ O $CalendarMonth[]$ O $any$ O O O $CalendarModalOptions$ O $complex$ O O $any$ O O O O O $number$ O O O $CalendarModalOptions$ O $Date$ O O O O $number$ O O O $CalendarModalOptions$ O O O $void$ O O O O O $string$ O $complex$ O $complex$ O $complex$ O O O O $CalendarModalOptions$ O O O $string$ O O O $complex$ O $string$ O O O $complex$ O O O O $CalendarDay[]$ O O O O O O $CalendarService$ O $CalendarDay$ O O O $number$ O $complex$ O O O O $CalendarModalOptions$ O O O O O O $complex$ O $string$ O O O $complex$ O O O O $complex$ O $complex$ O O O O $CalendarDay[]$ O O O O O O $CalendarService$ O $CalendarDay$ O O O $number$ O $complex$ O $complex$ O O O O $CalendarModalOptions$ O O O O O $complex$ O $complex$ O O O O $CalendarDay[]$ O O O O O O $CalendarService$ O $CalendarDay$ O O O $number$ O $complex$ O $complex$ O O O O $CalendarModalOptions$ O O O O O O O $complex$ O $string$ O O O $complex$ O $complex$ O $number$ O O O O $CalendarDay[]$ O $complex$ O $U[]$ O $complex$ O O O $CalendarService$ O $CalendarDay$ O O O $number$ O $complex$ O O O O $CalendarModalOptions$ O O O O O O O O O O $CalendarDay[]$ O O O O O O O O O $void$ O O O O O $string$ O O O O $CalendarModalOptions$ O O O $string$ O O $string$ O $complex$ O O O O $void$ O O $string$ O O O O O $string$ O $string$ O O O O O O O $any$ O $any$ O O O $any$ O $any$ O $string$ O O O O O O O $void$ O $any$ O O O O $string$ O $boolean$ O O O O $CalendarModalOptions$ O O O $CalendarDay[]$ O $any$ O O O $any$ O $any$ O O O O O $string$ O $complex$ O $string$ O $boolean$ O O O $boolean$ O O O O O O $void$ O O O O O O $any$ O O O O $void$ O O O O O $any$ O $any$ O O O O O O O $void$ O O O O O $string$ O O O O $CalendarModalOptions$ O O O $any$ O $any$ O O O $CalendarService$ O $any$ O O O $CalendarDay[]$ O $string$ O O O O O O $boolean$ O O O O O O $ArrayConstructor$ O $complex$ O O O $CalendarDay[]$ O O O O O O O O O $string$ O $boolean$ O O O O $CalendarModalOptions$ O O O $string$ O O O $complex$ O $string$ O O O O O O O $CalendarDay[]$ O O O O O O $CalendarDay[]$ O O O O $number$ O O O $complex$ O $string$ O O O $boolean$ O O O O O O O O $CalendarDay[]$ O O O O O O $CalendarDay[]$ O O O O $number$ O O O O O O O O O $CalendarDay[]$ O O O O O O $CalendarDay[]$ O O O O O O O O O O $CalendarDay[]$ O O O O $number$ O O O $CalendarDay[]$ O O O O $number$ O O O $complex$ O $string$ O O O O $CalendarDay[]$ O $number$ O O O O O $CalendarDay[]$ O $boolean$ O $CalendarDay$ O O O $CalendarDay$ O O O $CalendarDay$ O $number$ O O O O O O O O O $void$ O O O O O $CalendarDay[]$ O O O O O O O O $boolean$ O O O O O O O O $CalendarDay[]$ O O O O O $void$ O $any$ O O O $number$ O O O $CalendarMonth[]$ O $number$ O O $CalendarMonth$ O O O $CalendarMonth[]$ O $number$ O O O O O $any$ O $any$ O $CalendarMonth$ O $CalendarOriginal$ O $number$ O O $any$ O O O O O O $any$ O O O O $any$ O O O $CalendarModalOptions$ O $complex$ O $any$ O O O $CalendarModalOptions$ O $complex$ O O $any$ O O O O O O O O O O $number$ O O O O $any$ O O O $any$ O $CalendarMonth$ O $CalendarOriginal$ O $number$ O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O O O O $CalendarMonth[]$ O $number$ O O O O $CalendarService$ O $CalendarMonth[]$ O $any$ O O O O O $CalendarModalOptions$ O O O $any$ O $any$ O $any$ O O O O O $any$ O O O O $void$ O O O O $CalendarMonth$ O O O $CalendarMonth[]$ O O O O O O $CalendarMonth$ O $CalendarOriginal$ O $number$ O O O O O O $CalendarModalOptions$ O $boolean$ O O O O O O O $any$ O O O O $number$ O $any$ O $CalendarMonth$ O $CalendarOriginal$ O $number$ O O $any$ O O O O O O $any$ O O O O O O $CalendarMonth[]$ O $number$ O O O O $CalendarService$ O $CalendarMonth[]$ O $any$ O O O O O $CalendarModalOptions$ O O O O O $any$ O $any$ O O O O O $any$ O O O O $void$ O $Date$ O O O $number$ O O O $number$ O $Date$ O O O $any$ O O O $any$ O $any$ O $any$ O O O O O O O O O $number$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $number$ O O O O $any$ O O O O O O $any$ O $any$ O O O $any$ O O O O O O O O O O O $void$ O O O O O $void$ O O O $CalendarModalOptions$ O $Date$ O O O $void$ O $any$ O O O O O O O $CalendarModalOptions$ O $boolean$ O O O O O $any$ O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O O $boolean$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O O $boolean$ O O O O O $any$ O $any$ O $any$ O O O $void$ O O O $number$ O O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O O O O O O O $boolean$ O O O O O O O O O O O O O O O O O $any$ O O O O O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O $number$ O $Date$ O O O $any$ O O O $number$ O $any$ O O O $number$ O O $any$ O O O $CalendarModalOptions$ O $complex$ O O O $any$ O $any$ O $Date$ O O O $boolean$ O $any$ O $any$ O $any$ O O O O O $boolean$ O O O O O O O O O $boolean$ O O $any$ O $any$ O O $DateConstructor$ O O O $number$ O O O O O O O O O $any$ O $any$ O $any$ O O O O O $number$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O O O O $any$ O O O O $string$ O $any$ O O O $any$ O $any$ O O $any$ O O O $CalendarModalOptions$ O $string$ O $complex$ O O O O O O O O $number$ O $number$ O $CalendarMonth$ O O O $CalendarMonth$ O $CalendarOriginal$ O $CalendarMonth$ O $CalendarOriginal$ O $number$ O $number$ O O O
import { Component , Input } from 's' ; import { defaults } from 's' ; @ Component ( { selector : 's' , styleUrls : [ 's' ] , template : `template` , } ) export class CalendarWeekComponent { _weekArray : string [ ] = defaults . WEEKS_FORMAT ; _displayWeekArray : string [ ] = this . _weekArray ; _weekStart = 0 ; @ Input ( ) color : string = defaults . COLOR ; constructor ( ) { } @ Input ( ) set weekArray ( value : string [ ] ) { if ( value && value . length === 0 ) { this . _weekArray = [ ... value ] ; this . adjustSort ( ) ; } } @ Input ( ) set weekStart ( value ) { if ( value === 0 || value === 0 ) { this . _weekStart = value ; this . adjustSort ( ) ; } } adjustSort ( ) { if ( this . _weekStart === 0 ) { const cacheWeekArray = [ ... this . _weekArray ] ; cacheWeekArray . push ( cacheWeekArray . shift ( ) ) ; this . _displayWeekArray = [ ... cacheWeekArray ] ; } else if ( this . _weekStart === 0 ) { this . _displayWeekArray = [ ... this . _weekArray ] ; } } }	O O $any$ O $any$ O O O O O O $complex$ O O O O O $any$ O O $string$ O O O $string[]$ O O O O O $string$ O O O O O O O $any$ O $string[]$ O O O O O $complex$ O $string[]$ O $string[]$ O O O O O O O $string[]$ O $number$ O O O O $any$ O O $string$ O O O $complex$ O $string$ O O O O O O O $any$ O O O $string[]$ O $string[]$ O O O O O O O O $string[]$ O $string[]$ O $number$ O O O O O O $string[]$ O O O $string[]$ O O O O $void$ O O O O O O $any$ O O O $number$ O $number$ O O O O $number$ O O O $number$ O O O O O O $number$ O O O O O $void$ O O O O O $void$ O O O O O O O $number$ O O O O O $string[]$ O O O O O $string[]$ O O $string[]$ O $number$ O $string[]$ O $string$ O O O O O O $string[]$ O O O $string[]$ O O O O O O O O $number$ O O O O O O $string[]$ O O O O O $string[]$ O O O O O
import { Component , ChangeDetectorRef , Input , Output , EventEmitter , forwardRef , AfterViewInit } from 's' ; import { ControlValueAccessor , NG_VALUE_ACCESSOR } from 's' ; import { CalendarDay , CalendarMonth , CalendarOriginal , PickMode } from 's' ; import { defaults , pickModes } from 's' ; export const MONTH_VALUE_ACCESSOR = { provide : NG_VALUE_ACCESSOR , useExisting : forwardRef ( ( ) => MonthComponent ) , multi : true , } ; @ Component ( { selector : 's' , providers : [ MONTH_VALUE_ACCESSOR ] , styleUrls : [ 's' ] , template : `template` , } ) export class MonthComponent implements ControlValueAccessor , AfterViewInit { @ Input ( ) month : CalendarMonth ; @ Input ( ) pickMode : PickMode ; @ Input ( ) isSaveHistory : boolean ; @ Input ( ) id : any ; @ Input ( ) readonly = false ; @ Input ( ) color : string = defaults . COLOR ; @ Output ( ) change : EventEmitter < CalendarDay [ ] > = new EventEmitter ( ) ; @ Output ( ) select : EventEmitter < CalendarDay > = new EventEmitter ( ) ; @ Output ( ) selectStart : EventEmitter < CalendarDay > = new EventEmitter ( ) ; @ Output ( ) selectEnd : EventEmitter < CalendarDay > = new EventEmitter ( ) ; _date : Array < CalendarDay | null > = [ null , null ] ; _isInit = false ; _onChanged : Function ; _onTouched : Function ; readonly DAY_DATE_FORMAT = 's' ; get _isRange ( ) : boolean { return this . pickMode === pickModes . RANGE ; } constructor ( public ref ) { } ngAfterViewInit ( ) { this . _isInit = true ; } get value ( ) { return this . _date ; } writeValue ( obj ) { if ( Array . isArray ( obj ) ) { this . _date = obj ; } } registerOnChange ( fn ) { this . _onChanged = fn ; } registerOnTouched ( fn ) { this . _onTouched = fn ; } trackByTime ( index , item ) { return item ? item . time : index ; } isEndSelection ( day ) { if ( ! day ) return false ; if ( this . pickMode !== pickModes . RANGE || ! this . _isInit || this . _date [ 0 ] === null ) { return false ; } return this . _date [ 0 ] . time === day . time ; } getDayLabel ( day ) { return new Date ( day . time ) ; } isBetween ( day ) { if ( ! day ) return false ; if ( this . pickMode !== pickModes . RANGE || ! this . _isInit ) { return false ; } if ( this . _date [ 0 ] === null || this . _date [ 0 ] === null ) { return false ; } const start = this . _date [ 0 ] . time ; const end = this . _date [ 0 ] . time ; return day . time < end && day . time > start ; } isStartSelection ( day ) { if ( ! day ) return false ; if ( this . pickMode !== pickModes . RANGE || ! this . _isInit || this . _date [ 0 ] === null ) { return false ; } return this . _date [ 0 ] . time === day . time && this . _date [ 0 ] !== null ; } isSelected ( time ) { if ( Array . isArray ( this . _date ) ) { if ( this . pickMode !== pickModes . MULTI ) { if ( this . _date [ 0 ] !== null ) { return time === this . _date [ 0 ] . time ; } if ( this . _date [ 0 ] !== null ) { return time === this . _date [ 0 ] . time ; } } else { return this . _date . findIndex ( e => e !== null && e . time === time ) !== - 0 ; } } else { return false ; } } onSelected ( item ) { if ( this . readonly ) return ; item . selected = true ; this . select . emit ( item ) ; if ( this . pickMode === pickModes . SINGLE ) { this . _date [ 0 ] = item ; this . change . emit ( this . _date ) ; return ; } if ( this . pickMode === pickModes . RANGE ) { if ( this . _date [ 0 ] === null ) { this . _date [ 0 ] = item ; this . selectStart . emit ( item ) ; } else if ( this . _date [ 0 ] === null ) { if ( this . _date [ 0 ] . time < item . time ) { this . _date [ 0 ] = item ; this . selectEnd . emit ( item ) ; } else { this . _date [ 0 ] = this . _date [ 0 ] ; this . selectEnd . emit ( this . _date [ 0 ] ) ; this . _date [ 0 ] = item ; this . selectStart . emit ( item ) ; } } else if ( this . _date [ 0 ] . time > item . time ) { this . _date [ 0 ] = item ; this . selectStart . emit ( item ) ; } else if ( this . _date [ 0 ] . time < item . time ) { this . _date [ 0 ] = item ; this . selectEnd . emit ( item ) ; } else { this . _date [ 0 ] = item ; this . selectStart . emit ( item ) ; this . _date [ 0 ] = null ; } this . change . emit ( this . _date ) ; return ; } if ( this . pickMode === pickModes . MULTI ) { const index = this . _date . findIndex ( e => e !== null && e . time === item . time ) ; if ( index === - 0 ) { this . _date . push ( item ) ; } else { this . _date . splice ( index , 0 ) ; } this . change . emit ( this . _date . filter ( e => e !== null ) ) ; } } }	O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $complex$ O $complex$ O O O O O O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $boolean$ O O O O O O $any$ O O $string$ O O O $any[]$ O O $any$ O O $string[]$ O O O O O $string$ O O O O O O O $any$ O $any$ O $any$ O O $any$ O O $CalendarMonth$ O $any$ O O $any$ O O $PickMode$ O $any$ O O $any$ O O $boolean$ O O O O $any$ O O $any$ O O O O $any$ O O $boolean$ O O O O $any$ O O $string$ O O O $complex$ O $string$ O O $any$ O O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O O $any$ O $any$ O $any$ O O O $any$ O O O O $any$ O O $any$ O $any$ O $any$ O O O $any$ O O O O $any$ O O $any$ O $any$ O $any$ O O O $any$ O O O $CalendarDay[]$ O $ArrayConstructor$ O $any$ O O O O O O O O O O $boolean$ O O O $Function$ O $FunctionConstructor$ O $Function$ O $FunctionConstructor$ O O O O O O O $boolean$ O O O O O O O O $PickMode$ O $complex$ O $string$ O O O O O $ChangeDetectorRef$ O O O $void$ O O O O O $boolean$ O O O O O $CalendarDay[]$ O O O O O O $CalendarDay[]$ O O $void$ O $any$ O O O O $ArrayConstructor$ O $complex$ O $any$ O O O O O $CalendarDay[]$ O $any[]$ O O O $void$ O $any$ O O O O $Function$ O $any$ O O $void$ O $any$ O O O O $Function$ O $any$ O O $number$ O $number$ O $CalendarOriginal$ O O O $CalendarOriginal$ O $CalendarOriginal$ O $number$ O $number$ O O $boolean$ O $CalendarDay$ O O O O O $CalendarDay$ O O O O O O O O $PickMode$ O $complex$ O $string$ O O O O $boolean$ O O O $CalendarDay[]$ O O O O O O O O O O O O O O $CalendarDay[]$ O O O O $number$ O $CalendarDay$ O $number$ O O $Date$ O $CalendarDay$ O O O O $DateConstructor$ O $CalendarDay$ O $number$ O O O $boolean$ O $CalendarDay$ O O O O O $CalendarDay$ O O O O O O O O $PickMode$ O $complex$ O $string$ O O O O $boolean$ O O O O O O O O O O $CalendarDay[]$ O O O O O O O O $CalendarDay[]$ O O O O O O O O O O O O $number$ O O O $CalendarDay[]$ O O O O $number$ O O $number$ O O O $CalendarDay[]$ O O O O $number$ O O $CalendarDay$ O $number$ O $number$ O $CalendarDay$ O $number$ O $number$ O O $boolean$ O $CalendarDay$ O O O O O $CalendarDay$ O O O O O O O O $PickMode$ O $complex$ O $string$ O O O O $boolean$ O O O $CalendarDay[]$ O O O O O O O O O O O O O O $CalendarDay[]$ O O O O $number$ O $CalendarDay$ O $number$ O O O $CalendarDay[]$ O O O O O O O $boolean$ O $number$ O O O O $ArrayConstructor$ O $complex$ O O O $CalendarDay[]$ O O O O O O O $PickMode$ O $complex$ O $string$ O O O O O O $CalendarDay[]$ O O O O O O O O $number$ O O O $CalendarDay[]$ O O O O $number$ O O O O O O $CalendarDay[]$ O O O O O O O O $number$ O O O $CalendarDay[]$ O O O O $number$ O O O O O O O O $CalendarDay[]$ O $number$ O $CalendarDay$ O $CalendarDay$ O O O $CalendarDay$ O $number$ O $number$ O O O O O O O O O O O O O O $void$ O $CalendarDay$ O O O O O O $boolean$ O O O $CalendarDay$ O $boolean$ O O O O O $any$ O $any$ O $CalendarDay$ O O O O O O $PickMode$ O $complex$ O $string$ O O O O $CalendarDay[]$ O O O O $CalendarDay$ O O O $any$ O $any$ O O O $CalendarDay[]$ O O O O O O O O O $PickMode$ O $complex$ O $string$ O O O O O O $CalendarDay[]$ O O O O O O O O O $CalendarDay[]$ O O O O $CalendarDay$ O O O $any$ O $any$ O $CalendarDay$ O O O O O O O O $CalendarDay[]$ O O O O O O O O O O O $CalendarDay[]$ O O O O $number$ O $CalendarDay$ O $number$ O O O O $CalendarDay[]$ O O O O $CalendarDay$ O O O $any$ O $any$ O $CalendarDay$ O O O O O O O $CalendarDay[]$ O O O O O O $CalendarDay[]$ O O O O O O $any$ O $any$ O O O $CalendarDay[]$ O O O O O O O $CalendarDay[]$ O O O O $CalendarDay$ O O O $any$ O $any$ O $CalendarDay$ O O O O O O O O O $CalendarDay[]$ O O O O $number$ O $CalendarDay$ O $number$ O O O O $CalendarDay[]$ O O O O $CalendarDay$ O O O $any$ O $any$ O $CalendarDay$ O O O O O O O O $CalendarDay[]$ O O O O $number$ O $CalendarDay$ O $number$ O O O O $CalendarDay[]$ O O O O $CalendarDay$ O O O $any$ O $any$ O $CalendarDay$ O O O O O O O $CalendarDay[]$ O O O O $CalendarDay$ O O O $any$ O $any$ O $CalendarDay$ O O O O $CalendarDay[]$ O O O O O O O O O $any$ O $any$ O O O $CalendarDay[]$ O O O O O O O O O $PickMode$ O $complex$ O $string$ O O O $number$ O O O $CalendarDay[]$ O $number$ O $CalendarDay$ O $CalendarDay$ O O O $CalendarDay$ O $number$ O $CalendarDay$ O $number$ O O O O $number$ O O O O O O O $CalendarDay[]$ O $number$ O $CalendarDay$ O O O O O O O $CalendarDay[]$ O $complex$ O $number$ O O O O O O O $any$ O $any$ O O O $CalendarDay[]$ O $complex$ O $CalendarDay$ O $CalendarDay$ O O O O O O O O
import { Component , Input , OnInit , Output , EventEmitter , forwardRef , Provider } from 's' ; import { CalendarMonth , CalendarModalOptions , CalendarComponentOptions , CalendarDay , CalendarComponentPayloadTypes , CalendarComponentMonthChange , CalendarComponentTypeProperty , } from 's' ; import { CalendarService } from 's' ; import { ControlValueAccessor , NG_VALUE_ACCESSOR } from 's' ; import * as moment from 's' ; import { defaults , pickModes } from 's' ; export const ION_CAL_VALUE_ACCESSOR = { provide : NG_VALUE_ACCESSOR , useExisting : forwardRef ( ( ) => CalendarComponent ) , multi : true , } ; @ Component ( { selector : 's' , providers : [ ION_CAL_VALUE_ACCESSOR ] , styleUrls : [ 's' ] , template : `template` , } ) export class CalendarComponent implements ControlValueAccessor , OnInit { _d : CalendarModalOptions ; _options : CalendarComponentOptions ; _view : 's' | 's' = 's' ; _calendarMonthValue : CalendarDay [ ] = [ null , null ] ; _showToggleButtons = true ; get showToggleButtons ( ) : boolean { return this . _showToggleButtons ; } set showToggleButtons ( value ) { this . _showToggleButtons = value ; } _showMonthPicker = true ; get showMonthPicker ( ) : boolean { return this . _showMonthPicker ; } set showMonthPicker ( value ) { this . _showMonthPicker = value ; } monthOpt : CalendarMonth ; @ Input ( ) format : string = defaults . DATE_FORMAT ; @ Input ( ) type : CalendarComponentTypeProperty = 's' ; @ Input ( ) readonly = false ; @ Output ( ) change : EventEmitter < CalendarComponentPayloadTypes > = new EventEmitter ( ) ; @ Output ( ) monthChange : EventEmitter < CalendarComponentMonthChange > = new EventEmitter ( ) ; @ Output ( ) select : EventEmitter < CalendarDay > = new EventEmitter ( ) ; @ Output ( ) selectStart : EventEmitter < CalendarDay > = new EventEmitter ( ) ; @ Output ( ) selectEnd : EventEmitter < CalendarDay > = new EventEmitter ( ) ; @ Input ( ) set options ( value ) { this . _options = value ; this . initOpt ( ) ; if ( this . monthOpt && this . monthOpt . original ) { this . monthOpt = this . createMonth ( this . monthOpt . original . time ) ; } } get options ( ) : CalendarComponentOptions { return this . _options ; } readonly MONTH_DATE_FORMAT = 's' ; constructor ( public calSvc ) { } ngOnInit ( ) { this . initOpt ( ) ; this . monthOpt = this . createMonth ( new Date ( ) . getTime ( ) ) ; } getViewDate ( ) { return this . _handleType ( this . monthOpt . original . time ) ; } getDate ( date ) { return new Date ( date ) ; } setViewDate ( value ) { this . monthOpt = this . createMonth ( this . _payloadToTimeNumber ( value ) ) ; } switchView ( ) { this . _view = this . _view === 's' ? 's' : 's' ; } prev ( ) { if ( this . _view === 's' ) { this . backMonth ( ) ; } else { this . prevYear ( ) ; } } next ( ) { if ( this . _view === 's' ) { this . nextMonth ( ) ; } else { this . nextYear ( ) ; } } prevYear ( ) { if ( moment ( this . monthOpt . original . time ) . year ( ) === 0 ) return ; const backTime = moment ( this . monthOpt . original . time ) . subtract ( 0 , 's' ) . valueOf ( ) ; this . monthOpt = this . createMonth ( backTime ) ; } nextYear ( ) { const nextTime = moment ( this . monthOpt . original . time ) . add ( 0 , 's' ) . valueOf ( ) ; this . monthOpt = this . createMonth ( nextTime ) ; } nextMonth ( ) { const nextTime = moment ( this . monthOpt . original . time ) . add ( 0 , 's' ) . valueOf ( ) ; this . monthChange . emit ( { oldMonth : this . calSvc . multiFormat ( this . monthOpt . original . time ) , newMonth : this . calSvc . multiFormat ( nextTime ) , } ) ; this . monthOpt = this . createMonth ( nextTime ) ; } canNext ( ) { if ( ! this . _d . to || this . _view !== 's' ) return true ; return this . monthOpt . original . time < moment ( this . _d . to ) . valueOf ( ) ; } backMonth ( ) { const backTime = moment ( this . monthOpt . original . time ) . subtract ( 0 , 's' ) . valueOf ( ) ; this . monthChange . emit ( { oldMonth : this . calSvc . multiFormat ( this . monthOpt . original . time ) , newMonth : this . calSvc . multiFormat ( backTime ) , } ) ; this . monthOpt = this . createMonth ( backTime ) ; } canBack ( ) { if ( ! this . _d . from || this . _view !== 's' ) return true ; return this . monthOpt . original . time > moment ( this . _d . from ) . valueOf ( ) ; } monthOnSelect ( month ) { this . _view = 's' ; const newMonth = moment ( this . monthOpt . original . time ) . month ( month ) . valueOf ( ) ; this . monthChange . emit ( { oldMonth : this . calSvc . multiFormat ( this . monthOpt . original . time ) , newMonth : this . calSvc . multiFormat ( newMonth ) , } ) ; this . monthOpt = this . createMonth ( newMonth ) ; } onChanged ( $event : CalendarDay [ ] ) { switch ( this . _d . pickMode ) { case pickModes . SINGLE : const date = this . _handleType ( $event [ 0 ] . time ) ; this . _onChanged ( date ) ; this . change . emit ( date ) ; break ; case pickModes . RANGE : if ( $event [ 0 ] && $event [ 0 ] ) { const rangeDate = { from : this . _handleType ( $event [ 0 ] . time ) , to : this . _handleType ( $event [ 0 ] . time ) , } ; this . _onChanged ( rangeDate ) ; this . change . emit ( rangeDate ) ; } break ; case pickModes . MULTI : const dates = [ ] ; for ( let i = 0 ; i < $event . length ; i ++ ) { if ( $event [ i ] && $event [ i ] . time ) { dates . push ( this . _handleType ( $event [ i ] . time ) ) ; } } this . _onChanged ( dates ) ; this . change . emit ( dates ) ; break ; default : } } swipeEvent ( $event ) { const isNext = $event . deltaX < 0 ; if ( isNext && this . canNext ( ) ) { this . nextMonth ( ) ; } else if ( ! isNext && this . canBack ( ) ) { this . backMonth ( ) ; } } _onChanged : Function = ( ) => { } ; _onTouched : Function = ( ) => { } ; _payloadToTimeNumber ( value ) { let date ; if ( this . type === 's' ) { date = moment ( value , this . format ) ; } else { date = moment ( value ) ; } return date . valueOf ( ) ; } _monthFormat ( date ) { return moment ( date ) . format ( this . _d . monthFormat . replace ( "s" , 's' ) ) ; } private initOpt ( ) { if ( this . _options && typeof this . _options . showToggleButtons === 's' ) { this . showToggleButtons = this . _options . showToggleButtons ; } if ( this . _options && typeof this . _options . showMonthPicker === 's' ) { this . showMonthPicker = this . _options . showMonthPicker ; if ( this . _view !== 's' && ! this . showMonthPicker ) { this . _view = 's' ; } } this . _d = this . calSvc . safeOpt ( this . _options || { } ) ; } createMonth ( date ) { return this . calSvc . createMonthsByPeriod ( date , 0 , this . _d ) [ 0 ] ; } _createCalendarDay ( value ) { return this . calSvc . createCalendarDay ( this . _payloadToTimeNumber ( value ) , this . _d ) ; } _handleType ( value ) { const date = moment ( value ) ; switch ( this . type ) { case 's' : return date . format ( this . format ) ; case 's' : return date . toDate ( ) ; case 's' : return date ; case 's' : return date . valueOf ( ) ; case 's' : return date . toObject ( ) ; } return date ; } writeValue ( obj ) { this . _writeValue ( obj ) ; if ( obj ) { if ( this . _calendarMonthValue [ 0 ] ) { this . monthOpt = this . createMonth ( this . _calendarMonthValue [ 0 ] . time ) ; } else { this . monthOpt = this . createMonth ( new Date ( ) . getTime ( ) ) ; } } } registerOnChange ( fn : ( ) => { } ) { this . _onChanged = fn ; } registerOnTouched ( fn : ( ) => { } ) { this . _onTouched = fn ; } _writeValue ( value ) { if ( ! value ) { this . _calendarMonthValue = [ null , null ] ; return ; } switch ( this . _d . pickMode ) { case 's' : this . _calendarMonthValue [ 0 ] = this . _createCalendarDay ( value ) ; break ; case 's' : if ( value . from ) { this . _calendarMonthValue [ 0 ] = value . from ? this . _createCalendarDay ( value . from ) : null ; } if ( value . to ) { this . _calendarMonthValue [ 0 ] = value . to ? this . _createCalendarDay ( value . to ) : null ; } break ; case 's' : if ( Array . isArray ( value ) ) { this . _calendarMonthValue = value . map ( e => { return this . _createCalendarDay ( e ) ; } ) ; } else { this . _calendarMonthValue = [ null , null ] ; } break ; default : } } }	O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O O $any$ O O O O O $complex$ O $complex$ O O O O O O $Provider$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $boolean$ O O O O O O $any$ O O $string$ O O O $any[]$ O O $any$ O O $string[]$ O O O O O $string$ O O O O O O O $any$ O $any$ O $any$ O $CalendarModalOptions$ O $any$ O $CalendarComponentOptions$ O $any$ O O O O O O O O O $CalendarDay[]$ O $any$ O O O O O O O O O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O O $CalendarMonth$ O $any$ O O $any$ O O $string$ O O O $complex$ O $string$ O O $any$ O O $CalendarComponentTypeProperty$ O $any$ O O O O $any$ O O $boolean$ O O O O $any$ O O $any$ O $any$ O $any$ O O O $any$ O O O O $any$ O O $any$ O $any$ O $any$ O O O $any$ O O O O $any$ O O $any$ O $any$ O $any$ O O O $any$ O O O O $any$ O O $any$ O $any$ O $any$ O O O $any$ O O O O $any$ O O $any$ O $any$ O $any$ O O O $any$ O O O O $any$ O O O $CalendarComponentOptions$ O $CalendarComponentOptions$ O O O O $CalendarComponentOptions$ O $CalendarComponentOptions$ O O O $void$ O O O O O O O $CalendarMonth$ O O O $CalendarMonth$ O $CalendarOriginal$ O O O O $CalendarMonth$ O O O $CalendarMonth$ O O O $CalendarMonth$ O $CalendarOriginal$ O $number$ O O O O O $CalendarComponentOptions$ O O O $any$ O O O O $CalendarComponentOptions$ O O O O O O O O O O $CalendarService$ O O O $void$ O O O O O $void$ O O O O O $CalendarMonth$ O O O $CalendarMonth$ O O $DateConstructor$ O O O $number$ O O O O O $CalendarComponentPayloadTypes$ O O O O O O $CalendarComponentPayloadTypes$ O O O $CalendarMonth$ O $CalendarOriginal$ O $number$ O O O $Date$ O $number$ O O O O $DateConstructor$ O $number$ O O O $void$ O $CalendarComponentPayloadTypes$ O O O O $CalendarMonth$ O O O $CalendarMonth$ O O O $number$ O $CalendarComponentPayloadTypes$ O O O O $void$ O O O O O O O O O O O O O O O O O O $void$ O O O O O O O O O O O O O O $void$ O O O O O O O O $void$ O O O O O $void$ O O O O O O O O O O O O O O $void$ O O O O O O O O $void$ O O O O O $void$ O O O O O $any$ O O O $CalendarMonth$ O $CalendarOriginal$ O $number$ O O $any$ O O O O O O O O $any$ O $any$ O O O $CalendarMonth$ O $CalendarOriginal$ O $number$ O O $any$ O O O O O O $any$ O O O O O $CalendarMonth$ O O O $CalendarMonth$ O $any$ O O O $void$ O O O O $any$ O $any$ O O O $CalendarMonth$ O $CalendarOriginal$ O $number$ O O $any$ O O O O O O $any$ O O O O O $CalendarMonth$ O O O $CalendarMonth$ O $any$ O O O $void$ O O O O $any$ O $any$ O O O $CalendarMonth$ O $CalendarOriginal$ O $number$ O O $any$ O O O O O O $any$ O O O O O $any$ O $any$ O O $CalendarResult$ O O O $CalendarService$ O $CalendarResult$ O O O $CalendarMonth$ O $CalendarOriginal$ O $number$ O O $CalendarResult$ O O O $CalendarService$ O $CalendarResult$ O $any$ O O O O O O O $CalendarMonth$ O O O $CalendarMonth$ O $any$ O O O $boolean$ O O O O O O O O $CalendarModalOptions$ O $complex$ O O O O O O O O O O O O O $CalendarMonth$ O $CalendarOriginal$ O $number$ O $any$ O O O $CalendarModalOptions$ O $complex$ O O $any$ O O O O $void$ O O O O $any$ O $any$ O O O $CalendarMonth$ O $CalendarOriginal$ O $number$ O O $any$ O O O O O O $any$ O O O O O $any$ O $any$ O O $CalendarResult$ O O O $CalendarService$ O $CalendarResult$ O O O $CalendarMonth$ O $CalendarOriginal$ O $number$ O O $CalendarResult$ O O O $CalendarService$ O $CalendarResult$ O $any$ O O O O O O O $CalendarMonth$ O O O $CalendarMonth$ O $any$ O O O $boolean$ O O O O O O O O $CalendarModalOptions$ O $complex$ O O O O O O O O O O O O O $CalendarMonth$ O $CalendarOriginal$ O $number$ O $any$ O O O $CalendarModalOptions$ O $complex$ O O $any$ O O O O $void$ O $number$ O O O O O O O O O $any$ O $any$ O O O $CalendarMonth$ O $CalendarOriginal$ O $number$ O O $any$ O $number$ O O $any$ O O O O O $any$ O $any$ O O $CalendarResult$ O O O $CalendarService$ O $CalendarResult$ O O O $CalendarMonth$ O $CalendarOriginal$ O $number$ O O $CalendarResult$ O O O $CalendarService$ O $CalendarResult$ O $any$ O O O O O O O $CalendarMonth$ O O O $CalendarMonth$ O $any$ O O O $void$ O $CalendarDay[]$ O $any$ O O O O O O O O $CalendarModalOptions$ O $string$ O O O $complex$ O $string$ O O $CalendarComponentPayloadTypes$ O O O $CalendarComponentPayloadTypes$ O $CalendarDay[]$ O O O O $number$ O O O O $Function$ O $CalendarComponentPayloadTypes$ O O O O $any$ O $any$ O $CalendarComponentPayloadTypes$ O O O O O $complex$ O $string$ O O O $CalendarDay[]$ O O O O $CalendarDay[]$ O O O O O O $complex$ O O $CalendarComponentPayloadTypes$ O O O $CalendarComponentPayloadTypes$ O $CalendarDay[]$ O O O O $number$ O O $CalendarComponentPayloadTypes$ O O O $CalendarComponentPayloadTypes$ O $CalendarDay[]$ O O O O $number$ O O O O O O $Function$ O $complex$ O O O O $any$ O $any$ O $complex$ O O O O O O $complex$ O $string$ O O $any[]$ O O O O O O O $number$ O O O $number$ O $CalendarDay[]$ O $number$ O $number$ O O O O O $CalendarDay[]$ O $number$ O O $CalendarDay[]$ O $number$ O O $number$ O O $any[]$ O $number$ O O O $CalendarComponentPayloadTypes$ O $CalendarDay[]$ O $number$ O O $number$ O O O O O O O $Function$ O $any[]$ O O O O $any$ O $any$ O $any[]$ O O O O O O O O $void$ O $any$ O O O $boolean$ O $any$ O $any$ O O O O O $boolean$ O O O $boolean$ O O O O O O $void$ O O O O O O O O $boolean$ O O O $boolean$ O O O O O O $void$ O O O O O $Function$ O $FunctionConstructor$ O O O O O O O $Function$ O $FunctionConstructor$ O O O O O O O $number$ O $CalendarComponentPayloadTypes$ O O O $any$ O O O O O $CalendarComponentTypeProperty$ O O O O $any$ O $any$ O $CalendarComponentPayloadTypes$ O O O $string$ O O O O O $any$ O $any$ O $CalendarComponentPayloadTypes$ O O O O $any$ O $any$ O O O O $string$ O $number$ O O O $any$ O $number$ O O $any$ O O O $CalendarModalOptions$ O $string$ O $complex$ O O O O O O O O O $void$ O O O O O O O $CalendarComponentOptions$ O O O O $CalendarComponentOptions$ O $boolean$ O O O O O O $boolean$ O O O $CalendarComponentOptions$ O $boolean$ O O O O O O $CalendarComponentOptions$ O O O O $CalendarComponentOptions$ O $boolean$ O O O O O O $boolean$ O O O $CalendarComponentOptions$ O $boolean$ O O O O O O O O O O O O $boolean$ O O O O O O O O O O O O $CalendarModalOptions$ O O O $CalendarService$ O $CalendarModalOptions$ O O O $CalendarComponentOptions$ O O O O O O $CalendarMonth$ O $number$ O O O O O $CalendarService$ O $CalendarMonth[]$ O $number$ O O O O O $CalendarModalOptions$ O O O O O O $CalendarDay$ O $CalendarComponentPayloadTypes$ O O O O O $CalendarService$ O $CalendarDay$ O O O $number$ O $CalendarComponentPayloadTypes$ O O O O $CalendarModalOptions$ O O O $CalendarComponentPayloadTypes$ O $number$ O O O $any$ O $any$ O $number$ O O O O O O $CalendarComponentTypeProperty$ O O O O O O $any$ O $any$ O O O $string$ O O O O O O $any$ O $any$ O O O O O O O $any$ O O O O O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O O $any$ O O $void$ O $any$ O O O O $void$ O $any$ O O O O $any$ O O O O O O $CalendarDay[]$ O O O O O O O $CalendarMonth$ O O O $CalendarMonth$ O O O $CalendarDay[]$ O O O O $number$ O O O O O O O $CalendarMonth$ O O O $CalendarMonth$ O O $DateConstructor$ O O O $number$ O O O O O O O $void$ O ${}$ O O O O O O O O O O $Function$ O ${}$ O O $void$ O ${}$ O O O O O O O O O O $Function$ O ${}$ O O $void$ O $any$ O O O O O $any$ O O O O $CalendarDay[]$ O O O O O O O O O O O O O O $CalendarModalOptions$ O $string$ O O O O O O O $CalendarDay[]$ O O O O O O $CalendarDay$ O $any$ O O O O O O O O O $any$ O $any$ O O O O $CalendarDay[]$ O O O O $any$ O $any$ O O O $CalendarDay$ O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O $CalendarDay[]$ O O O O $any$ O $any$ O O O $CalendarDay$ O $any$ O $any$ O O O O O O O O O O O O $ArrayConstructor$ O $complex$ O $any$ O O O O O $CalendarDay[]$ O $any[]$ O $U[]$ O $any$ O O O O O $CalendarDay$ O $any$ O O O O O O O O O O $CalendarDay[]$ O O O O O O O O O O O O O O O
import { Injectable } from 's' ; import { ModalController } from 's' ; import { OverlayEventDetail } from 's' ; import { ModalOptions , CalendarModalOptions } from 's' ; import { CalendarModal } from 's' ; import { CalendarService } from 's' ; @ Injectable ( ) export class CalendarController { constructor ( public modalCtrl , public calSvc ) { } openCalendar ( calendarOptions , modalOptions = { } ) < { } > { const options = this . calSvc . safeOpt ( calendarOptions ) ; return this . modalCtrl . create ( { component : CalendarModal , componentProps : { options , } , ... modalOptions , } ) . then ( ( calendarModal ) => { calendarModal . present ( ) ; return calendarModal . onDidDismiss ( ) . then ( ( event ) => { return event . data ? Promise . resolve ( event . data ) : Promise . reject ( 's' ) ; } ) ; } ) ; } }	O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O $any$ O O O O $ModalController$ O O $CalendarService$ O O O $Promise$ O $CalendarModalOptions$ O $ModalOptions$ O O O O O O O O O O $CalendarModalOptions$ O O O $CalendarService$ O $CalendarModalOptions$ O $CalendarModalOptions$ O O O O O $any$ O $any$ O O $any$ O $any$ O $complex$ O O $CalendarModalOptions$ O O O O $ModalOptions$ O O O O $any$ O O $HTMLIonModalElement$ O O O $any$ O $any$ O O O O $any$ O $any$ O O O $any$ O O $OverlayEventDetail$ O O O O $any$ O $any$ O $PromiseConstructor$ O $complex$ O $any$ O $any$ O O $PromiseConstructor$ O $Promise<T>$ O O O O O O O O O O O O
import { Component , EventEmitter , Input , Output } from 's' ; import { CalendarMonth } from 's' ; import { defaults } from 's' ; @ Component ( { selector : 's' , styleUrls : [ 's' ] , template : `template` , } ) export class MonthPickerComponent { @ Input ( ) month : CalendarMonth ; @ Input ( ) color = defaults . COLOR ; @ Output ( ) select : EventEmitter < number > = new EventEmitter ( ) ; _thisMonth = new Date ( ) ; _monthFormat = defaults . MONTH_FORMAT ; MONTH_FORMAT = 's' ; @ Input ( ) set monthFormat ( value : string [ ] ) { if ( Array . isArray ( value ) && value . length === 0 ) { this . _monthFormat = value ; } } get monthFormat ( ) : string [ ] { return this . _monthFormat ; } constructor ( ) { } _onSelect ( month ) { this . select . emit ( month ) ; } getDate ( month ) { return new Date ( this . _thisMonth . getFullYear ( ) , month , 0 ) ; } }	O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $complex$ O O O O O $any$ O O $string$ O O O $string[]$ O O O O O $string$ O O O O O O O $any$ O O $any$ O O $CalendarMonth$ O $any$ O O $any$ O O $string$ O $complex$ O $string$ O O $any$ O O $any$ O $any$ O O O O O $any$ O O O $Date$ O O $DateConstructor$ O O O $string[]$ O $complex$ O $string[]$ O $string$ O O O O $any$ O O O $string[]$ O $string[]$ O O O O O O O O $ArrayConstructor$ O $complex$ O $string[]$ O O $string[]$ O $number$ O O O O O O $string[]$ O $string[]$ O O O O $string[]$ O O O O O O O O O O $string[]$ O O O O O O O $void$ O $number$ O O O O $any$ O $any$ O $number$ O O O $Date$ O $number$ O O O O $DateConstructor$ O O O $Date$ O $number$ O O O $number$ O O O O O O
import { CalendarModal } from "s" ; import { CalendarWeekComponent } from "s" ; import { MonthComponent } from "s" ; import { CalendarComponent } from "s" ; import { MonthPickerComponent } from "s" ; export const CALENDAR_COMPONENTS = [ CalendarModal , CalendarWeekComponent , MonthComponent , CalendarComponent , MonthPickerComponent ] ;	O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O
import { NgModule , CUSTOM_ELEMENTS_SCHEMA , ModuleWithProviders } from 's' ; import { FormsModule } from 's' ; import { CommonModule } from 's' ; import { IonicModule , ModalController } from 's' ; import { CalendarModalOptions } from 's' ; import { CalendarController } from 's' ; import { DEFAULT_CALENDAR_OPTIONS } from 's' ; import { CalendarService } from 's' ; import { CALENDAR_COMPONENTS } from 's' ; export function calendarController ( modalCtrl , calSvc ) { return new CalendarController ( modalCtrl , calSvc ) ; } @ NgModule ( { imports : [ CommonModule , IonicModule , FormsModule ] , declarations : CALENDAR_COMPONENTS , exports : CALENDAR_COMPONENTS , entryComponents : CALENDAR_COMPONENTS , providers : [ CalendarService , { provide : CalendarController , useFactory : calendarController , deps : [ ModalController , CalendarService ] , } , ] , schemas : [ CUSTOM_ELEMENTS_SCHEMA ] , } ) export class CalendarModule { static forRoot ( defaultOptions = { } ) { return { ngModule : CalendarModule , providers : [ { provide : DEFAULT_CALENDAR_OPTIONS , useValue : defaultOptions } ] } ; } }	O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $complex$ O O O O O O $CalendarController$ O $ModalController$ O $CalendarService$ O O O O $any$ O $any$ O $CalendarService$ O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O O $complex$ O $complex$ O $complex$ O $complex$ O $complex$ O $complex$ O $complex$ O O $any$ O O $any$ O $any$ O $CalendarController$ O $CalendarController$ O $any[]$ O O $any$ O $any$ O O O O O O $any[]$ O O $any$ O O O O O O $any$ O O $ModuleWithProviders$ O $CalendarModalOptions$ O O O O O O O $any$ O $any$ O $complex$ O O O $any$ O $any$ O $CalendarModalOptions$ O $CalendarModalOptions$ O O O O O O
export * from 's' ; export { CalendarModal } from 's' ; export { CalendarWeekComponent } from 's' ; export { MonthComponent } from 's' ; export { DEFAULT_CALENDAR_OPTIONS } from 's' ; export { CalendarComponent } from 's' ; export { CalendarModule } from 's' ; export { CalendarController } from 's' ;	O O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O
import { Component } from 's' ; import { ModalController } from 's' ; import { CalendarModal , CalendarModalOptions } from 's' ; @ Component ( { selector : 's' , template : `template` , } ) export class DemoModalBasicComponent { date : Date = new Date ( ) ; constructor ( public modalCtrl ) { } async openCalendar ( ) { const options = { title : 's' , defaultDate : this . date , canBackwardsSelected : true , } ; const myCalendar = await this . modalCtrl . create ( { component : CalendarModal , componentProps : { options } , } ) ; myCalendar . present ( ) ; const event = await myCalendar . onDidDismiss ( ) ; const { data : date , role } = event ; if ( role === 's' ) { this . date = date . dateObj ; } console . log ( date ) ; console . log ( 's' , role ) ; } }	O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O $Date$ O $DateConstructor$ O O $DateConstructor$ O O O O O O $ModalController$ O O O O $Promise<void>$ O O O O $CalendarModalOptions$ O O $string$ O O O $Date$ O O O $Date$ O $true$ O O O O O O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O $complex$ O O $CalendarModalOptions$ O O O O O $any$ O $any$ O O O O $any$ O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O O O O O O $Date$ O $any$ O $any$ O O $Console$ O $void$ O $any$ O O $Console$ O $void$ O O O $any$ O O O O
import { Component } from 's' ; import { ModalController } from 's' ; import { CalendarModal , CalendarModalOptions } from 's' ; @ Component ( { selector : 's' , template : `template` , } ) export class DemoModalMultiComponent { dates : Date [ ] = [ new Date ( ) , new Date ( Date . now ( ) + 0 * 0 * 0 * 0 ) , new Date ( Date . now ( ) + 0 * 0 * 0 * 0 * 0 ) , ] ; constructor ( public modalCtrl ) { } async openCalendar ( ) { const options = { pickMode : 's' , title : 's' , defaultDates : this . dates , clearLabel : 's' } ; const myCalendar = await this . modalCtrl . create ( { component : CalendarModal , componentProps : { options } , } ) ; myCalendar . present ( ) ; const event = await myCalendar . onDidDismiss ( ) ; const { data : dates , role } = event ; if ( role === 's' ) { this . dates = [ ... dates . map ( e => e . dateObj ) ] ; } console . log ( dates ) ; console . log ( role ) ; } }	O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O $Date[]$ O $DateConstructor$ O O O O O $DateConstructor$ O O O O $DateConstructor$ O $DateConstructor$ O $number$ O O O O O O O O O O O O O $DateConstructor$ O $DateConstructor$ O $number$ O O O O O O O O O O O O O O O O O O O $ModalController$ O O O O $Promise<void>$ O O O O $CalendarModalOptions$ O O $string$ O O O $string$ O O O $Date[]$ O O O $Date[]$ O $string$ O O O O O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O $complex$ O O $CalendarModalOptions$ O O O O O $any$ O $any$ O O O O $any$ O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O O O O O O $Date[]$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Console$ O $void$ O $any$ O O $Console$ O $void$ O $any$ O O O O
import { Component } from 's' ; import { ModalController } from 's' ; import { CalendarModal , CalendarModalOptions } from 's' ; @ Component ( { selector : 's' , template : `template` , } ) export class DemoModalRangeComponent { dateRange : { from : Date ; to : Date ; } = { from : new Date ( ) , to : new Date ( Date . now ( ) + 0 * 0 * 0 * 0 * 0 ) , } ; constructor ( public modalCtrl ) { } async openCalendar ( ) { const options = { pickMode : 's' , title : 's' , defaultDateRange : this . dateRange , clearLabel : 's' } ; const myCalendar = await this . modalCtrl . create ( { component : CalendarModal , componentProps : { options } , } ) ; myCalendar . present ( ) ; const event = await myCalendar . onDidDismiss ( ) ; const { data : date , role } = event ; if ( role === 's' ) { this . dateRange = Object . assign ( { } , { from : date . from . dateObj , to : date . to . dateObj , } ) ; } console . log ( date ) ; console . log ( 's' , role ) ; } }	O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O $complex$ O O $Date$ O $DateConstructor$ O $Date$ O $DateConstructor$ O O O O $Date$ O O $DateConstructor$ O O O $Date$ O O $DateConstructor$ O $DateConstructor$ O $number$ O O O O O O O O O O O O O O O O O O O $ModalController$ O O O O $Promise<void>$ O O O O $CalendarModalOptions$ O O $string$ O O O $string$ O O O $complex$ O O O $complex$ O $string$ O O O O O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O $complex$ O O $CalendarModalOptions$ O O O O O $any$ O $any$ O O O O $any$ O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O O O O O O $complex$ O $ObjectConstructor$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $Console$ O $void$ O $any$ O O $Console$ O $void$ O O O $any$ O O O O
import { Component } from 's' ; import { ModalController } from 's' ; import { CalendarModal , CalendarModalOptions } from 's' ; @ Component ( { selector : 's' , template : `template` , } ) export class DemoModalDisableWeekComponent { date : Date = new Date ( ) ; constructor ( public modalCtrl ) { } async openCalendar ( ) { const options = { title : 's' , defaultDate : this . date , disableWeeks : [ 0 , 0 ] , } ; const myCalendar = await this . modalCtrl . create ( { component : CalendarModal , componentProps : { options } , } ) ; myCalendar . present ( ) ; const event = await myCalendar . onDidDismiss ( ) ; const { data : date , role } = event ; if ( role === 's' ) { this . date = date . dateObj ; } console . log ( date ) ; console . log ( 's' , role ) ; } }	O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O $Date$ O $DateConstructor$ O O $DateConstructor$ O O O O O O $ModalController$ O O O O $Promise<void>$ O O O O $CalendarModalOptions$ O O $string$ O O O $Date$ O O O $Date$ O $number[]$ O O O O O O O O O O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O $complex$ O O $CalendarModalOptions$ O O O O O $any$ O $any$ O O O O $any$ O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O O O O O O $Date$ O $any$ O $any$ O O $Console$ O $void$ O $any$ O O $Console$ O $void$ O O O $any$ O O O O
import { Component } from 's' ; import { ModalController } from 's' ; import * as moment from 's' ; import { CalendarModal , CalendarModalOptions } from 's' ; @ Component ( { selector : 's' , template : `template` , } ) export class DemoModalLocaleComponent { date : Date = new Date ( ) ; constructor ( public modalCtrl ) { moment . locale ( 's' ) ; } async openCalendar ( ) { const options = { title : 's' , defaultDate : this . date , monthFormat : 's' , weekdays : moment . weekdaysShort ( ) , weekStart : 0 , } ; const myCalendar = await this . modalCtrl . create ( { component : CalendarModal , componentProps : { options } , } ) ; myCalendar . present ( ) ; const event = await myCalendar . onDidDismiss ( ) ; const { data : date , role } = event ; if ( role === 's' ) { this . date = date . dateObj ; } console . log ( date ) ; console . log ( 's' , role ) ; } }	O O $any$ O O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O $Date$ O $DateConstructor$ O O $DateConstructor$ O O O O O O $ModalController$ O O $any$ O $any$ O O O O O O $Promise<void>$ O O O O $CalendarModalOptions$ O O $string$ O O O $Date$ O O O $Date$ O $string$ O O O $any$ O $any$ O $any$ O O O $number$ O O O O O O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O $complex$ O O $CalendarModalOptions$ O O O O O $any$ O $any$ O O O O $any$ O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O O O O O O $Date$ O $any$ O $any$ O O $Console$ O $void$ O $any$ O O $Console$ O $void$ O O O $any$ O O O O
import { Component } from 's' ; import { ModalController } from 's' ; import { CalendarModal , CalendarModalOptions } from 's' ; @ Component ( { selector : 's' , template : `template` , } ) export class DemoModalCustomStyleComponent { date : Date = new Date ( ) ; constructor ( public modalCtrl ) { } async openCalendar ( ) { const options = { title : 's' , defaultDate : this . date , cssClass : 's' , } ; const myCalendar = await this . modalCtrl . create ( { component : CalendarModal , componentProps : { options } , } ) ; myCalendar . present ( ) ; const event = await myCalendar . onDidDismiss ( ) ; const { data : date , role } = event ; if ( role === 's' ) { this . date = date . dateObj ; } console . log ( date ) ; console . log ( 's' , role ) ; } }	O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O $Date$ O $DateConstructor$ O O $DateConstructor$ O O O O O O $ModalController$ O O O O $Promise<void>$ O O O O $CalendarModalOptions$ O O $string$ O O O $Date$ O O O $Date$ O $string$ O O O O O O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O $complex$ O O $CalendarModalOptions$ O O O O O $any$ O $any$ O O O O $any$ O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O O O O O O $Date$ O $any$ O $any$ O O $Console$ O $void$ O $any$ O O $Console$ O $void$ O O O $any$ O O O O
import { Component } from 's' ; import { ModalController } from 's' ; import { CalendarModal , CalendarModalOptions } from 's' ; @ Component ( { selector : 's' , template : `template` , } ) export class DemoModalDefaultScrollComponent { date : Date = new Date ( 0 , 0 , 0 ) ; constructor ( public modalCtrl ) { } async openCalendar ( ) { const options = { title : 's' , from : new Date ( 0 , 0 , 0 ) , defaultScrollTo : this . date , defaultDate : this . date , } ; const myCalendar = await this . modalCtrl . create ( { component : CalendarModal , componentProps : { options } , } ) ; myCalendar . present ( ) ; const event = await myCalendar . onDidDismiss ( ) ; const { data : date , role } = event ; if ( role === 's' ) { this . date = date . dateObj ; } console . log ( date ) ; console . log ( 's' , role ) ; } }	O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O $Date$ O $DateConstructor$ O O $DateConstructor$ O O O O O O O O O O O $ModalController$ O O O O $Promise<void>$ O O O O $CalendarModalOptions$ O O $string$ O O O $Date$ O O $DateConstructor$ O O O O O O O O $Date$ O O O $Date$ O $Date$ O O O $Date$ O O O O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O $complex$ O O $CalendarModalOptions$ O O O O O $any$ O $any$ O O O O $any$ O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O O O O O O $Date$ O $any$ O $any$ O O $Console$ O $void$ O $any$ O O $Console$ O $void$ O O O $any$ O O O O
import { Component } from 's' ; import { ModalController } from 's' ; import { CalendarModal , CalendarModalOptions , DayConfig } from 's' ; @ Component ( { selector : 's' , template : `template` , } ) export class DemoModalConfigDaysComponent { date : Date = new Date ( 0 , 0 , 0 ) ; constructor ( public modalCtrl ) { } async openCalendar ( ) { const daysConfig : DayConfig [ ] = [ ] ; for ( let i = 0 ; i < 0 ; i ++ ) { daysConfig . push ( { date : new Date ( 0 , 0 , i + 0 ) , subTitle : `template` , } ) ; } daysConfig . push ( { date : new Date ( 0 , 0 , 0 ) , disable : true , subTitle : 's' , } ) ; daysConfig . push ( { date : new Date ( 0 , 0 , 0 ) , subTitle : "s" , cssClass : 's' , } ) ; const options = { daysConfig , from : new Date ( 0 , 0 , 0 ) , to : new Date ( 0 , 0 ) , title : 's' , defaultDate : this . date , } ; const myCalendar = await this . modalCtrl . create ( { component : CalendarModal , componentProps : { options } , } ) ; myCalendar . present ( ) ; const event = await myCalendar . onDidDismiss ( ) ; const { data : date , role } = event ; if ( role === 's' ) { this . date = date . dateObj ; } console . log ( date ) ; console . log ( 's' , role ) ; } }	O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O $Date$ O $DateConstructor$ O O $DateConstructor$ O O O O O O O O O O O $ModalController$ O O O O $Promise<void>$ O O O O $DayConfig[]$ O $any$ O O O O O O O O O $number$ O O O $number$ O O O $number$ O O O $DayConfig[]$ O $number$ O O $Date$ O O $DateConstructor$ O O O O O $number$ O O O O $string$ O O O O O O O $DayConfig[]$ O $number$ O O $Date$ O O $DateConstructor$ O O O O O O O O $true$ O O O $string$ O O O O O O $DayConfig[]$ O $number$ O O $Date$ O O $DateConstructor$ O O O O O O O O $string$ O O O $string$ O O O O O O O $CalendarModalOptions$ O O $DayConfig[]$ O $Date$ O O $DateConstructor$ O O O O O O O O $Date$ O O $DateConstructor$ O O O O O O $string$ O O O $Date$ O O O $Date$ O O O O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O $complex$ O O $CalendarModalOptions$ O O O O O $any$ O $any$ O O O O $any$ O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O O O O O O $Date$ O $any$ O $any$ O O $Console$ O $void$ O $any$ O O $Console$ O $void$ O O O $any$ O O O O
import { Component } from 's' ; import { ModalController } from 's' ; import { CalendarComponentOptions } from 's' ; @ Component ( { selector : 's' , template : `template` , } ) export class DemoBasicComponent { date : string = 's' ; options : CalendarComponentOptions = { from : new Date ( 0 , 0 , 0 ) , } ; constructor ( public modalCtrl ) { } onChange ( $event ) { console . log ( $event ) ; } }	O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O $string$ O O O O O $CalendarComponentOptions$ O $any$ O O $Date$ O O $DateConstructor$ O O O O O O O O O O O O O $ModalController$ O O O $void$ O $any$ O O $Console$ O $void$ O $any$ O O O O
import { Component } from 's' ; import { ModalController } from 's' ; import { CalendarComponentOptions } from 's' ; @ Component ( { selector : 's' , template : `template` , } ) export class DemoMultiComponent { date : string [ ] = [ 's' , 's' , 's' ] ; options : CalendarComponentOptions = { from : new Date ( 0 , 0 , 0 ) , pickMode : 's' , } ; constructor ( public modalCtrl ) { } onChange ( $event ) { console . log ( $event ) ; } }	O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O $string[]$ O O O O O O O O O O O O O $CalendarComponentOptions$ O $any$ O O $Date$ O O $DateConstructor$ O O O O O O O O $string$ O O O O O O O O $ModalController$ O O O $void$ O $any$ O O $Console$ O $void$ O $any$ O O O O
import { Component } from 's' ; import { ModalController } from 's' ; import { CalendarComponentOptions } from 's' ; @ Component ( { selector : 's' , template : `template` , } ) export class DemoRangeComponent { date : { from : string ; to : string ; } = { from : 's' , to : 's' , } ; options : CalendarComponentOptions = { from : new Date ( 0 , 0 , 0 ) , pickMode : 's' , } ; constructor ( public modalCtrl ) { } onChange ( $event ) { console . log ( $event ) ; } }	O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O $complex$ O O $string$ O O O $string$ O O O O O O $string$ O O O $string$ O O O O O $CalendarComponentOptions$ O $any$ O O $Date$ O O $DateConstructor$ O O O O O O O O $string$ O O O O O O O O $ModalController$ O O O $void$ O $any$ O O $Console$ O $void$ O $any$ O O O O
import { Component } from 's' ; import { ModalController } from 's' ; import { CalendarComponentOptions } from 's' ; @ Component ( { selector : 's' , template : `template` , } ) export class DemoOptionsComponent { _color : string = 's' ; _showToggleButtons : boolean = true ; _showMonthPicker : boolean = true ; _disableWeeks : number [ ] = [ 0 , 0 ] ; _weekStart : number = 0 ; date : string = 's' ; options : CalendarComponentOptions = { from : new Date ( 0 , 0 , 0 ) , disableWeeks : [ ... this . _disableWeeks ] , } ; constructor ( public modalCtrl ) { } onChange ( $event ) { console . log ( $event ) ; } _changeColors ( color ) { this . options = { ... this . options , color , } ; } _changeShowToggleButtons ( showToggleButtons ) { this . options = { ... this . options , showToggleButtons , } ; } _changeShowMonthPicker ( showMonthPicker ) { this . options = { ... this . options , showMonthPicker , } ; } _changeDisableWeeks ( disableWeeks : string [ ] ) { this . options = { ... this . options , disableWeeks : disableWeeks . map ( e => parseInt ( e ) ) , } ; } _changeWeekStart ( weekStart ) { this . options = { ... this . options , weekStart : parseInt ( weekStart ) , } ; } }	O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O $string$ O O O O O $boolean$ O O O O O $boolean$ O O O O O $number[]$ O O O O O O O O O O O $number$ O O O O O $string$ O O O O O $CalendarComponentOptions$ O $any$ O O $Date$ O O $DateConstructor$ O O O O O O O O $number[]$ O O O O O $number[]$ O O O O O O O $ModalController$ O O O $void$ O $any$ O O $Console$ O $void$ O $any$ O O O $void$ O $string$ O O O O $CalendarComponentOptions$ O O O O O $CalendarComponentOptions$ O $string$ O O O O $void$ O $boolean$ O O O O $CalendarComponentOptions$ O O O O O $CalendarComponentOptions$ O $boolean$ O O O O $void$ O $boolean$ O O O O $CalendarComponentOptions$ O O O O O $CalendarComponentOptions$ O $boolean$ O O O O $void$ O $string[]$ O O O O O O O O $CalendarComponentOptions$ O O O O O $CalendarComponentOptions$ O $number[]$ O $string[]$ O $U[]$ O $string$ O $number$ O $string$ O O O O O O $void$ O $string$ O O O O $CalendarComponentOptions$ O O O O O $CalendarComponentOptions$ O $number$ O $number$ O $string$ O O O O O O
import { Component } from 's' ; import { ToastController } from 's' ; import { CalendarComponentOptions } from 's' ; @ Component ( { selector : 's' , template : `template` , } ) export class DemoEventsComponent { date : { from : string ; to : string ; } = { from : 's' , to : 's' , } ; options : CalendarComponentOptions = { from : new Date ( 0 , 0 , 0 ) , pickMode : 's' , } ; constructor ( private toastCtrl ) { } async _toastWrap ( event , payload : { } ) { const toast = await this . toastCtrl . create ( { message : `template` , duration : 0 , } ) ; toast . present ( ) ; } onChange ( $event ) { console . log ( 's' , $event ) ; this . _toastWrap ( 's' , $event ) ; } onSelect ( $event ) { console . log ( 's' , $event ) ; this . _toastWrap ( 's' , $event ) ; } onSelectStart ( $event ) { console . log ( 's' , $event ) ; this . _toastWrap ( 's' , $event ) ; } onSelectEnd ( $event ) { console . log ( 's' , $event ) ; this . _toastWrap ( 's' , $event ) ; } monthChange ( $event ) { console . log ( 's' , $event ) ; this . _toastWrap ( 's' , $event ) ; } }	O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O $complex$ O O $string$ O O O $string$ O O O O O O $string$ O O O $string$ O O O O O $CalendarComponentOptions$ O $any$ O O $Date$ O O $DateConstructor$ O O O O O O O O $string$ O O O O O O O O $ToastController$ O O O O $Promise<void>$ O $string$ O ${}$ O O O O O O $any$ O O O O $any$ O $any$ O O $string$ O O O $number$ O O O O O O $any$ O $any$ O O O O $void$ O $any$ O O $Console$ O $void$ O O O $any$ O O O O $Promise<void>$ O O O $any$ O O O $void$ O $any$ O O $Console$ O $void$ O O O $any$ O O O O $Promise<void>$ O O O $any$ O O O $void$ O $any$ O O $Console$ O $void$ O O O $any$ O O O O $Promise<void>$ O O O $any$ O O O $void$ O $any$ O O $Console$ O $void$ O O O $any$ O O O O $Promise<void>$ O O O $any$ O O O $void$ O $any$ O O $Console$ O $void$ O O O $any$ O O O O $Promise<void>$ O O O $any$ O O O O
import { Component , ViewChild } from 's' ; import { ToastController } from 's' ; import { CalendarComponent , CalendarComponentOptions } from 's' ; @ Component ( { selector : 's' , template : `template` , } ) export class DemoMethodsComponent { @ ViewChild ( 's' , { read : CalendarComponent } ) calendarRef : CalendarComponent ; date : { from : string ; to : string ; } = { from : 's' , to : 's' , } ; options : CalendarComponentOptions = { from : new Date ( 0 , 0 , 0 ) , pickMode : 's' , } ; constructor ( private toastCtrl ) { } async _toastWrap ( event , payload : { } ) { const toast = await this . toastCtrl . create ( { message : `template` , duration : 0 , } ) ; toast . present ( ) ; } onChange ( $event ) { console . log ( 's' , $event ) ; } getCalendarViewDate ( ) { console . log ( this . calendarRef ) ; this . _toastWrap ( 's' , this . calendarRef . getViewDate ( ) ) ; console . log ( 's' , this . calendarRef . getViewDate ( ) ) ; } serCalendarViewDate ( ) { this . calendarRef . setViewDate ( 's' ) ; } }	O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O O $any$ O O O O $any$ O $any$ O O $CalendarComponent$ O $any$ O $complex$ O O $string$ O O O $string$ O O O O O O $string$ O O O $string$ O O O O O $CalendarComponentOptions$ O $any$ O O $Date$ O O $DateConstructor$ O O O O O O O O $string$ O O O O O O O O $ToastController$ O O O O $Promise<void>$ O $string$ O ${}$ O O O O O O $any$ O O O O $any$ O $any$ O O $string$ O O O $number$ O O O O O O $any$ O $any$ O O O O $void$ O $any$ O O $Console$ O $void$ O O O $any$ O O O $void$ O O O $Console$ O $void$ O O O $CalendarComponent$ O O O O $Promise<void>$ O O O O O $CalendarComponent$ O $CalendarComponentPayloadTypes$ O O O O $Console$ O $void$ O O O O O $CalendarComponent$ O $CalendarComponentPayloadTypes$ O O O O O $void$ O O O O O $CalendarComponent$ O $void$ O O O O O O
import { Component } from 's' ; import { ModalController } from 's' ; import { CalendarModal , CalendarModalOptions } from 's' ; @ Component ( { selector : 's' , template : `template` , } ) export class DemoModalRangeBackwardsComponent { dateRange : { from : Date ; to : Date ; } = { from : new Date ( ) , to : new Date ( Date . now ( ) + 0 * 0 * 0 * 0 * 0 ) , } ; constructor ( public modalCtrl ) { } async openCalendar ( ) { const options = { pickMode : 's' , title : 's' , defaultDateRange : this . dateRange , canBackwardsSelected : true , } ; const myCalendar = await this . modalCtrl . create ( { component : CalendarModal , componentProps : { options } , } ) ; myCalendar . present ( ) ; const event = await myCalendar . onDidDismiss ( ) ; const { data : date , role } = event ; if ( role === 's' ) { this . dateRange = Object . assign ( { } , { from : date . from . dateObj , to : date . to . dateObj , } ) ; } console . log ( date ) ; console . log ( 's' , role ) ; } }	O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O $complex$ O O $Date$ O $DateConstructor$ O $Date$ O $DateConstructor$ O O O O $Date$ O O $DateConstructor$ O O O $Date$ O O $DateConstructor$ O $DateConstructor$ O $number$ O O O O O O O O O O O O O O O O O O O $ModalController$ O O O O $Promise<void>$ O O O O $CalendarModalOptions$ O O $string$ O O O $string$ O O O $complex$ O O O $complex$ O $true$ O O O O O O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O $complex$ O O $CalendarModalOptions$ O O O O O $any$ O $any$ O O O O $any$ O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O O O O O O $complex$ O $ObjectConstructor$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $Console$ O $void$ O $any$ O O $Console$ O $void$ O O O $any$ O O O O
import { Component , ViewChild } from 's' ; @ Component ( { template : `template` , } ) export class SubHeaderCalendarModal { toDate ( p ) { console . log ( p ) ; } }	O O $any$ O $any$ O O O O O $any$ O O $string$ O O O O O O O $any$ O $void$ O $any$ O O $Console$ O $void$ O $any$ O O O O
import { Component } from 's' ; import { ModalController } from 's' ; import { CalendarModalOptions } from 's' ; import { SubHeaderCalendarModal } from 's' ; @ Component ( { selector : 's' , template : `template` , } ) export class DemoModalCustomSubHeaderComponent { date : Date = new Date ( ) ; constructor ( public modalCtrl ) { } async openCalendar ( ) { const options = { title : 's' , defaultDate : this . date , canBackwardsSelected : true , } ; const myCalendar = await this . modalCtrl . create ( { component : SubHeaderCalendarModal , componentProps : { options } , } ) ; myCalendar . present ( ) ; const event = await myCalendar . onDidDismiss ( ) ; const { data : date , role } = event ; if ( role === 's' ) { this . date = date . dateObj ; } console . log ( date ) ; console . log ( 's' , role ) ; } }	O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O $Date$ O $DateConstructor$ O O $DateConstructor$ O O O O O O $ModalController$ O O O O $Promise<void>$ O O O O $CalendarModalOptions$ O O $string$ O O O $Date$ O O O $Date$ O $true$ O O O O O O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O $complex$ O O $CalendarModalOptions$ O O O O O $any$ O $any$ O O O O $any$ O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O O O O O O $Date$ O $any$ O $any$ O O $Console$ O $void$ O $any$ O O $Console$ O $void$ O O O $any$ O O O O
import { Component } from 's' ; import { ModalController } from 's' ; import { CalendarModal , CalendarModalOptions } from 's' ; @ Component ( { selector : 's' , template : `template` , } ) export class DemoModalRangeWithDefaultEndDate { dateRange : { from : Date ; } = { from : new Date ( ) , } ; constructor ( public modalCtrl ) { } async openCalendar ( ) { const options = { pickMode : 's' , title : 's' , defaultDateRange : this . dateRange , defaultEndDateToStartDate : true , } ; const myCalendar = await this . modalCtrl . create ( { component : CalendarModal , componentProps : { options } , } ) ; myCalendar . present ( ) ; const event = await myCalendar . onDidDismiss ( ) ; const { data : date , role } = event ; if ( role === 's' ) { this . dateRange = Object . assign ( { } , { from : date . from . dateObj , to : date . to . dateObj , } ) ; } console . log ( date ) ; console . log ( 's' , role ) ; } }	O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O $complex$ O O $Date$ O $DateConstructor$ O O O O $Date$ O O $DateConstructor$ O O O O O O O O $ModalController$ O O O O $Promise<void>$ O O O O $CalendarModalOptions$ O O $string$ O O O $string$ O O O $complex$ O O O $complex$ O $true$ O O O O O O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O $complex$ O O $CalendarModalOptions$ O O O O O $any$ O $any$ O O O O $any$ O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O O O O O O $complex$ O $ObjectConstructor$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $Console$ O $void$ O $any$ O O $Console$ O $void$ O O O $any$ O O O O
import { NgModule } from 's' ; import { IonicModule } from 's' ; import { CalendarModule } from 's' ; import { CommonModule } from 's' ; import { DemoModalBasicComponent } from 's' ; import { DemoModalMultiComponent } from 's' ; import { DemoModalRangeComponent } from 's' ; import { DemoModalDisableWeekComponent } from 's' ; import { DemoModalLocaleComponent } from 's' ; import { DemoModalCustomStyleComponent } from 's' ; import { DemoModalDefaultScrollComponent } from 's' ; import { DemoModalConfigDaysComponent } from 's' ; import { DemoBasicComponent } from 's' ; import { FormsModule } from 's' ; import { DemoMultiComponent } from 's' ; import { DemoRangeComponent } from 's' ; import { DemoOptionsComponent } from 's' ; import { DemoEventsComponent } from 's' ; import { DemoMethodsComponent } from 's' ; import { DemoModalRangeBackwardsComponent } from 's' ; import { DemoModalCustomSubHeaderComponent } from 's' ; import { SubHeaderCalendarModal } from 's' ; import { DemoModalRangeWithDefaultEndDate } from 's' ; const COMPONENTS = [ DemoModalBasicComponent , DemoModalMultiComponent , DemoModalRangeComponent , DemoModalCustomSubHeaderComponent , SubHeaderCalendarModal , DemoModalDisableWeekComponent , DemoModalLocaleComponent , DemoModalCustomStyleComponent , DemoModalDefaultScrollComponent , DemoModalConfigDaysComponent , DemoBasicComponent , DemoMultiComponent , DemoRangeComponent , DemoOptionsComponent , DemoEventsComponent , DemoMethodsComponent , DemoModalRangeBackwardsComponent , DemoModalRangeWithDefaultEndDate , ] ; @ NgModule ( { declarations : [ ... COMPONENTS ] , imports : [ CommonModule , IonicModule , FormsModule , CalendarModule ] , exports : [ ... COMPONENTS ] , entryComponents : [ ... COMPONENTS ] , } ) export class DemosModule { }	O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $complex$ O O O $complex$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O O $complex$ O O O $complex$ O O $complex$ O O O $complex$ O O O O O O $any$ O O
import { NgModule } from 's' ; import { BrowserModule } from 's' ; import { RouterModule , RouteReuseStrategy , Routes } from 's' ; import { IonicModule , IonicRouteStrategy } from 's' ; import { SplashScreen } from 's' ; import { StatusBar } from 's' ; import { AppComponent } from 's' ; import { AppRoutingModule } from 's' ; import { CalendarModule } from 's' ; import { DemosModule } from 's' ; @ NgModule ( { declarations : [ AppComponent ] , entryComponents : [ ] , imports : [ BrowserModule , IonicModule . forRoot ( ) , AppRoutingModule , CalendarModule , DemosModule ] , providers : [ StatusBar , SplashScreen , { provide : RouteReuseStrategy , useClass : IonicRouteStrategy } ] , bootstrap : [ AppComponent ] , } ) export class AppModule { }	O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $complex$ O O $any$ O O $undefined[]$ O O O O $any[]$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any[]$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O $complex$ O O $any$ O O O O O O $any$ O O
import { Component } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' , styleUrls : [ 's' ] , } ) export class HomePage { }	O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O O $any$ O O
import { NgModule } from 's' ; import { CommonModule } from 's' ; import { IonicModule } from 's' ; import { FormsModule } from 's' ; import { RouterModule } from 's' ; import { HomePage } from 's' ; import { CalendarModule } from 's' ; import { DemosModule } from 's' ; @ NgModule ( { imports : [ CommonModule , FormsModule , IonicModule , CalendarModule , DemosModule , RouterModule . forChild ( [ { path : 's' , component : HomePage , } , ] ) , ] , declarations : [ HomePage ] , } ) export class HomePageModule { }	O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O O O O O O $complex$ O O $any$ O O O O O O $any$ O O
import { CUSTOM_ELEMENTS_SCHEMA } from 's' ; import { async , ComponentFixture , TestBed } from 's' ; import { HomePage } from 's' ; describe ( 's' , ( ) => { let component ; let fixture < HomePage > ; beforeEach ( async ( ( ) => { TestBed . configureTestingModule ( { declarations : [ HomePage ] , schemas : [ CUSTOM_ELEMENTS_SCHEMA ] , } ) . compileComponents ( ) ; } ) ) ; beforeEach ( ( ) => { fixture = TestBed . createComponent ( HomePage ) ; component = fixture . componentInstance ; fixture . detectChanges ( ) ; } ) ; it ( 's' , ( ) => { expect ( component ) . toBeTruthy ( ) ; } ) ; } ) ;	O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O $any$ O O O O O O O O $HomePage$ O O $ComponentFixture$ O $any$ O O $any$ O $any$ O O O O O $any$ O $any$ O O $complex$ O O $any$ O O $any[]$ O O $any$ O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O $HomePage$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O O $any$ O $HomePage$ O O $any$ O O O O O O O O O
export const environment = { production : true } ;	O O $complex$ O O $boolean$ O O O O
export const environment = { production : false } ;	O O $complex$ O O $boolean$ O O O O
'js' module . exports = function ( config ) { config . set ( { basePath : 's' , frameworks : [ 's' , 's' ] , plugins : [ require ( 's' ) , require ( 's' ) , require ( 's' ) , require ( 's' ) , require ( 's' ) ] , client : { clearContext : false } , coverageIstanbulReporter : { dir : require ( 's' ) . join ( __dirname , 's' ) , reports : [ 's' , 's' ] , fixWebpackSourcePaths : true } , reporters : [ 's' , 's' ] , port : 0 , colors : true , logLevel : config . LOG_INFO , autoWatch : true , browsers : [ 's' ] , singleRun : false } ) ; } ;	O $void$ O $void$ O O O $any$ O O $any$ O $any$ O O $string$ O O O $string[]$ O O O O O O O $any[]$ O O $any$ O O O O $any$ O O O O $any$ O O O O $any$ O O O O $any$ O O O O O $complex$ O O $boolean$ O O O O $complex$ O O $any$ O $any$ O O O O $any$ O $any$ O O O O $string[]$ O O O O O O O $boolean$ O O O O $string[]$ O O O O O O O $number$ O O O $boolean$ O O O $any$ O $any$ O $any$ O $boolean$ O O O $string[]$ O O O O O $boolean$ O O O O O O O
import { enableProdMode } from 's' ; import { platformBrowserDynamic } from 's' ; import { AppModule } from 's' ; import { environment } from 's' ; if ( environment . production ) { enableProdMode ( ) ; } platformBrowserDynamic ( ) . bootstrapModule ( AppModule ) . catch ( err => console . log ( err ) ) ;	O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $complex$ O O O O O O $complex$ O $boolean$ O O $any$ O O O O $any$ O O O $any$ O $any$ O O $any$ O $any$ O $Console$ O $void$ O $any$ O O O
import 's' ; import 's' ;	O O O O O O
import 's' ; import { getTestBed } from 's' ; import { BrowserDynamicTestingModule , platformBrowserDynamicTesting } from 's' ; declare const require ; getTestBed ( ) . initTestEnvironment ( BrowserDynamicTestingModule , platformBrowserDynamicTesting ( ) ) ; const context = require . context ( 's' , true , "s" ) ; context . keys ( ) . map ( context ) ;	O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O
'js' const gulp = require ( 's' ) ; const clean = require ( 's' ) ; const ext_replace = require ( 's' ) ; const sass = require ( 's' ) ; const bump = require ( 's' ) ; const paths = { dist : 's' , dve : 's' , src : 's' , } ; gulp . task ( 's' , copySources ) ; gulp . task ( 's' , copyScss ) ; gulp . task ( 's' , cleanScss ) ; gulp . task ( 's' , renameCss ) ; gulp . task ( 's' , bumpVersions ) ; function bumpVersions ( options ) { return gulp . src ( [ 's' ] , { base : 's' } ) . pipe ( bump ( options ) ) . pipe ( gulp . dest ( 's' ) ) ; } function copySources ( ) { gulp . src ( `template` ) . pipe ( gulp . dest ( paths . src ) ) ; } function copyScss ( ) { return gulp . src ( `template` ) . pipe ( sass ( ) . on ( 's' , sass . logError ) ) . pipe ( gulp . dest ( paths . src ) ) ; } function cleanScss ( ) { return gulp . src ( `template` , { read : false } ) . pipe ( clean ( ) ) ; } function renameCss ( ) { return gulp . src ( `template` ) . pipe ( ext_replace ( 's' ) ) . pipe ( gulp . dest ( paths . src ) ) ; }	O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O O O $any$ O $any$ O O O $void$ O O $any$ O $any$ O O O $any$ O O $any$ O $any$ O O O $any$ O O $any$ O $any$ O O O $any$ O O $any$ O $any$ O O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O $string$ O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O O $void$ O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $complex$ O $string$ O O O O O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $complex$ O $string$ O O O O O $any$ O O O O $any$ O $any$ O O O O $boolean$ O O O O O $any$ O $any$ O O O O O O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $complex$ O $string$ O O O O
import { AnimationBuilder } from 's' ; export interface CalendarOriginal { time : number ; date : Date ; year : number ; month : number ; firstWeek : number ; howManyDays : number ; } export interface CalendarDay { time : number ; isToday : boolean ; selected : boolean ; disable : boolean ; cssClass : string ; isLastMonth ? : boolean ; isNextMonth ? : boolean ; title ? : string ; subTitle ? : string ; marked ? : boolean ; style ? : { title ? : string ; subTitle ? : string ; } ; isFirst ? : boolean ; isLast ? : boolean ; } export class CalendarMonth { original : CalendarOriginal ; days : Array < CalendarDay | void > ; } export interface DayConfig { date : Date ; marked ? : boolean ; disable ? : boolean ; title ? : string ; subTitle ? : string ; cssClass ? : string ; } export interface ModalOptions { showBackdrop ? : boolean ; backdropDismiss ? : boolean ; enterAnimation ? : AnimationBuilder ; leaveAnimation ? : AnimationBuilder ; } export interface CalendarModalOptions extends CalendarOptions { autoDone ? : boolean ; format ? : string ; cssClass ? : string ; id ? : string ; isSaveHistory ? : boolean ; closeLabel ? : string ; doneLabel ? : string ; closeIcon ? : boolean ; doneIcon ? : boolean ; canBackwardsSelected ? : boolean ; title ? : string ; defaultScrollTo ? : Date ; defaultDate ? : DefaultDate ; defaultDates ? : DefaultDate [ ] ; defaultDateRange ? : { from : DefaultDate ; to ? : DefaultDate } | null ; step ? : number ; showYearPicker ? : boolean ; defaultEndDateToStartDate ? : boolean ; } export interface CalendarOptions { from ? : Date | number ; to ? : Date | number ; pickMode ? : string ; weekStart ? : number ; disableWeeks ? : Array < number > ; weekdays ? : Array < string > ; monthFormat ? : string ; color ? : string ; defaultTitle ? : string ; defaultSubtitle ? : string ; daysConfig ? : Array < DayConfig > ; showAdjacentMonthDay ? : boolean ; } export interface CalendarComponentOptions extends CalendarOptions { showToggleButtons ? : boolean ; showMonthPicker ? : boolean ; monthPickerFormat ? : string [ ] ; } export class CalendarResult { time : number ; unix : number ; dateObj : Date ; string : string ; years : number ; months : number ; date : number ; } export class CalendarComponentMonthChange { oldMonth : CalendarResult ; newMonth : CalendarResult ; } export type DefaultDate = Date | string | number | null ; export type Colors = 's' | 's' | 's' | 's' | 's' | string ; export type PickMode = 's' | 's' | 's' ; export type CalendarComponentTypeProperty = 's' | 's' | 's' | 's' | 's' ; export type CalendarComponentPayloadTypes = string | Date | number | { } ;	O O $any$ O O O O O O $any$ O $number$ O O O $Date$ O $DateConstructor$ O $number$ O O O $number$ O O O $number$ O O O $number$ O O O O O O $any$ O $number$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $string$ O O O $boolean$ O O O O $boolean$ O O O O $string$ O O O O $string$ O O O O $boolean$ O O O O $complex$ O O O $string$ O O O O $string$ O O O O O O $boolean$ O O O O $boolean$ O O O O O O O $any$ O $CalendarOriginal$ O $any$ O $complex$ O $ArrayConstructor$ O $any$ O O O O O O O $any$ O $Date$ O $DateConstructor$ O $boolean$ O O O O $boolean$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O O O O $any$ O $boolean$ O O O O $boolean$ O O O O $any$ O O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O $boolean$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $boolean$ O O O O $string$ O O O O $string$ O O O O $boolean$ O O O O $boolean$ O O O O $boolean$ O O O O $string$ O O O O $Date$ O O $DateConstructor$ O $complex$ O O $any$ O $complex$ O O $any$ O O O $complex$ O O O $complex$ O $any$ O $complex$ O O $any$ O O O O $number$ O O O O $boolean$ O O O O $boolean$ O O O O O O O $any$ O $complex$ O O $DateConstructor$ O O O $complex$ O O $DateConstructor$ O O O $string$ O O O O $number$ O O O O $number[]$ O O $ArrayConstructor$ O O O O $string[]$ O O $ArrayConstructor$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $DayConfig[]$ O O $ArrayConstructor$ O $any$ O O $boolean$ O O O O O O O $any$ O $any$ O $boolean$ O O O O $boolean$ O O O O $string[]$ O O O O O O O O O $any$ O $number$ O O O $number$ O O O $Date$ O $DateConstructor$ O $string$ O O O $number$ O O O $number$ O O O $number$ O O O O O O $any$ O $CalendarResult$ O $any$ O $CalendarResult$ O $any$ O O O O $any$ O $DateConstructor$ O O O O O O O O O $any$ O O O O O O O O O O O O O O O $any$ O O O O O O O O O $any$ O O O O O O O O O O O O O $any$ O O O $DateConstructor$ O O O O O O
export const defaults = { DATE_FORMAT : 's' , COLOR : 's' , WEEKS_FORMAT : [ 's' , 's' , 's' , 's' , 's' , 's' , 's' ] , MONTH_FORMAT : [ 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' ] } ; export const pickModes = { SINGLE : 's' , RANGE : 's' , MULTI : 's' } ;	O O $complex$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O O O O O O O O O O $string[]$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O O
import { InjectionToken } from 's' ; import { CalendarModalOptions } from 's' ; export const DEFAULT_CALENDAR_OPTIONS = new InjectionToken < CalendarModalOptions > ( 's' ) ;	O O $any$ O O O O O O $any$ O O O O O O $any$ O O $any$ O $any$ O O O O O
import { Inject , Injectable , Optional } from 's' ; import * as moment from 's' ; import { CalendarOriginal , CalendarDay , CalendarMonth , CalendarModalOptions , CalendarResult , DayConfig , } from 's' ; import { defaults , pickModes } from 's' ; import { DEFAULT_CALENDAR_OPTIONS } from 's' ; const isBoolean = ( input ) => input === true || input === false ; @ Injectable ( ) export class CalendarService { private readonly defaultOpts : CalendarModalOptions ; constructor ( @ Optional ( ) @ Inject ( DEFAULT_CALENDAR_OPTIONS ) defaultOpts ) { this . defaultOpts = defaultOpts ; } get DEFAULT_STEP ( ) { return 0 ; } safeOpt ( calendarOptions = { } ) { const _disableWeeks : number [ ] = [ ] ; const _daysConfig : DayConfig [ ] = [ ] ; let { from = new Date ( ) , to = 0 , weekStart = 0 , step = this . DEFAULT_STEP , id = 's' , cssClass = 's' , closeLabel = 's' , doneLabel = 's' , monthFormat = 's' , title = 's' , defaultTitle = 's' , defaultSubtitle = 's' , autoDone = false , canBackwardsSelected = false , closeIcon = false , doneIcon = false , showYearPicker = false , isSaveHistory = false , pickMode = pickModes . SINGLE , color = defaults . COLOR , weekdays = defaults . WEEKS_FORMAT , daysConfig = _daysConfig , disableWeeks = _disableWeeks , showAdjacentMonthDay = true , defaultEndDateToStartDate = false , } = { ... this . defaultOpts , ... calendarOptions } ; return { id , from , to , pickMode , autoDone , color , cssClass , weekStart , closeLabel , closeIcon , doneLabel , doneIcon , canBackwardsSelected , isSaveHistory , disableWeeks , monthFormat , title , weekdays , daysConfig , step , showYearPicker , defaultTitle , defaultSubtitle , defaultScrollTo : calendarOptions . defaultScrollTo || from , defaultDate : calendarOptions . defaultDate || null , defaultDates : calendarOptions . defaultDates || null , defaultDateRange : calendarOptions . defaultDateRange || null , showAdjacentMonthDay , defaultEndDateToStartDate } ; } createOriginalCalendar ( time ) { const date = new Date ( time ) ; const year = date . getFullYear ( ) ; const month = date . getMonth ( ) ; const firstWeek = new Date ( year , month , 0 ) . getDay ( ) ; const howManyDays = moment ( time ) . daysInMonth ( ) ; return { year , month , firstWeek , howManyDays , time : new Date ( year , month , 0 ) . getTime ( ) , date : new Date ( time ) , } ; } findDayConfig ( day , opt ) { if ( opt . daysConfig . length <= 0 ) return null ; return opt . daysConfig . find ( n => day . isSame ( n . date , 's' ) ) ; } createCalendarDay ( time , opt , month ? ) { let _time = moment ( time ) ; let date = moment ( time ) ; let isToday = moment ( ) . isSame ( _time , 's' ) ; let dayConfig = this . findDayConfig ( _time , opt ) ; let _rangeBeg = moment ( opt . from ) . valueOf ( ) ; let _rangeEnd = moment ( opt . to ) . valueOf ( ) ; let isBetween = true ; let disableWee = opt . disableWeeks . indexOf ( _time . toDate ( ) . getDay ( ) ) !== - 0 ; if ( _rangeBeg > 0 && _rangeEnd > 0 ) { if ( ! opt . canBackwardsSelected ) { isBetween = ! _time . isBetween ( _rangeBeg , _rangeEnd , 's' , 's' ) ; } else { isBetween = moment ( _time ) . isBefore ( _rangeBeg ) ? false : isBetween ; } } else if ( _rangeBeg > 0 && _rangeEnd === 0 ) { if ( ! opt . canBackwardsSelected ) { let _addTime = _time . add ( 0 , 's' ) ; isBetween = ! _addTime . isAfter ( _rangeBeg ) ; } else { isBetween = false ; } } let _disable = false ; if ( dayConfig && isBoolean ( dayConfig . disable ) ) { _disable = dayConfig . disable ; } else { _disable = disableWee || isBetween ; } let title = new Date ( time ) . getDate ( ) . toString ( ) ; if ( dayConfig && dayConfig . title ) { title = dayConfig . title ; } else if ( opt . defaultTitle ) { title = opt . defaultTitle ; } let subTitle = 's' ; if ( dayConfig && dayConfig . subTitle ) { subTitle = dayConfig . subTitle ; } else if ( opt . defaultSubtitle ) { subTitle = opt . defaultSubtitle ; } return { time , isToday , title , subTitle , selected : false , isLastMonth : date . month ( ) < month , isNextMonth : date . month ( ) > month , marked : dayConfig ? dayConfig . marked || false : false , cssClass : dayConfig ? dayConfig . cssClass || 's' : 's' , disable : _disable , isFirst : date . date ( ) === 0 , isLast : date . date ( ) === date . daysInMonth ( ) , } ; } createCalendarMonth ( original , opt ) { let days < CalendarDay > = new Array ( 0 ) . fill ( null ) ; let len = original . howManyDays ; for ( let i = original . firstWeek ; i < len + original . firstWeek ; i ++ ) { let itemTime = new Date ( original . year , original . month , i - original . firstWeek + 0 ) . getTime ( ) ; days [ i ] = this . createCalendarDay ( itemTime , opt ) ; } let weekStart = opt . weekStart ; if ( weekStart === 0 ) { if ( days [ 0 ] === null ) { days . shift ( ) ; } else { days . unshift ( ... new Array ( 0 ) . fill ( null ) ) ; } } if ( opt . showAdjacentMonthDay ) { const _booleanMap = days . map ( e => ! ! e ) ; const thisMonth = moment ( original . time ) . month ( ) ; let startOffsetIndex = _booleanMap . indexOf ( true ) - 0 ; let endOffsetIndex = _booleanMap . lastIndexOf ( true ) + 0 ; for ( startOffsetIndex ; startOffsetIndex >= 0 ; startOffsetIndex -- ) { const dayBefore = moment ( days [ startOffsetIndex + 0 ] . time ) . clone ( ) . subtract ( 0 , 's' ) ; days [ startOffsetIndex ] = this . createCalendarDay ( dayBefore . valueOf ( ) , opt , thisMonth ) ; } if ( ! ( _booleanMap . length % 0 === 0 && _booleanMap [ _booleanMap . length - 0 ] ) ) { for ( endOffsetIndex ; endOffsetIndex < days . length + ( endOffsetIndex % 0 ) ; endOffsetIndex ++ ) { const dayAfter = moment ( days [ endOffsetIndex - 0 ] . time ) . clone ( ) . add ( 0 , 's' ) ; days [ endOffsetIndex ] = this . createCalendarDay ( dayAfter . valueOf ( ) , opt , thisMonth ) ; } } } return { days , original : original , } ; } createMonthsByPeriod ( startTime , monthsNum , opt ) < CalendarMonth > { let _array < CalendarMonth > = [ ] ; let _start = new Date ( startTime ) ; let _startMonth = new Date ( _start . getFullYear ( ) , _start . getMonth ( ) , 0 ) . getTime ( ) ; for ( let i = 0 ; i < monthsNum ; i ++ ) { let time = moment ( _startMonth ) . add ( i , 's' ) . valueOf ( ) ; let originalCalendar = this . createOriginalCalendar ( time ) ; _array . push ( this . createCalendarMonth ( originalCalendar , opt ) ) ; } return _array ; } wrapResult ( original : CalendarDay [ ] , pickMode ) { let result ; switch ( pickMode ) { case pickModes . SINGLE : result = this . multiFormat ( original [ 0 ] . time ) ; break ; case pickModes . RANGE : result = { from : this . multiFormat ( original [ 0 ] . time ) , to : this . multiFormat ( ( original [ 0 ] || original [ 0 ] ) . time ) , } ; break ; case pickModes . MULTI : result = original . map ( e => this . multiFormat ( e . time ) ) ; break ; default : result = original ; } return result ; } multiFormat ( time ) { const _moment = moment ( time ) ; return { time : _moment . valueOf ( ) , unix : _moment . unix ( ) , dateObj : _moment . toDate ( ) , string : _moment . format ( defaults . DATE_FORMAT ) , years : _moment . year ( ) , months : _moment . month ( ) + 0 , date : _moment . date ( ) , } ; } }	O O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $complex$ O $complex$ O O O O O O $any$ O O O O O $boolean$ O O $any$ O O $any$ O O O $any$ O O O O $any$ O O O O $any$ O O O $CalendarModalOptions$ O $any$ O O O O $any$ O O O $any$ O $any$ O $CalendarModalOptions$ O O O O $CalendarModalOptions$ O $CalendarModalOptions$ O O O $number$ O O O O O O O $CalendarModalOptions$ O $any$ O O O O O O $number[]$ O O O O O O O O O $DayConfig[]$ O $any$ O O O O O O O O $any$ O O $DateConstructor$ O O O $any$ O O O $any$ O O O $any$ O O O $number$ O $any$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O $complex$ O $string$ O $any$ O $complex$ O $string$ O $any$ O $complex$ O $string[]$ O $any$ O $DayConfig[]$ O $any$ O $number[]$ O $any$ O O O $any$ O O O O O O O O O $CalendarModalOptions$ O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $CalendarOriginal$ O $number$ O O O $Date$ O O $DateConstructor$ O $number$ O O O $number$ O $Date$ O $number$ O O O O $number$ O $Date$ O $number$ O O O O $number$ O O $DateConstructor$ O $number$ O $number$ O O O O $number$ O O O O $any$ O $any$ O $number$ O O $any$ O O O O O $number$ O $number$ O $number$ O $any$ O $number$ O O $DateConstructor$ O $number$ O $number$ O O O O $number$ O O O $Date$ O O $DateConstructor$ O $number$ O O O O O $any$ O $any$ O $CalendarModalOptions$ O O O O $CalendarModalOptions$ O $DayConfig[]$ O $number$ O O O O O O O $CalendarModalOptions$ O $DayConfig[]$ O $complex$ O $DayConfig$ O $any$ O $any$ O $DayConfig$ O $Date$ O O O O O O $CalendarDay$ O $number$ O $CalendarModalOptions$ O $number$ $number$ O O O $any$ O $any$ O $number$ O O O $any$ O $any$ O $number$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O $CalendarModalOptions$ O O O $any$ O $any$ O $CalendarModalOptions$ O $complex$ O O $any$ O O O O $any$ O $any$ O $CalendarModalOptions$ O $complex$ O O $any$ O O O O $boolean$ O O O O $boolean$ O $CalendarModalOptions$ O $number[]$ O $number$ O $any$ O $any$ O O O $any$ O O O O O O O O O $any$ O O O $any$ O O O O O O O $CalendarModalOptions$ O $boolean$ O O $boolean$ O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O $boolean$ O $any$ O $any$ O O $any$ O $any$ O O O O $true$ O O O O O O $any$ O O O $any$ O O O O O O O $CalendarModalOptions$ O $boolean$ O O O $any$ O $any$ O $any$ O O O O O O $boolean$ O O $any$ O $any$ O $any$ O O O O O $boolean$ O O O O O O $boolean$ O O O O O $any$ O $boolean$ O $any$ O $any$ O O O $boolean$ O $any$ O $any$ O O O O $boolean$ O $boolean$ O $boolean$ O O O $string$ O O $DateConstructor$ O $number$ O O $number$ O O O $string$ O O O O O $any$ O $any$ O $any$ O O $string$ O $any$ O $any$ O O O O O $CalendarModalOptions$ O $string$ O O $string$ O $CalendarModalOptions$ O $string$ O O O $string$ O O O O O $any$ O $any$ O $any$ O O $string$ O $any$ O $any$ O O O O O $CalendarModalOptions$ O $string$ O O $string$ O $CalendarModalOptions$ O $string$ O O O O $number$ O $any$ O $string$ O $string$ O $false$ O O O $boolean$ O $any$ O $any$ O O O $number$ O $boolean$ O $any$ O $any$ O O O $number$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $boolean$ O $boolean$ O $boolean$ O $any$ O $any$ O O O O O $boolean$ O $any$ O $any$ O O O $any$ O $any$ O O O O O O $CalendarMonth$ O $CalendarOriginal$ O $CalendarModalOptions$ O O O $Array$ O $any$ O O O $ArrayConstructor$ O O O O $any[]$ O O O O O $number$ O $CalendarOriginal$ O $number$ O O O O $number$ O $CalendarOriginal$ O $number$ O $number$ O $number$ O $CalendarOriginal$ O $number$ O $number$ O O O O $number$ O O $DateConstructor$ O $CalendarOriginal$ O $number$ O $CalendarOriginal$ O $number$ O $number$ O $CalendarOriginal$ O $number$ O O O O $number$ O O O $CalendarDay[]$ O $number$ O O O O $CalendarDay$ O $number$ O $CalendarModalOptions$ O O O O $number$ O $CalendarModalOptions$ O $number$ O O O $number$ O O O O O O $CalendarDay[]$ O O O O O O O $CalendarDay[]$ O $CalendarDay$ O O O O O O $CalendarDay[]$ O $number$ O O O $ArrayConstructor$ O O O O $any[]$ O O O O O O O O O $CalendarModalOptions$ O $boolean$ O O O $boolean[]$ O $CalendarDay[]$ O $U[]$ O $CalendarDay$ O O O $CalendarDay$ O O O $any$ O $any$ O $CalendarOriginal$ O $number$ O O $any$ O O O O $number$ O $boolean[]$ O $number$ O O O O O O O $number$ O $boolean[]$ O $number$ O O O O O O O O $number$ O $number$ O O O $number$ O O O O $any$ O $any$ O $CalendarDay[]$ O $number$ O O O O $number$ O O $any$ O O O $any$ O O O O O O $CalendarDay[]$ O $number$ O O O O $CalendarDay$ O $any$ O $any$ O O O $CalendarModalOptions$ O $any$ O O O O O O O $boolean[]$ O $number$ O O O O O $boolean[]$ O $boolean[]$ O $number$ O O O O O O O O $number$ O $number$ O $CalendarDay[]$ O $number$ O O $number$ O O O O $number$ O O O O $any$ O $any$ O $CalendarDay[]$ O $number$ O O O O $number$ O O $any$ O O O $any$ O O O O O O $CalendarDay[]$ O $number$ O O O O $CalendarDay$ O $any$ O $any$ O O O $CalendarModalOptions$ O $any$ O O O O O O O $CalendarDay[]$ O $CalendarOriginal$ O $CalendarOriginal$ O O O O $Array$ O $number$ O $number$ O $CalendarModalOptions$ O O $any$ O O O $Array$ O $any$ O O O O O O $Date$ O O $DateConstructor$ O $number$ O O O $number$ O O $DateConstructor$ O $Date$ O $number$ O O O $Date$ O $number$ O O O O O O $number$ O O O O O O $number$ O O O $number$ O $number$ O $number$ O O O O $any$ O $any$ O $number$ O O $any$ O $number$ O O O O $any$ O O O O $CalendarOriginal$ O O O $CalendarOriginal$ O $any$ O O $CalendarMonth[]$ O $number$ O O O $CalendarMonth$ O $CalendarOriginal$ O $CalendarModalOptions$ O O O O O $CalendarMonth[]$ O O $any$ O $CalendarDay[]$ O $any$ O O O $string$ O O O $any$ O O O $string$ O O O $complex$ O $string$ O $any$ O O O $CalendarResult$ O $CalendarDay[]$ O O O O $number$ O O O O O $complex$ O $string$ O $any$ O O $CalendarResult$ O O O $CalendarResult$ O $CalendarDay[]$ O O O O $number$ O O $CalendarResult$ O O O $CalendarResult$ O O $CalendarDay[]$ O O O O $CalendarDay[]$ O O O O O $number$ O O O O O O O $complex$ O $string$ O $any$ O $CalendarDay[]$ O $U[]$ O $CalendarDay$ O O O $CalendarResult$ O $CalendarDay$ O $number$ O O O O O O O $any$ O $CalendarDay[]$ O O O $any$ O O $CalendarResult$ O $number$ O O O $any$ O $any$ O $number$ O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $complex$ O $string$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O O O O
import { Component , ViewChild , ElementRef , ChangeDetectorRef , 0 , OnInit , Input , AfterViewInit , HostBinding , } from 's' ; import { NavParams , ModalController , IonContent } from 's' ; import { CalendarDay , CalendarMonth , CalendarModalOptions } from 's' ; import { CalendarService } from 's' ; import * as moment from 's' ; import { pickModes } from 's' ; const NUM_OF_MONTHS_TO_CREATE = 0 ; @ Component ( { selector : 's' , styleUrls : [ 's' ] , template : `template` , } ) export class CalendarModal implements OnInit , AfterViewInit { @ ViewChild ( IonContent ) content : IonContent ; @ ViewChild ( 's' ) monthsEle : ElementRef ; @ HostBinding ( 's' ) ionPage = true ; @ Input ( ) options : CalendarModalOptions ; datesTemp : Array < CalendarDay > = [ null , null ] ; calendarMonths : Array < CalendarMonth > ; step : number ; showYearPicker : boolean ; year : number ; years : Array < number > ; _scrollLock = true ; _d : CalendarModalOptions ; actualFirstTime : number ; constructor ( private _renderer , public _elementRef , public params , public modalCtrl , public ref , public calSvc ) { } ngOnInit ( ) { this . init ( ) ; this . initDefaultDate ( ) ; } ngAfterViewInit ( ) { this . findCssClass ( ) ; if ( this . _d . canBackwardsSelected ) this . backwardsMonth ( ) ; this . scrollToDefaultDate ( ) ; } init ( ) { this . _d = this . calSvc . safeOpt ( this . options ) ; this . _d . showAdjacentMonthDay = false ; this . step = this . _d . step ; if ( this . step < this . calSvc . DEFAULT_STEP ) { this . step = this . calSvc . DEFAULT_STEP ; } this . calendarMonths = this . calSvc . createMonthsByPeriod ( moment ( this . _d . from ) . valueOf ( ) , this . findInitMonthNumber ( this . _d . defaultScrollTo ) + this . step , this . _d ) ; } initDefaultDate ( ) { const { pickMode , defaultDate , defaultDateRange , defaultDates } = this . _d ; switch ( pickMode ) { case pickModes . SINGLE : if ( defaultDate ) { this . datesTemp [ 0 ] = this . calSvc . createCalendarDay ( this . _getDayTime ( defaultDate ) , this . _d ) ; } break ; case pickModes . RANGE : if ( defaultDateRange ) { if ( defaultDateRange . from ) { this . datesTemp [ 0 ] = this . calSvc . createCalendarDay ( this . _getDayTime ( defaultDateRange . from ) , this . _d ) ; } if ( defaultDateRange . to ) { this . datesTemp [ 0 ] = this . calSvc . createCalendarDay ( this . _getDayTime ( defaultDateRange . to ) , this . _d ) ; } } break ; case pickModes . MULTI : if ( defaultDates && defaultDates . length ) { this . datesTemp = defaultDates . map ( e => this . calSvc . createCalendarDay ( this . _getDayTime ( e ) , this . _d ) ) ; } break ; default : this . datesTemp = [ null , null ] ; } } findCssClass ( ) { const { cssClass } = this . _d ; if ( cssClass ) { cssClass . split ( 's' ) . forEach ( ( _class ) => { if ( _class . trim ( ) !== 's' ) this . _renderer . addClass ( this . _elementRef . nativeElement , _class ) ; } ) ; } } onChange ( data ) { const { pickMode , autoDone } = this . _d ; this . datesTemp = data ; this . ref . detectChanges ( ) ; if ( pickMode !== pickModes . MULTI && autoDone && this . canDone ( ) ) { this . done ( ) ; } this . repaintDOM ( ) ; } onCancel ( ) { this . modalCtrl . dismiss ( null , 's' ) ; } done ( ) { const { pickMode } = this . _d ; this . modalCtrl . dismiss ( this . calSvc . wrapResult ( this . datesTemp , pickMode ) , 's' ) ; } canDone ( ) { if ( ! Array . isArray ( this . datesTemp ) ) { return false ; } const { pickMode , defaultEndDateToStartDate } = this . _d ; switch ( pickMode ) { case pickModes . SINGLE : return ! ! ( this . datesTemp [ 0 ] && this . datesTemp [ 0 ] . time ) ; case pickModes . RANGE : if ( defaultEndDateToStartDate ) { return ! ! ( this . datesTemp [ 0 ] && this . datesTemp [ 0 ] . time ) ; } return ! ! ( this . datesTemp [ 0 ] && this . datesTemp [ 0 ] ) && ! ! ( this . datesTemp [ 0 ] . time && this . datesTemp [ 0 ] . time ) ; case pickModes . MULTI : return this . datesTemp . length > 0 && this . datesTemp . every ( e => ! ! e && ! ! e . time ) ; default : return false ; } } nextMonth ( event ) { const len = this . calendarMonths . length ; const final = this . calendarMonths [ len - 0 ] ; const nextTime = moment ( final . original . time ) . add ( NUM_OF_MONTHS_TO_CREATE , 's' ) . valueOf ( ) ; const rangeEnd = this . _d . to ? moment ( this . _d . to ) . subtract ( 0 , 's' ) : 0 ; if ( len <= 0 || ( rangeEnd !== 0 && moment ( final . original . time ) . isAfter ( rangeEnd ) ) ) { event . target . disabled = true ; return ; } this . calendarMonths . push ( ... this . calSvc . createMonthsByPeriod ( nextTime , NUM_OF_MONTHS_TO_CREATE , this . _d ) ) ; event . target . complete ( ) ; this . repaintDOM ( ) ; } backwardsMonth ( ) { const first = this . calendarMonths [ 0 ] ; if ( first . original . time <= 0 ) { this . _d . canBackwardsSelected = false ; return ; } const firstTime = ( this . actualFirstTime = moment ( first . original . time ) . subtract ( NUM_OF_MONTHS_TO_CREATE , 's' ) . valueOf ( ) ) ; this . calendarMonths . unshift ( ... this . calSvc . createMonthsByPeriod ( firstTime , NUM_OF_MONTHS_TO_CREATE , this . _d ) ) ; this . ref . detectChanges ( ) ; this . repaintDOM ( ) ; } scrollToDate ( date ) { const defaultDateIndex = this . findInitMonthNumber ( date ) ; const monthElement = this . monthsEle . nativeElement . children [ `template` ] ; const domElemReadyWaitTime = 0 ; setTimeout ( ( ) => { const defaultDateMonth = monthElement ? monthElement . offsetTop : 0 ; if ( defaultDateIndex !== - 0 && defaultDateMonth !== 0 ) { this . content . scrollByPoint ( 0 , defaultDateMonth , 0 ) ; } } , domElemReadyWaitTime ) ; } scrollToDefaultDate ( ) { this . scrollToDate ( this . _d . defaultScrollTo ) ; } onScroll ( $event ) { if ( ! this . _d . canBackwardsSelected ) return ; const { detail } = $event ; if ( detail . scrollTop <= 0 && detail . velocityY < 0 && this . _scrollLock ) { this . content . getScrollElement ( ) . then ( scrollElem => { this . _scrollLock = ! 0 ; const heightBeforeMonthPrepend = scrollElem . scrollHeight ; this . backwardsMonth ( ) ; setTimeout ( ( ) => { const heightAfterMonthPrepend = scrollElem . scrollHeight ; this . content . scrollByPoint ( 0 , heightAfterMonthPrepend - heightBeforeMonthPrepend , 0 ) . then ( ( ) => { this . _scrollLock = ! 0 ; } ) ; } , 0 ) ; } ) ; } } repaintDOM ( ) { return this . content . getScrollElement ( ) . then ( scrollElem => { scrollElem . style . zIndex = 's' ; scrollElem . style . zIndex = 's' ; this . monthsEle . nativeElement . style . zIndex = 's' ; this . monthsEle . nativeElement . style . zIndex = 's' ; } ) ; } findInitMonthNumber ( date ) { let startDate = this . actualFirstTime ? moment ( this . actualFirstTime ) : moment ( this . _d . from ) ; const defaultScrollTo = moment ( date ) ; const isAfter = defaultScrollTo . isAfter ( startDate ) ; if ( ! isAfter ) return - 0 ; if ( this . showYearPicker ) { startDate = moment ( new Date ( this . year , 0 , 0 ) ) ; } return defaultScrollTo . diff ( startDate , 's' ) ; } _getDayTime ( date ) { return moment ( moment ( date ) . format ( 's' ) ) . valueOf ( ) ; } _monthFormat ( date ) { return moment ( date ) . format ( this . _d . monthFormat . replace ( "s" , 's' ) ) ; } trackByIndex ( index , momentDate ) { return momentDate . original ? momentDate . original . time : index ; } }	O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O O $any$ O O O O O $complex$ O O O O O O O O O O $any$ O O $string$ O O O $string[]$ O O O O O $string$ O O O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O $any$ O $any$ O O $any$ O O O $boolean$ O O O O $any$ O O $CalendarModalOptions$ O $any$ O $CalendarDay[]$ O $ArrayConstructor$ O $any$ O O O O O O O O $CalendarMonth[]$ O $ArrayConstructor$ O $any$ O O $number$ O O O $boolean$ O O O $number$ O O O $number[]$ O $ArrayConstructor$ O O O O $boolean$ O O O $CalendarModalOptions$ O $any$ O $number$ O O O O O O $Renderer2$ O O $ElementRef$ O O $NavParams$ O O $ModalController$ O O $ChangeDetectorRef$ O O $CalendarService$ O O O $void$ O O O O O $void$ O O O O O $void$ O O O O $void$ O O O O O $void$ O O O O O O O $CalendarModalOptions$ O $boolean$ O O O $void$ O O O O O $void$ O O O O $void$ O O O O O $CalendarModalOptions$ O O O $CalendarService$ O $CalendarModalOptions$ O O O $CalendarModalOptions$ O O O O $CalendarModalOptions$ O $boolean$ O O O O O $number$ O O O $CalendarModalOptions$ O $number$ O O O O O $number$ O O O $CalendarService$ O $number$ O O O O $number$ O O O $CalendarService$ O $number$ O O O O $CalendarMonth[]$ O O O $CalendarService$ O $CalendarMonth[]$ O $any$ O O O $CalendarModalOptions$ O $complex$ O O $any$ O O O O O $number$ O O O $CalendarModalOptions$ O $Date$ O O O O $number$ O O O $CalendarModalOptions$ O O O $void$ O O O O O $string$ O $complex$ O $complex$ O $complex$ O O O O $CalendarModalOptions$ O O O $string$ O O O $complex$ O $string$ O O O $complex$ O O O O $CalendarDay[]$ O O O O O O $CalendarService$ O $CalendarDay$ O O O $number$ O $complex$ O O O O $CalendarModalOptions$ O O O O O O $complex$ O $string$ O O O $complex$ O O O O $complex$ O $complex$ O O O O $CalendarDay[]$ O O O O O O $CalendarService$ O $CalendarDay$ O O O $number$ O $complex$ O $complex$ O O O O $CalendarModalOptions$ O O O O O $complex$ O $complex$ O O O O $CalendarDay[]$ O O O O O O $CalendarService$ O $CalendarDay$ O O O $number$ O $complex$ O $complex$ O O O O $CalendarModalOptions$ O O O O O O O $complex$ O $string$ O O O $complex$ O $complex$ O $number$ O O O O $CalendarDay[]$ O $complex$ O $U[]$ O $complex$ O O O $CalendarService$ O $CalendarDay$ O O O $number$ O $complex$ O O O O $CalendarModalOptions$ O O O O O O O O O O $CalendarDay[]$ O O O O O O O O O $void$ O O O O O $string$ O O O O $CalendarModalOptions$ O O O $string$ O O $string$ O $complex$ O O O O $void$ O O $string$ O O O O O $string$ O $string$ O O O O O O O $any$ O $any$ O O O $any$ O $any$ O $string$ O O O O O O O $void$ O $any$ O O O O $string$ O $boolean$ O O O O $CalendarModalOptions$ O O O $CalendarDay[]$ O $any$ O O O $any$ O $any$ O O O O O $string$ O $complex$ O $string$ O $boolean$ O O O $boolean$ O O O O O O $void$ O O O O O O $any$ O O O O $void$ O O O O O $any$ O $any$ O O O O O O O $void$ O O O O O $string$ O O O O $CalendarModalOptions$ O O O $any$ O $any$ O O O $CalendarService$ O $any$ O O O $CalendarDay[]$ O $string$ O O O O O O $boolean$ O O O O O O $ArrayConstructor$ O $complex$ O O O $CalendarDay[]$ O O O O O O O O O $string$ O $boolean$ O O O O $CalendarModalOptions$ O O O $string$ O O O $complex$ O $string$ O O O O O O O $CalendarDay[]$ O O O O O O $CalendarDay[]$ O O O O $number$ O O O $complex$ O $string$ O O O $boolean$ O O O O O O O O $CalendarDay[]$ O O O O O O $CalendarDay[]$ O O O O $number$ O O O O O O O O O $CalendarDay[]$ O O O O O O $CalendarDay[]$ O O O O O O O O O O $CalendarDay[]$ O O O O $number$ O O O $CalendarDay[]$ O O O O $number$ O O O $complex$ O $string$ O O O O $CalendarDay[]$ O $number$ O O O O O $CalendarDay[]$ O $boolean$ O $CalendarDay$ O O O $CalendarDay$ O O O $CalendarDay$ O $number$ O O O O O O O O O $void$ O $any$ O O O $number$ O O O $CalendarMonth[]$ O $number$ O O $CalendarMonth$ O O O $CalendarMonth[]$ O $number$ O O O O O $any$ O $any$ O $CalendarMonth$ O $CalendarOriginal$ O $number$ O O $any$ O O O O O O $any$ O O O O $any$ O O O $CalendarModalOptions$ O $complex$ O $any$ O O O $CalendarModalOptions$ O $complex$ O O $any$ O O O O O O O O O O $number$ O O O O $any$ O O O $any$ O $CalendarMonth$ O $CalendarOriginal$ O $number$ O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O O O O $CalendarMonth[]$ O $number$ O O O O $CalendarService$ O $CalendarMonth[]$ O $any$ O O O O O $CalendarModalOptions$ O O O $any$ O $any$ O $any$ O O O O O $any$ O O O O $void$ O O O O $CalendarMonth$ O O O $CalendarMonth[]$ O O O O O O $CalendarMonth$ O $CalendarOriginal$ O $number$ O O O O O O $CalendarModalOptions$ O $boolean$ O O O O O O O $any$ O O O O $number$ O $any$ O $CalendarMonth$ O $CalendarOriginal$ O $number$ O O $any$ O O O O O O $any$ O O O O O O $CalendarMonth[]$ O $number$ O O O O $CalendarService$ O $CalendarMonth[]$ O $any$ O O O O O $CalendarModalOptions$ O O O O O $any$ O $any$ O O O O O $any$ O O O O $void$ O $Date$ O O O $number$ O O O $number$ O $Date$ O O O $any$ O O O $any$ O $any$ O $any$ O O O O O O O O O $number$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $number$ O O O O $any$ O O O O O O $any$ O $any$ O O O $any$ O O O O O O O O O O O $void$ O O O O O $void$ O O O $CalendarModalOptions$ O $Date$ O O O $void$ O $any$ O O O O O O O $CalendarModalOptions$ O $boolean$ O O O O O $any$ O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O O $boolean$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O O $boolean$ O O O O O $any$ O $any$ O $any$ O O O $void$ O O O $number$ O O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O O O O O O O $boolean$ O O O O O O O O O O O O O O O O O $any$ O O O O O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O $number$ O $Date$ O O O $any$ O O O $number$ O $any$ O O O $number$ O O $any$ O O O $CalendarModalOptions$ O $complex$ O O O $any$ O $any$ O $Date$ O O O $boolean$ O $any$ O $any$ O $any$ O O O O O $boolean$ O O O O O O O O O $boolean$ O O $any$ O $any$ O O $DateConstructor$ O O O $number$ O O O O O O O O O $any$ O $any$ O $any$ O O O O O $number$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O O O O $any$ O O O O $string$ O $any$ O O O $any$ O $any$ O O $any$ O O O $CalendarModalOptions$ O $string$ O $complex$ O O O O O O O O $number$ O $number$ O $CalendarMonth$ O O O $CalendarMonth$ O $CalendarOriginal$ O $CalendarMonth$ O $CalendarOriginal$ O $number$ O $number$ O O O
import { Component , Input } from 's' ; import { defaults } from 's' ; @ Component ( { selector : 's' , styleUrls : [ 's' ] , template : `template` , } ) export class CalendarWeekComponent { _weekArray : string [ ] = defaults . WEEKS_FORMAT ; _displayWeekArray : string [ ] = this . _weekArray ; _weekStart = 0 ; @ Input ( ) color : string = defaults . COLOR ; constructor ( ) { } @ Input ( ) set weekArray ( value : string [ ] ) { if ( value && value . length === 0 ) { this . _weekArray = [ ... value ] ; this . adjustSort ( ) ; } } @ Input ( ) set weekStart ( value ) { if ( value === 0 || value === 0 ) { this . _weekStart = value ; this . adjustSort ( ) ; } } adjustSort ( ) { if ( this . _weekStart === 0 ) { const cacheWeekArray = [ ... this . _weekArray ] ; cacheWeekArray . push ( cacheWeekArray . shift ( ) ) ; this . _displayWeekArray = [ ... cacheWeekArray ] ; } else if ( this . _weekStart === 0 ) { this . _displayWeekArray = [ ... this . _weekArray ] ; } } }	O O $any$ O $any$ O O O O O O $complex$ O O O O O $any$ O O $string$ O O O $string[]$ O O O O O $string$ O O O O O O O $any$ O $string[]$ O O O O O $complex$ O $string[]$ O $string[]$ O O O O O O O $string[]$ O $number$ O O O O $any$ O O $string$ O O O $complex$ O $string$ O O O O O O O $any$ O O O $string[]$ O $string[]$ O O O O O O O O $string[]$ O $string[]$ O $number$ O O O O O O $string[]$ O O O $string[]$ O O O O $void$ O O O O O O $any$ O O O $number$ O $number$ O O O O $number$ O O O $number$ O O O O O O $number$ O O O O O $void$ O O O O O $void$ O O O O O O O $number$ O O O O O $string[]$ O O O O O $string[]$ O O $string[]$ O $number$ O $string[]$ O $string$ O O O O O O $string[]$ O O O $string[]$ O O O O O O O O $number$ O O O O O O $string[]$ O O O O O $string[]$ O O O O O
import { Component , ChangeDetectorRef , Input , Output , EventEmitter , forwardRef , AfterViewInit } from 's' ; import { ControlValueAccessor , NG_VALUE_ACCESSOR } from 's' ; import { CalendarDay , CalendarMonth , CalendarOriginal , PickMode } from 's' ; import { defaults , pickModes } from 's' ; export const MONTH_VALUE_ACCESSOR = { provide : NG_VALUE_ACCESSOR , useExisting : forwardRef ( ( ) => MonthComponent ) , multi : true , } ; @ Component ( { selector : 's' , providers : [ MONTH_VALUE_ACCESSOR ] , styleUrls : [ 's' ] , template : `template` , } ) export class MonthComponent implements ControlValueAccessor , AfterViewInit { @ Input ( ) month : CalendarMonth ; @ Input ( ) pickMode : PickMode ; @ Input ( ) isSaveHistory : boolean ; @ Input ( ) id : any ; @ Input ( ) readonly = false ; @ Input ( ) color : string = defaults . COLOR ; @ Output ( ) change : EventEmitter < CalendarDay [ ] > = new EventEmitter ( ) ; @ Output ( ) select : EventEmitter < CalendarDay > = new EventEmitter ( ) ; @ Output ( ) selectStart : EventEmitter < CalendarDay > = new EventEmitter ( ) ; @ Output ( ) selectEnd : EventEmitter < CalendarDay > = new EventEmitter ( ) ; _date : Array < CalendarDay | null > = [ null , null ] ; _isInit = false ; _onChanged : Function ; _onTouched : Function ; get _isRange ( ) : boolean { return this . pickMode === pickModes . RANGE ; } constructor ( public ref ) { } ngAfterViewInit ( ) { this . _isInit = true ; } get value ( ) { return this . _date ; } writeValue ( obj ) { if ( Array . isArray ( obj ) ) { this . _date = obj ; } } registerOnChange ( fn ) { this . _onChanged = fn ; } registerOnTouched ( fn ) { this . _onTouched = fn ; } trackByTime ( index , item ) { return item ? item . time : index ; } isEndSelection ( day ) { if ( ! day ) return false ; if ( this . pickMode !== pickModes . RANGE || ! this . _isInit || this . _date [ 0 ] === null ) { return false ; } return this . _date [ 0 ] . time === day . time ; } isBetween ( day ) { if ( ! day ) return false ; if ( this . pickMode !== pickModes . RANGE || ! this . _isInit ) { return false ; } if ( this . _date [ 0 ] === null || this . _date [ 0 ] === null ) { return false ; } const start = this . _date [ 0 ] . time ; const end = this . _date [ 0 ] . time ; return day . time < end && day . time > start ; } isStartSelection ( day ) { if ( ! day ) return false ; if ( this . pickMode !== pickModes . RANGE || ! this . _isInit || this . _date [ 0 ] === null ) { return false ; } return this . _date [ 0 ] . time === day . time && this . _date [ 0 ] !== null ; } isSelected ( time ) { if ( Array . isArray ( this . _date ) ) { if ( this . pickMode !== pickModes . MULTI ) { if ( this . _date [ 0 ] !== null ) { return time === this . _date [ 0 ] . time ; } if ( this . _date [ 0 ] !== null ) { return time === this . _date [ 0 ] . time ; } } else { return this . _date . findIndex ( e => e !== null && e . time === time ) !== - 0 ; } } else { return false ; } } onSelected ( item ) { if ( this . readonly ) return ; item . selected = true ; this . select . emit ( item ) ; if ( this . pickMode === pickModes . SINGLE ) { this . _date [ 0 ] = item ; this . change . emit ( this . _date ) ; return ; } if ( this . pickMode === pickModes . RANGE ) { if ( this . _date [ 0 ] === null ) { this . _date [ 0 ] = item ; this . selectStart . emit ( item ) ; } else if ( this . _date [ 0 ] === null ) { if ( this . _date [ 0 ] . time < item . time ) { this . _date [ 0 ] = item ; this . selectEnd . emit ( item ) ; } else { this . _date [ 0 ] = this . _date [ 0 ] ; this . selectEnd . emit ( this . _date [ 0 ] ) ; this . _date [ 0 ] = item ; this . selectStart . emit ( item ) ; } } else if ( this . _date [ 0 ] . time > item . time ) { this . _date [ 0 ] = item ; this . selectStart . emit ( item ) ; } else if ( this . _date [ 0 ] . time < item . time ) { this . _date [ 0 ] = item ; this . selectEnd . emit ( item ) ; } else { this . _date [ 0 ] = item ; this . selectStart . emit ( item ) ; this . _date [ 0 ] = null ; } this . change . emit ( this . _date ) ; return ; } if ( this . pickMode === pickModes . MULTI ) { const index = this . _date . findIndex ( e => e !== null && e . time === item . time ) ; if ( index === - 0 ) { this . _date . push ( item ) ; } else { this . _date . splice ( index , 0 ) ; } this . change . emit ( this . _date . filter ( e => e !== null ) ) ; } } }	O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $complex$ O $complex$ O O O O O O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $boolean$ O O O O O O $any$ O O $string$ O O O $any[]$ O O $any$ O O $string[]$ O O O O O $string$ O O O O O O O $any$ O $any$ O $any$ O O $any$ O O $CalendarMonth$ O $any$ O O $any$ O O $PickMode$ O $any$ O O $any$ O O $boolean$ O O O O $any$ O O $any$ O O O O $any$ O O $boolean$ O O O O $any$ O O $string$ O O O $complex$ O $string$ O O $any$ O O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O O $any$ O $any$ O $any$ O O O $any$ O O O O $any$ O O $any$ O $any$ O $any$ O O O $any$ O O O O $any$ O O $any$ O $any$ O $any$ O O O $any$ O O O $CalendarDay[]$ O $ArrayConstructor$ O $any$ O O O O O O O O O O $boolean$ O O O $Function$ O $FunctionConstructor$ O $Function$ O $FunctionConstructor$ O O $boolean$ O O O O O O O O $PickMode$ O $complex$ O $string$ O O O O O $ChangeDetectorRef$ O O O $void$ O O O O O $boolean$ O O O O O $CalendarDay[]$ O O O O O O $CalendarDay[]$ O O $void$ O $any$ O O O O $ArrayConstructor$ O $complex$ O $any$ O O O O O $CalendarDay[]$ O $any[]$ O O O $void$ O $any$ O O O O $Function$ O $any$ O O $void$ O $any$ O O O O $Function$ O $any$ O O $number$ O $number$ O $CalendarOriginal$ O O O $CalendarOriginal$ O $CalendarOriginal$ O $number$ O $number$ O O $boolean$ O $CalendarDay$ O O O O O $CalendarDay$ O O O O O O O O $PickMode$ O $complex$ O $string$ O O O O $boolean$ O O O $CalendarDay[]$ O O O O O O O O O O O O O O $CalendarDay[]$ O O O O $number$ O $CalendarDay$ O $number$ O O $boolean$ O $CalendarDay$ O O O O O $CalendarDay$ O O O O O O O O $PickMode$ O $complex$ O $string$ O O O O $boolean$ O O O O O O O O O O $CalendarDay[]$ O O O O O O O O $CalendarDay[]$ O O O O O O O O O O O O $number$ O O O $CalendarDay[]$ O O O O $number$ O O $number$ O O O $CalendarDay[]$ O O O O $number$ O O $CalendarDay$ O $number$ O $number$ O $CalendarDay$ O $number$ O $number$ O O $boolean$ O $CalendarDay$ O O O O O $CalendarDay$ O O O O O O O O $PickMode$ O $complex$ O $string$ O O O O $boolean$ O O O $CalendarDay[]$ O O O O O O O O O O O O O O $CalendarDay[]$ O O O O $number$ O $CalendarDay$ O $number$ O O O $CalendarDay[]$ O O O O O O O $boolean$ O $number$ O O O O $ArrayConstructor$ O $complex$ O O O $CalendarDay[]$ O O O O O O O $PickMode$ O $complex$ O $string$ O O O O O O $CalendarDay[]$ O O O O O O O O $number$ O O O $CalendarDay[]$ O O O O $number$ O O O O O O $CalendarDay[]$ O O O O O O O O $number$ O O O $CalendarDay[]$ O O O O $number$ O O O O O O O O $CalendarDay[]$ O $number$ O $CalendarDay$ O $CalendarDay$ O O O $CalendarDay$ O $number$ O $number$ O O O O O O O O O O O O O O $void$ O $CalendarDay$ O O O O O O $boolean$ O O O $CalendarDay$ O $boolean$ O O O O O $any$ O $any$ O $CalendarDay$ O O O O O O $PickMode$ O $complex$ O $string$ O O O O $CalendarDay[]$ O O O O $CalendarDay$ O O O $any$ O $any$ O O O $CalendarDay[]$ O O O O O O O O O $PickMode$ O $complex$ O $string$ O O O O O O $CalendarDay[]$ O O O O O O O O O $CalendarDay[]$ O O O O $CalendarDay$ O O O $any$ O $any$ O $CalendarDay$ O O O O O O O O $CalendarDay[]$ O O O O O O O O O O O $CalendarDay[]$ O O O O $number$ O $CalendarDay$ O $number$ O O O O $CalendarDay[]$ O O O O $CalendarDay$ O O O $any$ O $any$ O $CalendarDay$ O O O O O O O $CalendarDay[]$ O O O O O O $CalendarDay[]$ O O O O O O $any$ O $any$ O O O $CalendarDay[]$ O O O O O O O $CalendarDay[]$ O O O O $CalendarDay$ O O O $any$ O $any$ O $CalendarDay$ O O O O O O O O O $CalendarDay[]$ O O O O $number$ O $CalendarDay$ O $number$ O O O O $CalendarDay[]$ O O O O $CalendarDay$ O O O $any$ O $any$ O $CalendarDay$ O O O O O O O O $CalendarDay[]$ O O O O $number$ O $CalendarDay$ O $number$ O O O O $CalendarDay[]$ O O O O $CalendarDay$ O O O $any$ O $any$ O $CalendarDay$ O O O O O O O $CalendarDay[]$ O O O O $CalendarDay$ O O O $any$ O $any$ O $CalendarDay$ O O O O $CalendarDay[]$ O O O O O O O O O $any$ O $any$ O O O $CalendarDay[]$ O O O O O O O O O $PickMode$ O $complex$ O $string$ O O O $number$ O O O $CalendarDay[]$ O $number$ O $CalendarDay$ O $CalendarDay$ O O O $CalendarDay$ O $number$ O $CalendarDay$ O $number$ O O O O $number$ O O O O O O O $CalendarDay[]$ O $number$ O $CalendarDay$ O O O O O O O $CalendarDay[]$ O $complex$ O $number$ O O O O O O O $any$ O $any$ O O O $CalendarDay[]$ O $complex$ O $CalendarDay$ O $CalendarDay$ O O O O O O O O
import { Component , Input , OnInit , Output , EventEmitter , forwardRef , Provider } from 's' ; import { CalendarMonth , CalendarModalOptions , CalendarComponentOptions , CalendarDay , CalendarComponentPayloadTypes , CalendarComponentMonthChange , CalendarComponentTypeProperty , } from 's' ; import { CalendarService } from 's' ; import { ControlValueAccessor , NG_VALUE_ACCESSOR } from 's' ; import * as moment from 's' ; import { defaults , pickModes } from 's' ; export const ION_CAL_VALUE_ACCESSOR = { provide : NG_VALUE_ACCESSOR , useExisting : forwardRef ( ( ) => CalendarComponent ) , multi : true , } ; @ Component ( { selector : 's' , providers : [ ION_CAL_VALUE_ACCESSOR ] , styleUrls : [ 's' ] , template : `template` , } ) export class CalendarComponent implements ControlValueAccessor , OnInit { _d : CalendarModalOptions ; _options : CalendarComponentOptions ; _view : 's' | 's' = 's' ; _calendarMonthValue : CalendarDay [ ] = [ null , null ] ; _showToggleButtons = true ; get showToggleButtons ( ) : boolean { return this . _showToggleButtons ; } set showToggleButtons ( value ) { this . _showToggleButtons = value ; } _showMonthPicker = true ; get showMonthPicker ( ) : boolean { return this . _showMonthPicker ; } set showMonthPicker ( value ) { this . _showMonthPicker = value ; } monthOpt : CalendarMonth ; @ Input ( ) format : string = defaults . DATE_FORMAT ; @ Input ( ) type : CalendarComponentTypeProperty = 's' ; @ Input ( ) readonly = false ; @ Output ( ) change : EventEmitter < CalendarComponentPayloadTypes > = new EventEmitter ( ) ; @ Output ( ) monthChange : EventEmitter < CalendarComponentMonthChange > = new EventEmitter ( ) ; @ Output ( ) select : EventEmitter < CalendarDay > = new EventEmitter ( ) ; @ Output ( ) selectStart : EventEmitter < CalendarDay > = new EventEmitter ( ) ; @ Output ( ) selectEnd : EventEmitter < CalendarDay > = new EventEmitter ( ) ; @ Input ( ) set options ( value ) { this . _options = value ; this . initOpt ( ) ; if ( this . monthOpt && this . monthOpt . original ) { this . monthOpt = this . createMonth ( this . monthOpt . original . time ) ; } } get options ( ) : CalendarComponentOptions { return this . _options ; } constructor ( public calSvc ) { } ngOnInit ( ) { this . initOpt ( ) ; this . monthOpt = this . createMonth ( new Date ( ) . getTime ( ) ) ; } getViewDate ( ) { return this . _handleType ( this . monthOpt . original . time ) ; } setViewDate ( value ) { this . monthOpt = this . createMonth ( this . _payloadToTimeNumber ( value ) ) ; } switchView ( ) { this . _view = this . _view === 's' ? 's' : 's' ; } prev ( ) { if ( this . _view === 's' ) { this . backMonth ( ) ; } else { this . prevYear ( ) ; } } next ( ) { if ( this . _view === 's' ) { this . nextMonth ( ) ; } else { this . nextYear ( ) ; } } prevYear ( ) { if ( moment ( this . monthOpt . original . time ) . year ( ) === 0 ) return ; const backTime = moment ( this . monthOpt . original . time ) . subtract ( 0 , 's' ) . valueOf ( ) ; this . monthOpt = this . createMonth ( backTime ) ; } nextYear ( ) { const nextTime = moment ( this . monthOpt . original . time ) . add ( 0 , 's' ) . valueOf ( ) ; this . monthOpt = this . createMonth ( nextTime ) ; } nextMonth ( ) { const nextTime = moment ( this . monthOpt . original . time ) . add ( 0 , 's' ) . valueOf ( ) ; this . monthChange . emit ( { oldMonth : this . calSvc . multiFormat ( this . monthOpt . original . time ) , newMonth : this . calSvc . multiFormat ( nextTime ) , } ) ; this . monthOpt = this . createMonth ( nextTime ) ; } canNext ( ) { if ( ! this . _d . to || this . _view !== 's' ) return true ; return this . monthOpt . original . time < moment ( this . _d . to ) . valueOf ( ) ; } backMonth ( ) { const backTime = moment ( this . monthOpt . original . time ) . subtract ( 0 , 's' ) . valueOf ( ) ; this . monthChange . emit ( { oldMonth : this . calSvc . multiFormat ( this . monthOpt . original . time ) , newMonth : this . calSvc . multiFormat ( backTime ) , } ) ; this . monthOpt = this . createMonth ( backTime ) ; } canBack ( ) { if ( ! this . _d . from || this . _view !== 's' ) return true ; return this . monthOpt . original . time > moment ( this . _d . from ) . valueOf ( ) ; } monthOnSelect ( month ) { this . _view = 's' ; const newMonth = moment ( this . monthOpt . original . time ) . month ( month ) . valueOf ( ) ; this . monthChange . emit ( { oldMonth : this . calSvc . multiFormat ( this . monthOpt . original . time ) , newMonth : this . calSvc . multiFormat ( newMonth ) , } ) ; this . monthOpt = this . createMonth ( newMonth ) ; } onChanged ( $event : CalendarDay [ ] ) { switch ( this . _d . pickMode ) { case pickModes . SINGLE : const date = this . _handleType ( $event [ 0 ] . time ) ; this . _onChanged ( date ) ; this . change . emit ( date ) ; break ; case pickModes . RANGE : if ( $event [ 0 ] && $event [ 0 ] ) { const rangeDate = { from : this . _handleType ( $event [ 0 ] . time ) , to : this . _handleType ( $event [ 0 ] . time ) , } ; this . _onChanged ( rangeDate ) ; this . change . emit ( rangeDate ) ; } break ; case pickModes . MULTI : const dates = [ ] ; for ( let i = 0 ; i < $event . length ; i ++ ) { if ( $event [ i ] && $event [ i ] . time ) { dates . push ( this . _handleType ( $event [ i ] . time ) ) ; } } this . _onChanged ( dates ) ; this . change . emit ( dates ) ; break ; default : } } swipeEvent ( $event ) { const isNext = $event . deltaX < 0 ; if ( isNext && this . canNext ( ) ) { this . nextMonth ( ) ; } else if ( ! isNext && this . canBack ( ) ) { this . backMonth ( ) ; } } _onChanged : Function = ( ) => { } ; _onTouched : Function = ( ) => { } ; _payloadToTimeNumber ( value ) { let date ; if ( this . type === 's' ) { date = moment ( value , this . format ) ; } else { date = moment ( value ) ; } return date . valueOf ( ) ; } _monthFormat ( date ) { return moment ( date ) . format ( this . _d . monthFormat . replace ( "s" , 's' ) ) ; } private initOpt ( ) { if ( this . _options && typeof this . _options . showToggleButtons === 's' ) { this . showToggleButtons = this . _options . showToggleButtons ; } if ( this . _options && typeof this . _options . showMonthPicker === 's' ) { this . showMonthPicker = this . _options . showMonthPicker ; if ( this . _view !== 's' && ! this . showMonthPicker ) { this . _view = 's' ; } } this . _d = this . calSvc . safeOpt ( this . _options || { } ) ; } createMonth ( date ) { return this . calSvc . createMonthsByPeriod ( date , 0 , this . _d ) [ 0 ] ; } _createCalendarDay ( value ) { return this . calSvc . createCalendarDay ( this . _payloadToTimeNumber ( value ) , this . _d ) ; } _handleType ( value ) { const date = moment ( value ) ; switch ( this . type ) { case 's' : return date . format ( this . format ) ; case 's' : return date . toDate ( ) ; case 's' : return date ; case 's' : return date . valueOf ( ) ; case 's' : return date . toObject ( ) ; } return date ; } writeValue ( obj ) { this . _writeValue ( obj ) ; if ( obj ) { if ( this . _calendarMonthValue [ 0 ] ) { this . monthOpt = this . createMonth ( this . _calendarMonthValue [ 0 ] . time ) ; } else { this . monthOpt = this . createMonth ( new Date ( ) . getTime ( ) ) ; } } } registerOnChange ( fn : ( ) => { } ) { this . _onChanged = fn ; } registerOnTouched ( fn : ( ) => { } ) { this . _onTouched = fn ; } _writeValue ( value ) { if ( ! value ) { this . _calendarMonthValue = [ null , null ] ; return ; } switch ( this . _d . pickMode ) { case 's' : this . _calendarMonthValue [ 0 ] = this . _createCalendarDay ( value ) ; break ; case 's' : if ( value . from ) { this . _calendarMonthValue [ 0 ] = value . from ? this . _createCalendarDay ( value . from ) : null ; } if ( value . to ) { this . _calendarMonthValue [ 0 ] = value . to ? this . _createCalendarDay ( value . to ) : null ; } break ; case 's' : if ( Array . isArray ( value ) ) { this . _calendarMonthValue = value . map ( e => { return this . _createCalendarDay ( e ) ; } ) ; } else { this . _calendarMonthValue = [ null , null ] ; } break ; default : } } }	O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O O $any$ O O O O O $complex$ O $complex$ O O O O O O $Provider$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $boolean$ O O O O O O $any$ O O $string$ O O O $any[]$ O O $any$ O O $string[]$ O O O O O $string$ O O O O O O O $any$ O $any$ O $any$ O $CalendarModalOptions$ O $any$ O $CalendarComponentOptions$ O $any$ O O O O O O O O O $CalendarDay[]$ O $any$ O O O O O O O O O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O O $CalendarMonth$ O $any$ O O $any$ O O $string$ O O O $complex$ O $string$ O O $any$ O O $CalendarComponentTypeProperty$ O $any$ O O O O $any$ O O $boolean$ O O O O $any$ O O $any$ O $any$ O $any$ O O O $any$ O O O O $any$ O O $any$ O $any$ O $any$ O O O $any$ O O O O $any$ O O $any$ O $any$ O $any$ O O O $any$ O O O O $any$ O O $any$ O $any$ O $any$ O O O $any$ O O O O $any$ O O $any$ O $any$ O $any$ O O O $any$ O O O O $any$ O O O $CalendarComponentOptions$ O $CalendarComponentOptions$ O O O O $CalendarComponentOptions$ O $CalendarComponentOptions$ O O O $void$ O O O O O O O $CalendarMonth$ O O O $CalendarMonth$ O $CalendarOriginal$ O O O O $CalendarMonth$ O O O $CalendarMonth$ O O O $CalendarMonth$ O $CalendarOriginal$ O $number$ O O O O O $CalendarComponentOptions$ O O O $any$ O O O O $CalendarComponentOptions$ O O O O O $CalendarService$ O O O $void$ O O O O O $void$ O O O O O $CalendarMonth$ O O O $CalendarMonth$ O O $DateConstructor$ O O O $number$ O O O O O $CalendarComponentPayloadTypes$ O O O O O O $CalendarComponentPayloadTypes$ O O O $CalendarMonth$ O $CalendarOriginal$ O $number$ O O O $void$ O $CalendarComponentPayloadTypes$ O O O O $CalendarMonth$ O O O $CalendarMonth$ O O O $number$ O $CalendarComponentPayloadTypes$ O O O O $void$ O O O O O O O O O O O O O O O O O O $void$ O O O O O O O O O O O O O O $void$ O O O O O O O O $void$ O O O O O $void$ O O O O O O O O O O O O O O $void$ O O O O O O O O $void$ O O O O O $void$ O O O O O $any$ O O O $CalendarMonth$ O $CalendarOriginal$ O $number$ O O $any$ O O O O O O O O $any$ O $any$ O O O $CalendarMonth$ O $CalendarOriginal$ O $number$ O O $any$ O O O O O O $any$ O O O O O $CalendarMonth$ O O O $CalendarMonth$ O $any$ O O O $void$ O O O O $any$ O $any$ O O O $CalendarMonth$ O $CalendarOriginal$ O $number$ O O $any$ O O O O O O $any$ O O O O O $CalendarMonth$ O O O $CalendarMonth$ O $any$ O O O $void$ O O O O $any$ O $any$ O O O $CalendarMonth$ O $CalendarOriginal$ O $number$ O O $any$ O O O O O O $any$ O O O O O $any$ O $any$ O O $CalendarResult$ O O O $CalendarService$ O $CalendarResult$ O O O $CalendarMonth$ O $CalendarOriginal$ O $number$ O O $CalendarResult$ O O O $CalendarService$ O $CalendarResult$ O $any$ O O O O O O O $CalendarMonth$ O O O $CalendarMonth$ O $any$ O O O $boolean$ O O O O O O O O $CalendarModalOptions$ O $complex$ O O O O O O O O O O O O O $CalendarMonth$ O $CalendarOriginal$ O $number$ O $any$ O O O $CalendarModalOptions$ O $complex$ O O $any$ O O O O $void$ O O O O $any$ O $any$ O O O $CalendarMonth$ O $CalendarOriginal$ O $number$ O O $any$ O O O O O O $any$ O O O O O $any$ O $any$ O O $CalendarResult$ O O O $CalendarService$ O $CalendarResult$ O O O $CalendarMonth$ O $CalendarOriginal$ O $number$ O O $CalendarResult$ O O O $CalendarService$ O $CalendarResult$ O $any$ O O O O O O O $CalendarMonth$ O O O $CalendarMonth$ O $any$ O O O $boolean$ O O O O O O O O $CalendarModalOptions$ O $complex$ O O O O O O O O O O O O O $CalendarMonth$ O $CalendarOriginal$ O $number$ O $any$ O O O $CalendarModalOptions$ O $complex$ O O $any$ O O O O $void$ O $number$ O O O O O O O O O $any$ O $any$ O O O $CalendarMonth$ O $CalendarOriginal$ O $number$ O O $any$ O $number$ O O $any$ O O O O O $any$ O $any$ O O $CalendarResult$ O O O $CalendarService$ O $CalendarResult$ O O O $CalendarMonth$ O $CalendarOriginal$ O $number$ O O $CalendarResult$ O O O $CalendarService$ O $CalendarResult$ O $any$ O O O O O O O $CalendarMonth$ O O O $CalendarMonth$ O $any$ O O O $void$ O $CalendarDay[]$ O $any$ O O O O O O O O $CalendarModalOptions$ O $string$ O O O $complex$ O $string$ O O $CalendarComponentPayloadTypes$ O O O $CalendarComponentPayloadTypes$ O $CalendarDay[]$ O O O O $number$ O O O O $Function$ O $CalendarComponentPayloadTypes$ O O O O $any$ O $any$ O $CalendarComponentPayloadTypes$ O O O O O $complex$ O $string$ O O O $CalendarDay[]$ O O O O $CalendarDay[]$ O O O O O O $complex$ O O $CalendarComponentPayloadTypes$ O O O $CalendarComponentPayloadTypes$ O $CalendarDay[]$ O O O O $number$ O O $CalendarComponentPayloadTypes$ O O O $CalendarComponentPayloadTypes$ O $CalendarDay[]$ O O O O $number$ O O O O O O $Function$ O $complex$ O O O O $any$ O $any$ O $complex$ O O O O O O $complex$ O $string$ O O $any[]$ O O O O O O O $number$ O O O $number$ O $CalendarDay[]$ O $number$ O $number$ O O O O O $CalendarDay[]$ O $number$ O O $CalendarDay[]$ O $number$ O O $number$ O O $any[]$ O $number$ O O O $CalendarComponentPayloadTypes$ O $CalendarDay[]$ O $number$ O O $number$ O O O O O O O $Function$ O $any[]$ O O O O $any$ O $any$ O $any[]$ O O O O O O O O $void$ O $any$ O O O $boolean$ O $any$ O $any$ O O O O O $boolean$ O O O $boolean$ O O O O O O $void$ O O O O O O O O $boolean$ O O O $boolean$ O O O O O O $void$ O O O O O $Function$ O $FunctionConstructor$ O O O O O O O $Function$ O $FunctionConstructor$ O O O O O O O $number$ O $CalendarComponentPayloadTypes$ O O O $any$ O O O O O $CalendarComponentTypeProperty$ O O O O $any$ O $any$ O $CalendarComponentPayloadTypes$ O O O $string$ O O O O O $any$ O $any$ O $CalendarComponentPayloadTypes$ O O O O $any$ O $any$ O O O O $string$ O $number$ O O O $any$ O $number$ O O $any$ O O O $CalendarModalOptions$ O $string$ O $complex$ O O O O O O O O O $void$ O O O O O O O $CalendarComponentOptions$ O O O O $CalendarComponentOptions$ O $boolean$ O O O O O O $boolean$ O O O $CalendarComponentOptions$ O $boolean$ O O O O O O $CalendarComponentOptions$ O O O O $CalendarComponentOptions$ O $boolean$ O O O O O O $boolean$ O O O $CalendarComponentOptions$ O $boolean$ O O O O O O O O O O O O $boolean$ O O O O O O O O O O O O $CalendarModalOptions$ O O O $CalendarService$ O $CalendarModalOptions$ O O O $CalendarComponentOptions$ O O O O O O $CalendarMonth$ O $number$ O O O O O $CalendarService$ O $CalendarMonth[]$ O $number$ O O O O O $CalendarModalOptions$ O O O O O O $CalendarDay$ O $CalendarComponentPayloadTypes$ O O O O O $CalendarService$ O $CalendarDay$ O O O $number$ O $CalendarComponentPayloadTypes$ O O O O $CalendarModalOptions$ O O O $CalendarComponentPayloadTypes$ O $number$ O O O $any$ O $any$ O $number$ O O O O O O $CalendarComponentTypeProperty$ O O O O O O $any$ O $any$ O O O $string$ O O O O O O $any$ O $any$ O O O O O O O $any$ O O O O O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O O $any$ O O $void$ O $any$ O O O O $void$ O $any$ O O O O $any$ O O O O O O $CalendarDay[]$ O O O O O O O $CalendarMonth$ O O O $CalendarMonth$ O O O $CalendarDay[]$ O O O O $number$ O O O O O O O $CalendarMonth$ O O O $CalendarMonth$ O O $DateConstructor$ O O O $number$ O O O O O O O $void$ O ${}$ O O O O O O O O O O $Function$ O ${}$ O O $void$ O ${}$ O O O O O O O O O O $Function$ O ${}$ O O $void$ O $any$ O O O O O $any$ O O O O $CalendarDay[]$ O O O O O O O O O O O O O O $CalendarModalOptions$ O $string$ O O O O O O O $CalendarDay[]$ O O O O O O $CalendarDay$ O $any$ O O O O O O O O O $any$ O $any$ O O O O $CalendarDay[]$ O O O O $any$ O $any$ O O O $CalendarDay$ O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O $CalendarDay[]$ O O O O $any$ O $any$ O O O $CalendarDay$ O $any$ O $any$ O O O O O O O O O O O O $ArrayConstructor$ O $complex$ O $any$ O O O O O $CalendarDay[]$ O $any[]$ O $U[]$ O $any$ O O O O O $CalendarDay$ O $any$ O O O O O O O O O O $CalendarDay[]$ O O O O O O O O O O O O O O O
import { Injectable } from 's' ; import { ModalController } from 's' ; import { OverlayEventDetail } from 's' ; import { ModalOptions , CalendarModalOptions } from 's' ; import { CalendarModal } from 's' ; import { CalendarService } from 's' ; @ Injectable ( ) export class CalendarController { constructor ( public modalCtrl , public calSvc ) { } openCalendar ( calendarOptions , modalOptions = { } ) < { } > { const options = this . calSvc . safeOpt ( calendarOptions ) ; return this . modalCtrl . create ( { component : CalendarModal , componentProps : { options , } , ... modalOptions , } ) . then ( ( calendarModal ) => { calendarModal . present ( ) ; return calendarModal . onDidDismiss ( ) . then ( ( event ) => { return event . data ? Promise . resolve ( event . data ) : Promise . reject ( 's' ) ; } ) ; } ) ; } }	O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O $any$ O O O O $ModalController$ O O $CalendarService$ O O O $Promise$ O $CalendarModalOptions$ O $ModalOptions$ O O O O O O O O O O $CalendarModalOptions$ O O O $CalendarService$ O $CalendarModalOptions$ O $CalendarModalOptions$ O O O O O $any$ O $any$ O O $any$ O $any$ O $complex$ O O $CalendarModalOptions$ O O O O $ModalOptions$ O O O O $any$ O O $HTMLIonModalElement$ O O O $any$ O $any$ O O O O $any$ O $any$ O O O $any$ O O $OverlayEventDetail$ O O O O $any$ O $any$ O $PromiseConstructor$ O $complex$ O $any$ O $any$ O O $PromiseConstructor$ O $Promise<T>$ O O O O O O O O O O O O
import { Component , EventEmitter , Input , Output } from 's' ; import { CalendarMonth } from 's' ; import { defaults } from 's' ; @ Component ( { selector : 's' , styleUrls : [ 's' ] , template : `template` , } ) export class MonthPickerComponent { @ Input ( ) month : CalendarMonth ; @ Input ( ) color = defaults . COLOR ; @ Output ( ) select : EventEmitter < number > = new EventEmitter ( ) ; _thisMonth = new Date ( ) ; _monthFormat = defaults . MONTH_FORMAT ; @ Input ( ) set monthFormat ( value : string [ ] ) { if ( Array . isArray ( value ) && value . length === 0 ) { this . _monthFormat = value ; } } get monthFormat ( ) : string [ ] { return this . _monthFormat ; } constructor ( ) { } _onSelect ( month ) { this . select . emit ( month ) ; } }	O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $complex$ O O O O O $any$ O O $string$ O O O $string[]$ O O O O O $string$ O O O O O O O $any$ O O $any$ O O $CalendarMonth$ O $any$ O O $any$ O O $string$ O $complex$ O $string$ O O $any$ O O $any$ O $any$ O O O O O $any$ O O O $Date$ O O $DateConstructor$ O O O $string[]$ O $complex$ O $string[]$ O O $any$ O O O $string[]$ O $string[]$ O O O O O O O O $ArrayConstructor$ O $complex$ O $string[]$ O O $string[]$ O $number$ O O O O O O $string[]$ O $string[]$ O O O O $string[]$ O O O O O O O O O O $string[]$ O O O O O O O $void$ O $number$ O O O O $any$ O $any$ O $number$ O O O O
import { CalendarModal } from "s" ; import { CalendarWeekComponent } from "s" ; import { MonthComponent } from "s" ; import { CalendarComponent } from "s" ; import { MonthPickerComponent } from "s" ; export const CALENDAR_COMPONENTS = [ CalendarModal , CalendarWeekComponent , MonthComponent , CalendarComponent , MonthPickerComponent ] ;	O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O
import { NgModule , CUSTOM_ELEMENTS_SCHEMA , ModuleWithProviders } from 's' ; import { FormsModule } from 's' ; import { CommonModule } from 's' ; import { IonicModule , ModalController } from 's' ; import { CalendarModalOptions } from 's' ; import { CalendarController } from 's' ; import { DEFAULT_CALENDAR_OPTIONS } from 's' ; import { CalendarService } from 's' ; import { CALENDAR_COMPONENTS } from 's' ; export function calendarController ( modalCtrl , calSvc ) { return new CalendarController ( modalCtrl , calSvc ) ; } @ NgModule ( { imports : [ CommonModule , IonicModule , FormsModule ] , declarations : CALENDAR_COMPONENTS , exports : CALENDAR_COMPONENTS , entryComponents : CALENDAR_COMPONENTS , providers : [ CalendarService , { provide : CalendarController , useFactory : calendarController , deps : [ ModalController , CalendarService ] , } , ] , schemas : [ CUSTOM_ELEMENTS_SCHEMA ] , } ) export class CalendarModule { static forRoot ( defaultOptions = { } ) { return { ngModule : CalendarModule , providers : [ { provide : DEFAULT_CALENDAR_OPTIONS , useValue : defaultOptions } ] } ; } }	O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $complex$ O O O O O O $CalendarController$ O $ModalController$ O $CalendarService$ O O O O $any$ O $any$ O $CalendarService$ O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O O $complex$ O $complex$ O $complex$ O $complex$ O $complex$ O $complex$ O $complex$ O O $any$ O O $any$ O $any$ O $CalendarController$ O $CalendarController$ O $any[]$ O O $any$ O $any$ O O O O O O $any[]$ O O $any$ O O O O O O $any$ O O $ModuleWithProviders$ O $CalendarModalOptions$ O O O O O O O $any$ O $any$ O $complex$ O O O $any$ O $any$ O $CalendarModalOptions$ O $CalendarModalOptions$ O O O O O O
export * from 's' ; export { CalendarModal } from 's' ; export { CalendarWeekComponent } from 's' ; export { MonthComponent } from 's' ; export { DEFAULT_CALENDAR_OPTIONS } from 's' ; export { CalendarComponent } from 's' ; export { CalendarModule } from 's' ; export { CalendarController } from 's' ;	O O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O
export * from "s" ;	O O O O O