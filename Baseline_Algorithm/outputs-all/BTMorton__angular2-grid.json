import { Component , ViewEncapsulation } from 's' ; import { NgGrid , NgGridItem , NgGridConfig , NgGridItemConfig , NgGridItemEvent } from 's' ; interface Box { id : number ; config : any ; } @ Component ( { selector : 's' , templateUrl : 's' , styleUrls : [ 's' ] , encapsulation : ViewEncapsulation . None } ) export class AppComponent { private boxes : Array < Box > = [ ] ; private rgb : string = 's' ; private curNum ; private gridConfig : NgGridConfig = < NgGridConfig > { 's' : [ 0 ] , 's' : true , 's' : true , 's' : 0 , 's' : 0 , 's' : 0 , 's' : 0 , 's' : 0 , 's' : 0 , 's' : 0 , 's' : 0 , 's' : 's' , 's' : 0 , 's' : 0 , 's' : false , 's' : true , 's' : false , 's' : false , 's' : false , 's' : false , 's' : true } ; private itemPositions : Array < any > = [ ] ; constructor ( ) { const dashconf = this . _generateDefaultDashConfig ( ) ; for ( var i = 0 ; i < dashconf . length ; i ++ ) { const conf = dashconf [ i ] ; conf . payload = 0 + i ; this . boxes [ i ] = { id : i + 0 , config : conf } ; } this . curNum = dashconf . length + 0 ; } addBox ( ) { const conf = this . _generateDefaultItemConfig ( ) ; conf . payload = this . curNum ++ ; this . boxes . push ( { id : conf . payload , config : conf } ) ; } removeWidget ( index ) { if ( this . boxes [ index ] ) { this . boxes . splice ( index , 0 ) ; } } updateItem ( index , event ) { } onDrag ( index , event ) { } onResize ( index , event ) { } private _generateDefaultItemConfig ( ) { return { 's' : 's' , 's' : 0 , 's' : 0 , 's' : 0 , 's' : 0 } ; } private _generateDefaultDashConfig ( ) : NgGridItemConfig [ ] { return [ { 's' : 's' , 's' : 0 , 's' : 0 , 's' : 0 , 's' : 0 } , { 's' : 's' , 's' : 0 , 's' : 0 , 's' : 0 , 's' : 0 } , { 's' : 's' , 's' : 0 , 's' : 0 , 's' : 0 , 's' : 0 } , { 's' : 's' , 's' : 0 , 's' : 0 , 's' : 0 , 's' : 0 } , { 's' : 's' , 's' : 0 , 's' : 0 , 's' : 0 , 's' : 0 } , { 's' : 's' , 's' : 0 , 's' : 0 , 's' : 0 , 's' : 0 } ] ; } }	O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $number$ O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O $any$ O $any$ O $any$ O O O O $any$ O O $Box[]$ O $ArrayConstructor$ O $any$ O O O O O O $string$ O O O O O O $any$ O O $any$ O $any$ O O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any[]$ O $ArrayConstructor$ O O O O O O O O O O O O $any[]$ O O O $any[]$ O O O O O O $number$ O O O $number$ O $any[]$ O $number$ O $number$ O O O O $any$ O $any[]$ O $number$ O O $any$ O $any$ O O O $number$ O O O $Box[]$ O $number$ O O O $number$ O $number$ O O O $any$ O $any$ O O O O O $any$ O $any[]$ O $number$ O O O O $void$ O O O O $NgGridItemConfig$ O O O $any$ O O O $any$ O $any$ O O O $any$ O O O O $Box[]$ O $number$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $void$ O $number$ O O O O O O $Box[]$ O $number$ O O O O O $Box[]$ O $complex$ O $number$ O O O O O O $void$ O $number$ O $NgGridItemEvent$ O O O $void$ O $number$ O $NgGridItemEvent$ O O O $void$ O $number$ O $NgGridItemEvent$ O O O O $NgGridItemConfig$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any[]$ O O O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { NgModule , enableProdMode } from 's' import { platformBrowserDynamic } from 's' import { BrowserModule } from 's' import { AppComponent } from 's' import { NgGridModule } from 's' ; @ NgModule ( { imports : [ BrowserModule , NgGridModule ] , declarations : [ AppComponent ] , providers : [ ] , bootstrap : [ AppComponent ] } ) class AppModule { } const platform = platformBrowserDynamic ( ) ; platform . bootstrapModule ( AppModule ) ;	O O $any$ O $any$ O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O O $complex$ O O $any$ O O $undefined[]$ O O O O $complex$ O O $any$ O O O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O
import { browser , element , by } from 's' ; export class 0 { navigateTo ( ) { return browser . get ( 's' ) ; } getParagraphText ( ) { return element ( by . css ( 's' ) ) . getText ( ) ; } }	O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O $any$ O O O O O $any$ O O O O O
import { 0 } from 's' ; describe ( 's' , function ( ) { let page ; beforeEach ( ( ) => { page = new 0 ( ) ; } ) ; it ( 's' , ( ) => { page . navigateTo ( ) ; expect ( page . getParagraphText ( ) ) . toEqual ( 's' ) ; } ) ; } ) ;	O O $any$ O O O O $any$ O O O O O O O O $Angular2GridDemoPage$ O $any$ O O O O O O O O $any$ O O O O O O $any$ O O O O O O O O O $any$ O O O $any$ O O O $any$ O O O O $any$ O O O O O O O O O O
'js' module . exports = function ( config ) { config . set ( { basePath : 's' , frameworks : [ 's' , 's' ] , plugins : [ require ( 's' ) , require ( 's' ) , require ( 's' ) , require ( 's' ) , require ( 's' ) ] , client : { clearContext : false } , files : [ ] , preprocessors : { } , mime : { 's' : [ 's' , 's' ] } , coverageIstanbulReporter : { dir : require ( 's' ) . join ( __dirname , 's' ) , reports : [ 's' , 's' ] , fixWebpackSourcePaths : true } , reporters : config . angularCli && config . angularCli . codeCoverage ? [ 's' , 's' ] : [ 's' , 's' ] , port : 0 , colors : true , logLevel : config . LOG_INFO , autoWatch : true , browsers : [ 's' ] , singleRun : false } ) ; } ;	O $void$ O $void$ O O O $any$ O O $any$ O $any$ O O $string$ O O O $string[]$ O O O O O O O $any[]$ O O $any$ O O O O $any$ O O O O $any$ O O O O $any$ O O O O $any$ O O O O O $complex$ O O $boolean$ O O O O $undefined[]$ O O O O ${}$ O O O O $complex$ O O O O O O O O O O O $complex$ O O $any$ O $any$ O O O O $any$ O $any$ O O O O $string[]$ O O O O O O O $boolean$ O O O O $string[]$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O O O O $number$ O O O $boolean$ O O O $any$ O $any$ O $any$ O $boolean$ O O O $string[]$ O O O O O $boolean$ O O O O O O O
'js' module . exports = function ( config ) { config . set ( { basePath : 's' , frameworks : [ 's' , 's' ] , plugins : [ require ( 's' ) , require ( 's' ) , require ( 's' ) , require ( 's' ) , require ( 's' ) ] , client : { clearContext : false } , coverageIstanbulReporter : { dir : require ( 's' ) . join ( __dirname , 's' ) , reports : [ 's' , 's' ] , fixWebpackSourcePaths : true } , reporters : [ 's' , 's' ] , port : 0 , colors : true , logLevel : config . LOG_INFO , autoWatch : true , browsers : [ 's' ] , singleRun : false } ) ; } ;	O $void$ O $void$ O O O $any$ O O $any$ O $any$ O O $string$ O O O $string[]$ O O O O O O O $any[]$ O O $any$ O O O O $any$ O O O O $any$ O O O O $any$ O O O O $any$ O O O O O $complex$ O O $boolean$ O O O O $complex$ O O $any$ O $any$ O O O O $any$ O $any$ O O O O $string[]$ O O O O O O O $boolean$ O O O O $string[]$ O O O O O O O $number$ O O O $boolean$ O O O $any$ O $any$ O $any$ O $boolean$ O O O $string[]$ O O O O O $boolean$ O O O O O O O
export type NgConfigFixDirection = 's' | 's' | 's' ; export interface NgGridConfig { margins ? : number [ ] ; draggable ? : boolean ; resizable ? : boolean ; max_cols ? : number ; max_rows ? : number ; visible_cols ? : number ; visible_rows ? : number ; min_cols ? : number ; min_rows ? : number ; col_width ? : number ; row_height ? : number ; cascade ? : string ; min_width ? : number ; min_height ? : number ; fix_to_grid ? : boolean ; auto_style ? : boolean ; auto_resize ? : boolean ; maintain_ratio ? : boolean ; prefer_new ? : boolean ; zoom_on_drag ? : boolean ; limit_to_screen ? : boolean ; center_to_screen ? : boolean ; resize_directions ? : string [ ] ; element_based_row_height ? : boolean ; fix_item_position_direction ? : NgConfigFixDirection ; fix_collision_position_direction ? : NgConfigFixDirection ; allow_overlap ? : boolean ; } export interface NgGridItemConfig { uid ? : string ; payload ? : any ; col ? : number ; row ? : number ; sizex ? : number ; sizey ? : number ; dragHandle ? : string ; resizeHandle ? : ResizeHandle ; fixed ? : boolean ; draggable ? : boolean ; resizable ? : boolean ; borderSize ? : number ; maxCols ? : number ; minCols ? : number ; maxRows ? : number ; minRows ? : number ; minWidth ? : number ; minHeight ? : number ; resizeDirections ? : string [ ] ; } export interface NgGridItemEvent { uid : string ; payload : any ; col : number ; row : number ; sizex : number ; sizey : number ; width : number ; height : number ; left : number ; top : number ; } export interface NgGridItemSize { x : number ; y : number ; } export interface NgGridItemPosition { col : number ; row : number ; } export interface NgGridRawPosition { left : number ; top : number ; } export interface NgGridItemDimensions { width : number ; height : number ; } export type ResizeHandle = string | { bottomright ? : string ; bottomleft ? : string ; topright ? : string ; topleft ? : string ; right ? : string ; left ? : string ; bottom ? : string ; top ? : string ; } ;	O O $any$ O O O O O O O O O $any$ O $number[]$ O O O O O O $boolean$ O O O O $boolean$ O O O O $number$ O O O O $number$ O O O O $number$ O O O O $number$ O O O O $number$ O O O O $number$ O O O O $number$ O O O O $number$ O O O O $string$ O O O O $number$ O O O O $number$ O O O O $boolean$ O O O O $boolean$ O O O O $boolean$ O O O O $boolean$ O O O O $boolean$ O O O O $boolean$ O O O O $boolean$ O O O O $boolean$ O O O O $string[]$ O O O O O O $boolean$ O O O O $NgConfigFixDirection$ O O $any$ O $NgConfigFixDirection$ O O $any$ O $boolean$ O O O O O O O $any$ O $string$ O O O O $any$ O O O O $number$ O O O O $number$ O O O O $number$ O O O O $number$ O O O O $string$ O O O O $ResizeHandle$ O O $any$ O $boolean$ O O O O $boolean$ O O O O $boolean$ O O O O $number$ O O O O $number$ O O O O $number$ O O O O $number$ O O O O $number$ O O O O $number$ O O O O $number$ O O O O $string[]$ O O O O O O O O O $any$ O $string$ O O O $any$ O O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O O O O $any$ O $number$ O O O $number$ O O O O O O $any$ O $number$ O O O $number$ O O O O O O $any$ O $number$ O O O $number$ O O O O O O $any$ O $number$ O O O $number$ O O O O O O $any$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O O O
import { NgGrid } from 's' ; import { NgGridItemConfig , NgGridItemEvent , NgGridItemPosition , NgGridItemSize , NgGridRawPosition , NgGridItemDimensions , ResizeHandle } from 's' ; import { Directive , ElementRef , 0 , EventEmitter , KeyValueDiffer , KeyValueDiffers , OnInit , OnDestroy , ViewContainerRef , Output , DoCheck } from 's' ; @ Directive ( { selector : 's' , inputs : [ 's' ] } ) export class NgGridItem implements OnInit , OnDestroy , DoCheck { @ Output ( ) public onItemChange : EventEmitter < NgGridItemEvent > = new EventEmitter < NgGridItemEvent > ( false ) ; @ Output ( ) public onDragStart : EventEmitter < NgGridItemEvent > = new EventEmitter < NgGridItemEvent > ( ) ; @ Output ( ) public onDrag : EventEmitter < NgGridItemEvent > = new EventEmitter < NgGridItemEvent > ( ) ; @ Output ( ) public onDragStop : EventEmitter < NgGridItemEvent > = new EventEmitter < NgGridItemEvent > ( ) ; @ Output ( ) public onDragAny : EventEmitter < NgGridItemEvent > = new EventEmitter < NgGridItemEvent > ( ) ; @ Output ( ) public onResizeStart : EventEmitter < NgGridItemEvent > = new EventEmitter < NgGridItemEvent > ( ) ; @ Output ( ) public onResize : EventEmitter < NgGridItemEvent > = new EventEmitter < NgGridItemEvent > ( ) ; @ Output ( ) public onResizeStop : EventEmitter < NgGridItemEvent > = new EventEmitter < NgGridItemEvent > ( ) ; @ Output ( ) public onResizeAny : EventEmitter < NgGridItemEvent > = new EventEmitter < NgGridItemEvent > ( ) ; @ Output ( ) public onChangeStart : EventEmitter < NgGridItemEvent > = new EventEmitter < NgGridItemEvent > ( ) ; @ Output ( ) public onChange : EventEmitter < NgGridItemEvent > = new EventEmitter < NgGridItemEvent > ( ) ; @ Output ( ) public onChangeStop : EventEmitter < NgGridItemEvent > = new EventEmitter < NgGridItemEvent > ( ) ; @ Output ( ) public onChangeAny : EventEmitter < NgGridItemEvent > = new EventEmitter < NgGridItemEvent > ( ) ; @ Output ( ) public ngGridItemChange : EventEmitter < NgGridItemConfig > = new EventEmitter < NgGridItemConfig > ( ) ; private static CONST_DEFAULT_CONFIG : NgGridItemConfig = { uid : null , col : 0 , row : 0 , sizex : 0 , sizey : 0 , dragHandle : null , resizeHandle : null , fixed : false , draggable : true , resizable : true , borderSize : 0 , resizeDirections : null , } ; public isFixed : boolean = false ; public isDraggable : boolean = true ; public isResizable : boolean = true ; public minWidth : number = 0 ; public minHeight : number = 0 ; public uid : string = null ; private _payload : any ; private _currentPosition : NgGridItemPosition = { col : 0 , row : 0 } ; private _size : NgGridItemSize = { x : 0 , y : 0 } ; private _config = NgGridItem . CONST_DEFAULT_CONFIG ; private _userConfig = null ; private _dragHandle : string ; private _resizeHandle : ResizeHandle ; private _borderSize : number ; private _elemWidth : number ; private _elemHeight : number ; private _elemLeft : number ; private _elemTop : number ; private _added : boolean = false ; private _differ : KeyValueDiffer < string , any > ; private _cascadeMode : string ; private _maxCols : number = 0 ; private _minCols : number = 0 ; private _maxRows : number = 0 ; private _minRows : number = 0 ; private _resizeDirections : string [ ] = [ ] ; private _zIndex : number = 0 ; set zIndex ( zIndex ) { this . _renderer . setStyle ( this . _ngEl . nativeElement , 's' , zIndex . toString ( ) ) ; this . _zIndex = zIndex ; } get zIndex ( ) : number { return this . _zIndex ; } set config ( v ) { this . _userConfig = v ; const configObject = Object . assign ( { } , NgGridItem . CONST_DEFAULT_CONFIG , v ) ; for ( let x in NgGridItem . CONST_DEFAULT_CONFIG ) if ( configObject [ x ] == null ) configObject [ x ] = NgGridItem . CONST_DEFAULT_CONFIG [ x ] ; this . setConfig ( configObject ) ; if ( this . _userConfig != null ) { if ( this . _differ == null ) { this . _differ = this . _differs . find ( this . _userConfig ) . create ( ) ; } this . _differ . diff ( this . _userConfig ) ; } if ( ! this . _added ) { this . _added = true ; this . _ngGrid . addItem ( this ) ; } this . _recalculateDimensions ( ) ; this . _recalculatePosition ( ) ; } get sizex ( ) : number { return this . _size . x ; } get sizey ( ) : number { return this . _size . y ; } get col ( ) : number { return this . _currentPosition . col ; } get row ( ) : number { return this . _currentPosition . row ; } get currentCol ( ) : number { return this . _currentPosition . col ; } get currentRow ( ) : number { return this . _currentPosition . row ; } constructor ( private _differs , private _ngEl , private _renderer , private _ngGrid , public containerRef , ) { } public onResizeStartEvent ( ) { const event = this . getEventOutput ( ) ; this . onResizeStart . emit ( event ) ; this . onResizeAny . emit ( event ) ; this . onChangeStart . emit ( event ) ; this . onChangeAny . emit ( event ) ; } public onResizeEvent ( ) { const event = this . getEventOutput ( ) ; this . onResize . emit ( event ) ; this . onResizeAny . emit ( event ) ; this . onChange . emit ( event ) ; this . onChangeAny . emit ( event ) ; } public onResizeStopEvent ( ) { const event = this . getEventOutput ( ) ; this . onResizeStop . emit ( event ) ; this . onResizeAny . emit ( event ) ; this . onChangeStop . emit ( event ) ; this . onChangeAny . emit ( event ) ; this . onConfigChangeEvent ( ) ; } public onDragStartEvent ( ) { const event = this . getEventOutput ( ) ; this . onDragStart . emit ( event ) ; this . onDragAny . emit ( event ) ; this . onChangeStart . emit ( event ) ; this . onChangeAny . emit ( event ) ; } public onDragEvent ( ) { const event = this . getEventOutput ( ) ; this . onDrag . emit ( event ) ; this . onDragAny . emit ( event ) ; this . onChange . emit ( event ) ; this . onChangeAny . emit ( event ) ; } public onDragStopEvent ( ) { const event = this . getEventOutput ( ) ; this . onDragStop . emit ( event ) ; this . onDragAny . emit ( event ) ; this . onChangeStop . emit ( event ) ; this . onChangeAny . emit ( event ) ; this . onConfigChangeEvent ( ) ; } public onCascadeEvent ( ) { this . onConfigChangeEvent ( ) ; } public ngOnInit ( ) { this . _renderer . addClass ( this . _ngEl . nativeElement , 's' ) ; if ( this . _ngGrid . autoStyle ) this . _renderer . setStyle ( this . _ngEl . nativeElement , 's' , 's' ) ; this . _recalculateDimensions ( ) ; this . _recalculatePosition ( ) ; this . config = this . _userConfig ; } public canDrag ( e ) { if ( ! this . isDraggable ) return false ; if ( this . _dragHandle ) { return this . findHandle ( this . _dragHandle , e . target ) ; } return true ; } public findHandle ( handleSelector , startElement ) { try { let targetElem = startElement ; while ( targetElem && targetElem != this . _ngEl . nativeElement ) { if ( this . elementMatches ( targetElem , handleSelector ) ) return true ; targetElem = targetElem . parentElement ; } } catch ( err ) { } return false ; } public canResize ( e ) { if ( ! this . isResizable ) return null ; if ( this . _resizeHandle ) { if ( typeof this . _resizeHandle === 's' ) { return this . findHandle ( this . _resizeHandle , e . target ) ? 's' : null ; } if ( typeof this . _resizeHandle !== 's' ) return null ; const resizeDirections = [ 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' ] ; for ( let direction of resizeDirections ) { if ( direction in this . _resizeHandle ) { if ( this . findHandle ( this . _resizeHandle [ direction ] , e . target ) ) { return direction ; } } } return null ; } if ( this . _borderSize <= 0 ) return null ; const mousePos = this . _getMousePosition ( e ) ; for ( let direction of this . _resizeDirections ) { if ( this . canResizeInDirection ( direction , mousePos ) ) { return direction ; } } return null ; } public onMouseMove ( e ) { if ( this . _ngGrid . autoStyle ) { if ( this . _ngGrid . resizeEnable ) { const resizeDirection = this . canResize ( e ) ; let cursor = 's' ; switch ( resizeDirection ) { case 's' : case 's' : cursor = 's' ; break ; case 's' : case 's' : cursor = 's' ; break ; case 's' : case 's' : cursor = 's' ; break ; case 's' : case 's' : cursor = 's' ; break ; default : if ( this . _ngGrid . dragEnable && this . canDrag ( e ) ) { cursor = 's' ; } break ; } this . _renderer . setStyle ( this . _ngEl . nativeElement , 's' , cursor ) ; } else if ( this . _ngGrid . dragEnable && this . canDrag ( e ) ) { this . _renderer . setStyle ( this . _ngEl . nativeElement , 's' , 's' ) ; } else { this . _renderer . setStyle ( this . _ngEl . nativeElement , 's' , 's' ) ; } } } public ngOnDestroy ( ) { if ( this . _added ) this . _ngGrid . removeItem ( this ) ; } public getElement ( ) { return this . _ngEl ; } public getDragHandle ( ) { return this . _dragHandle ; } public getResizeHandle ( ) { return this . _resizeHandle ; } public getDimensions ( ) { return { 's' : this . _elemWidth , 's' : this . _elemHeight } ; } public getSize ( ) { return this . _size ; } public getPosition ( ) { return { 's' : this . _elemLeft , 's' : this . _elemTop } ; } public getGridPosition ( ) { return this . _currentPosition ; } public setConfig ( config ) { this . _config = config ; this . _payload = config . payload ; this . _currentPosition . col = config . col ? config . col : NgGridItem . CONST_DEFAULT_CONFIG . col ; this . _currentPosition . row = config . row ? config . row : NgGridItem . CONST_DEFAULT_CONFIG . row ; this . _size . x = config . sizex ? config . sizex : NgGridItem . CONST_DEFAULT_CONFIG . sizex ; this . _size . y = config . sizey ? config . sizey : NgGridItem . CONST_DEFAULT_CONFIG . sizey ; this . _dragHandle = config . dragHandle ; this . _resizeHandle = config . resizeHandle ; this . _borderSize = config . borderSize ; this . isDraggable = config . draggable ? true : false ; this . isResizable = config . resizable ? true : false ; this . isFixed = config . fixed ? true : false ; this . _resizeDirections = config . resizeDirections || this . _ngGrid . resizeDirections ; this . _maxCols = ! isNaN ( config . maxCols ) && isFinite ( config . maxCols ) ? config . maxCols : 0 ; this . _minCols = ! isNaN ( config . minCols ) && isFinite ( config . minCols ) ? config . minCols : 0 ; this . _maxRows = ! isNaN ( config . maxRows ) && isFinite ( config . maxRows ) ? config . maxRows : 0 ; this . _minRows = ! isNaN ( config . minRows ) && isFinite ( config . minRows ) ? config . minRows : 0 ; this . minWidth = ! isNaN ( config . minWidth ) && isFinite ( config . minWidth ) ? config . minWidth : 0 ; this . minHeight = ! isNaN ( config . minHeight ) && isFinite ( config . minHeight ) ? config . minHeight : 0 ; if ( this . _minCols > 0 && this . _maxCols > 0 && this . _minCols > this . _maxCols ) this . _minCols = 0 ; if ( this . _minRows > 0 && this . _maxRows > 0 && this . _minRows > this . _maxRows ) this . _minRows = 0 ; if ( this . _added ) { this . _ngGrid . updateItem ( this ) ; } this . _size = this . fixResize ( this . _size ) ; this . _recalculatePosition ( ) ; this . _recalculateDimensions ( ) ; } public ngDoCheck ( ) { if ( this . _differ != null ) { const changes = this . _differ . diff ( this . _userConfig ) ; if ( changes != null ) { return this . _applyChanges ( changes ) ; } } return false ; } public setSize ( newSize , update = true ) { newSize = this . fixResize ( newSize ) ; this . _size = newSize ; if ( update ) this . _recalculateDimensions ( ) ; this . onItemChange . emit ( this . getEventOutput ( ) ) ; } public setGridPosition ( gridPosition , update = true ) { this . _currentPosition = gridPosition ; if ( update ) this . _recalculatePosition ( ) ; this . onItemChange . emit ( this . getEventOutput ( ) ) ; } public getEventOutput ( ) { return < NgGridItemEvent > { uid : this . uid , payload : this . _payload , col : this . _currentPosition . col , row : this . _currentPosition . row , sizex : this . _size . x , sizey : this . _size . y , width : this . _elemWidth , height : this . _elemHeight , left : this . _elemLeft , top : this . _elemTop } ; } public setPosition ( x , y ) { switch ( this . _cascadeMode ) { case 's' : case 's' : default : this . _renderer . setStyle ( this . _ngEl . nativeElement , 's' , x + 's' ) ; this . _renderer . setStyle ( this . _ngEl . nativeElement , 's' , y + 's' ) ; break ; case 's' : this . _renderer . setStyle ( this . _ngEl . nativeElement , 's' , x + 's' ) ; this . _renderer . setStyle ( this . _ngEl . nativeElement , 's' , y + 's' ) ; break ; case 's' : this . _renderer . setStyle ( this . _ngEl . nativeElement , 's' , x + 's' ) ; this . _renderer . setStyle ( this . _ngEl . nativeElement , 's' , y + 's' ) ; break ; } this . _elemLeft = x ; this . _elemTop = y ; } public setCascadeMode ( cascade ) { this . _cascadeMode = cascade ; switch ( cascade ) { case 's' : case 's' : default : this . _renderer . setStyle ( this . _ngEl . nativeElement , 's' , this . _elemLeft + 's' ) ; this . _renderer . setStyle ( this . _ngEl . nativeElement , 's' , this . _elemTop + 's' ) ; this . _renderer . setStyle ( this . _ngEl . nativeElement , 's' , null ) ; this . _renderer . setStyle ( this . _ngEl . nativeElement , 's' , null ) ; break ; case 's' : this . _renderer . setStyle ( this . _ngEl . nativeElement , 's' , this . _elemLeft + 's' ) ; this . _renderer . setStyle ( this . _ngEl . nativeElement , 's' , this . _elemTop + 's' ) ; this . _renderer . setStyle ( this . _ngEl . nativeElement , 's' , null ) ; this . _renderer . setStyle ( this . _ngEl . nativeElement , 's' , null ) ; break ; case 's' : this . _renderer . setStyle ( this . _ngEl . nativeElement , 's' , this . _elemLeft + 's' ) ; this . _renderer . setStyle ( this . _ngEl . nativeElement , 's' , this . _elemTop + 's' ) ; this . _renderer . setStyle ( this . _ngEl . nativeElement , 's' , null ) ; this . _renderer . setStyle ( this . _ngEl . nativeElement , 's' , null ) ; break ; } } public setDimensions ( w , h ) { if ( w < this . minWidth ) w = this . minWidth ; if ( h < this . minHeight ) h = this . minHeight ; this . _renderer . setStyle ( this . _ngEl . nativeElement , 's' , w + 's' ) ; this . _renderer . setStyle ( this . _ngEl . nativeElement , 's' , h + 's' ) ; this . _elemWidth = w ; this . _elemHeight = h ; } public startMoving ( ) { this . _renderer . addClass ( this . _ngEl . nativeElement , 's' ) ; const style = window . getComputedStyle ( this . _ngEl . nativeElement ) ; if ( this . _ngGrid . autoStyle ) this . _renderer . setStyle ( this . _ngEl . nativeElement , 's' , ( parseInt ( style . getPropertyValue ( 's' ) ) + 0 ) . toString ( ) ) ; } public stopMoving ( ) { this . _renderer . removeClass ( this . _ngEl . nativeElement , 's' ) ; const style = window . getComputedStyle ( this . _ngEl . nativeElement ) ; if ( this . _ngGrid . autoStyle ) this . _renderer . setStyle ( this . _ngEl . nativeElement , 's' , ( parseInt ( style . getPropertyValue ( 's' ) ) - 0 ) . toString ( ) ) ; } public recalculateSelf ( ) { this . _recalculatePosition ( ) ; this . _recalculateDimensions ( ) ; } public fixResize ( newSize ) { if ( this . _maxCols > 0 && newSize . x > this . _maxCols ) newSize . x = this . _maxCols ; if ( this . _maxRows > 0 && newSize . y > this . _maxRows ) newSize . y = this . _maxRows ; if ( this . _minCols > 0 && newSize . x < this . _minCols ) newSize . x = this . _minCols ; if ( this . _minRows > 0 && newSize . y < this . _minRows ) newSize . y = this . _minRows ; const itemWidth = ( newSize . x * this . _ngGrid . colWidth ) + ( ( this . _ngGrid . marginLeft + this . _ngGrid . marginRight ) * ( newSize . x - 0 ) ) ; if ( itemWidth < this . minWidth ) newSize . x = Math . ceil ( ( this . minWidth + this . _ngGrid . marginRight + this . _ngGrid . marginLeft ) / ( this . _ngGrid . colWidth + this . _ngGrid . marginRight + this . _ngGrid . marginLeft ) ) ; const itemHeight = ( newSize . y * this . _ngGrid . rowHeight ) + ( ( this . _ngGrid . marginTop + this . _ngGrid . marginBottom ) * ( newSize . y - 0 ) ) ; if ( itemHeight < this . minHeight ) newSize . y = Math . ceil ( ( this . minHeight + this . _ngGrid . marginBottom + this . _ngGrid . marginTop ) / ( this . _ngGrid . rowHeight + this . _ngGrid . marginBottom + this . _ngGrid . marginTop ) ) ; return newSize ; } private elementMatches ( element , selector ) { if ( ! element ) return false ; if ( element . matches ) return element . matches ( selector ) ; if ( element . oMatchesSelector ) return element . oMatchesSelector ( selector ) ; if ( element . msMatchesSelector ) return element . msMatchesSelector ( selector ) ; if ( element . mozMatchesSelector ) return element . mozMatchesSelector ( selector ) ; if ( element . webkitMatchesSelector ) return element . webkitMatchesSelector ( selector ) ; if ( ! element . document || ! element . ownerDocument ) return false ; const matches = ( element . document || element . ownerDocument ) . querySelectorAll ( selector ) ; let i = matches . length ; while ( -- i >= 0 && matches . item ( i ) !== element ) { } return i > - 0 ; } private _recalculatePosition ( ) { const x = ( this . _ngGrid . colWidth + this . _ngGrid . marginLeft + this . _ngGrid . marginRight ) * ( this . _currentPosition . col - 0 ) + this . _ngGrid . marginLeft + this . _ngGrid . screenMargin ; const y = ( this . _ngGrid . rowHeight + this . _ngGrid . marginTop + this . _ngGrid . marginBottom ) * ( this . _currentPosition . row - 0 ) + this . _ngGrid . marginTop ; this . setPosition ( x , y ) ; } private _recalculateDimensions ( ) { if ( this . _size . x < this . _ngGrid . minCols ) this . _size . x = this . _ngGrid . minCols ; if ( this . _size . y < this . _ngGrid . minRows ) this . _size . y = this . _ngGrid . minRows ; const newWidth = ( this . _ngGrid . colWidth * this . _size . x ) + ( ( this . _ngGrid . marginLeft + this . _ngGrid . marginRight ) * ( this . _size . x - 0 ) ) ; const newHeight = ( this . _ngGrid . rowHeight * this . _size . y ) + ( ( this . _ngGrid . marginTop + this . _ngGrid . marginBottom ) * ( this . _size . y - 0 ) ) ; const w = Math . max ( this . minWidth , this . _ngGrid . minWidth , newWidth ) ; const h = Math . max ( this . minHeight , this . _ngGrid . minHeight , newHeight ) ; this . setDimensions ( w , h ) ; } private _getMousePosition ( e ) { if ( e . originalEvent && e . originalEvent . touches ) { const oe = e . originalEvent ; e = oe . touches . length ? oe . touches [ 0 ] : ( oe . changedTouches . length ? oe . changedTouches [ 0 ] : e ) ; } else if ( e . touches ) { e = e . touches . length ? e . touches [ 0 ] : ( e . changedTouches . length ? e . changedTouches [ 0 ] : e ) ; } const refPos = this . _ngEl . nativeElement . getBoundingClientRect ( ) ; return { left : e . clientX - refPos . left , top : e . clientY - refPos . top } ; } private _applyChanges ( changes ) { let changed = false ; const changeCheck = ( record ) => { if ( this . _config [ record . key ] !== record . currentValue ) { this . _config [ record . key ] = record . currentValue ; changed = true ; } } ; changes . forEachAddedItem ( changeCheck ) ; changes . forEachChangedItem ( changeCheck ) ; changes . forEachRemovedItem ( ( record ) => { changed = true ; delete this . _config [ record . key ] ; } ) ; if ( changed ) { this . setConfig ( this . _config ) ; } return changed ; } private onConfigChangeEvent ( ) { if ( this . _userConfig === null ) return ; this . _config . sizex = this . _userConfig . sizex = this . _size . x ; this . _config . sizey = this . _userConfig . sizey = this . _size . y ; this . _config . col = this . _userConfig . col = this . _currentPosition . col ; this . _config . row = this . _userConfig . row = this . _currentPosition . row ; this . ngGridItemChange . emit ( this . _userConfig ) ; } private canResizeInDirection ( direction , mousePos ) { switch ( direction ) { case 's' : return mousePos . left < this . _elemWidth && mousePos . left > this . _elemWidth - this . _borderSize && mousePos . top < this . _elemHeight && mousePos . top > this . _elemHeight - this . _borderSize ; case 's' : return mousePos . left < this . _borderSize && mousePos . top < this . _elemHeight && mousePos . top > this . _elemHeight - this . _borderSize ; case 's' : return mousePos . left < this . _elemWidth && mousePos . left > this . _elemWidth - this . _borderSize && mousePos . top < this . _borderSize ; case 's' : return mousePos . left < this . _borderSize && mousePos . top < this . _borderSize ; case 's' : return mousePos . left < this . _elemWidth && mousePos . left > this . _elemWidth - this . _borderSize ; case 's' : return mousePos . left < this . _borderSize ; case 's' : return mousePos . top < this . _elemHeight && mousePos . top > this . _elemHeight - this . _borderSize ; case 's' : return mousePos . top < this . _borderSize ; default : return false ; } } }	O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string[]$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O O $NgGridItemConfig$ O $any$ O O $null$ O O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O $null$ O O O $null$ O O O $false$ O O O $true$ O O O $true$ O O O $number$ O O O $null$ O O O O O O $boolean$ O O O O O O $boolean$ O O O O O O $boolean$ O O O O O O $number$ O O O O O O $number$ O O O O O O $string$ O O O O O O $any$ O O O O $NgGridItemPosition$ O $any$ O O $number$ O O O $number$ O O O O O $NgGridItemSize$ O $any$ O O $number$ O O O $number$ O O O O O $NgGridItemConfig$ O $any$ O $NgGridItemConfig$ O O $any$ O O O O $string$ O O O O $ResizeHandle$ O $any$ O O $number$ O O O O $number$ O O O O $number$ O O O O $number$ O O O O $number$ O O O O $boolean$ O O O O O O $any$ O $any$ O O O O O O O $string$ O O O O $number$ O O O O O O $number$ O O O O O O $number$ O O O O O O $number$ O O O O O O $string[]$ O O O O O O O O O $number$ O O O O O O $number$ O $number$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O $number$ O $string$ O O O O O O $number$ O $number$ O O O $number$ O O O O O O O O $number$ O O O $NgGridItemConfig$ O $NgGridItemConfig$ O O O O $any$ O $NgGridItemConfig$ O O $NgGridItemConfig$ O $ObjectConstructor$ O O O O O O $any$ O $NgGridItemConfig$ O $NgGridItemConfig$ O O O O O $string$ O $any$ O $NgGridItemConfig$ O O O $NgGridItemConfig$ O $string$ O O O O $NgGridItemConfig$ O $string$ O O $any$ O $NgGridItemConfig$ O $string$ O O O O $void$ O $NgGridItemConfig$ O O O O O O $any$ O O O O O O O O $any$ O O O O O O $any$ O O O $any$ O $any$ O O O $any$ O O $any$ O O O O O O $any$ O $any$ O O O $any$ O O O O O O O O $boolean$ O O O O $boolean$ O O O O O $NgGrid$ O $void$ O O O O O O O $void$ O O O O O $void$ O O O O O $number$ O O O O O O O O $NgGridItemSize$ O $number$ O O O $number$ O O O O O O O O $NgGridItemSize$ O $number$ O O O $number$ O O O O O O O O $NgGridItemPosition$ O $number$ O O O $number$ O O O O O O O O $NgGridItemPosition$ O $number$ O O O $number$ O O O O O O O O $NgGridItemPosition$ O $number$ O O O $number$ O O O O O O O O $NgGridItemPosition$ O $number$ O O O O O $KeyValueDiffers$ O O $ElementRef$ O O $Renderer2$ O O $NgGrid$ O O $ViewContainerRef$ O O O O O $void$ O O O O $NgGridItemEvent$ O O O $NgGridItemEvent$ O O O O O $any$ O $any$ O $NgGridItemEvent$ O O O O $any$ O $any$ O $NgGridItemEvent$ O O O O $any$ O $any$ O $NgGridItemEvent$ O O O O $any$ O $any$ O $NgGridItemEvent$ O O O O $void$ O O O O $NgGridItemEvent$ O O O $NgGridItemEvent$ O O O O O $any$ O $any$ O $NgGridItemEvent$ O O O O $any$ O $any$ O $NgGridItemEvent$ O O O O $any$ O $any$ O $NgGridItemEvent$ O O O O $any$ O $any$ O $NgGridItemEvent$ O O O O $void$ O O O O $NgGridItemEvent$ O O O $NgGridItemEvent$ O O O O O $any$ O $any$ O $NgGridItemEvent$ O O O O $any$ O $any$ O $NgGridItemEvent$ O O O O $any$ O $any$ O $NgGridItemEvent$ O O O O $any$ O $any$ O $NgGridItemEvent$ O O O O $void$ O O O O O $void$ O O O O $NgGridItemEvent$ O O O $NgGridItemEvent$ O O O O O $any$ O $any$ O $NgGridItemEvent$ O O O O $any$ O $any$ O $NgGridItemEvent$ O O O O $any$ O $any$ O $NgGridItemEvent$ O O O O $any$ O $any$ O $NgGridItemEvent$ O O O O $void$ O O O O $NgGridItemEvent$ O O O $NgGridItemEvent$ O O O O O $any$ O $any$ O $NgGridItemEvent$ O O O O $any$ O $any$ O $NgGridItemEvent$ O O O O $any$ O $any$ O $NgGridItemEvent$ O O O O $any$ O $any$ O $NgGridItemEvent$ O O O O $void$ O O O O $NgGridItemEvent$ O O O $NgGridItemEvent$ O O O O O $any$ O $any$ O $NgGridItemEvent$ O O O O $any$ O $any$ O $NgGridItemEvent$ O O O O $any$ O $any$ O $NgGridItemEvent$ O O O O $any$ O $any$ O $NgGridItemEvent$ O O O O $void$ O O O O O $void$ O O O O O $void$ O O O O O $void$ O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O $NgGrid$ O $boolean$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O $void$ O O O O O $void$ O O O O O $NgGridItemConfig$ O O O $any$ O O O $boolean$ O $any$ O O O O O O O $boolean$ O O O O O O O O $string$ O O O O O $boolean$ O O O $string$ O $any$ O $any$ O O O O O O O O $boolean$ O $string$ O $HTMLElement$ O O O O O $any$ O $HTMLElement$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O $boolean$ O $any$ O $string$ O O O O O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O O $string$ O $any$ O O O O O O O $boolean$ O O O O O O O O $ResizeHandle$ O O O O O O O $ResizeHandle$ O O O O O O O $boolean$ O O O $string$ O $any$ O $any$ O O O O O O O O O O O O $complex$ O O O O O O O $string[]$ O O O O O O O O O O O O O O O O O O O O O O $string$ O $string[]$ O O O O $string$ O O O $complex$ O O O O O O $boolean$ O O O $complex$ O $string$ O O $any$ O $any$ O O O O $string$ O O O O O O O O O O O O $number$ O O O O O O O $NgGridRawPosition$ O O O $NgGridRawPosition$ O $any$ O O O O O $string$ O O O $string[]$ O O O O O O $boolean$ O $string$ O $NgGridRawPosition$ O O O O $string$ O O O O O O O O $void$ O $any$ O O O O O O $NgGrid$ O $boolean$ O O O O O O $NgGrid$ O $boolean$ O O O $string$ O O O $string$ O $any$ O O O $string$ O O O O O $string$ O O O O O O O O $string$ O O O O O O O O O O O $string$ O O O O O O O O O O O $string$ O O O O O O O O O O O $string$ O O O O O O O O O O O $NgGrid$ O $boolean$ O O O $boolean$ O $any$ O O O $string$ O O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O $string$ O O O O O O O O $NgGrid$ O $boolean$ O O O $boolean$ O $any$ O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O O O $void$ O O O O O O O $boolean$ O O O $NgGrid$ O $void$ O O O O O O $ElementRef$ O O O O O O $any$ O O O $string$ O O O O O O $string$ O O O $ResizeHandle$ O O O O O O $ResizeHandle$ O O O $NgGridItemDimensions$ O O O O O O O O O $number$ O O O O O $number$ O O O O $NgGridItemSize$ O O O O O O $NgGridItemSize$ O O O $NgGridRawPosition$ O O O O O O O O O $number$ O O O O O $number$ O O O O $NgGridItemPosition$ O O O O O O $NgGridItemPosition$ O O O $void$ O $NgGridItemConfig$ O O O O $NgGridItemConfig$ O $NgGridItemConfig$ O O O $any$ O $NgGridItemConfig$ O $any$ O O O $NgGridItemPosition$ O $number$ O $NgGridItemConfig$ O $number$ O $NgGridItemConfig$ O $number$ O $any$ O $NgGridItemConfig$ O $number$ O O O $NgGridItemPosition$ O $number$ O $NgGridItemConfig$ O $number$ O $NgGridItemConfig$ O $number$ O $any$ O $NgGridItemConfig$ O $number$ O O O $NgGridItemSize$ O $number$ O $NgGridItemConfig$ O $number$ O $NgGridItemConfig$ O $number$ O $any$ O $NgGridItemConfig$ O $number$ O O O $NgGridItemSize$ O $number$ O $NgGridItemConfig$ O $number$ O $NgGridItemConfig$ O $number$ O $any$ O $NgGridItemConfig$ O $number$ O O O $string$ O $NgGridItemConfig$ O $string$ O O O $ResizeHandle$ O $NgGridItemConfig$ O $ResizeHandle$ O O O $number$ O $NgGridItemConfig$ O $number$ O O O $boolean$ O $NgGridItemConfig$ O $boolean$ O O O O O O O $boolean$ O $NgGridItemConfig$ O $boolean$ O O O O O O O $boolean$ O $NgGridItemConfig$ O $boolean$ O O O O O O O $string[]$ O $NgGridItemConfig$ O $string[]$ O O O $NgGrid$ O $string[]$ O O O $number$ O O $boolean$ O $NgGridItemConfig$ O $number$ O O $boolean$ O $NgGridItemConfig$ O $number$ O O $NgGridItemConfig$ O $number$ O O O O O $number$ O O $boolean$ O $NgGridItemConfig$ O $number$ O O $boolean$ O $NgGridItemConfig$ O $number$ O O $NgGridItemConfig$ O $number$ O O O O O $number$ O O $boolean$ O $NgGridItemConfig$ O $number$ O O $boolean$ O $NgGridItemConfig$ O $number$ O O $NgGridItemConfig$ O $number$ O O O O O $number$ O O $boolean$ O $NgGridItemConfig$ O $number$ O O $boolean$ O $NgGridItemConfig$ O $number$ O O $NgGridItemConfig$ O $number$ O O O O O $number$ O O $boolean$ O $NgGridItemConfig$ O $number$ O O $boolean$ O $NgGridItemConfig$ O $number$ O O $NgGridItemConfig$ O $number$ O O O O O $number$ O O $boolean$ O $NgGridItemConfig$ O $number$ O O $boolean$ O $NgGridItemConfig$ O $number$ O O $NgGridItemConfig$ O $number$ O O O O O O O $number$ O O O O O $number$ O O O O O $number$ O O O $number$ O O O $number$ O O O O O O O $number$ O O O O O $number$ O O O O O $number$ O O O $number$ O O O $number$ O O O O O O O $boolean$ O O O O $NgGrid$ O $void$ O O O O O O O $NgGridItemSize$ O O O $NgGridItemSize$ O O O $NgGridItemSize$ O O O O $void$ O O O O O $void$ O O O O O $boolean$ O O O O O O O $any$ O O O O O $any$ O O O $any$ O $any$ O O O $any$ O O O O $any$ O O O O O O O $boolean$ O $any$ O O O O O O O O O $void$ O $NgGridItemSize$ O $boolean$ O O O O $NgGridItemSize$ O O O $NgGridItemSize$ O $NgGridItemSize$ O O O O $NgGridItemSize$ O $NgGridItemSize$ O O O $boolean$ O O O $void$ O O O O O $any$ O $any$ O O O $NgGridItemEvent$ O O O O O O $void$ O $NgGridItemPosition$ O $boolean$ O O O O O O $NgGridItemPosition$ O $NgGridItemPosition$ O O O $boolean$ O O O $void$ O O O O O $any$ O $any$ O O O $NgGridItemEvent$ O O O O O O $NgGridItemEvent$ O O O O O $any$ O O $string$ O O O $string$ O $any$ O O O $any$ O $number$ O O O $NgGridItemPosition$ O $number$ O $number$ O O O $NgGridItemPosition$ O $number$ O $number$ O O O $NgGridItemSize$ O $number$ O $number$ O O O $NgGridItemSize$ O $number$ O $number$ O O O $number$ O $number$ O O O $number$ O $number$ O O O $number$ O $number$ O O O $number$ O O O O $void$ O $number$ O $number$ O O O O O O $string$ O O O O O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O $number$ O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O $number$ O O O O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O $number$ O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O $number$ O O O O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O $number$ O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O $number$ O O O O O O O O O $number$ O $number$ O O O $number$ O $number$ O O O $void$ O $string$ O O O O $string$ O $string$ O O O $string$ O O O O O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O $number$ O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O $number$ O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O $number$ O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O $number$ O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O $number$ O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O $number$ O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O O O O $void$ O $number$ O $number$ O O O O $number$ O O O $number$ O $number$ O O O $number$ O O O $number$ O O O $number$ O $number$ O O O $number$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $number$ O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O $number$ O O O O O O $number$ O $number$ O O O $number$ O $number$ O O O $void$ O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O $complex$ O $CSSStyleDeclaration)$ O O O $any$ O $any$ O O O O O O $NgGrid$ O $boolean$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O $number$ O $any$ O $any$ O O O O O O O O $string$ O O O O O O $void$ O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O $complex$ O $CSSStyleDeclaration)$ O O O $any$ O $any$ O O O O O O $NgGrid$ O $boolean$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O $number$ O $any$ O $any$ O O O O O O O O $string$ O O O O O O $void$ O O O O O $void$ O O O O O $void$ O O O O O $NgGridItemSize$ O $NgGridItemSize$ O O O O O O $number$ O O O $NgGridItemSize$ O $number$ O O O $number$ O $NgGridItemSize$ O $number$ O O O $number$ O O O O O $number$ O O O $NgGridItemSize$ O $number$ O O O $number$ O $NgGridItemSize$ O $number$ O O O $number$ O O O O O $number$ O O O $NgGridItemSize$ O $number$ O O O $number$ O $NgGridItemSize$ O $number$ O O O $number$ O O O O O $number$ O O O $NgGridItemSize$ O $number$ O O O $number$ O $NgGridItemSize$ O $number$ O O O $number$ O O $number$ O O $NgGridItemSize$ O $number$ O O O $NgGrid$ O $number$ O O O O O O $NgGrid$ O $number$ O O O $NgGrid$ O $number$ O O O $NgGridItemSize$ O $number$ O O O O O O O $number$ O O O $number$ O $NgGridItemSize$ O $number$ O $Math$ O $number$ O O O O $number$ O O O $NgGrid$ O $number$ O O O $NgGrid$ O $number$ O O O O O $NgGrid$ O $number$ O O O $NgGrid$ O $number$ O O O $NgGrid$ O $number$ O O O O $number$ O O $NgGridItemSize$ O $number$ O O O $NgGrid$ O $number$ O O O O O O $NgGrid$ O $number$ O O O $NgGrid$ O $number$ O O O $NgGridItemSize$ O $number$ O O O O O O O $number$ O O O $number$ O $NgGridItemSize$ O $number$ O $Math$ O $number$ O O O O $number$ O O O $NgGrid$ O $number$ O O O $NgGrid$ O $number$ O O O O O $NgGrid$ O $number$ O O O $NgGrid$ O $number$ O O O $NgGrid$ O $number$ O O O O $NgGridItemSize$ O O O $boolean$ O $any$ O $string$ O O O O O $any$ O O O O O O $any$ O $any$ O O $any$ O $any$ O $string$ O O O O $any$ O $any$ O O $any$ O $any$ O $string$ O O O O $any$ O $any$ O O $any$ O $any$ O $string$ O O O O $any$ O $any$ O O $any$ O $any$ O $string$ O O O O $any$ O $any$ O O $any$ O $any$ O $string$ O O O O O $any$ O $any$ O O $any$ O $any$ O O O O O $any$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O $string$ O O O $number$ O $any$ O $any$ O O O O $number$ O O O $any$ O $any$ O $number$ O O $any$ O O O O $number$ O O O O O O $void$ O O O O $number$ O O O O $NgGrid$ O $number$ O O O $NgGrid$ O $number$ O O O $NgGrid$ O $number$ O O O O O $NgGridItemPosition$ O $number$ O O O O O O $NgGrid$ O $number$ O O O $NgGrid$ O $number$ O O $number$ O O O O $NgGrid$ O $number$ O O O $NgGrid$ O $number$ O O O $NgGrid$ O $number$ O O O O O $NgGridItemPosition$ O $number$ O O O O O O $NgGrid$ O $number$ O O O $void$ O $number$ O $number$ O O O O $void$ O O O O O O O $NgGridItemSize$ O $number$ O O O $NgGrid$ O $number$ O O O $NgGridItemSize$ O $number$ O O O $NgGrid$ O $number$ O O O O O $NgGridItemSize$ O $number$ O O O $NgGrid$ O $number$ O O O $NgGridItemSize$ O $number$ O O O $NgGrid$ O $number$ O O $number$ O O O O $NgGrid$ O $number$ O O O $NgGridItemSize$ O $number$ O O O O O O $NgGrid$ O $number$ O O O $NgGrid$ O $number$ O O O O O $NgGridItemSize$ O $number$ O O O O O O $number$ O O O O $NgGrid$ O $number$ O O O $NgGridItemSize$ O $number$ O O O O O O $NgGrid$ O $number$ O O O $NgGrid$ O $number$ O O O O O $NgGridItemSize$ O $number$ O O O O O O $number$ O $Math$ O $number$ O O O $number$ O O O $NgGrid$ O $number$ O $number$ O O O $number$ O $Math$ O $number$ O O O $number$ O O O $NgGrid$ O $number$ O $number$ O O O O $void$ O $number$ O $number$ O O O O $NgGridRawPosition$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O $NgGridRawPosition$ O O O $any$ O $any$ O $any$ O O O O O $number$ O $any$ O $any$ O $NgGridRawPosition$ O $number$ O $number$ O $any$ O $any$ O $NgGridRawPosition$ O $number$ O O O O $boolean$ O $any$ O O O $boolean$ O O O O $void$ O O $any$ O O O O O O O $NgGridItemConfig$ O $any$ O $any$ O O $any$ O $any$ O O O O $NgGridItemConfig$ O $any$ O $any$ O O $any$ O $any$ O $boolean$ O O O O O O $any$ O $any$ O $void$ O O $any$ O $any$ O $void$ O O $any$ O $any$ O O $any$ O O O $boolean$ O O O O O O $NgGridItemConfig$ O $any$ O $any$ O O O O O O O $false$ O O O O $void$ O O O $NgGridItemConfig$ O O O O $false$ O O O $void$ O O O O O O O $any$ O O O O O O O $NgGridItemConfig$ O $number$ O O O $any$ O $any$ O O O $NgGridItemSize$ O $number$ O O O $NgGridItemConfig$ O $number$ O O O $any$ O $any$ O O O $NgGridItemSize$ O $number$ O O O $NgGridItemConfig$ O $number$ O O O $any$ O $any$ O O O $NgGridItemPosition$ O $number$ O O O $NgGridItemConfig$ O $number$ O O O $any$ O $any$ O O O $NgGridItemPosition$ O $number$ O O O $any$ O $any$ O O O $any$ O O O O $boolean$ O $string$ O $NgGridRawPosition$ O O O O $string$ O O O O O O $NgGridRawPosition$ O $number$ O O O $number$ O $NgGridRawPosition$ O $number$ O O O $number$ O O O $number$ O $NgGridRawPosition$ O $number$ O O O $number$ O $NgGridRawPosition$ O $number$ O O O $number$ O O O $number$ O O O O O $NgGridRawPosition$ O $number$ O O O $number$ O $NgGridRawPosition$ O $number$ O O O $number$ O $NgGridRawPosition$ O $number$ O O O $number$ O O O $number$ O O O O O $NgGridRawPosition$ O $number$ O O O $number$ O $NgGridRawPosition$ O $number$ O O O $number$ O O O $number$ O $NgGridRawPosition$ O $number$ O O O $number$ O O O O O $NgGridRawPosition$ O $number$ O O O $number$ O $NgGridRawPosition$ O $number$ O O O $number$ O O O O O $NgGridRawPosition$ O $number$ O O O $number$ O $NgGridRawPosition$ O $number$ O O O $number$ O O O $number$ O O O O O $NgGridRawPosition$ O $number$ O O O $number$ O O O O O $NgGridRawPosition$ O $number$ O O O $number$ O $NgGridRawPosition$ O $number$ O O O $number$ O O O $number$ O O O O O $NgGridRawPosition$ O $number$ O O O $number$ O O O O O O O O O
import { NgGridItem } from "s" ; export function generateUuid ( ) { return 's' . replace ( "s" , function ( c ) { let r = Math . random ( ) * 0 | 0 , v = c == 's' ? r : ( r & 0 | 0 ) ; return v . toString ( 0 ) ; } ) ; } export function sortItemsByPositionHorizontal ( a , b ) { if ( a . col === b . col ) { return a . row - b . row ; } return a . col - b . col ; } export function sortItemsByPositionVertical ( a , b ) { if ( a . row === b . row ) { return a . col - b . col ; } return a . row - b . row ; }	O O $any$ O O O O O O $string$ O O O O O O $complex$ O O O O O $string$ O O O $number$ O $Math$ O $number$ O O O O O O O $number$ O $string$ O O O $number$ O O $number$ O O O O O O O $number$ O $string$ O O O O O O O O O O $number$ O $NgGridItem$ O $NgGridItem$ O O O O $NgGridItem$ O $number$ O $NgGridItem$ O $number$ O O O $NgGridItem$ O $number$ O $NgGridItem$ O $number$ O O O $NgGridItem$ O $number$ O $NgGridItem$ O $number$ O O O O $number$ O $NgGridItem$ O $NgGridItem$ O O O O $NgGridItem$ O $number$ O $NgGridItem$ O $number$ O O O $NgGridItem$ O $number$ O $NgGridItem$ O $number$ O O O $NgGridItem$ O $number$ O $NgGridItem$ O $number$ O O
import { Component , Directive , ElementRef , Renderer , EventEmitter , ComponentFactoryResolver , Host , ViewEncapsulation , Type , ComponentRef , KeyValueDiffer , KeyValueDiffers , OnInit , OnDestroy , DoCheck , ViewContainerRef , Output } from 's' ; import { NgGridConfig , NgGridItemEvent , NgGridItemPosition , NgGridItemSize , NgGridRawPosition , NgGridItemDimensions , NgConfigFixDirection } from 's' ; import { NgGridItem } from 's' ; import * as NgGridHelper from 's' ; import { NgGridPlaceholder } from 's' ; import { Subscription , Observable , fromEvent } from 's' ; @ Directive ( { selector : 's' , inputs : [ 's' ] , host : { 's' : 's' , } } ) export class NgGrid implements OnInit , DoCheck , OnDestroy { public static CONST_DEFAULT_RESIZE_DIRECTIONS : string [ ] = [ 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , ] ; @ Output ( ) public onDragStart : EventEmitter < NgGridItem > = new EventEmitter < NgGridItem > ( ) ; @ Output ( ) public onDrag : EventEmitter < NgGridItem > = new EventEmitter < NgGridItem > ( ) ; @ Output ( ) public onDragStop : EventEmitter < NgGridItem > = new EventEmitter < NgGridItem > ( ) ; @ Output ( ) public onResizeStart : EventEmitter < NgGridItem > = new EventEmitter < NgGridItem > ( ) ; @ Output ( ) public onResize : EventEmitter < NgGridItem > = new EventEmitter < NgGridItem > ( ) ; @ Output ( ) public onResizeStop : EventEmitter < NgGridItem > = new EventEmitter < NgGridItem > ( ) ; @ Output ( ) public onItemChange : EventEmitter < Array < NgGridItemEvent > > = new EventEmitter < Array < NgGridItemEvent > > ( ) ; public colWidth : number = 0 ; public rowHeight : number = 0 ; public minCols : number = 0 ; public minRows : number = 0 ; public marginTop : number = 0 ; public marginRight : number = 0 ; public marginBottom : number = 0 ; public marginLeft : number = 0 ; public screenMargin : number = 0 ; public isDragging : boolean = false ; public isResizing : boolean = false ; public autoStyle : boolean = true ; public resizeEnable : boolean = true ; public dragEnable : boolean = true ; public cascade : string = 's' ; public minWidth : number = 0 ; public minHeight : number = 0 ; public resizeDirections : string [ ] = NgGrid . CONST_DEFAULT_RESIZE_DIRECTIONS ; private _items : Map < string , NgGridItem > = new Map < string , NgGridItem > ( ) ; private _draggingItem : NgGridItem = null ; private _resizingItem : NgGridItem = null ; private _resizeDirection : string = null ; private _itemsInGrid : Set < string > = new Set < string > ( ) ; private _containerWidth : number ; private _containerHeight : number ; private _maxCols : number = 0 ; private _maxRows : number = 0 ; private _visibleCols : number = 0 ; private _visibleRows : number = 0 ; private _setWidth : number = 0 ; private _setHeight : number = 0 ; private _posOffset : NgGridRawPosition = null ; private _adding : boolean = false ; private _placeholderRef : ComponentRef < NgGridPlaceholder > = null ; private _fixToGrid : boolean = false ; private _autoResize : boolean = false ; private _differ : KeyValueDiffer < string , any > ; private _destroyed : boolean = false ; private _maintainRatio : boolean = false ; private _aspectRatio : number ; private _preferNew : boolean = false ; private _zoomOnDrag : boolean = false ; private _limitToScreen : boolean = false ; private _centerToScreen : boolean = false ; private _curMaxRow : number = 0 ; private _curMaxCol : number = 0 ; private _dragReady : boolean = false ; private _resizeReady : boolean = false ; private _elementBasedDynamicRowHeight : boolean = false ; private _itemFixDirection : NgConfigFixDirection = 's' ; private _collisionFixDirection : NgConfigFixDirection = 's' ; private _allowOverlap : boolean = false ; private _cascadePromise : Promise < void > ; private _lastZValue : number = 0 ; private _documentMousemove$ : Observable < MouseEvent > ; private _documentMouseup$ : Observable < MouseEvent > ; private _mousedown$ : Observable < MouseEvent > ; private _mousemove$ : Observable < MouseEvent > ; private _mouseup$ : Observable < MouseEvent > ; private _touchstart$ : Observable < TouchEvent > ; private _touchmove$ : Observable < TouchEvent > ; private _touchend$ : Observable < TouchEvent > ; private _subscriptions : Subscription [ ] = [ ] ; private _enabledListener : boolean = false ; private static CONST_DEFAULT_CONFIG : NgGridConfig = { margins : [ 0 ] , draggable : true , resizable : true , max_cols : 0 , max_rows : 0 , visible_cols : 0 , visible_rows : 0 , col_width : 0 , row_height : 0 , cascade : 's' , min_width : 0 , min_height : 0 , fix_to_grid : false , auto_style : true , auto_resize : false , maintain_ratio : false , prefer_new : false , zoom_on_drag : false , limit_to_screen : false , center_to_screen : false , resize_directions : NgGrid . CONST_DEFAULT_RESIZE_DIRECTIONS , element_based_row_height : false , fix_item_position_direction : 's' , fix_collision_position_direction : 's' , allow_overlap : false , } ; private _config = NgGrid . CONST_DEFAULT_CONFIG ; set config ( v ) { if ( v == null || typeof v !== 's' ) { return ; } this . setConfig ( v ) ; if ( this . _differ == null && v != null ) { this . _differ = this . _differs . find ( this . _config ) . create ( ) ; } this . _differ . diff ( this . _config ) ; } constructor ( private _differs , private _ngEl , private _renderer , private componentFactoryResolver , ) { this . _defineListeners ( ) ; } public ngOnInit ( ) { this . _renderer . setElementClass ( this . _ngEl . nativeElement , 's' , true ) ; if ( this . autoStyle ) this . _renderer . setElementStyle ( this . _ngEl . nativeElement , 's' , 's' ) ; this . setConfig ( this . _config ) ; } public ngOnDestroy ( ) { this . _destroyed = true ; this . _disableListeners ( ) ; } public generateItemUid ( ) { const uid = NgGridHelper . generateUuid ( ) ; if ( this . _items . has ( uid ) ) { return this . generateItemUid ( ) ; } return uid ; } public setConfig ( config ) { this . _config = config ; var maxColRowChanged = false ; for ( var x in config ) { var val = config [ x ] ; var intVal = ! val ? 0 : parseInt ( val ) ; switch ( x ) { case 's' : this . setMargins ( val ) ; break ; case 's' : this . colWidth = Math . max ( intVal , 0 ) ; break ; case 's' : this . rowHeight = Math . max ( intVal , 0 ) ; break ; case 's' : this . autoStyle = val ? true : false ; break ; case 's' : this . _autoResize = val ? true : false ; break ; case 's' : this . dragEnable = val ? true : false ; break ; case 's' : this . resizeEnable = val ? true : false ; break ; case 's' : maxColRowChanged = maxColRowChanged || this . _maxRows != intVal ; this . _maxRows = intVal < 0 ? 0 : intVal ; break ; case 's' : maxColRowChanged = maxColRowChanged || this . _maxCols != intVal ; this . _maxCols = intVal < 0 ? 0 : intVal ; break ; case 's' : this . _visibleRows = Math . max ( intVal , 0 ) ; break ; case 's' : this . _visibleCols = Math . max ( intVal , 0 ) ; break ; case 's' : this . minRows = Math . max ( intVal , 0 ) ; break ; case 's' : this . minCols = Math . max ( intVal , 0 ) ; break ; case 's' : this . minHeight = Math . max ( intVal , 0 ) ; break ; case 's' : this . minWidth = Math . max ( intVal , 0 ) ; break ; case 's' : this . _zoomOnDrag = val ? true : false ; break ; case 's' : if ( this . cascade != val ) { this . cascade = val ; this . _cascadeGrid ( ) ; } break ; case 's' : this . _fixToGrid = val ? true : false ; break ; case 's' : this . _maintainRatio = val ? true : false ; break ; case 's' : this . _preferNew = val ? true : false ; break ; case 's' : this . _limitToScreen = ! this . _autoResize && ! ! val ; break ; case 's' : this . _centerToScreen = val ? true : false ; break ; case 's' : this . resizeDirections = val || [ 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' ] ; break ; case 's' : this . _elementBasedDynamicRowHeight = ! ! val ; break ; case 's' : this . _itemFixDirection = val ; break ; case 's' : this . _collisionFixDirection = val ; break ; case 's' : this . _allowOverlap = ! ! val ; break ; } } if ( this . _allowOverlap && this . cascade !== 's' && this . cascade !== 's' ) { console . warn ( 's' ) ; this . _allowOverlap = false ; } if ( this . dragEnable || this . resizeEnable ) { this . _enableListeners ( ) ; } else { this . _disableListeners ( ) ; } if ( this . _itemFixDirection === 's' ) { this . _itemFixDirection = this . _getFixDirectionFromCascade ( ) ; } if ( this . _collisionFixDirection === 's' ) { this . _collisionFixDirection = this . _getFixDirectionFromCascade ( ) ; } if ( this . _limitToScreen ) { const newMaxCols = this . _getContainerColumns ( ) ; if ( this . _maxCols != newMaxCols ) { this . _maxCols = newMaxCols ; maxColRowChanged = true ; } } if ( this . _limitToScreen && this . _centerToScreen ) { this . screenMargin = this . _getScreenMargin ( ) ; } else { this . screenMargin = 0 ; } if ( this . _maintainRatio ) { if ( this . colWidth && this . rowHeight ) { this . _aspectRatio = this . colWidth / this . rowHeight ; } else { this . _maintainRatio = false ; } } if ( maxColRowChanged ) { if ( this . _maxCols > 0 && this . _maxRows > 0 ) { switch ( this . cascade ) { case 's' : case 's' : this . _maxCols = 0 ; break ; case 's' : case 's' : default : this . _maxRows = 0 ; break ; } } this . _updatePositionsAfterMaxChange ( ) ; } this . _calculateColWidth ( ) ; this . _calculateRowHeight ( ) ; var maxWidth = this . _maxCols * this . colWidth ; var maxHeight = this . _maxRows * this . rowHeight ; if ( maxWidth > 0 && this . minWidth > maxWidth ) this . minWidth = 0 * this . colWidth ; if ( maxHeight > 0 && this . minHeight > maxHeight ) this . minHeight = 0 * this . rowHeight ; if ( this . minWidth > this . colWidth ) this . minCols = Math . max ( this . minCols , Math . ceil ( this . minWidth / this . colWidth ) ) ; if ( this . minHeight > this . rowHeight ) this . minRows = Math . max ( this . minRows , Math . ceil ( this . minHeight / this . rowHeight ) ) ; if ( this . _maxCols > 0 && this . minCols > this . _maxCols ) this . minCols = 0 ; if ( this . _maxRows > 0 && this . minRows > this . _maxRows ) this . minRows = 0 ; this . _updateRatio ( ) ; this . _items . forEach ( ( item ) => { this . _removeFromGrid ( item ) ; item . setCascadeMode ( this . cascade ) ; } ) ; this . _items . forEach ( ( item ) => { item . recalculateSelf ( ) ; this . _addToGrid ( item ) ; } ) ; this . _cascadeGrid ( ) ; this . _updateSize ( ) ; } public getItemPosition ( itemId ) { return this . _items . has ( itemId ) ? this . _items . get ( itemId ) . getGridPosition ( ) : null ; } public getItemSize ( itemId ) { return this . _items . has ( itemId ) ? this . _items . get ( itemId ) . getSize ( ) : null ; } public ngDoCheck ( ) { if ( this . _differ != null ) { var changes = this . _differ . diff ( this . _config ) ; if ( changes != null ) { this . _applyChanges ( changes ) ; return true ; } } return false ; } public setMargins ( margins < string > ) { this . marginTop = Math . max ( parseInt ( margins [ 0 ] ) , 0 ) ; this . marginRight = margins . length >= 0 ? Math . max ( parseInt ( margins [ 0 ] ) , 0 ) : this . marginTop ; this . marginBottom = margins . length >= 0 ? Math . max ( parseInt ( margins [ 0 ] ) , 0 ) : this . marginTop ; this . marginLeft = margins . length >= 0 ? Math . max ( parseInt ( margins [ 0 ] ) , 0 ) : this . marginRight ; } public enableDrag ( ) { this . dragEnable = true ; } public disableDrag ( ) { this . dragEnable = false ; } public enableResize ( ) { this . resizeEnable = true ; } public disableResize ( ) { this . resizeEnable = false ; } public addItem ( ngItem ) { ngItem . setCascadeMode ( this . cascade ) ; if ( ! this . _preferNew ) { var newPos = this . _fixGridPosition ( ngItem . getGridPosition ( ) , ngItem . getSize ( ) ) ; ngItem . setGridPosition ( newPos ) ; } if ( ngItem . uid === null || this . _items . has ( ngItem . uid ) ) { ngItem . uid = this . generateItemUid ( ) ; } this . _items . set ( ngItem . uid , ngItem ) ; this . _addToGrid ( ngItem ) ; this . _updateSize ( ) ; this . triggerCascade ( ) . then ( ( ) => { ngItem . recalculateSelf ( ) ; ngItem . onCascadeEvent ( ) ; this . _emitOnItemChange ( ) ; } ) ; } public removeItem ( ngItem ) { this . _removeFromGrid ( ngItem ) ; this . _items . delete ( ngItem . uid ) ; if ( this . _destroyed ) return ; this . triggerCascade ( ) . then ( ( ) => { this . _updateSize ( ) ; this . _items . forEach ( ( item ) => item . recalculateSelf ( ) ) ; this . _emitOnItemChange ( ) ; } ) ; } public updateItem ( ngItem ) { this . _removeFromGrid ( ngItem ) ; this . _addToGrid ( ngItem ) ; this . triggerCascade ( ) . then ( ( ) => { this . _updateSize ( ) ; ngItem . onCascadeEvent ( ) ; } ) ; } public triggerCascade ( ) < void > { if ( ! this . _cascadePromise ) { this . _cascadePromise = new Promise < void > ( ( resolve : ( ) => void ) => { setTimeout ( ( ) => { this . _cascadePromise = null ; this . _cascadeGrid ( null , null ) ; resolve ( ) ; } , 0 ) ; } ) ; } return this . _cascadePromise ; } public triggerResize ( ) { this . resizeEventHandler ( null ) ; } public resizeEventHandler ( e ) { this . _calculateColWidth ( ) ; this . _calculateRowHeight ( ) ; this . _updateRatio ( ) ; if ( this . _limitToScreen ) { const newMaxColumns = this . _getContainerColumns ( ) ; if ( this . _maxCols !== newMaxColumns ) { this . _maxCols = newMaxColumns ; this . _updatePositionsAfterMaxChange ( ) ; this . _cascadeGrid ( ) ; } if ( this . _centerToScreen ) { this . screenMargin = this . _getScreenMargin ( ) ; this . _items . forEach ( ( item ) => { item . recalculateSelf ( ) ; } ) ; } } else if ( this . _autoResize ) { this . _items . forEach ( ( item ) => { item . recalculateSelf ( ) ; } ) ; } this . _updateSize ( ) ; } public mouseDownEventHandler ( e : MouseEvent | TouchEvent ) { var mousePos = this . _getMousePosition ( e ) ; var item = this . _getItemFromPosition ( mousePos ) ; if ( item == null ) return ; const resizeDirection = item . canResize ( e ) ; if ( this . resizeEnable && resizeDirection ) { this . _resizeReady = true ; this . _resizingItem = item ; this . _resizeDirection = resizeDirection ; e . preventDefault ( ) ; } else if ( this . dragEnable && item . canDrag ( e ) ) { this . _dragReady = true ; this . _draggingItem = item ; const itemPos = item . getPosition ( ) ; this . _posOffset = { 's' : ( mousePos . left - itemPos . left ) , 's' : ( mousePos . top - itemPos . top ) } e . preventDefault ( ) ; } } public mouseUpEventHandler ( e : MouseEvent | TouchEvent ) { if ( this . isDragging ) { this . _dragStop ( e ) ; } else if ( this . isResizing ) { this . _resizeStop ( e ) ; } else if ( this . _dragReady || this . _resizeReady ) { this . _cleanDrag ( ) ; this . _cleanResize ( ) ; } } public mouseMoveEventHandler ( e : MouseEvent | TouchEvent ) { if ( this . _resizeReady ) { this . _resizeStart ( e ) ; e . preventDefault ( ) ; return ; } else if ( this . _dragReady ) { this . _dragStart ( e ) ; e . preventDefault ( ) ; return ; } if ( this . isDragging ) { this . _drag ( e ) ; } else if ( this . isResizing ) { this . _resize ( e ) ; } else { var mousePos = this . _getMousePosition ( e ) ; var item = this . _getItemFromPosition ( mousePos ) ; if ( item ) { item . onMouseMove ( e ) ; } } } private _getFixDirectionFromCascade ( ) { switch ( this . cascade ) { case 's' : case 's' : default : return 's' ; case 's' : case 's' : return 's' ; } } private _updatePositionsAfterMaxChange ( ) { this . _items . forEach ( ( item ) => { var pos = item . getGridPosition ( ) ; var dims = item . getSize ( ) ; if ( ! this . _hasGridCollision ( pos , dims ) && this . _isWithinBounds ( pos , dims ) && dims . x <= this . _maxCols && dims . y <= this . _maxRows ) { return ; } this . _removeFromGrid ( item ) ; if ( this . _maxCols > 0 && dims . x > this . _maxCols ) { dims . x = this . _maxCols ; item . setSize ( dims ) ; } else if ( this . _maxRows > 0 && dims . y > this . _maxRows ) { dims . y = this . _maxRows ; item . setSize ( dims ) ; } if ( this . _hasGridCollision ( pos , dims ) || ! this . _isWithinBounds ( pos , dims , true ) ) { var newPosition = this . _fixGridPosition ( pos , dims ) ; item . setGridPosition ( newPosition ) ; } this . _addToGrid ( item ) ; } ) ; } private _calculateColWidth ( ) { if ( this . _autoResize ) { if ( this . _maxCols > 0 || this . _visibleCols > 0 ) { var maxCols = this . _maxCols > 0 ? this . _maxCols : this . _visibleCols ; var maxWidth = this . _ngEl . nativeElement . getBoundingClientRect ( ) . width ; var colWidth = Math . floor ( maxWidth / maxCols ) ; colWidth -= ( this . marginLeft + this . marginRight ) ; if ( colWidth > 0 ) this . colWidth = colWidth ; } } if ( this . colWidth < this . minWidth || this . minCols > this . _config . min_cols ) { this . minCols = Math . max ( this . _config . min_cols , Math . ceil ( this . minWidth / this . colWidth ) ) ; } } private _calculateRowHeight ( ) { if ( this . _autoResize ) { if ( this . _maxRows > 0 || this . _visibleRows > 0 ) { var maxRows = this . _maxRows > 0 ? this . _maxRows : this . _visibleRows ; let maxHeight ; if ( this . _elementBasedDynamicRowHeight ) { maxHeight = this . _ngEl . nativeElement . getBoundingClientRect ( ) . height ; } else { maxHeight = window . innerHeight - this . marginTop - this . marginBottom ; } var rowHeight = Math . max ( Math . floor ( maxHeight / maxRows ) , this . minHeight ) ; rowHeight -= ( this . marginTop + this . marginBottom ) ; if ( rowHeight > 0 ) this . rowHeight = rowHeight ; } } if ( this . rowHeight < this . minHeight || this . minRows > this . _config . min_rows ) { this . minRows = Math . max ( this . _config . min_rows , Math . ceil ( this . minHeight / this . rowHeight ) ) ; } } private _updateRatio ( ) { if ( ! this . _autoResize || ! this . _maintainRatio ) return ; if ( this . _maxCols > 0 && this . _visibleRows <= 0 ) { this . rowHeight = this . colWidth / this . _aspectRatio ; } else if ( this . _maxRows > 0 && this . _visibleCols <= 0 ) { this . colWidth = this . _aspectRatio * this . rowHeight ; } else if ( this . _maxCols == 0 && this . _maxRows == 0 ) { if ( this . _visibleCols > 0 ) { this . rowHeight = this . colWidth / this . _aspectRatio ; } else if ( this . _visibleRows > 0 ) { this . colWidth = this . _aspectRatio * this . rowHeight ; } } } private _applyChanges ( changes ) { changes . forEachAddedItem ( ( record ) => { this . _config [ record . key ] = record . currentValue ; } ) ; changes . forEachChangedItem ( ( record ) => { this . _config [ record . key ] = record . currentValue ; } ) ; changes . forEachRemovedItem ( ( record ) => { delete this . _config [ record . key ] ; } ) ; this . setConfig ( this . _config ) ; } private _resizeStart ( e ) { if ( ! this . resizeEnable || ! this . _resizingItem ) return ; this . _resizingItem . startMoving ( ) ; this . _removeFromGrid ( this . _resizingItem ) ; this . _createPlaceholder ( this . _resizingItem ) ; if ( this . _allowOverlap ) { this . _resizingItem . zIndex = this . _lastZValue ++ ; } this . isResizing = true ; this . _resizeReady = false ; this . onResizeStart . emit ( this . _resizingItem ) ; this . _resizingItem . onResizeStartEvent ( ) ; } private _dragStart ( e ) { if ( ! this . dragEnable || ! this . _draggingItem ) return ; this . _draggingItem . startMoving ( ) ; this . _removeFromGrid ( this . _draggingItem ) ; this . _createPlaceholder ( this . _draggingItem ) ; if ( this . _allowOverlap ) { this . _draggingItem . zIndex = this . _lastZValue ++ ; } this . isDragging = true ; this . _dragReady = false ; this . onDragStart . emit ( this . _draggingItem ) ; this . _draggingItem . onDragStartEvent ( ) ; if ( this . _zoomOnDrag ) { this . _zoomOut ( ) ; } } private _zoomOut ( ) { this . _renderer . setElementStyle ( this . _ngEl . nativeElement , 's' , 's' ) ; } private _resetZoom ( ) { this . _renderer . setElementStyle ( this . _ngEl . nativeElement , 's' , 's' ) ; } private _drag ( e ) { if ( ! this . isDragging ) return ; if ( window . getSelection ) { if ( window . getSelection ( ) . empty ) { window . getSelection ( ) . empty ( ) ; } else if ( window . getSelection ( ) . removeAllRanges ) { window . getSelection ( ) . removeAllRanges ( ) ; } } else if ( ( < any > document ) . selection ) { ( < any > document ) . selection . empty ( ) ; } var mousePos = this . _getMousePosition ( e ) ; var newL = ( mousePos . left - this . _posOffset . left ) ; var newT = ( mousePos . top - this . _posOffset . top ) ; var itemPos = this . _draggingItem . getGridPosition ( ) ; var gridPos = this . _calculateGridPosition ( newL , newT ) ; var dims = this . _draggingItem . getSize ( ) ; gridPos = this . _fixPosToBoundsX ( gridPos , dims ) ; if ( ! this . _isWithinBoundsY ( gridPos , dims ) ) { gridPos = this . _fixPosToBoundsY ( gridPos , dims ) ; } if ( gridPos . col != itemPos . col || gridPos . row != itemPos . row ) { this . _draggingItem . setGridPosition ( gridPos , this . _fixToGrid ) ; this . _placeholderRef . instance . setGridPosition ( gridPos ) ; if ( [ 's' , 's' , 's' , 's' ] . indexOf ( this . cascade ) >= 0 ) { this . _fixGridCollisions ( gridPos , dims ) ; this . _cascadeGrid ( gridPos , dims ) ; } } if ( ! this . _fixToGrid ) { this . _draggingItem . setPosition ( newL , newT ) ; } this . onDrag . emit ( this . _draggingItem ) ; this . _draggingItem . onDragEvent ( ) ; } private _resize ( e ) { if ( ! this . isResizing ) { return ; } if ( window . getSelection ) { if ( window . getSelection ( ) . empty ) { window . getSelection ( ) . empty ( ) ; } else if ( window . getSelection ( ) . removeAllRanges ) { window . getSelection ( ) . removeAllRanges ( ) ; } } else if ( ( < any > document ) . selection ) { ( < any > document ) . selection . empty ( ) ; } const mousePos = this . _getMousePosition ( e ) ; const itemPos = this . _resizingItem . getPosition ( ) ; const itemDims = this . _resizingItem . getDimensions ( ) ; const endCorner = { left : itemPos . left + itemDims . width , top : itemPos . top + itemDims . height , } const resizeTop = this . _resizeDirection . includes ( 's' ) ; const resizeBottom = this . _resizeDirection . includes ( 's' ) ; const resizeLeft = this . _resizeDirection . includes ( 's' ) const resizeRight = this . _resizeDirection . includes ( 's' ) ; let newW = resizeRight ? ( mousePos . left - itemPos . left + 0 ) : resizeLeft ? ( endCorner . left - mousePos . left + 0 ) : itemDims . width ; let newH = resizeBottom ? ( mousePos . top - itemPos . top + 0 ) : resizeTop ? ( endCorner . top - mousePos . top + 0 ) : itemDims . height ; if ( newW < this . minWidth ) newW = this . minWidth ; if ( newH < this . minHeight ) newH = this . minHeight ; if ( newW < this . _resizingItem . minWidth ) newW = this . _resizingItem . minWidth ; if ( newH < this . _resizingItem . minHeight ) newH = this . _resizingItem . minHeight ; let newX = itemPos . left ; let newY = itemPos . top ; if ( resizeLeft ) newX = endCorner . left - newW ; if ( resizeTop ) newY = endCorner . top - newH ; let calcSize = this . _calculateGridSize ( newW , newH ) ; const itemSize = this . _resizingItem . getSize ( ) ; const iGridPos = this . _resizingItem . getGridPosition ( ) ; const bottomRightCorner = { col : iGridPos . col + itemSize . x , row : iGridPos . row + itemSize . y , } ; const targetPos = Object . assign ( { } , iGridPos ) ; if ( this . _resizeDirection . includes ( 's' ) ) targetPos . row = bottomRightCorner . row - calcSize . y ; if ( this . _resizeDirection . includes ( 's' ) ) targetPos . col = bottomRightCorner . col - calcSize . x ; if ( ! this . _isWithinBoundsX ( targetPos , calcSize ) ) calcSize = this . _fixSizeToBoundsX ( targetPos , calcSize ) ; if ( ! this . _isWithinBoundsY ( targetPos , calcSize ) ) calcSize = this . _fixSizeToBoundsY ( targetPos , calcSize ) ; calcSize = this . _resizingItem . fixResize ( calcSize ) ; if ( calcSize . x != itemSize . x || calcSize . y != itemSize . y ) { this . _resizingItem . setGridPosition ( targetPos , this . _fixToGrid ) ; this . _placeholderRef . instance . setGridPosition ( targetPos ) ; this . _resizingItem . setSize ( calcSize , this . _fixToGrid ) ; this . _placeholderRef . instance . setSize ( calcSize ) ; if ( [ 's' , 's' , 's' , 's' ] . indexOf ( this . cascade ) >= 0 ) { this . _fixGridCollisions ( targetPos , calcSize ) ; this . _cascadeGrid ( targetPos , calcSize ) ; } } if ( ! this . _fixToGrid ) { this . _resizingItem . setDimensions ( newW , newH ) ; this . _resizingItem . setPosition ( newX , newY ) ; } this . onResize . emit ( this . _resizingItem ) ; this . _resizingItem . onResizeEvent ( ) ; } private _dragStop ( e ) { if ( ! this . isDragging ) return ; this . isDragging = false ; var itemPos = this . _draggingItem . getGridPosition ( ) ; this . _draggingItem . setGridPosition ( itemPos ) ; this . _addToGrid ( this . _draggingItem ) ; this . _cascadeGrid ( ) ; this . _updateSize ( ) ; this . _draggingItem . stopMoving ( ) ; this . _draggingItem . onDragStopEvent ( ) ; this . onDragStop . emit ( this . _draggingItem ) ; this . _cleanDrag ( ) ; this . _placeholderRef . destroy ( ) ; this . _emitOnItemChange ( ) ; if ( this . _zoomOnDrag ) { this . _resetZoom ( ) ; } } private _resizeStop ( e ) { if ( ! this . isResizing ) return ; this . isResizing = false ; const itemDims = this . _resizingItem . getSize ( ) ; this . _resizingItem . setSize ( itemDims ) ; const itemPos = this . _resizingItem . getGridPosition ( ) ; this . _resizingItem . setGridPosition ( itemPos ) ; this . _addToGrid ( this . _resizingItem ) ; this . _cascadeGrid ( ) ; this . _updateSize ( ) ; this . _resizingItem . stopMoving ( ) ; this . _resizingItem . onResizeStopEvent ( ) ; this . onResizeStop . emit ( this . _resizingItem ) ; this . _cleanResize ( ) ; this . _placeholderRef . destroy ( ) ; this . _emitOnItemChange ( ) ; } private _cleanDrag ( ) { this . _draggingItem = null ; this . _posOffset = null ; this . isDragging = false ; this . _dragReady = false ; } private _cleanResize ( ) { this . _resizingItem = null ; this . _resizeDirection = null ; this . isResizing = false ; this . _resizeReady = false ; } private _calculateGridSize ( width , height ) { width += this . marginLeft + this . marginRight ; height += this . marginTop + this . marginBottom ; var sizex = Math . max ( this . minCols , Math . round ( width / ( this . colWidth + this . marginLeft + this . marginRight ) ) ) ; var sizey = Math . max ( this . minRows , Math . round ( height / ( this . rowHeight + this . marginTop + this . marginBottom ) ) ) ; if ( ! this . _isWithinBoundsX ( { col : 0 , row : 0 } , { x : sizex , y : sizey } ) ) sizex = this . _maxCols ; if ( ! this . _isWithinBoundsY ( { col : 0 , row : 0 } , { x : sizex , y : sizey } ) ) sizey = this . _maxRows ; return { 's' : sizex , 's' : sizey } ; } private _calculateGridPosition ( left , top ) { var col = Math . max ( 0 , Math . round ( left / ( this . colWidth + this . marginLeft + this . marginRight ) ) + 0 ) ; var row = Math . max ( 0 , Math . round ( top / ( this . rowHeight + this . marginTop + this . marginBottom ) ) + 0 ) ; if ( ! this . _isWithinBoundsX ( { col : col , row : row } , { x : 0 , y : 0 } ) ) col = this . _maxCols ; if ( ! this . _isWithinBoundsY ( { col : col , row : row } , { x : 0 , y : 0 } ) ) row = this . _maxRows ; return { 's' : col , 's' : row } ; } private _hasGridCollision ( pos , dims ) { var positions = this . _getCollisions ( pos , dims ) ; if ( positions == null || positions . length == 0 ) return false ; return positions . some ( ( v ) => { return ! ( v === null ) ; } ) ; } private _getCollisions ( pos , dims ) < NgGridItem > { if ( this . _allowOverlap ) return [ ] ; const returns < NgGridItem > = [ ] ; if ( ! pos . col ) { pos . col = 0 ; } if ( ! pos . row ) { pos . row = 0 ; } const leftCol = pos . col ; const rightCol = pos . col + dims . x ; const topRow = pos . row ; const bottomRow = pos . row + dims . y ; this . _itemsInGrid . forEach ( ( itemId ) => { const item = this . _items . get ( itemId ) ; if ( ! item ) { this . _itemsInGrid . delete ( itemId ) ; return ; } const itemLeftCol = item . col ; const itemRightCol = item . col + item . sizex ; const itemTopRow = item . row ; const itemBottomRow = item . row + item . sizey ; const withinColumns = leftCol < itemRightCol && itemLeftCol < rightCol ; const withinRows = topRow < itemBottomRow && itemTopRow < bottomRow ; if ( withinColumns && withinRows ) { returns . push ( item ) ; } } ) ; return returns ; } private _fixGridCollisions ( pos , dims ) { const collisions < NgGridItem > = this . _getCollisions ( pos , dims ) ; if ( collisions . length === 0 ) { return ; } for ( let collision of collisions ) { this . _removeFromGrid ( collision ) ; const itemDims = collision . getSize ( ) ; const itemPos = collision . getGridPosition ( ) ; let newItemPos = { col : itemPos . col , row : itemPos . row } ; if ( this . _collisionFixDirection === 's' ) { newItemPos . row = pos . row + dims . y ; if ( ! this . _isWithinBoundsY ( newItemPos , itemDims ) ) { newItemPos . col = pos . col + dims . x ; newItemPos . row = 0 ; } } else if ( this . _collisionFixDirection === 's' ) { newItemPos . col = pos . col + dims . x ; if ( ! this . _isWithinBoundsX ( newItemPos , itemDims ) ) { newItemPos . col = 0 ; newItemPos . row = pos . row + dims . y ; } } collision . setGridPosition ( newItemPos ) ; this . _fixGridCollisions ( newItemPos , itemDims ) ; this . _addToGrid ( collision ) ; collision . onCascadeEvent ( ) ; } this . _fixGridCollisions ( pos , dims ) ; } private _cascadeGrid ( pos ? , dims ? ) { if ( this . _destroyed ) return ; if ( this . _allowOverlap ) return ; if ( ! pos !== ! dims ) throw new Error ( 's' ) ; if ( this . isDragging && this . _draggingItem && ! pos && ! dims ) { pos = this . _draggingItem . getGridPosition ( ) ; dims = this . _draggingItem . getSize ( ) ; } else if ( this . isResizing && this . _resizingItem && ! pos && ! dims ) { pos = this . _resizingItem . getGridPosition ( ) ; dims = this . _resizingItem . getSize ( ) ; } let itemsInGrid : NgGridItem [ ] = Array . from ( this . _itemsInGrid , ( itemId ) => this . _items . get ( itemId ) ) ; switch ( this . cascade ) { case 's' : case 's' : itemsInGrid = itemsInGrid . sort ( NgGridHelper . sortItemsByPositionVertical ) ; const lowestRowPerColumn < number , number > = new Map < number , number > ( ) ; for ( let item of itemsInGrid ) { if ( item . isFixed ) continue ; const itemDims = item . getSize ( ) ; const itemPos = item . getGridPosition ( ) ; let lowestRowForItem = lowestRowPerColumn . get ( itemPos . col ) || 0 ; for ( let i = 0 ; i < itemDims . x ; i ++ ) { const lowestRowForColumn = lowestRowPerColumn . get ( itemPos . col + i ) || 0 ; lowestRowForItem = Math . max ( lowestRowForColumn , lowestRowForItem ) ; } const leftCol = itemPos . col ; const rightCol = itemPos . col + itemDims . x ; if ( pos && dims ) { const withinColumns = rightCol > pos . col && leftCol < ( pos . col + dims . x ) ; if ( withinColumns ) { const roomAboveItem = itemDims . y <= ( pos . row - lowestRowForItem ) ; if ( ! roomAboveItem ) { lowestRowForItem = Math . max ( lowestRowForItem , pos . row + dims . y ) ; } } } const newPos = { col : itemPos . col , row : lowestRowForItem } ; if ( lowestRowForItem != itemPos . row && this . _isWithinBoundsY ( newPos , itemDims ) ) { this . _removeFromGrid ( item ) ; item . setGridPosition ( newPos ) ; item . onCascadeEvent ( ) ; this . _addToGrid ( item ) ; } for ( let i = 0 ; i < itemDims . x ; i ++ ) { lowestRowPerColumn . set ( itemPos . col + i , lowestRowForItem + itemDims . y ) ; } } break ; case 's' : case 's' : itemsInGrid = itemsInGrid . sort ( NgGridHelper . sortItemsByPositionHorizontal ) ; const lowestColumnPerRow < number , number > = new Map < number , number > ( ) ; for ( let item of itemsInGrid ) { const itemDims = item . getSize ( ) ; const itemPos = item . getGridPosition ( ) ; let lowestColumnForItem = lowestColumnPerRow . get ( itemPos . row ) || 0 ; for ( let i = 0 ; i < itemDims . y ; i ++ ) { let lowestOffsetColumn = lowestColumnPerRow . get ( itemPos . row + i ) || 0 ; lowestColumnForItem = Math . max ( lowestOffsetColumn , lowestColumnForItem ) ; } const topRow = itemPos . row ; const bottomRow = itemPos . row + itemDims . y ; if ( pos && dims ) { const withinRows = bottomRow > pos . col && topRow < ( pos . col + dims . x ) ; if ( withinRows ) { const roomNextToItem = itemDims . x <= ( pos . col - lowestColumnForItem ) ; if ( ! roomNextToItem ) { lowestColumnForItem = Math . max ( lowestColumnForItem , pos . col + dims . x ) ; } } } const newPos = { col : lowestColumnForItem , row : itemPos . row } ; if ( lowestColumnForItem != itemPos . col && this . _isWithinBoundsX ( newPos , itemDims ) ) { this . _removeFromGrid ( item ) ; item . setGridPosition ( newPos ) ; item . onCascadeEvent ( ) ; this . _addToGrid ( item ) ; } for ( let i = 0 ; i < itemDims . y ; i ++ ) { lowestColumnPerRow . set ( itemPos . row + i , lowestColumnForItem + itemDims . x ) ; } } break ; default : break ; } } private _fixGridPosition ( pos , dims ) { if ( ! this . _hasGridCollision ( pos , dims ) ) return pos ; const maxRow = this . _maxRows === 0 ? this . _getMaxRow ( ) : this . _maxRows ; const maxCol = this . _maxCols === 0 ? this . _getMaxCol ( ) : this . _maxCols ; const newPos = { col : pos . col , row : pos . row , } ; if ( this . _itemFixDirection === 's' ) { fixLoop : for ( ; newPos . col <= maxRow ; ) { const itemsInPath = this . _getItemsInVerticalPath ( newPos , dims , newPos . row ) ; let nextRow = newPos . row ; for ( let item of itemsInPath ) { if ( item . row - nextRow >= dims . y ) { newPos . row = nextRow ; break fixLoop ; } nextRow = item . row + item . sizey ; } if ( maxRow - nextRow >= dims . y ) { newPos . row = nextRow ; break fixLoop ; } newPos . col = Math . max ( newPos . col + 0 , Math . min . apply ( Math , itemsInPath . map ( ( item ) => item . col + dims . x ) ) ) ; newPos . row = 0 ; } } else if ( this . _itemFixDirection === 's' ) { fixLoop : for ( ; newPos . row <= maxRow ; ) { const itemsInPath = this . _getItemsInHorizontalPath ( newPos , dims , newPos . col ) ; let nextCol = newPos . col ; for ( let item of itemsInPath ) { if ( item . col - nextCol >= dims . x ) { newPos . col = nextCol ; break fixLoop ; } nextCol = item . col + item . sizex ; } if ( maxCol - nextCol >= dims . x ) { newPos . col = nextCol ; break fixLoop ; } newPos . row = Math . max ( newPos . row + 0 , Math . min . apply ( Math , itemsInPath . map ( ( item ) => item . row + dims . y ) ) ) ; newPos . col = 0 ; } } return newPos ; } private _getItemsInHorizontalPath ( pos , dims , startColumn = 0 ) : NgGridItem [ ] { const itemsInPath : NgGridItem [ ] = [ ] ; const topRow = pos . row + dims . y - 0 ; this . _itemsInGrid . forEach ( ( itemId ) => { const item = this . _items . get ( itemId ) ; if ( item . col + item . sizex - 0 < startColumn ) { return ; } if ( item . row > topRow ) { return ; } if ( item . row + item . sizey - 0 < pos . row ) { return ; } itemsInPath . push ( item ) ; } ) ; return itemsInPath ; } private _getItemsInVerticalPath ( pos , dims , startRow = 0 ) : NgGridItem [ ] { const itemsInPath : NgGridItem [ ] = [ ] ; const rightCol = pos . col + dims . x - 0 ; this . _itemsInGrid . forEach ( ( itemId ) => { const item = this . _items . get ( itemId ) ; if ( item . row + item . sizey - 0 < startRow ) { return ; } if ( item . col > rightCol ) { return ; } if ( item . col + item . sizex - 0 < pos . col ) { return ; } itemsInPath . push ( item ) ; } ) ; return itemsInPath ; } private _isWithinBoundsX ( pos , dims , allowExcessiveItems = false ) { return this . _maxCols == 0 || ( allowExcessiveItems && pos . col == 0 ) || ( pos . col + dims . x - 0 ) <= this . _maxCols ; } private _fixPosToBoundsX ( pos , dims ) { if ( ! this . _isWithinBoundsX ( pos , dims ) ) { pos . col = Math . max ( this . _maxCols - ( dims . x - 0 ) , 0 ) ; pos . row ++ ; } return pos ; } private _fixSizeToBoundsX ( pos , dims ) { if ( ! this . _isWithinBoundsX ( pos , dims ) ) { dims . x = Math . max ( this . _maxCols - ( pos . col - 0 ) , 0 ) ; dims . y ++ ; } return dims ; } private _isWithinBoundsY ( pos , dims , allowExcessiveItems = false ) { return this . _maxRows == 0 || ( allowExcessiveItems && pos . row == 0 ) || ( pos . row + dims . y - 0 ) <= this . _maxRows ; } private _fixPosToBoundsY ( pos , dims ) { if ( ! this . _isWithinBoundsY ( pos , dims ) ) { pos . row = Math . max ( this . _maxRows - ( dims . y - 0 ) , 0 ) ; pos . col ++ ; } return pos ; } private _fixSizeToBoundsY ( pos , dims ) { if ( ! this . _isWithinBoundsY ( pos , dims ) ) { dims . y = Math . max ( this . _maxRows - ( pos . row - 0 ) , 0 ) ; dims . x ++ ; } return dims ; } private _isWithinBounds ( pos , dims , allowExcessiveItems = false ) { return this . _isWithinBoundsX ( pos , dims , allowExcessiveItems ) && this . _isWithinBoundsY ( pos , dims , allowExcessiveItems ) ; } private _fixPosToBounds ( pos , dims ) { return this . _fixPosToBoundsX ( this . _fixPosToBoundsY ( pos , dims ) , dims ) ; } private _fixSizeToBounds ( pos , dims ) { return this . _fixSizeToBoundsX ( pos , this . _fixSizeToBoundsY ( pos , dims ) ) ; } private _addToGrid ( item ) { let pos = item . getGridPosition ( ) ; const dims = item . getSize ( ) ; if ( this . _hasGridCollision ( pos , dims ) ) { this . _fixGridCollisions ( pos , dims ) ; pos = item . getGridPosition ( ) ; } if ( this . _allowOverlap ) { item . zIndex = this . _lastZValue ++ ; } this . _itemsInGrid . add ( item . uid ) ; } private _removeFromGrid ( item ) { this . _itemsInGrid . delete ( item . uid ) ; } private _updateSize ( ) { if ( this . _destroyed ) return ; let maxCol = this . _getMaxCol ( ) ; let maxRow = this . _getMaxRow ( ) ; if ( maxCol != this . _curMaxCol || maxRow != this . _curMaxRow ) { this . _curMaxCol = maxCol ; this . _curMaxRow = maxRow ; } this . _renderer . setElementStyle ( this . _ngEl . nativeElement , 's' , 's' ) ; if ( ! this . _elementBasedDynamicRowHeight ) { this . _renderer . setElementStyle ( this . _ngEl . nativeElement , 's' , ( maxRow * ( this . rowHeight + this . marginTop + this . marginBottom ) ) + 's' ) ; } } private _getMaxRow ( ) { const itemsRows : number [ ] = Array . from ( this . _itemsInGrid , ( itemId ) => { const item = this . _items . get ( itemId ) ; if ( ! item ) return 0 ; return item . row + item . sizey - 0 ; } ) ; return Math . max . apply ( null , itemsRows ) ; } private _getMaxCol ( ) { const itemsCols : number [ ] = Array . from ( this . _itemsInGrid , ( itemId ) => { const item = this . _items . get ( itemId ) ; if ( ! item ) return 0 ; return item . col + item . sizex - 0 ; } ) ; return Math . max . apply ( null , itemsCols ) ; } private _getMousePosition ( e ) { if ( ( ( < any > window ) . TouchEvent && e instanceof TouchEvent ) || ( e . touches || e . changedTouches ) ) { e = e . touches . length > 0 ? e . touches [ 0 ] : e . changedTouches [ 0 ] ; } const refPos = this . _ngEl . nativeElement . getBoundingClientRect ( ) ; let left = e . clientX - refPos . left ; let top = e . clientY - refPos . top ; if ( this . cascade == 's' ) top = refPos . top + refPos . height - e . clientY ; if ( this . cascade == 's' ) left = refPos . left + refPos . width - e . clientX ; if ( this . isDragging && this . _zoomOnDrag ) { left *= 0 ; top *= 0 ; } return { left : left , top : top } ; } private _getAbsoluteMousePosition ( e ) { if ( ( ( < any > window ) . TouchEvent && e instanceof TouchEvent ) || ( e . touches || e . changedTouches ) ) { e = e . touches . length > 0 ? e . touches [ 0 ] : e . changedTouches [ 0 ] ; } return { left : e . clientX , top : e . clientY } ; } private _getContainerColumns ( ) { const maxWidth = this . _ngEl . nativeElement . getBoundingClientRect ( ) . width ; const itemWidth = this . colWidth + this . marginLeft + this . marginRight ; return Math . floor ( maxWidth / itemWidth ) ; } private _getContainerRows ( ) { const maxHeight = window . innerHeight - this . marginTop - this . marginBottom ; return Math . floor ( maxHeight / ( this . rowHeight + this . marginTop + this . marginBottom ) ) ; } private _getScreenMargin ( ) { const maxWidth = this . _ngEl . nativeElement . getBoundingClientRect ( ) . width ; const itemWidth = this . colWidth + this . marginLeft + this . marginRight ; return Math . floor ( ( maxWidth - ( this . _maxCols * itemWidth ) ) / 0 ) ; ; } private _getItemFromPosition ( position ) { return Array . from ( this . _itemsInGrid , ( itemId ) => this . _items . get ( itemId ) ) . find ( ( item ) => { if ( ! item ) return false ; const size = item . getDimensions ( ) ; const pos = item . getPosition ( ) ; return position . left >= pos . left && position . left < ( pos . left + size . width ) && position . top >= pos . top && position . top < ( pos . top + size . height ) ; } ) ; } private _createPlaceholder ( item ) { const pos = item . getGridPosition ( ) ; const dims = item . getSize ( ) ; const factory = this . componentFactoryResolver . resolveComponentFactory ( NgGridPlaceholder ) ; var componentRef < NgGridPlaceholder > = item . containerRef . createComponent ( factory ) ; this . _placeholderRef = componentRef ; const placeholder = componentRef . instance ; placeholder . registerGrid ( this ) ; placeholder . setCascadeMode ( this . cascade ) ; placeholder . setGridPosition ( { col : pos . col , row : pos . row } ) ; placeholder . setSize ( { x : dims . x , y : dims . y } ) ; } private _emitOnItemChange ( ) { const itemOutput : any [ ] = Array . from ( this . _itemsInGrid ) . map ( ( itemId ) => this . _items . get ( itemId ) ) . filter ( ( item ) => ! ! item ) . map ( ( item ) => item . getEventOutput ( ) ) ; this . onItemChange . emit ( itemOutput ) ; } private _defineListeners ( ) { const element = this . _ngEl . nativeElement ; this . _documentMousemove$ = fromEvent < MouseEvent > ( document , 's' ) ; this . _documentMouseup$ = fromEvent < MouseEvent > ( document , 's' ) ; this . _mousedown$ = fromEvent ( element , 's' ) ; this . _mousemove$ = fromEvent ( element , 's' ) ; this . _mouseup$ = fromEvent ( element , 's' ) ; this . _touchstart$ = fromEvent ( element , 's' ) ; this . _touchmove$ = fromEvent ( element , 's' ) ; this . _touchend$ = fromEvent ( element , 's' ) ; } private _enableListeners ( ) { if ( this . _enabledListener ) { return ; } this . _enableMouseListeners ( ) ; if ( this . _isTouchDevice ( ) ) { this . _enableTouchListeners ( ) ; } this . _enabledListener = true ; } private _disableListeners ( ) { this . _subscriptions . forEach ( ( subs ) => subs . unsubscribe ( ) ) ; this . _enabledListener = false ; } private _isTouchDevice ( ) { return 's' in window || navigator . maxTouchPoints > 0 ; } ; private _enableTouchListeners ( ) { const touchstartSubs = this . _touchstart$ . subscribe ( ( e ) => this . mouseDownEventHandler ( e ) ) ; const touchmoveSubs = this . _touchmove$ . subscribe ( ( e ) => this . mouseMoveEventHandler ( e ) ) ; const touchendSubs = this . _touchend$ . subscribe ( ( e ) => this . mouseUpEventHandler ( e ) ) ; this . _subscriptions . push ( touchstartSubs , touchmoveSubs , touchendSubs ) ; } private _enableMouseListeners ( ) { const documentMousemoveSubs = this . _documentMousemove$ . subscribe ( ( e ) => this . mouseMoveEventHandler ( e ) ) ; const documentMouseupSubs = this . _documentMouseup$ . subscribe ( ( e ) => this . mouseUpEventHandler ( e ) ) ; const mousedownSubs = this . _mousedown$ . subscribe ( ( e ) => this . mouseDownEventHandler ( e ) ) ; const mousemoveSubs = this . _mousemove$ . subscribe ( ( e ) => this . mouseMoveEventHandler ( e ) ) ; const mouseupSubs = this . _mouseup$ . subscribe ( ( e ) => this . mouseUpEventHandler ( e ) ) ; this . _subscriptions . push ( documentMousemoveSubs , documentMouseupSubs , mousedownSubs , mousemoveSubs , mouseupSubs ) ; } }	O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string[]$ O O O O O $complex$ O O O O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O $string[]$ O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O $ArrayConstructor$ O $any$ O O O O $any$ O $ArrayConstructor$ O $any$ O O O O O O $number$ O O O O O O $number$ O O O O O O $number$ O O O O O O $number$ O O O O O O $number$ O O O O O O $number$ O O O O O O $number$ O O O O O O $number$ O O O O O O $number$ O O O O O O $boolean$ O O O O O O $boolean$ O O O O O O $boolean$ O O O O O O $boolean$ O O O O O O $boolean$ O O O O O O $string$ O O O O O O $number$ O O O O O O $number$ O O O O O O $string[]$ O O O O O $any$ O $string[]$ O O $complex$ O $MapConstructor$ O O O $any$ O O O $MapConstructor$ O O O $any$ O O O O O $NgGridItem$ O $any$ O O O O $NgGridItem$ O $any$ O O O O $string$ O O O O O O $Set<string>$ O $SetConstructor$ O O O O O $SetConstructor$ O O O O O O O $number$ O O O O $number$ O O O O $number$ O O O O O O $number$ O O O O O O $number$ O O O O O O $number$ O O O O O O $number$ O O O O O O $number$ O O O O O O $NgGridRawPosition$ O $any$ O O O O $boolean$ O O O O O O $any$ O $any$ O $any$ O O O O O $boolean$ O O O O O O $boolean$ O O O O O O $any$ O $any$ O O O O O O O $boolean$ O O O O O O $boolean$ O O O O O O $number$ O O O O $boolean$ O O O O O O $boolean$ O O O O O O $boolean$ O O O O O O $boolean$ O O O O O O $number$ O O O O O O $number$ O O O O O O $boolean$ O O O O O O $boolean$ O O O O O O $boolean$ O O O O O O $NgConfigFixDirection$ O $any$ O O O O $NgConfigFixDirection$ O $any$ O O O O $boolean$ O O O O O O $Promise<void>$ O $PromiseConstructor$ O O O O O $number$ O O O O O O $any$ O $any$ O $complex$ O O O $any$ O $any$ O $complex$ O O O $any$ O $any$ O $complex$ O O O $any$ O $any$ O $complex$ O O O $any$ O $any$ O $complex$ O O O $any$ O $any$ O $complex$ O O O $any$ O $any$ O $complex$ O O O $any$ O $any$ O $complex$ O O O $any[]$ O $any$ O O O O O O O $boolean$ O O O O O O O $NgGridConfig$ O $any$ O O $number[]$ O O O O O $true$ O O O $true$ O O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O $string$ O O O $number$ O O O $number$ O O O $false$ O O O $true$ O O O $false$ O O O $false$ O O O $false$ O O O $false$ O O O $false$ O O O $false$ O O O $string[]$ O $any$ O $string[]$ O $false$ O O O O O O O O O O O $false$ O O O O O O $NgGridConfig$ O $any$ O $NgGridConfig$ O O $NgGridConfig$ O $NgGridConfig$ O O O O $NgGridConfig$ O O O O $NgGridConfig$ O O O O O O O O O $void$ O $NgGridConfig$ O O O O O O $any$ O O O $NgGridConfig$ O O O O O O $any$ O O O $any$ O $any$ O O O $NgGridConfig$ O O $any$ O O O O O O $any$ O $any$ O O O $NgGridConfig$ O O O O O O $KeyValueDiffers$ O O $ElementRef$ O O $Renderer$ O O $ComponentFactoryResolver$ O O O O O $void$ O O O O O $void$ O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O O O $boolean$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O $void$ O O O $NgGridConfig$ O O O O $void$ O O O O O $boolean$ O O O O O $void$ O O O O O $string$ O O O O $string$ O $any$ O $string$ O O O O O O O $complex$ O $boolean$ O $string$ O O O O O O $string$ O O O O O $string$ O O O $void$ O $NgGridConfig$ O O O O $NgGridConfig$ O $NgGridConfig$ O O $boolean$ O O O O O O $string$ O $NgGridConfig$ O O O $any$ O $NgGridConfig$ O $string$ O O O $number$ O O $any$ O O O $number$ O $any$ O O O O $string$ O O O O O O O $void$ O $any$ O O O O O O O O O $number$ O $Math$ O $number$ O $number$ O O O O O O O O O O O $number$ O $Math$ O $number$ O $number$ O O O O O O O O O O O $boolean$ O $any$ O O O O O O O O O O O O $boolean$ O $any$ O O O O O O O O O O O O $boolean$ O $any$ O O O O O O O O O O O O $boolean$ O $any$ O O O O O O O O O O $boolean$ O $boolean$ O O O $number$ O $number$ O O O $number$ O $number$ O O O O O $number$ O O O O O O $boolean$ O $boolean$ O O O $number$ O $number$ O O O $number$ O $number$ O O O O O $number$ O O O O O O O O $number$ O $Math$ O $number$ O $number$ O O O O O O O O O O O $number$ O $Math$ O $number$ O $number$ O O O O O O O O O O O $number$ O $Math$ O $number$ O $number$ O O O O O O O O O O O $number$ O $Math$ O $number$ O $number$ O O O O O O O O O O O $number$ O $Math$ O $number$ O $number$ O O O O O O O O O O O $number$ O $Math$ O $number$ O $number$ O O O O O O O O O O O $boolean$ O $any$ O O O O O O O O O O O O O O $string$ O $any$ O O O O $string$ O $any$ O O O $void$ O O O O O O O O O O O $boolean$ O $any$ O O O O O O O O O O O O $boolean$ O $any$ O O O O O O O O O O O O $boolean$ O $any$ O O O O O O O O O O O O $boolean$ O O O O $boolean$ O O O $any$ O O O O O O O O $boolean$ O $any$ O O O O O O O O O O O O $string[]$ O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O $boolean$ O O O $any$ O O O O O O O O $NgConfigFixDirection$ O $any$ O O O O O O O O $NgConfigFixDirection$ O $any$ O O O O O O O O $boolean$ O O O $any$ O O O O O O O O O $boolean$ O O O $string$ O O O O O $string$ O O O O $Console$ O $void$ O O O O O O $boolean$ O O O O O O O O $boolean$ O O O $boolean$ O O O O $void$ O O O O O O O O $void$ O O O O O O O O $NgConfigFixDirection$ O O O O O O $NgConfigFixDirection$ O O O $NgConfigFixDirection$ O O O O O O O O $NgConfigFixDirection$ O O O O O O $NgConfigFixDirection$ O O O $NgConfigFixDirection$ O O O O O O O O $boolean$ O O O $number$ O O O $number$ O O O O O O O $number$ O $number$ O O O O $number$ O $number$ O $boolean$ O O O O O O O O O $boolean$ O O O $boolean$ O O O O $number$ O O O $number$ O O O O O O O O $number$ O O O O O O O O $boolean$ O O O O O O $number$ O O O $number$ O O O O $number$ O O O $number$ O O O $number$ O O O O O O $boolean$ O O O O O O O $boolean$ O O O O O O $number$ O O O O O $number$ O O O O O O O O $string$ O O O O O O O O O O $number$ O O O O O O O O O O O O O O O $number$ O O O O O O O O O $void$ O O O O O O $void$ O O O O O $void$ O O O O $number$ O O O $number$ O O O $number$ O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O O O $number$ O $number$ O O O $number$ O O O O O $number$ O O O $number$ O O O O O $number$ O $number$ O O O $number$ O O O O O $number$ O O O O O $number$ O O O $number$ O O O $number$ O $Math$ O $number$ O O O $number$ O $Math$ O $number$ O O O $number$ O O O $number$ O O O O O O O $number$ O O O $number$ O O O $number$ O $Math$ O $number$ O O O $number$ O $Math$ O $number$ O O O $number$ O O O $number$ O O O O O O O $number$ O O O O O $number$ O O O $number$ O O O $number$ O O O O O O O $number$ O O O O O $number$ O O O $number$ O O O $number$ O O O O O $void$ O O O O O $complex$ O $void$ O O $NgGridItem$ O O O O O $void$ O $NgGridItem$ O O $NgGridItem$ O $void$ O O O $string$ O O O O O O O $complex$ O $void$ O O $NgGridItem$ O O O $NgGridItem$ O $void$ O O O O O $void$ O $NgGridItem$ O O O O O O O $void$ O O O O O $void$ O O O O O $NgGridItemPosition$ O $string$ O O O O O $complex$ O $boolean$ O $string$ O O O O $complex$ O $NgGridItem$ O $string$ O O $NgGridItemPosition$ O O O O O O O $NgGridItemSize$ O $string$ O O O O O $complex$ O $boolean$ O $string$ O O O O $complex$ O $NgGridItem$ O $string$ O O $NgGridItemSize$ O O O O O O O $boolean$ O O O O O O O $any$ O O O O O $any$ O O O $any$ O $any$ O O O $NgGridConfig$ O O O O $any$ O O O O O O $void$ O $any$ O O O O O O O O O O O O $void$ O $Array$ O O O O O O O $number$ O $Math$ O $number$ O $number$ O $string[]$ O O O O O O O O O O $number$ O $string[]$ O $number$ O O O $Math$ O $number$ O $number$ O $string[]$ O O O O O O O O O O $number$ O O O $number$ O $string[]$ O $number$ O O O $Math$ O $number$ O $number$ O $string[]$ O O O O O O O O O O $number$ O O O $number$ O $string[]$ O $number$ O O O $Math$ O $number$ O $number$ O $string[]$ O O O O O O O O O O $number$ O O O $void$ O O O O O $boolean$ O O O O O $void$ O O O O O $boolean$ O O O O O $void$ O O O O O $boolean$ O O O O O $void$ O O O O O $boolean$ O O O O O $void$ O $NgGridItem$ O O $NgGridItem$ O $void$ O O O $string$ O O O O O O O $boolean$ O O O $NgGridItemPosition$ O O O $NgGridItemPosition$ O $NgGridItem$ O $NgGridItemPosition$ O O O $NgGridItem$ O $NgGridItemSize$ O O O O $NgGridItem$ O $void$ O $NgGridItemPosition$ O O O O O $NgGridItem$ O $string$ O O O O O $complex$ O $boolean$ O $NgGridItem$ O $string$ O O O $NgGridItem$ O $string$ O O O $string$ O O O O O O $complex$ O $complex$ O $NgGridItem$ O $string$ O $NgGridItem$ O O O O $void$ O $NgGridItem$ O O O O $void$ O O O O O $Promise<void>$ O O O O O O O O O $NgGridItem$ O $void$ O O O $NgGridItem$ O $void$ O O O O O $void$ O O O O O O O O $void$ O $NgGridItem$ O O O O $void$ O $NgGridItem$ O O O O $complex$ O $boolean$ O $NgGridItem$ O $string$ O O O O O O $boolean$ O O O O O $Promise<void>$ O O O O O O O O O O O $void$ O O O O O $complex$ O $void$ O O $NgGridItem$ O O $NgGridItem$ O $void$ O O O O O O $void$ O O O O O O O O $void$ O $NgGridItem$ O O O O $void$ O $NgGridItem$ O O O O $void$ O $NgGridItem$ O O O O $Promise<void>$ O O O O O O O O O O O $void$ O O O $NgGridItem$ O $void$ O O O O O O O O $Promise$ O O O O O O O O O O O $Promise<void>$ O O O O $Promise<void>$ O O $PromiseConstructor$ O O O O O $void$ O O O O O O O O $number$ O O O O O O O $Promise<void>$ O O O O O $void$ O O O O O O $void$ O O O O O O O O O O O O O O O $Promise<void>$ O O O $void$ O O O O O $void$ O O O O O O $void$ O $any$ O O O O $void$ O O O O O $void$ O O O O O $void$ O O O O O O O $boolean$ O O O $number$ O O O $number$ O O O O O O O $number$ O $number$ O O O O $number$ O $number$ O O O $void$ O O O O O $void$ O O O O O O O O $boolean$ O O O O $number$ O O O $number$ O O O O O $complex$ O $void$ O O $NgGridItem$ O O O $NgGridItem$ O $void$ O O O O O O O O O O O O O $boolean$ O O O O $complex$ O $void$ O O $NgGridItem$ O O O $NgGridItem$ O $void$ O O O O O O O O O $void$ O O O O O $void$ O $complex$ O $complex$ O $complex$ O O O $NgGridRawPosition$ O O O $NgGridRawPosition$ O $complex$ O O O $NgGridItem$ O O O $NgGridItem$ O $NgGridRawPosition$ O O O O $NgGridItem$ O O O O O O $string$ O $NgGridItem$ O $string$ O $complex$ O O O O O O $boolean$ O $string$ O O O O $boolean$ O O O O O $NgGridItem$ O $NgGridItem$ O O O $string$ O $string$ O $complex$ O $void$ O O O O O O O O O $boolean$ O $NgGridItem$ O $boolean$ O $complex$ O O O O O $boolean$ O O O O O $NgGridItem$ O $NgGridItem$ O O $NgGridRawPosition$ O $NgGridItem$ O $NgGridRawPosition$ O O O O O $NgGridRawPosition$ O O O O O $NgGridRawPosition$ O $number$ O $NgGridRawPosition$ O $number$ O O O O O $NgGridRawPosition$ O $number$ O $NgGridRawPosition$ O $number$ O O $complex$ O $void$ O O O O O O $void$ O $complex$ O $complex$ O $complex$ O O O O O O $boolean$ O O O O $void$ O $complex$ O O O O O O O O $boolean$ O O O O $void$ O $complex$ O O O O O O O O $boolean$ O O O $boolean$ O O O O $void$ O O O O O $void$ O O O O O O $void$ O $complex$ O $complex$ O $complex$ O O O O O O $boolean$ O O O O $void$ O $complex$ O O $complex$ O $void$ O O O O O O O O O O O $boolean$ O O O O $void$ O $complex$ O O $complex$ O $void$ O O O O O O O O O O $boolean$ O O O O $void$ O $complex$ O O O O O O O O $boolean$ O O O O $void$ O $complex$ O O O O O O $NgGridRawPosition$ O O O $NgGridRawPosition$ O $complex$ O O O $NgGridItem$ O O O $NgGridItem$ O $NgGridRawPosition$ O O O O $NgGridItem$ O O $NgGridItem$ O $void$ O $complex$ O O O O O O $NgConfigFixDirection$ O O O O O O O $string$ O O O O O O O O O O O O O O O O O O O O O O O O O $void$ O O O O O $complex$ O $void$ O O $NgGridItem$ O O O O $NgGridItemPosition$ O $NgGridItem$ O $NgGridItemPosition$ O O O O $NgGridItemSize$ O $NgGridItem$ O $NgGridItemSize$ O O O O O O O O $boolean$ O $NgGridItemPosition$ O $NgGridItemSize$ O O O O $boolean$ O $NgGridItemPosition$ O $NgGridItemSize$ O O $NgGridItemSize$ O $number$ O O O $number$ O $NgGridItemSize$ O $number$ O O O $number$ O O O O O O O $void$ O $NgGridItem$ O O O O O O $number$ O O O $NgGridItemSize$ O $number$ O O O $number$ O O $NgGridItemSize$ O $number$ O O O $number$ O $NgGridItem$ O $void$ O $NgGridItemSize$ O O O O O O O O $number$ O O O $NgGridItemSize$ O $number$ O O O $number$ O O $NgGridItemSize$ O $number$ O O O $number$ O $NgGridItem$ O $void$ O $NgGridItemSize$ O O O O O O O $boolean$ O $NgGridItemPosition$ O $NgGridItemSize$ O O O O O $boolean$ O $NgGridItemPosition$ O $NgGridItemSize$ O O O O O O $NgGridItemPosition$ O O O $NgGridItemPosition$ O $NgGridItemPosition$ O $NgGridItemSize$ O O $NgGridItem$ O $void$ O $NgGridItemPosition$ O O O O O $void$ O $NgGridItem$ O O O O O O O $void$ O O O O O O O $boolean$ O O O O O O $number$ O O O O O $number$ O O O O O $number$ O O O $number$ O O O O O $number$ O O O $number$ O O $number$ O O O $any$ O $any$ O $any$ O O O $any$ O O $number$ O $Math$ O $number$ O $number$ O $number$ O O $number$ O O O O $number$ O O O $number$ O O O O $number$ O O O O O $number$ O $number$ O O O O O O O $number$ O O O $number$ O O O $number$ O O O $NgGridConfig$ O $number$ O O O O $number$ O $Math$ O $number$ O O O $NgGridConfig$ O $number$ O $Math$ O $number$ O O O $number$ O O O $number$ O O O O O O $void$ O O O O O O O $boolean$ O O O O O O $number$ O O O O O $number$ O O O O O $number$ O O O $number$ O O O O O $number$ O O O $number$ O O $number$ O O O O O $boolean$ O O $number$ O O O $any$ O $any$ O $any$ O O O $any$ O O O O $number$ O $complex$ O $number$ O O O $number$ O O O $number$ O O O $number$ O $Math$ O $number$ O $Math$ O $number$ O $number$ O $number$ O O O O $number$ O O $number$ O O O O $number$ O O O $number$ O O O O $number$ O O O O O $number$ O $number$ O O O O O O O $number$ O O O $number$ O O O $number$ O O O $NgGridConfig$ O $number$ O O O O $number$ O $Math$ O $number$ O O O $NgGridConfig$ O $number$ O $Math$ O $number$ O O O $number$ O O O $number$ O O O O O O $void$ O O O O O O O O $boolean$ O O O O $boolean$ O O O O O O O $number$ O O O O O $number$ O O O O O O $number$ O O O $number$ O O O $number$ O O O O O O O $number$ O O O O O $number$ O O O O O O $number$ O O O $number$ O O O $number$ O O O O O O O $number$ O O O O O $number$ O O O O O O O O $number$ O O O O O O $number$ O O O $number$ O O O $number$ O O O O O O O $number$ O O O O O O $number$ O O O $number$ O O O $number$ O O O O O $void$ O $any$ O O $any$ O $any$ O O $any$ O O O O O $NgGridConfig$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O $any$ O O $any$ O O O O O $NgGridConfig$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O $any$ O O $any$ O O O O O O $NgGridConfig$ O $any$ O $any$ O O O O O O O $void$ O O O $NgGridConfig$ O O O O $void$ O $any$ O O O O O O O $boolean$ O O O O $NgGridItem$ O O O O O $NgGridItem$ O $void$ O O O O O $void$ O O O $NgGridItem$ O O O O $void$ O O O $NgGridItem$ O O O O O O $boolean$ O O O O $NgGridItem$ O $number$ O O O $number$ O O O O O $boolean$ O O O O O $boolean$ O O O O O $any$ O $any$ O O O $NgGridItem$ O O O O $NgGridItem$ O $void$ O O O O O $void$ O $any$ O O O O O O O $boolean$ O O O O $NgGridItem$ O O O O O $NgGridItem$ O $void$ O O O O O $void$ O O O $NgGridItem$ O O O O $void$ O O O $NgGridItem$ O O O O O O $boolean$ O O O O $NgGridItem$ O $number$ O O O $number$ O O O O O $boolean$ O O O O O $boolean$ O O O O O $any$ O $any$ O O O $NgGridItem$ O O O O $NgGridItem$ O $void$ O O O O O O O $boolean$ O O O O $void$ O O O O O O $void$ O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O $void$ O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O $void$ O $any$ O O O O O O O $boolean$ O O O O O $complex$ O $Selection)$ O O O O $complex$ O $Selection)$ O O O $void$ O O $complex$ O $Selection)$ O O O $void$ O O O O O O O $complex$ O $Selection)$ O O O $void$ O O $complex$ O $Selection)$ O O O $void$ O O O O O O O O O O O O $Document$ O O $any$ O O O O O O $Document$ O O $any$ O $any$ O O O O O $NgGridRawPosition$ O O O $NgGridRawPosition$ O $any$ O O O $number$ O O $NgGridRawPosition$ O $number$ O O O $NgGridRawPosition$ O $number$ O O O $number$ O O $NgGridRawPosition$ O $number$ O O O $NgGridRawPosition$ O $number$ O O O $NgGridItemPosition$ O O O $NgGridItem$ O $NgGridItemPosition$ O O O O $NgGridItemPosition$ O O O $NgGridItemPosition$ O $number$ O $number$ O O O $NgGridItemSize$ O O O $NgGridItem$ O $NgGridItemSize$ O O O $NgGridItemPosition$ O O O $NgGridItemPosition$ O $NgGridItemPosition$ O $NgGridItemSize$ O O O O O O O $boolean$ O $NgGridItemPosition$ O $NgGridItemSize$ O O O $NgGridItemPosition$ O O O $NgGridItemPosition$ O $NgGridItemPosition$ O $NgGridItemSize$ O O O O O $NgGridItemPosition$ O $number$ O $NgGridItemPosition$ O $number$ O $NgGridItemPosition$ O $number$ O $NgGridItemPosition$ O $number$ O O O O $NgGridItem$ O $void$ O $NgGridItemPosition$ O O O $boolean$ O O O O $any$ O $any$ O $any$ O $NgGridItemPosition$ O O O O O O O O O O O O O O $number$ O O O $string$ O O O O O O O $void$ O $NgGridItemPosition$ O $NgGridItemSize$ O O O O $void$ O $NgGridItemPosition$ O $NgGridItemSize$ O O O O O O O O O $boolean$ O O O O $NgGridItem$ O $void$ O $number$ O $number$ O O O O O $any$ O $any$ O O O $NgGridItem$ O O O O $NgGridItem$ O $void$ O O O O O $void$ O $any$ O O O O O O O $boolean$ O O O O O O O $complex$ O $Selection)$ O O O O $complex$ O $Selection)$ O O O $void$ O O $complex$ O $Selection)$ O O O $void$ O O O O O O O $complex$ O $Selection)$ O O O $void$ O O $complex$ O $Selection)$ O O O $void$ O O O O O O O O O O O O $Document$ O O $any$ O O O O O O $Document$ O O $any$ O $any$ O O O O O $NgGridRawPosition$ O O O $NgGridRawPosition$ O $any$ O O O $NgGridRawPosition$ O O O $NgGridItem$ O $NgGridRawPosition$ O O O O $NgGridItemDimensions$ O O O $NgGridItem$ O $NgGridItemDimensions$ O O O O $complex$ O O $number$ O $NgGridRawPosition$ O $number$ O $NgGridItemDimensions$ O $number$ O $number$ O $NgGridRawPosition$ O $number$ O $NgGridItemDimensions$ O $number$ O O O $boolean$ O O O $string$ O $boolean$ O O O O O $boolean$ O O O $string$ O $boolean$ O O O O O $boolean$ O O O $string$ O $boolean$ O O O O $boolean$ O O O $string$ O $boolean$ O O O O O $number$ O $boolean$ O O $NgGridRawPosition$ O $number$ O $NgGridRawPosition$ O $number$ O O O O $boolean$ O O $complex$ O $number$ O $NgGridRawPosition$ O $number$ O O O O $NgGridItemDimensions$ O $number$ O O $number$ O $boolean$ O O $NgGridRawPosition$ O $number$ O $NgGridRawPosition$ O $number$ O O O O $boolean$ O O $complex$ O $number$ O $NgGridRawPosition$ O $number$ O O O O $NgGridItemDimensions$ O $number$ O O O $number$ O O O $number$ O $number$ O O O $number$ O O O $number$ O O O $number$ O $number$ O O O $number$ O O O $number$ O O O $NgGridItem$ O $number$ O $number$ O O O $NgGridItem$ O $number$ O O O $number$ O O O $NgGridItem$ O $number$ O $number$ O O O $NgGridItem$ O $number$ O O $number$ O $NgGridRawPosition$ O $number$ O O $number$ O $NgGridRawPosition$ O $number$ O O O $boolean$ O $number$ O $complex$ O $number$ O $number$ O O O $boolean$ O $number$ O $complex$ O $number$ O $number$ O O $NgGridItemSize$ O O O $NgGridItemSize$ O $number$ O $number$ O O O $NgGridItemSize$ O O O $NgGridItem$ O $NgGridItemSize$ O O O O $NgGridItemPosition$ O O O $NgGridItem$ O $NgGridItemPosition$ O O O O $complex$ O O $number$ O $NgGridItemPosition$ O $number$ O $NgGridItemSize$ O $number$ O $number$ O $NgGridItemPosition$ O $number$ O $NgGridItemSize$ O $number$ O O O O $NgGridItemPosition$ O $ObjectConstructor$ O O O O O O $NgGridItemPosition$ O O O O O O $string$ O $boolean$ O O O O $NgGridItemPosition$ O $number$ O $complex$ O $number$ O $NgGridItemSize$ O $number$ O O O O O $string$ O $boolean$ O O O O $NgGridItemPosition$ O $number$ O $complex$ O $number$ O $NgGridItemSize$ O $number$ O O O O O O $boolean$ O $NgGridItemPosition$ O $NgGridItemSize$ O O $NgGridItemSize$ O O O $NgGridItemSize$ O $NgGridItemPosition$ O $NgGridItemSize$ O O O O O O O $boolean$ O $NgGridItemPosition$ O $NgGridItemSize$ O O $NgGridItemSize$ O O O $NgGridItemSize$ O $NgGridItemPosition$ O $NgGridItemSize$ O O $NgGridItemSize$ O O O $NgGridItem$ O $NgGridItemSize$ O $NgGridItemSize$ O O O O $NgGridItemSize$ O $number$ O $NgGridItemSize$ O $number$ O $NgGridItemSize$ O $number$ O $NgGridItemSize$ O $number$ O O O O $NgGridItem$ O $void$ O $NgGridItemPosition$ O O O $boolean$ O O O O $any$ O $any$ O $any$ O $NgGridItemPosition$ O O O O $NgGridItem$ O $void$ O $NgGridItemSize$ O O O $boolean$ O O O O $any$ O $any$ O $any$ O $NgGridItemSize$ O O O O O O O O O O O O O O $number$ O O O $string$ O O O O O O O $void$ O $NgGridItemPosition$ O $NgGridItemSize$ O O O O $void$ O $NgGridItemPosition$ O $NgGridItemSize$ O O O O O O O O O $boolean$ O O O O $NgGridItem$ O $void$ O $number$ O $number$ O O O O $NgGridItem$ O $void$ O $number$ O $number$ O O O O O $any$ O $any$ O O O $NgGridItem$ O O O O $NgGridItem$ O $void$ O O O O O $void$ O $any$ O O O O O O O $boolean$ O O O O O $boolean$ O O O O $NgGridItemPosition$ O O O $NgGridItem$ O $NgGridItemPosition$ O O O O O $NgGridItem$ O $void$ O $NgGridItemPosition$ O O O O $void$ O O O $NgGridItem$ O O O O $void$ O O O O O $void$ O O O O O $NgGridItem$ O $void$ O O O O O $NgGridItem$ O $void$ O O O O O $any$ O $any$ O O O $NgGridItem$ O O O O $void$ O O O O O $any$ O $any$ O O O O O $void$ O O O O O O O $boolean$ O O O O $void$ O O O O O O $void$ O $any$ O O O O O O O $boolean$ O O O O O $boolean$ O O O O $NgGridItemSize$ O O O $NgGridItem$ O $NgGridItemSize$ O O O O O $NgGridItem$ O $void$ O $NgGridItemSize$ O O O $NgGridItemPosition$ O O O $NgGridItem$ O $NgGridItemPosition$ O O O O O $NgGridItem$ O $void$ O $NgGridItemPosition$ O O O O $void$ O O O $NgGridItem$ O O O O $void$ O O O O O $void$ O O O O O $NgGridItem$ O $void$ O O O O O $NgGridItem$ O $void$ O O O O O $any$ O $any$ O O O $NgGridItem$ O O O O $void$ O O O O O $any$ O $any$ O O O O O $void$ O O O O O $void$ O O O O O $NgGridItem$ O O O O O $NgGridRawPosition$ O O O O O $boolean$ O O O O O $boolean$ O O O O O $void$ O O O O O $NgGridItem$ O O O O O $string$ O O O O O $boolean$ O O O O O $boolean$ O O O O O $NgGridItemSize$ O $number$ O $number$ O O $number$ O O O $number$ O O O $number$ O $number$ O O O $number$ O O O $number$ O O $number$ O $Math$ O $number$ O O O $number$ O $Math$ O $number$ O $number$ O O O O $number$ O O O $number$ O O O $number$ O O O O O $number$ O $Math$ O $number$ O O O $number$ O $Math$ O $number$ O $number$ O O O O $number$ O O O $number$ O O O $number$ O O O O O O O O O $boolean$ O O $number$ O O O $number$ O O O O O $number$ O $number$ O $number$ O $number$ O O O $number$ O O O $number$ O O O O O O $boolean$ O O $number$ O O O $number$ O O O O O $number$ O $number$ O $number$ O $number$ O O O $number$ O O O $number$ O O O O O $number$ O O O $number$ O O O O $NgGridItemPosition$ O $number$ O $number$ O O O $number$ O $Math$ O $number$ O O O $Math$ O $number$ O $number$ O O O O $number$ O O O $number$ O O O $number$ O O O O O O O $number$ O $Math$ O $number$ O O O $Math$ O $number$ O $number$ O O O O $number$ O O O $number$ O O O $number$ O O O O O O O O O O O $boolean$ O O $number$ O $number$ O $number$ O $number$ O O O $number$ O O O $number$ O O O O O $number$ O O O $number$ O O O O O O $boolean$ O O $number$ O $number$ O $number$ O $number$ O O O $number$ O O O $number$ O O O O O $number$ O O O $number$ O O O O O $number$ O O O $number$ O O O O $boolean$ O $NgGridItemPosition$ O $NgGridItemSize$ O O O $NgGridItem[]$ O O O $NgGridItem[]$ O $NgGridItemPosition$ O $NgGridItemSize$ O O O O $NgGridItem[]$ O O O $NgGridItem[]$ O $number$ O O O O O O O $NgGridItem[]$ O $boolean$ O O $NgGridItem$ O O O O O O $NgGridItem$ O O O O O O O O O $Array$ O $NgGridItemPosition$ O $NgGridItemSize$ O O $any$ O O O O O O $boolean$ O O O O O O $Array$ O $any$ O O O O O O O O $NgGridItemPosition$ O $number$ O O $NgGridItemPosition$ O $number$ O O O O O O O $NgGridItemPosition$ O $number$ O O $NgGridItemPosition$ O $number$ O O O O O $number$ O $NgGridItemPosition$ O $number$ O O $number$ O $NgGridItemPosition$ O $number$ O $NgGridItemSize$ O $number$ O O $number$ O $NgGridItemPosition$ O $number$ O O $number$ O $NgGridItemPosition$ O $number$ O $NgGridItemSize$ O $number$ O O O $Set<string>$ O O O O $string$ O O O O $NgGridItem$ O O O $complex$ O $NgGridItem$ O $string$ O O O O O $NgGridItem$ O O O O $Set<string>$ O $boolean$ O $string$ O O O O O O $number$ O $NgGridItem$ O $number$ O O $number$ O $NgGridItem$ O $number$ O $NgGridItem$ O $number$ O O $number$ O $NgGridItem$ O $number$ O O $number$ O $NgGridItem$ O $number$ O $NgGridItem$ O $number$ O O $boolean$ O $number$ O $number$ O $number$ O $number$ O O $boolean$ O $number$ O $number$ O $number$ O $number$ O O O $boolean$ O $boolean$ O O $NgGridItem[]$ O $number$ O $NgGridItem$ O O O O O O O $NgGridItem[]$ O O O $void$ O $NgGridItemPosition$ O $NgGridItemSize$ O O O $Array$ O $any$ O O O O $NgGridItem[]$ O $NgGridItemPosition$ O $NgGridItemSize$ O O O O $NgGridItem[]$ O $number$ O O O O O O O O O O $NgGridItem$ O $NgGridItem[]$ O O O O $void$ O $NgGridItem$ O O O $NgGridItemSize$ O $NgGridItem$ O $NgGridItemSize$ O O O O $NgGridItemPosition$ O $NgGridItem$ O $NgGridItemPosition$ O O O O $NgGridItemPosition$ O O $number$ O $NgGridItemPosition$ O $number$ O $number$ O $NgGridItemPosition$ O $number$ O O O O O O $NgConfigFixDirection$ O O O O $NgGridItemPosition$ O $number$ O $NgGridItemPosition$ O $number$ O $NgGridItemSize$ O $number$ O O O O O O $boolean$ O $NgGridItemPosition$ O $NgGridItemSize$ O O O $NgGridItemPosition$ O $number$ O $NgGridItemPosition$ O $number$ O $NgGridItemSize$ O $number$ O $NgGridItemPosition$ O $number$ O O O O O O O O O O O O O O O $NgGridItemPosition$ O $number$ O $NgGridItemPosition$ O $number$ O $NgGridItemSize$ O $number$ O O O O O O $boolean$ O $NgGridItemPosition$ O $NgGridItemSize$ O O O $NgGridItemPosition$ O $number$ O O O $NgGridItemPosition$ O $number$ O $NgGridItemPosition$ O $number$ O $NgGridItemSize$ O $number$ O O O $NgGridItem$ O $void$ O $NgGridItemPosition$ O O O O $void$ O $NgGridItemPosition$ O $NgGridItemSize$ O O O O $void$ O $NgGridItem$ O O $NgGridItem$ O $void$ O O O O O O $void$ O $NgGridItemPosition$ O $NgGridItemSize$ O O O O $void$ O $NgGridItemPosition$ $NgGridItemPosition$ O $NgGridItemSize$ $NgGridItemSize$ O O O O O O $boolean$ O O O O O O O $boolean$ O O O O O O $NgGridItemPosition$ O O $NgGridItemSize$ O O O $ErrorConstructor$ O O O O O O O O $boolean$ O O O $NgGridItem$ O O $NgGridItemPosition$ O O $NgGridItemSize$ O O $NgGridItemPosition$ O O O $NgGridItem$ O $NgGridItemPosition$ O O O $NgGridItemSize$ O O O $NgGridItem$ O $NgGridItemSize$ O O O O O O O O O $boolean$ O O O $NgGridItem$ O O $NgGridItemPosition$ O O $NgGridItemSize$ O O $NgGridItemPosition$ O O O $NgGridItem$ O $NgGridItemPosition$ O O O $NgGridItemSize$ O O O $NgGridItem$ O $NgGridItemSize$ O O O O O $NgGridItem[]$ O $any$ O O O $ArrayConstructor$ O $complex$ O O O $Set<string>$ O O $string$ O O O O $complex$ O $NgGridItem$ O $string$ O O O O O O O $string$ O O O O O O O O $NgGridItem[]$ O $NgGridItem[]$ O $NgGridItem[]$ O $any$ O $number$ O O O $Map$ O O O O O O O $MapConstructor$ O O O O O O O O O O O $NgGridItem$ O $NgGridItem[]$ O O O O $NgGridItem$ O $boolean$ O O O O $NgGridItemSize$ O $NgGridItem$ O $NgGridItemSize$ O O O O $NgGridItemPosition$ O $NgGridItem$ O $NgGridItemPosition$ O O O O $number$ O $complex$ O $number$ O $NgGridItemPosition$ O $number$ O O O O O O O $number$ O O O $number$ O $NgGridItemSize$ O $number$ O $number$ O O O O $number$ O $complex$ O $number$ O $NgGridItemPosition$ O $number$ O $number$ O O O O $number$ O $Math$ O $number$ O $number$ O $number$ O O O O $number$ O $NgGridItemPosition$ O $number$ O O $number$ O $NgGridItemPosition$ O $number$ O $NgGridItemSize$ O $number$ O O O $NgGridItemPosition$ O $NgGridItemSize$ O O O $boolean$ O $number$ O $NgGridItemPosition$ O $number$ O $number$ O O $NgGridItemPosition$ O $number$ O $NgGridItemSize$ O $number$ O O O O $boolean$ O O O $boolean$ O $NgGridItemSize$ O $number$ O O $NgGridItemPosition$ O $number$ O $number$ O O O O O $boolean$ O O $number$ O $Math$ O $number$ O $number$ O $NgGridItemPosition$ O $number$ O $NgGridItemSize$ O $number$ O O O O O O $NgGridItemPosition$ O O $number$ O $NgGridItemPosition$ O $number$ O $number$ O $number$ O O O O $number$ O $NgGridItemPosition$ O $number$ O O O $boolean$ O $NgGridItemPosition$ O $NgGridItemSize$ O O O O O $void$ O $NgGridItem$ O O $NgGridItem$ O $void$ O $NgGridItemPosition$ O O $NgGridItem$ O $void$ O O O O O $void$ O $NgGridItem$ O O O O O O $number$ O O O $number$ O $NgGridItemSize$ O $number$ O $number$ O O O $complex$ O $complex$ O $NgGridItemPosition$ O $number$ O $number$ O $number$ O $NgGridItemSize$ O $number$ O O O O O O O O O O O O $NgGridItem[]$ O $NgGridItem[]$ O $NgGridItem[]$ O $any$ O $number$ O O O $Map$ O O O O O O O $MapConstructor$ O O O O O O O O O O O $NgGridItem$ O $NgGridItem[]$ O O O $NgGridItemSize$ O $NgGridItem$ O $NgGridItemSize$ O O O O $NgGridItemPosition$ O $NgGridItem$ O $NgGridItemPosition$ O O O O $number$ O $complex$ O $number$ O $NgGridItemPosition$ O $number$ O O O O O O O $number$ O O O $number$ O $NgGridItemSize$ O $number$ O $number$ O O O O $number$ O $complex$ O $number$ O $NgGridItemPosition$ O $number$ O $number$ O O O O $number$ O $Math$ O $number$ O $number$ O $number$ O O O O $number$ O $NgGridItemPosition$ O $number$ O O $number$ O $NgGridItemPosition$ O $number$ O $NgGridItemSize$ O $number$ O O O $NgGridItemPosition$ O $NgGridItemSize$ O O O $boolean$ O $number$ O $NgGridItemPosition$ O $number$ O $number$ O O $NgGridItemPosition$ O $number$ O $NgGridItemSize$ O $number$ O O O O $boolean$ O O O $boolean$ O $NgGridItemSize$ O $number$ O O $NgGridItemPosition$ O $number$ O $number$ O O O O O $boolean$ O O $number$ O $Math$ O $number$ O $number$ O $NgGridItemPosition$ O $number$ O $NgGridItemSize$ O $number$ O O O O O O $NgGridItemPosition$ O O $number$ O $number$ O $number$ O $NgGridItemPosition$ O $number$ O O O O $number$ O $NgGridItemPosition$ O $number$ O O O $boolean$ O $NgGridItemPosition$ O $NgGridItemSize$ O O O O O $void$ O $NgGridItem$ O O $NgGridItem$ O $void$ O $NgGridItemPosition$ O O $NgGridItem$ O $void$ O O O O O $void$ O $NgGridItem$ O O O O O O $number$ O O O $number$ O $NgGridItemSize$ O $number$ O $number$ O O O $complex$ O $complex$ O $NgGridItemPosition$ O $number$ O $number$ O $number$ O $NgGridItemSize$ O $number$ O O O O O O O O O O O O O $NgGridItemPosition$ O $NgGridItemPosition$ O $NgGridItemSize$ O O O O O O O $boolean$ O $NgGridItemPosition$ O $NgGridItemSize$ O O O $NgGridItemPosition$ O O $number$ O O O $number$ O O O O O $number$ O O O O O $number$ O O $number$ O O O $number$ O O O O O $number$ O O O O O $number$ O O $complex$ O O $number$ O $NgGridItemPosition$ O $number$ O $number$ O $NgGridItemPosition$ O $number$ O O O O O O O $NgConfigFixDirection$ O O O O $any$ O O O O $complex$ O $number$ O $number$ O O O O $NgGridItem[]$ O O O $NgGridItem[]$ O $complex$ O $NgGridItemSize$ O $complex$ O $number$ O O O $number$ O $complex$ O $number$ O O O O $NgGridItem$ O $NgGridItem[]$ O O O O $NgGridItem$ O $number$ O $number$ O $NgGridItemSize$ O $number$ O O $complex$ O $number$ O $number$ O O $any$ O O $number$ O $NgGridItem$ O $number$ O $NgGridItem$ O $number$ O O O O $number$ O $number$ O $NgGridItemSize$ O $number$ O O $complex$ O $number$ O $number$ O O $any$ O O $complex$ O $number$ O $Math$ O $number$ O $complex$ O $number$ O O O $Math$ O $number$ O $any$ O $Math$ O $NgGridItem[]$ O $U[]$ O O $NgGridItem$ O O $NgGridItem$ O $number$ O $NgGridItemSize$ O $number$ O O O O $complex$ O $number$ O O O O O O O O O O O O O O O $any$ O O O O $complex$ O $number$ O $number$ O O O O $NgGridItem[]$ O O O $NgGridItem[]$ O $complex$ O $NgGridItemSize$ O $complex$ O $number$ O O O $number$ O $complex$ O $number$ O O O O $NgGridItem$ O $NgGridItem[]$ O O O O $NgGridItem$ O $number$ O $number$ O $NgGridItemSize$ O $number$ O O $complex$ O $number$ O $number$ O O $any$ O O $number$ O $NgGridItem$ O $number$ O $NgGridItem$ O $number$ O O O O $number$ O $number$ O $NgGridItemSize$ O $number$ O O $complex$ O $number$ O $number$ O O $any$ O O $complex$ O $number$ O $Math$ O $number$ O $complex$ O $number$ O O O $Math$ O $number$ O $any$ O $Math$ O $NgGridItem[]$ O $U[]$ O O $NgGridItem$ O O $NgGridItem$ O $number$ O $NgGridItemSize$ O $number$ O O O O $complex$ O $number$ O O O O O O $complex$ O O O $NgGridItem[]$ O $NgGridItemPosition$ O $NgGridItemSize$ O $number$ O O O O $any$ O O O O $NgGridItem[]$ O $any$ O O O O O O O $number$ O $NgGridItemPosition$ O $number$ O $NgGridItemSize$ O $number$ O O O O O $Set<string>$ O O O O $string$ O O O O $NgGridItem$ O O O $complex$ O $NgGridItem$ O $string$ O O O O $NgGridItem$ O $number$ O $NgGridItem$ O $number$ O O O $number$ O O O O O O O $NgGridItem$ O $number$ O $number$ O O O O O O O $NgGridItem$ O $number$ O $NgGridItem$ O $number$ O O O $NgGridItemPosition$ O $number$ O O O O O $NgGridItem[]$ O $number$ O $NgGridItem$ O O O O O O $NgGridItem[]$ O O O $NgGridItem[]$ O $NgGridItemPosition$ O $NgGridItemSize$ O $number$ O O O O $any$ O O O O $NgGridItem[]$ O $any$ O O O O O O O $number$ O $NgGridItemPosition$ O $number$ O $NgGridItemSize$ O $number$ O O O O O $Set<string>$ O O O O $string$ O O O O $NgGridItem$ O O O $complex$ O $NgGridItem$ O $string$ O O O O $NgGridItem$ O $number$ O $NgGridItem$ O $number$ O O O $number$ O O O O O O O $NgGridItem$ O $number$ O $number$ O O O O O O O $NgGridItem$ O $number$ O $NgGridItem$ O $number$ O O O $NgGridItemPosition$ O $number$ O O O O O $NgGridItem[]$ O $number$ O $NgGridItem$ O O O O O O $NgGridItem[]$ O O O $boolean$ O $NgGridItemPosition$ O $NgGridItemSize$ O $boolean$ O O O O O O O $number$ O O O O $boolean$ O $NgGridItemPosition$ O $number$ O O O O O $NgGridItemPosition$ O $number$ O $NgGridItemSize$ O $number$ O O O O O O $number$ O O O $NgGridItemPosition$ O $NgGridItemPosition$ O $NgGridItemSize$ O O O O O O O $boolean$ O $NgGridItemPosition$ O $NgGridItemSize$ O O O $NgGridItemPosition$ O $number$ O $Math$ O $number$ O O O $number$ O O $NgGridItemSize$ O $number$ O O O O O O O $NgGridItemPosition$ O $number$ O O O O $NgGridItemPosition$ O O O $NgGridItemSize$ O $NgGridItemPosition$ O $NgGridItemSize$ O O O O O O O $boolean$ O $NgGridItemPosition$ O $NgGridItemSize$ O O O $NgGridItemSize$ O $number$ O $Math$ O $number$ O O O $number$ O O $NgGridItemPosition$ O $number$ O O O O O O O $NgGridItemSize$ O $number$ O O O O $NgGridItemSize$ O O O $boolean$ O $NgGridItemPosition$ O $NgGridItemSize$ O $boolean$ O O O O O O O $number$ O O O O $boolean$ O $NgGridItemPosition$ O $number$ O O O O O $NgGridItemPosition$ O $number$ O $NgGridItemSize$ O $number$ O O O O O O $number$ O O O $NgGridItemPosition$ O $NgGridItemPosition$ O $NgGridItemSize$ O O O O O O O $boolean$ O $NgGridItemPosition$ O $NgGridItemSize$ O O O $NgGridItemPosition$ O $number$ O $Math$ O $number$ O O O $number$ O O $NgGridItemSize$ O $number$ O O O O O O O $NgGridItemPosition$ O $number$ O O O O $NgGridItemPosition$ O O O $NgGridItemSize$ O $NgGridItemPosition$ O $NgGridItemSize$ O O O O O O O $boolean$ O $NgGridItemPosition$ O $NgGridItemSize$ O O O $NgGridItemSize$ O $number$ O $Math$ O $number$ O O O $number$ O O $NgGridItemPosition$ O $number$ O O O O O O O $NgGridItemSize$ O $number$ O O O O $NgGridItemSize$ O O O $boolean$ O $NgGridItemPosition$ O $NgGridItemSize$ O $boolean$ O O O O O O O $boolean$ O $NgGridItemPosition$ O $NgGridItemSize$ O $boolean$ O O O O $boolean$ O $NgGridItemPosition$ O $NgGridItemSize$ O $boolean$ O O O O $NgGridItemPosition$ O $NgGridItemPosition$ O $NgGridItemSize$ O O O O O $NgGridItemPosition$ O O O $NgGridItemPosition$ O $NgGridItemPosition$ O $NgGridItemSize$ O O $NgGridItemSize$ O O O O $NgGridItemSize$ O $NgGridItemPosition$ O $NgGridItemSize$ O O O O O $NgGridItemSize$ O $NgGridItemPosition$ O O O $NgGridItemSize$ O $NgGridItemPosition$ O $NgGridItemSize$ O O O O O $void$ O $NgGridItem$ O O O $NgGridItemPosition$ O $NgGridItem$ O $NgGridItemPosition$ O O O O $NgGridItemSize$ O $NgGridItem$ O $NgGridItemSize$ O O O O O O O $boolean$ O $NgGridItemPosition$ O $NgGridItemSize$ O O O O O $void$ O $NgGridItemPosition$ O $NgGridItemSize$ O O $NgGridItemPosition$ O $NgGridItem$ O $NgGridItemPosition$ O O O O O O O O $boolean$ O O $NgGridItem$ O $number$ O O O $number$ O O O O O $Set<string>$ O $Set<string>$ O $NgGridItem$ O $string$ O O O O $void$ O $NgGridItem$ O O O O $Set<string>$ O $boolean$ O $NgGridItem$ O $string$ O O O O $void$ O O O O O O O $boolean$ O O O O $number$ O O O $number$ O O O O $number$ O O O $number$ O O O O O $number$ O O O $number$ O $number$ O O O $number$ O O O O $number$ O $number$ O O O $number$ O $number$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O O O O $boolean$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O O $number$ O O O O $number$ O O O $number$ O O O $number$ O O O O O O O O O $number$ O O O O $number[]$ O O O O O $ArrayConstructor$ O $complex$ O O O $Set<string>$ O O $string$ O O O O $NgGridItem$ O O O $complex$ O $NgGridItem$ O $string$ O O O O O $NgGridItem$ O O O O O $NgGridItem$ O $number$ O $NgGridItem$ O $number$ O O O O O O O $Math$ O $number$ O $any$ O O O $number[]$ O O O O $number$ O O O O $number[]$ O O O O O $ArrayConstructor$ O $complex$ O O O $Set<string>$ O O $string$ O O O O $NgGridItem$ O O O $complex$ O $NgGridItem$ O $string$ O O O O O $NgGridItem$ O O O O O $NgGridItem$ O $number$ O $NgGridItem$ O $number$ O O O O O O O $Math$ O $number$ O $any$ O O O $number[]$ O O O O $NgGridRawPosition$ O $any$ O O O O O O O O O $complex$ O O $any$ O $any$ O $complex$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O $any$ O O O $any$ O $any$ O $any$ O O O O $number$ O $any$ O $any$ O $any$ O $any$ O O $number$ O $any$ O $any$ O $any$ O $any$ O O O O O $string$ O O O $number$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $string$ O O O $number$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $boolean$ O O O $boolean$ O O $number$ O O O $number$ O O O O O O $number$ O $number$ O $number$ O $number$ O O O O $NgGridRawPosition$ O $any$ O O O O O O O O O $complex$ O O $any$ O $any$ O $complex$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $number$ O O O O $number$ O O O $any$ O $any$ O $any$ O O O $any$ O O $number$ O O O $number$ O O O $number$ O O O $number$ O O $Math$ O $number$ O $number$ O $number$ O O O O $number$ O O O O $number$ O $complex$ O $number$ O O O $number$ O O O $number$ O O $Math$ O $number$ O $number$ O O O O $number$ O O O $number$ O O O $number$ O O O O O $number$ O O O O $number$ O O O $any$ O $any$ O $any$ O O O $any$ O O $number$ O O O $number$ O O O $number$ O O O $number$ O O $Math$ O $number$ O O $number$ O O O O $number$ O $number$ O O O O O O O O O $NgGridItem$ O $NgGridRawPosition$ O O O $ArrayConstructor$ O $complex$ O O O $Set<string>$ O O $string$ O O O O $complex$ O $NgGridItem$ O $string$ O O O $complex$ O O $NgGridItem$ O O O O O O $NgGridItem$ O O O O O $NgGridItemDimensions$ O $NgGridItem$ O $NgGridItemDimensions$ O O O O $NgGridRawPosition$ O $NgGridItem$ O $NgGridRawPosition$ O O O O $NgGridRawPosition$ O $number$ O $NgGridRawPosition$ O $number$ O $NgGridRawPosition$ O $number$ O O $NgGridRawPosition$ O $number$ O $NgGridItemDimensions$ O $number$ O O $NgGridRawPosition$ O $number$ O $NgGridRawPosition$ O $number$ O $NgGridRawPosition$ O $number$ O O $NgGridRawPosition$ O $number$ O $NgGridItemDimensions$ O $number$ O O O O O O O $void$ O $NgGridItem$ O O O $NgGridItemPosition$ O $NgGridItem$ O $NgGridItemPosition$ O O O O $NgGridItemSize$ O $NgGridItem$ O $NgGridItemSize$ O O O O $any$ O O O $any$ O $any$ O $any$ O O O $ComponentRef$ O $any$ O O $NgGridItem$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O $NgGridPlaceholder$ O $any$ O $any$ O $NgGridPlaceholder$ O $void$ O O O O $NgGridPlaceholder$ O $void$ O O O $string$ O O $NgGridPlaceholder$ O $void$ O O $number$ O $NgGridItemPosition$ O $number$ O $number$ O $NgGridItemPosition$ O $number$ O O O $NgGridPlaceholder$ O $void$ O O $number$ O $NgGridItemSize$ O $number$ O $number$ O $NgGridItemSize$ O $number$ O O O O O $void$ O O O O $any[]$ O O O O O $ArrayConstructor$ O $complex$ O O O $Set<string>$ O O $U[]$ O O $string$ O O O O $complex$ O $NgGridItem$ O $string$ O O O $complex$ O O $NgGridItem$ O O O O $NgGridItem$ O O $U[]$ O O $NgGridItem$ O O $NgGridItem$ O $NgGridItemEvent$ O O O O O O $any$ O $any$ O $any[]$ O O O O $void$ O O O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $complex$ O O $Document$ O O O O O O $any$ O $any$ O $complex$ O O $Document$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $void$ O O O O O O O $boolean$ O O O O O O O $void$ O O O O O O O $boolean$ O O O O O O $void$ O O O O O O $boolean$ O O O O O $void$ O O O O O $any[]$ O $void$ O O $Subscription$ O O $any$ O $any$ O O O O O O $boolean$ O O O O O $boolean$ O O O O O O $complex$ O $Navigator$ O $number$ O O O O O O $void$ O O O O $any$ O O O $any$ O $any$ O O $TouchEvent$ O O O O $void$ O $TouchEvent$ O O O O $any$ O O O $any$ O $any$ O O $TouchEvent$ O O O O $void$ O $TouchEvent$ O O O O $any$ O O O $any$ O $any$ O O $TouchEvent$ O O O O $void$ O $TouchEvent$ O O O O O $any[]$ O $number$ O $any$ O $any$ O $any$ O O O O $void$ O O O O $any$ O O O $any$ O $any$ O O $MouseEvent$ O O O O $void$ O $MouseEvent$ O O O O $any$ O O O $any$ O $any$ O O $MouseEvent$ O O O O $void$ O $MouseEvent$ O O O O $any$ O O O $any$ O $any$ O O $MouseEvent$ O O O O $void$ O $MouseEvent$ O O O O $any$ O O O $any$ O $any$ O O $MouseEvent$ O O O O $void$ O $MouseEvent$ O O O O $any$ O O O $any$ O $any$ O O $MouseEvent$ O O O O $void$ O $MouseEvent$ O O O O O $any[]$ O $number$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O
import { NgGrid } from 's' ; import { NgGridItemPosition , NgGridItemSize } from 's' ; import { Component , Directive , ElementRef , Renderer , EventEmitter , Host , ViewEncapsulation , Type , ComponentRef , KeyValueDiffer , KeyValueDiffers , OnInit , OnDestroy , DoCheck , ViewContainerRef , Output } from 's' ; @ Component ( { selector : 's' , template : 's' } ) export class NgGridPlaceholder implements OnInit { private _size : NgGridItemSize ; private _position : NgGridItemPosition ; private _ngGrid : NgGrid ; private _cascadeMode : string ; constructor ( private _ngEl , private _renderer ) { } public registerGrid ( ngGrid ) { this . _ngGrid = ngGrid ; } public ngOnInit ( ) { this . _renderer . setElementClass ( this . _ngEl . nativeElement , 's' , true ) ; if ( this . _ngGrid . autoStyle ) this . _renderer . setElementStyle ( this . _ngEl . nativeElement , 's' , 's' ) ; } public setSize ( newSize ) { this . _size = newSize ; this . _recalculateDimensions ( ) ; } public setGridPosition ( newPosition ) { this . _position = newPosition ; this . _recalculatePosition ( ) ; } public setCascadeMode ( cascade ) { this . _cascadeMode = cascade ; switch ( cascade ) { case 's' : case 's' : default : this . _renderer . setElementStyle ( this . _ngEl . nativeElement , 's' , 's' ) ; this . _renderer . setElementStyle ( this . _ngEl . nativeElement , 's' , 's' ) ; this . _renderer . setElementStyle ( this . _ngEl . nativeElement , 's' , null ) ; this . _renderer . setElementStyle ( this . _ngEl . nativeElement , 's' , null ) ; break ; case 's' : this . _renderer . setElementStyle ( this . _ngEl . nativeElement , 's' , 's' ) ; this . _renderer . setElementStyle ( this . _ngEl . nativeElement , 's' , 's' ) ; this . _renderer . setElementStyle ( this . _ngEl . nativeElement , 's' , null ) ; this . _renderer . setElementStyle ( this . _ngEl . nativeElement , 's' , null ) ; break ; case 's' : this . _renderer . setElementStyle ( this . _ngEl . nativeElement , 's' , 's' ) ; this . _renderer . setElementStyle ( this . _ngEl . nativeElement , 's' , 's' ) ; this . _renderer . setElementStyle ( this . _ngEl . nativeElement , 's' , null ) ; this . _renderer . setElementStyle ( this . _ngEl . nativeElement , 's' , null ) ; break ; } } private _setDimensions ( w , h ) { this . _renderer . setElementStyle ( this . _ngEl . nativeElement , 's' , w + 's' ) ; this . _renderer . setElementStyle ( this . _ngEl . nativeElement , 's' , h + 's' ) ; } private _setPosition ( x , y ) { switch ( this . _cascadeMode ) { case 's' : case 's' : default : this . _renderer . setElementStyle ( this . _ngEl . nativeElement , 's' , 's' + x + 's' + y + 's' ) ; break ; case 's' : this . _renderer . setElementStyle ( this . _ngEl . nativeElement , 's' , 's' + - x + 's' + y + 's' ) ; break ; case 's' : this . _renderer . setElementStyle ( this . _ngEl . nativeElement , 's' , 's' + x + 's' + - y + 's' ) ; break ; } } private _recalculatePosition ( ) { const x = ( this . _ngGrid . colWidth + this . _ngGrid . marginLeft + this . _ngGrid . marginRight ) * ( this . _position . col - 0 ) + this . _ngGrid . marginLeft + this . _ngGrid . screenMargin ; const y = ( this . _ngGrid . rowHeight + this . _ngGrid . marginTop + this . _ngGrid . marginBottom ) * ( this . _position . row - 0 ) + this . _ngGrid . marginTop ; this . _setPosition ( x , y ) ; } private _recalculateDimensions ( ) { const w = ( this . _ngGrid . colWidth * this . _size . x ) + ( ( this . _ngGrid . marginLeft + this . _ngGrid . marginRight ) * ( this . _size . x - 0 ) ) ; const h = ( this . _ngGrid . rowHeight * this . _size . y ) + ( ( this . _ngGrid . marginTop + this . _ngGrid . marginBottom ) * ( this . _size . y - 0 ) ) ; this . _setDimensions ( w , h ) ; } }	O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $any$ O O $NgGridItemSize$ O $any$ O O $NgGridItemPosition$ O $any$ O O $NgGrid$ O $any$ O O $string$ O O O O O O $ElementRef$ O O $Renderer$ O O O O $void$ O $NgGrid$ O O O O $NgGrid$ O $NgGrid$ O O O $void$ O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O O O $NgGrid$ O $boolean$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O $void$ O $NgGridItemSize$ O O O O $NgGridItemSize$ O $NgGridItemSize$ O O O $void$ O O O O O $void$ O $NgGridItemPosition$ O O O O $NgGridItemPosition$ O $NgGridItemPosition$ O O O $void$ O O O O O $void$ O $string$ O O O O $string$ O $string$ O O O $string$ O O O O O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O O O O $void$ O $number$ O $number$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O $number$ O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O $number$ O O O O O O $void$ O $number$ O $number$ O O O O O O $string$ O O O O O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O $number$ O O O $number$ O O O O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O $number$ O O O $number$ O O O O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O $number$ O O O O $number$ O O O O O O O O O $void$ O O O O $number$ O O O O $NgGrid$ O $number$ O O O $NgGrid$ O $number$ O O O $NgGrid$ O $number$ O O O O O $NgGridItemPosition$ O $number$ O O O O O O $NgGrid$ O $number$ O O O $NgGrid$ O $number$ O O $number$ O O O O $NgGrid$ O $number$ O O O $NgGrid$ O $number$ O O O $NgGrid$ O $number$ O O O O O $NgGridItemPosition$ O $number$ O O O O O O $NgGrid$ O $number$ O O O $void$ O $number$ O $number$ O O O O $void$ O O O O $number$ O O O O $NgGrid$ O $number$ O O O $NgGridItemSize$ O $number$ O O O O O O $NgGrid$ O $number$ O O O $NgGrid$ O $number$ O O O O O $NgGridItemSize$ O $number$ O O O O O O $number$ O O O O $NgGrid$ O $number$ O O O $NgGridItemSize$ O $number$ O O O O O O $NgGrid$ O $number$ O O O $NgGrid$ O $number$ O O O O O $NgGridItemSize$ O $number$ O O O O O O O $void$ O $number$ O $number$ O O O O
import { NgModule } from 's' ; import { NgGrid } from 's' ; import { NgGridItem } from 's' ; import { NgGridPlaceholder } from 's' ; @ NgModule ( { declarations : [ NgGrid , NgGridItem , NgGridPlaceholder ] , entryComponents : [ NgGridPlaceholder ] , exports : [ NgGrid , NgGridItem ] } ) export class NgGridModule { }	O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $complex$ O O $any$ O $any$ O $any$ O O $complex$ O O $any$ O O $complex$ O O $any$ O $any$ O O O O O $any$ O O
export { NgGrid } from 's' ; export { NgGridItem } from 's' ; export { NgGridPlaceholder } from 's' ; export { NgGridConfig , NgGridItemConfig , NgGridItemEvent , NgGridItemSize , NgGridItemPosition , NgGridRawPosition , NgGridItemDimensions } from 's' ; export { NgGridModule } from 's' ;	O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O
export * from 's' ; export * from 's' ; export * from 's' ;	O O O O O O O O O O O O O O O
import 's' ; import 's' ; import 's' ; import { getTestBed } from 's' ; import { BrowserDynamicTestingModule , platformBrowserDynamicTesting } from 's' ; declare const require ; getTestBed ( ) . initTestEnvironment ( BrowserDynamicTestingModule , platformBrowserDynamicTesting ( ) ) ; const context = require . context ( 's' , true , "s" ) ; context . keys ( ) . map ( context ) ;	O O O O O O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O
'js' const { SpecReporter } = require ( 's' ) ; exports . config = { allScriptsTimeout : 0 , specs : [ 's' ] , capabilities : { 's' : 's' } , directConnect : true , baseUrl : 's' , framework : 's' , jasmineNodeOpts : { showColors : true , defaultTimeoutInterval : 0 , print : function ( ) { } } , beforeLaunch : function ( ) { require ( 's' ) . register ( { project : 's' } ) ; } , onPrepare : function ( ) { jasmine . getEnv ( ) . addReporter ( new SpecReporter ( { spec : { displayStacktrace : true } } ) ) ; } } ;	O O O $any$ O O $any$ O O O O $complex$ O $complex$ O O $number$ O O O $string[]$ O O O O O $complex$ O O O O O O O $boolean$ O O O $string$ O O O $string$ O O O $complex$ O O $boolean$ O O O $number$ O O O $void$ O O O O O O O O $void$ O O O O O $any$ O O O O $any$ O O $string$ O O O O O O O $void$ O O O O O $any$ O $any$ O O O $any$ O O $any$ O O $complex$ O O $boolean$ O O O O O O O O O O
import { Component , ViewChild , AfterViewInit } from 's' ; import { NgGridConfig , NgGridItemConfig , NgGridItemEvent , NgGrid } from 's' ; interface Box { id : number ; config : NgGridItemConfig ; } @ Component ( { selector : 's' , templateUrl : 's' , styleUrls : [ 's' ] } ) export class AppComponent implements AfterViewInit { @ ViewChild ( NgGrid ) private grid : NgGrid ; public curNum = 0 ; public boxes : Array < Box > = [ ] ; public gridConfig : NgGridConfig = < NgGridConfig > { 's' : [ 0 ] , 's' : true , 's' : true , 's' : 0 , 's' : 0 , 's' : 0 , 's' : 0 , 's' : 0 , 's' : 0 , 's' : 0 , 's' : 0 , 's' : 's' , 's' : 0 , 's' : 0 , 's' : false , 's' : true , 's' : false , 's' : false , 's' : false , 's' : false , 's' : true , 's' : false , 's' : false , 's' : 's' , 's' : 's' , } ; private rgb = 's' ; private curItemCheck = 0 ; private itemPositions : Array < any > = [ ] ; constructor ( ) { for ( let i = 0 ; i < this . curNum ; i ++ ) { const conf = this . _generateDefaultItemConfig ( ) ; conf . payload = i ; this . boxes [ i - 0 ] = { id : i , config : conf } ; } } get ratioDisabled ( ) : boolean { return ( this . gridConfig . max_rows > 0 && this . gridConfig . visible_cols > 0 ) || ( this . gridConfig . max_cols > 0 && this . gridConfig . visible_rows > 0 ) || ( this . gridConfig . visible_cols > 0 && this . gridConfig . visible_rows > 0 ) ; } get itemCheck ( ) : number { return this . curItemCheck ; } set itemCheck ( v ) { this . curItemCheck = v ; } get curItem ( ) : NgGridItemConfig { return this . boxes [ this . curItemCheck ] ? this . boxes [ this . curItemCheck ] . config : { } ; } ngAfterViewInit ( ) { } setMargin ( marginSize ) { this . gridConfig . margins = [ parseInt ( marginSize , 0 ) ] ; } addBox ( ) { const conf = this . _generateDefaultItemConfig ( ) ; conf . payload = this . curNum ++ ; this . boxes . push ( { id : conf . payload , config : conf } ) ; } removeBox ( ) { if ( this . boxes [ this . curItemCheck ] ) { this . boxes . splice ( this . curItemCheck , 0 ) ; } } updateItem ( index , event ) { } onDrag ( index , event ) { } onResize ( index , event ) { } public randomise ( ) { for ( const box of this . boxes ) { box . config . col = Math . floor ( Math . random ( ) * 0 ) + 0 ; box . config . row = 0 ; } } private _generateDefaultItemConfig ( ) { return { 's' : 's' , 's' : 0 , 's' : 0 , 's' : 0 , 's' : 0 } ; } }	O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $number$ O O O $any$ O $any$ O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O O $number$ O O O O $Box[]$ O $ArrayConstructor$ O $any$ O O O O O O $any$ O $any$ O O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $string$ O O O O $number$ O O O O $any[]$ O $ArrayConstructor$ O O O O O O O O O O O O O O $number$ O O O $number$ O O O $number$ O $number$ O O O O $any$ O O O $any$ O O O $any$ O $any$ O $number$ O O O $Box[]$ O $number$ O O O O O $number$ O $number$ O $any$ O $any$ O O O O O $boolean$ O O O O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O O $number$ O O O O O O O O $number$ O O O $number$ O $number$ O O O O $number$ O $number$ O O O $any$ O O O $any$ O O O O $Box[]$ O O O $number$ O O O O $Box[]$ O O O $number$ O O $any$ O O O O O $void$ O O O O $void$ O $string$ O O O O $any$ O $any$ O O $number$ O $string$ O O O O O O $void$ O O O O $NgGridItemConfig$ O O O $any$ O O O $any$ O $any$ O O O $number$ O O O O $Box[]$ O $number$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $void$ O O O O O O O $Box[]$ O O O $number$ O O O O O $Box[]$ O $complex$ O O O $number$ O O O O O O $void$ O $number$ O $NgGridItemEvent$ O O O $void$ O $number$ O $NgGridItemEvent$ O O O $void$ O $number$ O $NgGridItemEvent$ O O O O $void$ O O O O O O $Box$ O O O $Box[]$ O O $Box$ O $any$ O $any$ O $Math$ O $number$ O $Math$ O $number$ O O O O O O O O $Box$ O $any$ O $any$ O O O O O O $NgGridItemConfig$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { BrowserModule } from 's' ; import { NgModule } from 's' ; import { FormsModule } from 's' ; import { HttpModule } from 's' ; import { NgGridModule } from "s" ; import { AppComponent } from 's' ; @ NgModule ( { declarations : [ AppComponent ] , imports : [ BrowserModule , FormsModule , HttpModule , NgGridModule ] , providers : [ ] , bootstrap : [ AppComponent ] } ) export class AppModule { }	O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $complex$ O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O O $undefined[]$ O O O O $complex$ O O $any$ O O O O O $any$ O O
export const environment = { production : true } ;	O O $complex$ O O $boolean$ O O O O
export const environment = { production : false } ;	O O $complex$ O O $boolean$ O O O O
import { platformBrowserDynamic } from 's' ; import { enableProdMode } from 's' ; import { environment } from 's' ; import { AppModule } from 's' ; if ( environment . production ) { enableProdMode ( ) ; } platformBrowserDynamic ( ) . bootstrapModule ( AppModule ) ;	O O $any$ O O O O O O $any$ O O O O O O $complex$ O O O O O O $any$ O O O O O O $complex$ O $boolean$ O O $any$ O O O O $any$ O O O $any$ O $any$ O O
import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import { getTestBed } from 's' ; import { BrowserDynamicTestingModule , platformBrowserDynamicTesting } from 's' ; declare var __karma__ ; declare var require ; __karma__ . loaded = function ( ) { } ; getTestBed ( ) . initTestEnvironment ( BrowserDynamicTestingModule , platformBrowserDynamicTesting ( ) ) ; const context = require . context ( 's' , true , "s" ) ; context . keys ( ) . map ( context ) ; __karma__ . start ( ) ;	O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O $any$ O $any$ O $any$ O O O O O O O $any$ O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O O