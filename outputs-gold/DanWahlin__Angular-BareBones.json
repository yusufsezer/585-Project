import { Injectable } from 's' ; @ Injectable ( ) export class DataService { constructor ( ) { } getProjectName ( ) { return 's' ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { Component , OnInit } from 's' ; import { DataService } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' } ) export class HomeComponent implements OnInit { projectName : string ; constructor ( private dataService ) { } ngOnInit ( ) { this . projectName = this . dataService . getProjectName ( ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $DataService$ O O O O O O O O O O O O O O O O O O O O O
import { Component , OnInit } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' } ) export class FeatureComponent implements OnInit { constructor ( ) { } ngOnInit ( ) { } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { NgModule } from 's' ; import { Routes , RouterModule } from 's' ; import { HomeComponent } from 's' ; import { FeatureComponent } from 's' ; const routes = [ { path : 's' , pathMatch : 's' , redirectTo : 's' } , { path : 's' , component : HomeComponent } , { path : 's' , component : FeatureComponent } ] ; @ NgModule ( { imports : [ RouterModule . forRoot ( routes ) ] , exports : [ RouterModule ] } ) export class AppRoutingModule { static components = [ HomeComponent , FeatureComponent ] ; }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $Routes$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` } ) export class AppComponent { constructor ( ) { } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { NgModule } from 's' ; import { BrowserModule } from 's' ; import { FormsModule } from 's' ; import { HttpModule } from 's' ; import { AppComponent } from 's' ; import { AppRoutingModule } from 's' ; import { DataService } from 's' ; @ NgModule ( { imports : [ BrowserModule , FormsModule , HttpModule , AppRoutingModule ] , declarations : [ AppComponent , AppRoutingModule . components ] , providers : [ DataService ] , bootstrap : [ AppComponent ] } ) export class AppModule { }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { platformBrowserDynamic } from 's' ; import { AppModule } from 's' ; import { enableProdMode } from 's' ; platformBrowserDynamic ( ) . bootstrapModule ( AppModule ) . then ( ( success ) => console . log ( 's' ) ) . catch ( ( err ) => console . error ( err ) ) ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O O O O O O O $any$ O O O O O O O O O O
export const environment = { production : true } ;	O O O O O O O O O O
export const environment = { production : false } ;	O O O O O O O O O O
import { enableProdMode } from 's' ; import { platformBrowserDynamic } from 's' ; import { AppModule } from 's' ; import { environment } from 's' ; if ( environment . production ) { enableProdMode ( ) ; } platformBrowserDynamic ( ) . bootstrapModule ( AppModule ) . catch ( err => console . log ( err ) ) ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import 's' ;	O O O