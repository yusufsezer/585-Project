import { browser , by , element } from 's' ; export class AppPage { navigateTo ( ) { return browser . get ( 's' ) ; } getParagraphText ( ) { return element ( by . css ( 's' ) ) . getText ( ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { AppPage } from 's' ; describe ( 's' , ( ) => { let page ; beforeEach ( ( ) => { page = new AppPage ( ) ; } ) ; it ( 's' , ( ) => { page . navigateTo ( ) ; expect ( page . getParagraphText ( ) ) . toEqual ( 's' ) ; } ) ; } ) ;	O O O O O O O O O O O O O O O O $AppPage$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
'js' module . exports = function ( config ) { config . set ( { basePath : 's' , frameworks : [ 's' , 's' ] , plugins : [ require ( 's' ) , require ( 's' ) , require ( 's' ) , require ( 's' ) , require ( 's' ) ] , client : { clearContext : false } , coverageIstanbulReporter : { dir : require ( 's' ) . join ( __dirname , 's' ) , reports : [ 's' , 's' ] , fixWebpackSourcePaths : true } , angularCli : { environment : 's' } , reporters : [ 's' , 's' ] , port : 0 , colors : true , logLevel : config . LOG_INFO , autoWatch : true , browsers : [ 's' ] , singleRun : false } ) ; } ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
'js' const { SpecReporter } = require ( 's' ) ; exports . config = { allScriptsTimeout : 0 , specs : [ 's' ] , capabilities : { 's' : 's' } , directConnect : true , baseUrl : 's' , framework : 's' , jasmineNodeOpts : { showColors : true , defaultTimeoutInterval : 0 , print : function ( ) { } } , onPrepare ( ) { require ( 's' ) . register ( { project : 's' } ) ; jasmine . getEnv ( ) . addReporter ( new SpecReporter ( { spec : { displayStacktrace : true } } ) ) ; } } ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
'js' "s" ; var express = require ( 's' ) , bodyParser = require ( 's' ) , fs = require ( 's' ) , app = express ( ) , customers = JSON . parse ( fs . readFileSync ( 's' , 's' ) ) , states = JSON . parse ( fs . readFileSync ( 's' , 's' ) ) , inContainer = process . env . CONTAINER , inAzure = process . env . WEBSITE_RESOURCE_GROUP , port = process . env . PORT || 0 ; app . use ( bodyParser . urlencoded ( { extended : true } ) ) ; app . use ( bodyParser . json ( ) ) ; app . use ( function ( req , res , next ) { res . header ( "s" , "s" ) ; res . header ( "s" , "s" ) ; res . header ( 's' , 's' ) ; next ( ) ; } ) ; if ( ! inContainer ) { app . use ( express . static ( __dirname + 's' ) ) ; console . log ( __dirname ) ; } app . get ( 's' , ( req , res ) => { const topVal = req . params . top , skipVal = req . params . skip , skip = ( isNaN ( skipVal ) ) ? 0 : + skipVal ; let top = ( isNaN ( topVal ) ) ? 0 : skip + ( + topVal ) ; if ( top > customers . length ) { top = skip + ( customers . length - skip ) ; } console . log ( `template` ) ; var pagedCustomers = customers . slice ( skip , top ) ; res . setHeader ( 's' , customers . length ) ; res . json ( pagedCustomers ) ; } ) ; app . get ( 's' , ( req , res ) => { res . json ( customers ) ; } ) ; app . get ( 's' , ( req , res ) => { let customerId = + req . params . id ; let selectedCustomer = { } ; for ( let customer of customers ) { if ( customer . id === customerId ) { selectedCustomer = customer ; break ; } } res . json ( selectedCustomer ) ; } ) ; app . post ( 's' , ( req , res ) => { let postedCustomer = req . body ; let maxId = Math . max . apply ( Math , customers . map ( ( cust ) => cust . id ) ) ; postedCustomer . id = ++ maxId ; postedCustomer . gender = ( postedCustomer . id % 0 === 0 ) ? 's' : 's' ; customers . push ( postedCustomer ) ; res . json ( postedCustomer ) ; } ) ; app . put ( 's' , ( req , res ) => { let putCustomer = req . body ; let id = + req . params . id ; let status = false ; const filteredStates = states . filter ( ( state ) => state . abbreviation === putCustomer . state . abbreviation ) ; if ( filteredStates && filteredStates . length ) { putCustomer . state . name = filteredStates [ 0 ] . name ; console . log ( 's' + putCustomer . state . name ) ; } for ( let i = 0 , len = customers . length ; i < len ; i ++ ) { if ( customers [ i ] . id === id ) { customers [ i ] = putCustomer ; status = true ; break ; } } res . json ( { status : status } ) ; } ) ; app . delete ( 's' , function ( req , res ) { let customerId = + req . params . id ; for ( let i = 0 , len = customers . length ; i < len ; i ++ ) { if ( customers [ i ] . id === customerId ) { customers . splice ( i , 0 ) ; break ; } } res . json ( { status : true } ) ; } ) ; app . get ( 's' , function ( req , res ) { let customerId = + req . params . id ; for ( let cust of customers ) { if ( cust . customerId === customerId ) { return res . json ( cust ) ; } } res . json ( [ ] ) ; } ) ; app . get ( 's' , ( req , res ) => { res . json ( states ) ; } ) ; app . post ( 's' , ( req , res ) => { var userLogin = req . body ; res . json ( true ) ; } ) ; app . post ( 's' , ( req , res ) => { res . json ( true ) ; } ) ; app . all ( 's' , function ( req , res ) { res . sendFile ( __dirname + 's' ) ; } ) ; app . listen ( port ) ; console . log ( 's' + port ) ; if ( ! inContainer && ! inAzure ) { var opn = require ( 's' ) ; opn ( 's' + port ) . then ( ( ) => { console . log ( 's' ) ; } ) ; }	
import { Component , OnInit } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' } ) export class AboutComponent implements OnInit { constructor ( ) { } ngOnInit ( ) { } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { NgModule } from 's' ; import { RouterModule , Routes } from 's' ; import { AboutComponent } from 's' ; const routes = [ { path : 's' , component : AboutComponent } ] ; @ NgModule ( { imports : [ RouterModule . forChild ( routes ) ] , exports : [ RouterModule ] } ) export class AboutRoutingModule { static components = [ AboutComponent ] ; }	O O O O O O O O O O O O O O O O O O O O O O O O $Routes$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { sandboxOf } from 's' ; import { AboutComponent } from 's' ; export default sandboxOf ( AboutComponent ) . add ( 's' , { template : `template` } ) ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { NgModule } from 's' ; import { AboutRoutingModule } from 's' ; @ NgModule ( { imports : [ AboutRoutingModule ] , declarations : [ AboutRoutingModule . components ] } ) export class AboutModule { }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
export const environment = { production : false } ;	O O O O O O O O O O
import { Injectable } from 's' ; import { environment } from 's' ; @ Injectable ( { providedIn : 's' } ) export class LoggerService { constructor ( ) { } log ( msg ) { if ( ! environment . production ) { console . log ( msg ) ; } else { } } logError ( msg ) { if ( ! environment . production ) { console . error ( msg ) ; } else { } } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $string$ O O O O O O O O O O O O O O O O O O O O O O O O $string$ O O O O O O O O O O O O O O O O O O O O O O O
import { Injectable } from 's' ; import { PreloadingStrategy , Route } from 's' ; import { Observable , of } from 's' ; import { LoggerService } from 's' ; @ Injectable ( ) export class PreloadModulesStrategy implements PreloadingStrategy { constructor ( private logger ) { } preload ( route , load : ( ) => Observable < any > ) < any > { if ( route . data && route . data [ 's' ] ) { this . logger . log ( 's' + route . path ) ; return load ( ) ; } else { return of ( null ) ; } } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $LoggerService$ O O O $Observable$ O $Route$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { Component , Output , EventEmitter } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' , styleUrls : [ 's' ] } ) export class FilterTextboxComponent { model : { filter : string } = { filter : null } ; @ Output ( ) changed : EventEmitter < string > = new EventEmitter < string > ( ) ; filterChanged ( event ) { event . preventDefault ( ) ; this . changed . emit ( this . model . filter ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O O O O O O O O O O O O O O O O O
import { NgModule } from 's' ; import { CommonModule } from 's' ; import { FormsModule } from 's' ; import { FilterTextboxComponent } from 's' ; @ NgModule ( { imports : [ CommonModule , FormsModule ] , exports : [ FilterTextboxComponent ] , declarations : [ FilterTextboxComponent ] } ) export class FilterTextboxModule { }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { Component , OnInit , Input } from 's' ; @ Component ( { selector : 's' , template : `template` } ) export class MapPointComponent implements OnInit { @ Input ( ) longitude : number ; @ Input ( ) latitude : number ; @ Input ( ) markerText : string ; constructor ( ) { } ngOnInit ( ) { } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { Component , OnInit , AfterContentInit , Input , ViewChild , ContentChildren , ElementRef , QueryList , ChangeDetectionStrategy } from 's' ; import { debounceTime } from 's' ; import { MapPointComponent } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' , changeDetection : ChangeDetectionStrategy . OnPush } ) export class MapComponent implements OnInit , AfterContentInit { private isEnabled : boolean ; private loadingScript : boolean ; private map : google . maps . Map ; private markers : google . maps . Marker [ ] = [ ] ; mapHeight : string ; mapWidth : string ; @ Input ( ) height : number ; @ Input ( ) width : number ; @ Input ( ) latitude = 0 ; @ Input ( ) longitude = - 0 ; @ Input ( ) markerText = 's' ; @ Input ( ) zoom = 0 ; @ Input ( ) get enabled ( ) : boolean { return this . isEnabled ; } set enabled ( isEnabled ) { this . isEnabled = isEnabled ; this . init ( ) ; } @ ViewChild ( 's' , { static : true } ) mapDiv : ElementRef ; @ ContentChildren ( MapPointComponent ) mapPoints : QueryList < MapPointComponent > ; constructor ( ) { } ngOnInit ( ) { if ( this . latitude && this . longitude ) { if ( this . mapHeight && this . mapWidth ) { this . mapHeight = this . height + 's' ; this . mapWidth = this . width + 's' ; } else { const hw = this . getWindowHeightWidth ( this . mapDiv . nativeElement . ownerDocument ) ; this . mapHeight = hw . height / 0 + 's' ; this . mapWidth = hw . width + 's' ; } } } ngAfterContentInit ( ) { this . mapPoints . changes . pipe ( debounceTime ( 0 ) ) . subscribe ( ( ) => { if ( this . enabled ) { this . renderMapPoints ( ) ; } } ) ; } init ( ) { setTimeout ( ( ) => { this . ensureScript ( ) ; } , 0 ) ; } private getWindowHeightWidth ( document ) { let width = window . innerWidth || document . documentElement . clientWidth || document . body . clientWidth ; const height = window . innerHeight || document . documentElement . clientHeight || document . body . clientHeight ; if ( width > 0 ) { width = 0 ; } return { height : height , width : width } ; } private ensureScript ( ) { this . loadingScript = true ; const document = this . mapDiv . nativeElement . ownerDocument ; const script = < HTMLScriptElement > document . querySelector ( 's' ) ; if ( script ) { if ( this . isEnabled ) { this . renderMap ( ) ; } } else { const mapsScript = document . createElement ( 's' ) ; mapsScript . id = 's' ; mapsScript . type = 's' ; mapsScript . async = true ; mapsScript . defer = true ; mapsScript . src = 's' ; mapsScript . onload = ( ) => { this . loadingScript = false ; if ( this . isEnabled ) { this . renderMap ( ) ; } } ; document . body . appendChild ( mapsScript ) ; } } private renderMap ( ) { const latlng = this . createLatLong ( this . latitude , this . longitude ) ; const options = { zoom : this . zoom , center : latlng , mapTypeControl : true , mapTypeId : google . maps . MapTypeId . ROADMAP } ; this . map = new google . maps . Map ( this . mapDiv . nativeElement , options ) ; if ( this . mapPoints && this . mapPoints . length ) { this . renderMapPoints ( ) ; } else { this . createMarker ( latlng , this . map , this . markerText ) ; } } private createLatLong ( latitude , longitude ) { return ( latitude && longitude ) ? new google . maps . LatLng ( latitude , longitude ) : null ; } private renderMapPoints ( ) { if ( this . map ) { this . clearMapPoints ( ) ; this . mapPoints . forEach ( ( point ) => { const mapPointLatlng = this . createLatLong ( point . latitude , point . longitude ) ; this . createMarker ( mapPointLatlng , this . map , point . markerText ) ; } ) ; } } private clearMapPoints ( ) { this . markers . forEach ( ( marker : google . maps . Marker ) => { marker . setMap ( null ) ; } ) ; this . markers = [ ] ; } private createMarker ( position : google . maps . LatLng , map : google . maps . Map , title ) { const infowindow = new google . maps . InfoWindow ( { content : title } ) ; const marker = new google . maps . Marker ( { position : position , map : map , title : title , animation : google . maps . Animation . DROP } ) ; this . markers . push ( marker ) ; marker . addListener ( 's' , ( ) => { infowindow . open ( map , marker ) ; } ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $boolean$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $HTMLDocumentnumber$ O $number$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $MapPointComponent$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $string$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { NgModule } from 's' ; import { CommonModule } from 's' ; import { MapComponent } from 's' ; import { MapPointComponent } from 's' ; @ NgModule ( { imports : [ CommonModule ] , exports : [ MapComponent , MapPointComponent ] , declarations : [ MapComponent , MapPointComponent ] } ) export class MapModule { }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { Component , OnInit , Input , Output , EventEmitter } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' , styleUrls : [ 's' ] } ) export class PaginationComponent implements OnInit { private pagerTotalItems : number ; private pagerPageSize : number ; totalPages : number ; pages : number [ ] = [ ] ; currentPage = 0 ; isVisible = false ; previousEnabled = false ; nextEnabled = true ; @ Input ( ) get pageSize ( ) : number { return this . pagerPageSize ; } set pageSize ( size ) { this . pagerPageSize = size ; this . update ( ) ; } @ Input ( ) get totalItems ( ) : number { return this . pagerTotalItems ; } set totalItems ( itemCount ) { this . pagerTotalItems = itemCount ; this . update ( ) ; } @ Output ( ) pageChanged : EventEmitter < number > = new EventEmitter ( ) ; constructor ( ) { } ngOnInit ( ) { } update ( ) { if ( this . pagerTotalItems && this . pagerPageSize ) { this . totalPages = Math . ceil ( this . pagerTotalItems / this . pageSize ) ; this . isVisible = true ; if ( this . totalItems >= this . pageSize ) { for ( let i = 0 ; i < this . totalPages + 0 ; i ++ ) { this . pages . push ( i ) ; } } return ; } this . isVisible = false ; } previousNext ( direction , event ? ) { let page = this . currentPage ; if ( direction === - 0 ) { if ( page > 0 ) { page -- ; } } else { if ( page < this . totalPages ) { page ++ ; } } this . changePage ( page , event ) ; } changePage ( page , event ? ) { if ( event ) { event . preventDefault ( ) ; } if ( this . currentPage === page ) { return ; } this . currentPage = page ; this . previousEnabled = this . currentPage > 0 ; this . nextEnabled = this . currentPage < this . totalPages ; this . pageChanged . emit ( page ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $number$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $number$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $number$ O O $MouseEvent$ O O O $number$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $number$ O O $MouseEvent$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { NgModule } from 's' ; import { CommonModule } from 's' ; import { PaginationComponent } from 's' ; @ NgModule ( { imports : [ CommonModule ] , exports : [ PaginationComponent ] , declarations : [ PaginationComponent ] } ) export class PaginationModule { }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { Pipe , PipeTransform } from 's' ; @ Pipe ( { name : 's' } ) export class CapitalizePipe implements PipeTransform { transform ( value ) { return typeof value === 's' && value . charAt ( 0 ) . toUpperCase ( ) + value . slice ( 0 ) || value ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { Pipe , PipeTransform } from 's' ; @ Pipe ( { name : 's' } ) export class TrimPipe implements PipeTransform { transform ( value ) { if ( ! value ) { return 's' ; } return value . trim ( ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O O O O O O O O O O O O O O O
import { Directive , Input , Output , EventEmitter , HostListener } from 's' ; @ Directive ( { selector : 's' } ) export class SortByDirective { private sortProperty : string ; @ Output ( ) sorted : EventEmitter < string > = new EventEmitter < string > ( ) ; constructor ( ) { } @ Input ( 's' ) set sortBy ( value ) { this . sortProperty = value ; } @ HostListener ( 's' ) onClick ( ) { event . preventDefault ( ) ; this . sorted . next ( this . sortProperty ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $string$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { NgModule } from 's' ; import { CommonModule } from 's' ; import { FormsModule } from 's' ; import { FilterTextboxModule } from 's' ; import { MapModule } from 's' ; import { PaginationModule } from 's' ; import { CapitalizePipe } from 's' ; import { TrimPipe } from 's' ; import { SortByDirective } from 's' ; @ NgModule ( { imports : [ CommonModule , MapModule , FilterTextboxModule , PaginationModule ] , exports : [ CommonModule , FormsModule , CapitalizePipe , TrimPipe , SortByDirective , MapModule , FilterTextboxModule , PaginationModule ] , declarations : [ CapitalizePipe , TrimPipe , SortByDirective ] } ) export class SharedModule { }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { Component , OnInit } from 's' ; import { Router } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' } ) export class CustomerComponent implements OnInit { constructor ( private router ) { } ngOnInit ( ) { } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $Router$ O O O O O O O O O
import { ModuleWithProviders } from 's' ; import { Routes } from 's' ; export interface ICustomer { id : number ; firstName : string ; lastName : string ; gender : string ; address : string ; city : string ; state : IState ; orders ? : IOrder [ ] ; orderTotal ? : number ; latitude ? : number ; longitude ? : number ; } export interface IState { abbreviation : string ; name : string ; } export interface IOrder { productName : string ; itemCost : number ; } export interface IOrderItem { id : number ; productName : string ; itemCost : number ; } export interface IPagedResults < T > { totalRecords : number ; results : T ; } export interface IUserLogin { email : string ; password : string ; } export interface IApiResponse { status : boolean ; error ? : string ; }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { Injectable , Inject } from 's' ; import { HttpClient , HttpErrorResponse } from 's' ; import { Observable } from 's' ; import { map , catchError } from 's' ; import { ICustomer , IOrder , IState , IPagedResults , IApiResponse } from 's' ; @ Injectable ( ) export class DataService { port = ( this . window . location . port ) ? 's' + this . window . location . port : 's' ; baseUrl = `template` ; customersBaseUrl = this . baseUrl + 's' ; ordersBaseUrl = this . baseUrl + 's' ; orders : IOrder [ ] ; states : IState [ ] ; constructor ( private http , @ Inject ( 's' ) private window ) { } getCustomersPage ( page , pageSize ) < IPagedResults < ICustomer [ ] > > { return this . http . get < ICustomer [ ] > ( `template` , { observe : 's' } ) . pipe ( map ( res => { const totalRecords = + res . headers . get ( 's' ) ; const customers = res . body as ICustomer [ ] ; this . calculateCustomersOrderTotal ( customers ) ; return { results : customers , totalRecords : totalRecords } ; } ) , catchError ( this . handleError ) ) ; } getCustomers ( ) < ICustomer [ ] > { return this . http . get < ICustomer [ ] > ( this . customersBaseUrl ) . pipe ( map ( customers => { this . calculateCustomersOrderTotal ( customers ) ; return customers ; } ) , catchError ( this . handleError ) ) ; } getCustomer ( id ) < ICustomer > { return this . http . get < ICustomer > ( this . customersBaseUrl + 's' + id ) . pipe ( map ( customer => { this . calculateCustomersOrderTotal ( [ customer ] ) ; return customer ; } ) , catchError ( this . handleError ) ) ; } insertCustomer ( customer ) < ICustomer > { return this . http . post < ICustomer > ( this . customersBaseUrl , customer ) . pipe ( catchError ( this . handleError ) ) ; } updateCustomer ( customer ) < boolean > { return this . http . put < IApiResponse > ( this . customersBaseUrl + 's' + customer . id , customer ) . pipe ( map ( res => res . status ) , catchError ( this . handleError ) ) ; } deleteCustomer ( id ) < boolean > { return this . http . delete < IApiResponse > ( this . customersBaseUrl + 's' + id ) . pipe ( map ( res => res . status ) , catchError ( this . handleError ) ) ; } getStates ( ) < IState [ ] > { return this . http . get < IState [ ] > ( 's' ) . pipe ( catchError ( this . handleError ) ) ; } private handleError ( error ) { console . error ( 's' , error ) ; if ( error . error instanceof Error ) { const errMessage = error . error . message ; return Observable . throw ( errMessage ) ; } return Observable . throw ( error || 's' ) ; } calculateCustomersOrderTotal ( customers : ICustomer [ ] ) { for ( const customer of customers ) { if ( customer && customer . orders ) { let total = 0 ; for ( const order of customer . orders ) { total += order . itemCost ; } customer . orderTotal = total ; } } } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $HttpClient$ O O O O O O O $Window$ O O O $Observable$ O $number$ O $number$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $Observable$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $Observable$ O $number$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $Observable$ O $ICustomer$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $Observable$ O $ICustomer$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $Observable$ O $number$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $Observable$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $HttpErrorResponse$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { Component , OnInit } from 's' ; import { ActivatedRoute , Params } from 's' ; import { DataService } from 's' ; import { ICustomer , IOrder , IOrderItem } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' } ) export class CustomerOrdersComponent implements OnInit { orders : IOrder [ ] = [ ] ; customer : ICustomer ; constructor ( private route , private dataService ) { } ngOnInit ( ) { this . route . parent . params . subscribe ( ( params ) => { const id = + params [ 's' ] ; this . dataService . getCustomer ( id ) . subscribe ( ( customer ) => { this . customer = customer ; } ) ; } ) ; } ordersTrackBy ( index , orderItem ) { return index ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ActivatedRoute$ O O $DataService$ O O O O O O O O O O O O O O O O O O $Params$ O O O O O O O O O O O O O O O O O O O O O O O O $ICustomer$ O O O O O O O O O O O O O O O O O O $number$ O $any$ O O O O O O O
import { Component , OnInit } from 's' ; import { ActivatedRoute , Params } from 's' ; import { ICustomer } from 's' ; import { DataService } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' , styleUrls : [ 's' ] } ) export class CustomerDetailsComponent implements OnInit { customer : ICustomer ; mapEnabled : boolean ; constructor ( private route , private dataService ) { } ngOnInit ( ) { this . route . parent . params . subscribe ( ( params ) => { const id = + params [ 's' ] ; if ( id ) { this . dataService . getCustomer ( id ) . subscribe ( ( customer ) => { this . customer = customer ; this . mapEnabled = true ; } ) ; } } ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ActivatedRoute$ O O $DataService$ O O O O O O O O O O O O O O O O O O $Params$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ICustomer$ O O O O O O O O O O O O O O O O O O O O O O O O
import { Injectable } from 's' ; export interface IModalContent { header ? : string ; body ? : string ; cancelButtonText ? : string ; OKButtonText ? : string ; cancelButtonVisible ? : boolean ; } @ Injectable ( ) export class ModalService { constructor ( ) { } show : ( modalContent ) => Promise < boolean > ; hide : ( ) => void ; }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $IModalContent$ O O O O O O O O O O O O O O O
import { Injectable } from 's' ; @ Injectable ( ) export class GrowlerService { constructor ( ) { } growl : ( message , growlType ) => number ; } export enum GrowlerMessageType { Success , Danger , Warning , Info }	O O O O O O O O O O O O O O O O O O O O O O O $string$ O $GrowlerMessageType$ O O O O O O O O O O O O O O O O O
import { Component , OnInit , ViewChild } from 's' ; import { Router , ActivatedRoute , Params } from 's' ; import { NgForm } from 's' ; import { DataService } from 's' ; import { ModalService , IModalContent } from 's' ; import { ICustomer , IState } from 's' ; import { GrowlerService , GrowlerMessageType } from 's' ; import { LoggerService } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' , styleUrls : [ 's' ] } ) export class CustomerEditComponent implements OnInit { customer : ICustomer = { id : 0 , firstName : 's' , lastName : 's' , gender : 's' , address : 's' , city : 's' , state : { abbreviation : 's' , name : 's' } } ; states : IState [ ] ; errorMessage : string ; deleteMessageEnabled : boolean ; operationText = 's' ; @ ViewChild ( 's' , { static : true } ) customerForm : NgForm ; constructor ( private router , private route , private dataService , private growler , private modalService , private logger ) { } ngOnInit ( ) { this . route . parent . params . subscribe ( ( params ) => { const id = + params [ 's' ] ; if ( id !== 0 ) { this . operationText = 's' ; this . getCustomer ( id ) ; } } ) ; this . dataService . getStates ( ) . subscribe ( ( states : IState [ ] ) => this . states = states ) ; } getCustomer ( id ) { this . dataService . getCustomer ( id ) . subscribe ( ( customer ) => { this . customer = customer ; } ) ; } submit ( ) { if ( this . customer . id === 0 ) { this . dataService . insertCustomer ( this . customer ) . subscribe ( ( insertedCustomer ) => { if ( insertedCustomer ) { this . customerForm . form . markAsPristine ( ) ; this . router . navigate ( [ 's' ] ) ; } else { const msg = 's' ; this . growler . growl ( msg , GrowlerMessageType . Danger ) ; this . errorMessage = msg ; } } , ( err ) => this . logger . log ( err ) ) ; } else { this . dataService . updateCustomer ( this . customer ) . subscribe ( ( status ) => { if ( status ) { this . customerForm . form . markAsPristine ( ) ; this . growler . growl ( 's' , GrowlerMessageType . Success ) ; } else { const msg = 's' ; this . growler . growl ( msg , GrowlerMessageType . Danger ) ; this . errorMessage = msg ; } } , ( err ) => this . logger . log ( err ) ) ; } } cancel ( event ) { event . preventDefault ( ) ; this . router . navigate ( [ 's' ] ) ; } delete ( event ) { event . preventDefault ( ) ; this . dataService . deleteCustomer ( this . customer . id ) . subscribe ( ( status ) => { if ( status ) { this . router . navigate ( [ 's' ] ) ; } else { this . errorMessage = 's' ; } } , ( err ) => this . logger . log ( err ) ) ; } canDeactivate ( ) : Promise < boolean > | boolean { if ( ! this . customerForm . dirty ) { return true ; } const modalContent = { header : 's' , body : 's' , cancelButtonText : 's' , OKButtonText : 's' } ; return this . modalService . show ( modalContent ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $Router$ O O $ActivatedRoute$ O O $DataService$ O O $GrowlerService$ O O $ModalService$ O O $LoggerService$ O O O O O O O O O O O O O O O O O O $Params$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $number$ O O O O O O O O O O O O O O $ICustomer$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ICustomer$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $boolean$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O O O O O O O O O O $Event$ O O O O O O O O O O O O O O O O O O O O O O $Event$ O O O O O O O O O O O O O O O O O O O O O O O O $boolean$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $IModalContent$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { Injectable , Output , EventEmitter , Inject } from 's' ; import { HttpClient , HttpErrorResponse } from 's' ; import { Observable } from 's' ; import { map , catchError } from 's' ; import { IUserLogin } from 's' ; @ Injectable ( ) export class AuthService { port = ( this . window . location . port ) ? 's' + this . window . location . port : 's' ; baseUrl = `template` ; authUrl = this . baseUrl + 's' ; isAuthenticated = false ; redirectUrl : string ; @ Output ( ) authChanged : EventEmitter < boolean > = new EventEmitter < boolean > ( ) ; constructor ( private http , @ Inject ( 's' ) private window ) { } private userAuthChanged ( status ) { this . authChanged . emit ( status ) ; } login ( userLogin ) < boolean > { return this . http . post < boolean > ( this . authUrl + 's' , userLogin ) . pipe ( map ( loggedIn => { this . isAuthenticated = loggedIn ; this . userAuthChanged ( loggedIn ) ; return loggedIn ; } ) , catchError ( this . handleError ) ) ; } logout ( ) < boolean > { return this . http . post < boolean > ( this . authUrl + 's' , null ) . pipe ( map ( loggedOut => { this . isAuthenticated = ! loggedOut ; this . userAuthChanged ( ! loggedOut ) ; return loggedOut ; } ) , catchError ( this . handleError ) ) ; } private handleError ( error ) { console . error ( 's' , error ) ; if ( error . error instanceof Error ) { const errMessage = error . error . message ; return Observable . throw ( errMessage ) ; } return Observable . throw ( error || 's' ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $HttpClient$ O O O O O O O $Window$ O O O O O O $boolean$ O O O O O O O O O O O O $Observable$ O $IUserLogin$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $Observable$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $HttpErrorResponse$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { Injectable } from 's' ; import { CanActivate , Router , ActivatedRouteSnapshot , RouterStateSnapshot } from 's' ; import { Observable } from 's' ; import { AuthService } from 's' ; @ Injectable ( ) export class CanActivateGuard implements CanActivate { constructor ( private authService , private router ) { } canActivate ( route , state ) : Observable < boolean > | Promise < boolean > | boolean { if ( this . authService . isAuthenticated ) { return true ; } this . authService . redirectUrl = state . url ; this . router . navigate ( [ 's' ] ) ; return false ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $AuthService$ O O $Router$ O O O O O $ActivatedRouteSnapshot$ O $RouterStateSnapshot$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { Injectable } from 's' ; import { CanDeactivate , ActivatedRouteSnapshot , RouterStateSnapshot } from 's' ; import { Observable } from 's' ; import { CustomerEditComponent } from 's' ; import { LoggerService } from 's' ; @ Injectable ( ) export class CanDeactivateGuard implements CanDeactivate < CustomerEditComponent > { constructor ( private logger ) { } canDeactivate ( component , route , state ) : Observable < boolean > | Promise < boolean > | boolean { this . logger . log ( `template` ) ; return component . canDeactivate ( ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $LoggerService$ O O O O O $CustomerEditComponent$ O $ActivatedRouteSnapshot$ O $RouterStateSnapshot$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { NgModule } from 's' ; import { RouterModule , Routes } from 's' ; import { CustomerComponent } from 's' ; import { CustomerOrdersComponent } from 's' ; import { CustomerDetailsComponent } from 's' ; import { CustomerEditComponent } from 's' ; import { CanActivateGuard } from 's' ; import { CanDeactivateGuard } from 's' ; const routes = [ { path : 's' , component : CustomerComponent , children : [ { path : 's' , component : CustomerOrdersComponent } , { path : 's' , component : CustomerDetailsComponent } , { path : 's' , component : CustomerEditComponent , canActivate : [ CanActivateGuard ] , canDeactivate : [ CanDeactivateGuard ] } ] } ] ; @ NgModule ( { imports : [ RouterModule . forChild ( routes ) ] , exports : [ RouterModule ] , providers : [ CanActivateGuard , CanDeactivateGuard ] } ) export class CustomerRoutingModule { static components = [ CustomerComponent , CustomerOrdersComponent , CustomerDetailsComponent , CustomerEditComponent ] ; }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $Routes$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { NgModule } from 's' ; import { SharedModule } from 's' ; import { CustomerRoutingModule } from 's' ; @ NgModule ( { imports : [ CustomerRoutingModule , SharedModule ] , declarations : [ CustomerRoutingModule . components ] } ) export class CustomerModule { }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
export class PropertyResolver { static resolve ( path , obj ) { return path . split ( 's' ) . reduce ( ( prev , curr ) => { return ( prev ? prev [ curr ] : undefined ) ; } , obj || self ) ; } }	O O O O O O O $string$ O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { Injectable } from 's' ; import { PropertyResolver } from 's' ; @ Injectable ( ) export class FilterService { constructor ( ) { } filter < T > ( items : T [ ] , data , props : string [ ] ) { return items . filter ( ( item : T ) => { let match = false ; for ( const prop of props ) { if ( prop . indexOf ( 's' ) > - 0 ) { const value = PropertyResolver . resolve ( prop , item ) ; if ( value && value . toUpperCase ( ) . indexOf ( data ) > - 0 ) { match = true ; break ; } continue ; } if ( item [ prop ] . toString ( ) . toUpperCase ( ) . indexOf ( data ) > - 0 ) { match = true ; break ; } } return match ; } ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $string$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { Component , OnInit } from 's' ; import { DataService } from 's' ; import { ICustomer , IPagedResults } from 's' ; import { FilterService } from 's' ; import { LoggerService } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' } ) export class CustomersComponent implements OnInit { title : string ; filterText : string ; customers : ICustomer [ ] = [ ] ; filteredCustomers : ICustomer [ ] = [ ] ; displayMode : DisplayModeEnum ; displayModeEnum = DisplayModeEnum ; totalRecords = 0 ; pageSize = 0 ; constructor ( private dataService , private filterService , private logger ) { } ngOnInit ( ) { this . title = 's' ; this . filterText = 's' ; this . displayMode = DisplayModeEnum . Card ; this . getCustomersPage ( 0 ) ; } changeDisplayMode ( mode ) { this . displayMode = mode ; } pageChanged ( page ) { this . getCustomersPage ( page ) ; } getCustomersPage ( page ) { this . dataService . getCustomersPage ( ( page - 0 ) * this . pageSize , this . pageSize ) . subscribe ( ( response < ICustomer [ ] > ) => { this . customers = this . filteredCustomers = response . results ; this . totalRecords = response . totalRecords ; } , ( err ) => this . logger . log ( err ) , ( ) => this . logger . log ( 's' + page ) ) ; } filterChanged ( data ) { if ( data && this . customers ) { data = data . toUpperCase ( ) ; const props = [ 's' , 's' , 's' , 's' ] ; this . filteredCustomers = this . filterService . filter < ICustomer > ( this . customers , data , props ) ; } else { this . filteredCustomers = this . customers ; } } } enum DisplayModeEnum { Card = 0 , Grid = 0 , Map = 0 }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $DataService$ O O $FilterService$ O O $LoggerService$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $DisplayModeEnum$ O O O O O O O O O O O $number$ O O O O O O O O O O O O $number$ O O O O O O O O O O O O O O O O O O O O O O O O O O $IPagedResults$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $string$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { Injectable } from 's' ; import { ICustomer , IOrder } from 's' ; @ Injectable ( ) export class TrackByService { customer ( index , customer ) { return customer . id ; } order ( index , order ) { return index ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O $number$ O $ICustomer$ O O O O O O O O O O $number$ O $IOrder$ O O O O O O O
import { Component , Input , OnInit , ChangeDetectionStrategy } from 's' ; import { ICustomer } from 's' ; import { TrackByService } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' , styleUrls : [ 's' ] , changeDetection : ChangeDetectionStrategy . OnPush } ) export class CustomersCardComponent implements OnInit { @ Input ( ) customers : ICustomer [ ] = [ ] ; constructor ( public trackbyService ) { } ngOnInit ( ) { } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $TrackByService$ O O O O O O O O O
import { Injectable } from 's' ; import { PropertyResolver } from 's' ; @ Injectable ( ) export class SorterService { property : string = null ; direction = 0 ; sort ( collection : any [ ] , prop ) { this . property = prop ; this . direction = ( this . property === prop ) ? this . direction * - 0 : 0 ; collection . sort ( ( a , b ) => { let aVal ; let bVal ; if ( prop && prop . indexOf ( 's' ) > - 0 ) { aVal = PropertyResolver . resolve ( prop , a ) ; bVal = PropertyResolver . resolve ( prop , b ) ; } else { aVal = a [ prop ] ; bVal = b [ prop ] ; } if ( this . isString ( aVal ) ) { aVal = aVal . trim ( ) . toUpperCase ( ) ; } if ( this . isString ( bVal ) ) { bVal = bVal . trim ( ) . toUpperCase ( ) ; } if ( aVal === bVal ) { return 0 ; } else if ( aVal > bVal ) { return this . direction * - 0 ; } else { return this . direction * 0 ; } } ) ; } isString ( val ) { return ( val && ( typeof val === 's' || val instanceof String ) ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O $any$ O O O O $any$ O O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $boolean$ O $any$ O O O O O O O O O O O O O O O O O O O O
import { Component , Input , OnInit , ChangeDetectionStrategy } from 's' ; import { SorterService } from 's' ; import { TrackByService } from 's' ; import { ICustomer } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' , styleUrls : [ 's' ] , changeDetection : ChangeDetectionStrategy . OnPush } ) export class CustomersGridComponent implements OnInit { @ Input ( ) customers : ICustomer [ ] = [ ] ; constructor ( private sorterService , public trackbyService ) { } ngOnInit ( ) { } sort ( prop ) { this . sorterService . sort ( this . customers , prop ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $SorterService$ O O $TrackByService$ O O O O O O O O O O $string$ O O O O O O O O O O O O O O O O O
import { NgModule } from 's' ; import { RouterModule , Routes } from 's' ; import { CustomersComponent } from 's' ; import { CustomersCardComponent } from 's' ; import { CustomersGridComponent } from 's' ; const routes = [ { path : 's' , component : CustomersComponent } ] ; @ NgModule ( { imports : [ RouterModule . forChild ( routes ) ] , exports : [ RouterModule ] } ) export class CustomersRoutingModule { static components = [ CustomersComponent , CustomersCardComponent , CustomersGridComponent ] ; }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $Routes$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { NgModule } from 's' ; import { SharedModule } from 's' ; import { CustomersRoutingModule } from 's' ; @ NgModule ( { imports : [ CustomersRoutingModule , SharedModule ] , declarations : [ CustomersRoutingModule . components ] } ) export class CustomersModule { }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { Component , OnInit } from 's' ; import { DataService } from 's' ; import { ICustomer , IPagedResults } from 's' ; import { TrackByService } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' } ) export class OrdersComponent implements OnInit { customers : ICustomer [ ] ; totalRecords = 0 ; pageSize = 0 ; constructor ( private dataService , private trackbyService ) { } ngOnInit ( ) { this . getCustomersPage ( 0 ) ; } pageChanged ( page ) { this . getCustomersPage ( page ) ; } getCustomersPage ( page ) { this . dataService . getCustomersPage ( ( page - 0 ) * this . pageSize , this . pageSize ) . subscribe ( ( response < ICustomer [ ] > ) => { this . totalRecords = response . totalRecords ; this . customers = response . results ; } ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $DataService$ O O $TrackByService$ O O O O O O O O O O O O O O O O O $number$ O O O O O O O O O O O O $number$ O O O O O O O O O O O O O O O O O O O O O O O O O O $IPagedResults$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { NgModule } from 's' ; import { RouterModule , Routes } from 's' ; import { OrdersComponent } from 's' ; const routes = [ { path : 's' , component : OrdersComponent } ] ; @ NgModule ( { imports : [ RouterModule . forChild ( routes ) ] , exports : [ RouterModule ] } ) export class OrdersRoutingModule { static components = [ OrdersComponent ] ; }	O O O O O O O O O O O O O O O O O O O O O O O O $Routes$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { NgModule } from 's' ; import { SharedModule } from 's' ; import { OrdersRoutingModule } from 's' ; @ NgModule ( { imports : [ SharedModule , OrdersRoutingModule ] , declarations : [ OrdersRoutingModule . components ] } ) export class OrdersModule { }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { NgModule } from 's' ; import { RouterModule , Routes , PreloadAllModules , NoPreloading } from 's' ; import { PreloadModulesStrategy } from 's' ; const app_routes = [ { path : 's' , pathMatch : 's' , redirectTo : 's' } , { path : 's' , data : { preload : true } , loadChildren : ( ) => import ( 's' ) . then ( m => m . CustomerModule ) } , { path : 's' , loadChildren : ( ) => import ( 's' ) . then ( m => m . CustomersModule ) } , { path : 's' , data : { preload : true } , loadChildren : ( ) => import ( 's' ) . then ( m => m . OrdersModule ) } , { path : 's' , loadChildren : ( ) => import ( 's' ) . then ( m => m . AboutModule ) } , { path : 's' , pathMatch : 's' , redirectTo : 's' } ] ; @ NgModule ( { imports : [ RouterModule . forRoot ( app_routes , { preloadingStrategy : PreloadModulesStrategy } ) ] , exports : [ RouterModule ] , providers : [ PreloadModulesStrategy ] } ) export class AppRoutingModule { }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O $Routes$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { Component } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' } ) export class AppComponent { }	O O O O O O O O O O O O O O O O O O O O O O O O O
import { AbstractControl } from 's' ; export class ValidationService { static getValidatorErrorMessage ( code ) { const config = { 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' } ; return config [ code ] ; } static creditCardValidator ( control ) { if ( control . value . match ( "s" ) ) { return null ; } else { return { 's' : true } ; } } static emailValidator ( control ) { if ( control . value . match ( "s" ) ) { return null ; } else { return { 's' : true } ; } } static passwordValidator ( control ) { if ( control . value . match ( "s" ) ) { return null ; } else { return { 's' : true } ; } } }	O O O O O O O O O O O O O O $string$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $AbstractControl$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $AbstractControl$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $AbstractControl$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { Component , OnInit } from 's' ; import { Router } from 's' ; import { FormBuilder , FormGroup , Validators } from 's' ; import { AuthService } from 's' ; import { ValidationService } from 's' ; import { IUserLogin } from 's' ; import { GrowlerService , GrowlerMessageType } from 's' ; import { LoggerService } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' , styleUrls : [ 's' ] } ) export class LoginComponent implements OnInit { loginForm : FormGroup ; errorMessage : string ; constructor ( private formBuilder , private router , private authService , private growler , private logger ) { } ngOnInit ( ) { this . buildForm ( ) ; } buildForm ( ) { this . loginForm = this . formBuilder . group ( { email : [ 's' , [ Validators . required , ValidationService . emailValidator ] ] , password : [ 's' , [ Validators . required , ValidationService . passwordValidator ] ] } ) ; } submit ( { value , valid } : { value : IUserLogin , valid : boolean } ) { this . authService . login ( value ) . subscribe ( ( status ) => { if ( status ) { this . growler . growl ( 's' , GrowlerMessageType . Info ) ; if ( this . authService . redirectUrl ) { const redirectUrl = this . authService . redirectUrl ; this . authService . redirectUrl = 's' ; this . router . navigate ( [ redirectUrl ] ) ; } else { this . router . navigate ( [ 's' ] ) ; } } else { const loginError = 's' ; this . errorMessage = loginError ; this . growler . growl ( loginError , GrowlerMessageType . Danger ) ; } } , ( err ) => this . logger . log ( err ) ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $FormBuilder$ O O $Router$ O O $AuthService$ O O $GrowlerService$ O O $LoggerService$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $boolean$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O O O O O O O O
import { NgModule } from 's' ; import { RouterModule , Routes } from 's' ; import { LoginComponent } from 's' ; const routes = [ { path : 's' , component : LoginComponent } ] ; @ NgModule ( { imports : [ RouterModule . forChild ( routes ) ] , exports : [ RouterModule ] } ) export class LoginRoutingModule { static components = [ LoginComponent ] ; }	O O O O O O O O O O O O O O O O O O O O O O O O $Routes$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { NgModule } from 's' ; import { ReactiveFormsModule } from 's' ; import { SharedModule } from 's' ; import { LoginRoutingModule } from 's' ; @ NgModule ( { imports : [ ReactiveFormsModule , SharedModule , LoginRoutingModule ] , declarations : [ LoginRoutingModule . components ] } ) export class LoginModule { }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { Component , OnInit , Input , Output , EventEmitter } from 's' ; import { GrowlerService , GrowlerMessageType } from 's' ; import { LoggerService } from 's' ; @ Component ( { selector : 's' , template : `template` , styleUrls : [ 's' ] } ) export class GrowlerComponent implements OnInit { private growlCount = 0 ; growls : Growl [ ] = [ ] ; @ Input ( ) position = 's' ; @ Input ( ) timeout = 0 ; constructor ( private growlerService , private logger ) { growlerService . growl = this . growl . bind ( this ) ; } ngOnInit ( ) { } growl ( message , growlType ) { this . growlCount ++ ; const bootstrapAlertType = GrowlerMessageType [ growlType ] . toLowerCase ( ) ; const messageType = `template` ; const growl = new Growl ( this . growlCount , message , messageType , this . timeout , this ) ; this . growls . push ( growl ) ; return growl . id ; } removeGrowl ( id ) { this . growls . forEach ( ( growl , index ) => { if ( growl . id === id ) { this . growls . splice ( index , 0 ) ; this . growlCount -- ; this . logger . log ( 's' + id ) ; } } ) ; } } class Growl { enabled : boolean ; timeoutId : number ; constructor ( public id , public message , public messageType , private timeout , private growlerContainer ) { this . show ( ) ; } show ( ) { window . setTimeout ( ( ) => { this . enabled = true ; this . setTimeout ( ) ; } , 0 ) ; } setTimeout ( ) { window . setTimeout ( ( ) => { this . hide ( ) ; } , this . timeout ) ; } hide ( ) { this . enabled = false ; window . setTimeout ( ( ) => { this . growlerContainer . removeGrowl ( this . id ) ; } , this . timeout ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $GrowlerService$ O O $LoggerService$ O O O O O O O O O O O O O O O O O O O O O $number$ O $string$ O $GrowlerMessageType$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $number$ O O O O O O O O O $Growl$ O $number$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $number$ O O $string$ O O $string$ O O $number$ O O $GrowlerComponent$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
export class EnsureModuleLoadedOnceGuard { constructor ( targetModule ) { if ( targetModule ) { throw new Error ( `template` ) ; } } }	O O O O O O $any$ O O O O O O O O O O O O O O O O O
import { NgModule , Optional , SkipSelf } from 's' ; import { CommonModule } from 's' ; import { GrowlerComponent } from 's' ; import { GrowlerService } from 's' ; import { EnsureModuleLoadedOnceGuard } from 's' ; @ NgModule ( { imports : [ CommonModule ] , exports : [ GrowlerComponent ] , providers : [ GrowlerService ] , declarations : [ GrowlerComponent ] } ) export class GrowlerModule extends EnsureModuleLoadedOnceGuard { constructor ( @ Optional ( ) @ SkipSelf ( ) parentModule ) { super ( parentModule ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $GrowlerModule$ O O O O O O O O O
import { Component , OnInit , EventEmitter } from 's' ; import { ModalService , IModalContent } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' , styleUrls : [ 's' ] } ) export class ModalComponent implements OnInit { modalVisible = false ; modalVisibleAnimate = false ; modalContent : IModalContent = { } ; cancel : ( ) => void ; ok : ( ) => void ; defaultModalContent : IModalContent = { header : 's' , body : 's' , cancelButtonText : 's' , OKButtonText : 's' , cancelButtonVisible : true } ; constructor ( private modalService ) { modalService . show = this . show . bind ( this ) ; modalService . hide = this . hide . bind ( this ) ; } ngOnInit ( ) { } show ( modalContent ) { this . modalContent = Object . assign ( this . defaultModalContent , modalContent ) ; this . modalVisible = true ; setTimeout ( ( ) => this . modalVisibleAnimate = true ) ; const promise = new Promise < boolean > ( ( resolve , reject ) => { this . cancel = ( ) => { this . hide ( ) ; resolve ( false ) ; } ; this . ok = ( ) => { this . hide ( ) ; resolve ( true ) ; } ; } ) ; return promise ; } hide ( ) { this . modalVisibleAnimate = false ; setTimeout ( ( ) => this . modalVisible = false , 0 ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ModalService$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $IModalContent$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { NgModule , Optional , SkipSelf } from 's' ; import { CommonModule } from 's' ; import { ModalComponent } from 's' ; import { ModalService } from 's' ; import { EnsureModuleLoadedOnceGuard } from 's' ; @ NgModule ( { imports : [ CommonModule ] , exports : [ ModalComponent ] , declarations : [ ModalComponent ] , providers : [ ModalService ] } ) export class ModalModule extends EnsureModuleLoadedOnceGuard { constructor ( @ Optional ( ) @ SkipSelf ( ) parentModule ) { super ( parentModule ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ModalModule$ O O O O O O O O O
import { Injectable } from 's' ; import { Subject , Subscription , Observable } from 's' ; import { filter , map } from 's' ; @ Injectable ( ) export class EventBusService { subject = new Subject < any > ( ) ; constructor ( ) { } on ( event , action ) { return this . subject . pipe ( filter ( ( e ) => { return e . name === event ; } ) , map ( ( e ) => { return e . value ; } ) ) . subscribe ( action ) ; } emit ( event ) { this . subject . next ( event ) ; } } export class EmitEvent { constructor ( public name , public value ? ) { } } export enum Events { httpRequest , httpResponse }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $Subscription$ O $Events$ O $any$ O O O O O O O O O O O O $EmitEvent$ O O O O O O O O O O O O O O O O $EmitEvent$ O O O O O O O O O O O O O O O O O O O O $EmitEvent$ O O O O O O O O O O O O O O O O O O O O $any$ O O O $any$ O O O O O O O O O O O O
import { Injectable } from 's' ; import { HttpEvent , HttpInterceptor , HttpHandler , HttpRequest , HttpResponse } from 's' ; import { Observable , of } from 's' ; import { tap , delay , catchError } from 's' ; import { EventBusService , EmitEvent , Events } from 's' ; @ Injectable ( ) export class OverlayRequestResponseInterceptor implements HttpInterceptor { constructor ( private eventBus ) { } intercept ( req < any > , next ) < HttpEvent < any > > { const randomTime = this . getRandomIntInclusive ( 0 , 0 ) ; const started = Date . now ( ) ; this . eventBus . emit ( new EmitEvent ( Events . httpRequest ) ) ; return next . handle ( req ) . pipe ( delay ( randomTime ) , tap ( event => { if ( event instanceof HttpResponse ) { const elapsed = Date . now ( ) - started ; this . eventBus . emit ( new EmitEvent ( Events . httpResponse ) ) ; } } ) , catchError ( err => { this . eventBus . emit ( new EmitEvent ( Events . httpResponse ) ) ; return of ( null ) ; } ) ) ; } getRandomIntInclusive ( min , max ) { min = Math . ceil ( min ) ; max = Math . floor ( max ) ; return Math . floor ( Math . random ( ) * ( max - min + 0 ) ) + min ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $EventBusService$ O O O $Observable$ O $HttpRequest$ O O O O $HttpHandler$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { Component , OnInit , Input , OnDestroy } from 's' ; import { EventBusService , Events } from 's' ; import { Subscription } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' , styleUrls : [ 's' ] } ) export class OverlayComponent implements OnInit , OnDestroy { httpRequestSub : Subscription ; httpResponseSub : Subscription ; enabled = false ; queue = [ ] ; timerId : number = null ; timerHideId : number = null ; @ Input ( ) delay = 0 ; constructor ( private eventBus ) { } ngOnInit ( ) { this . httpRequestSub = this . eventBus . on ( Events . httpRequest , ( ( ) => { this . queue . push ( { } ) ; if ( this . queue . length === 0 ) { setTimeout ( ( ) => { if ( this . queue . length ) { this . enabled = true ; } } , this . delay ) ; } } ) ) ; this . httpResponseSub = this . eventBus . on ( Events . httpResponse , ( ( ) => { this . queue . pop ( ) ; if ( this . queue . length === 0 ) { setTimeout ( ( ) => { if ( this . queue . length === 0 ) { this . enabled = false ; } } , this . delay ) ; } } ) ) ; } ngOnDestroy ( ) { this . httpRequestSub . unsubscribe ( ) ; this . httpResponseSub . unsubscribe ( ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $EventBusService$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { NgModule , Optional , SkipSelf } from 's' ; import { CommonModule } from 's' ; import { HTTP_INTERCEPTORS } from 's' ; import { OverlayRequestResponseInterceptor } from 's' ; import { OverlayComponent } from 's' ; import { EnsureModuleLoadedOnceGuard } from 's' ; @ NgModule ( { imports : [ CommonModule ] , exports : [ OverlayComponent ] , declarations : [ OverlayComponent ] , providers : [ { provide : HTTP_INTERCEPTORS , useClass : OverlayRequestResponseInterceptor , multi : true , } ] } ) export class OverlayModule extends EnsureModuleLoadedOnceGuard { constructor ( @ Optional ( ) @ SkipSelf ( ) parentModule ) { super ( parentModule ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $OverlayModule$ O O O O O O O O O
import { Component , OnInit , OnDestroy } from 's' ; import { Router } from 's' ; import { Subscription } from 's' ; import { AuthService } from 's' ; import { GrowlerService , GrowlerMessageType } from 's' ; import { LoggerService } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' } ) export class NavbarComponent implements OnInit , OnDestroy { isCollapsed : boolean ; loginLogoutText = 's' ; sub : Subscription ; constructor ( private router , private authservice , private growler , private logger ) { } ngOnInit ( ) { this . sub = this . authservice . authChanged . subscribe ( ( loggedIn ) => { this . setLoginLogoutText ( ) ; } , ( err ) => this . logger . log ( err ) ) ; } ngOnDestroy ( ) { this . sub . unsubscribe ( ) ; } loginOrOut ( ) { const isAuthenticated = this . authservice . isAuthenticated ; if ( isAuthenticated ) { this . authservice . logout ( ) . subscribe ( ( status ) => { this . setLoginLogoutText ( ) ; this . growler . growl ( 's' , GrowlerMessageType . Info ) ; this . router . navigate ( [ 's' ] ) ; return ; } , ( err ) => this . logger . log ( err ) ) ; } this . redirectToLogin ( ) ; } redirectToLogin ( ) { this . router . navigate ( [ 's' ] ) ; } setLoginLogoutText ( ) { this . loginLogoutText = ( this . authservice . isAuthenticated ) ? 's' : 's' ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $Router$ O O $AuthService$ O O $GrowlerService$ O O $LoggerService$ O O O O O O O O O O O O O O O O O O O O $boolean$ O O O O O O O O O O O O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $boolean$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { Injectable } from 's' ; @ Injectable ( ) export class DialogService { promise : Promise < boolean > ; message = 's' ; confirm ( message ? ) { if ( message ) { this . message = message ; } this . promise = new Promise < boolean > ( this . resolver ) ; return this . promise ; } resolver ( resolve ) { return resolve ( window . confirm ( 's' ) ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $string$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O O O O O O O O O
import { Injectable } from 's' ; import { HttpEvent , HttpInterceptor , HttpHandler , HttpRequest } from 's' ; import { Observable } from 's' ; @ Injectable ( ) export class AuthInterceptor implements HttpInterceptor { constructor ( ) { } intercept ( req < any > , next ) < HttpEvent < any > > { const authHeader = 's' ; const authReq = req . clone ( { headers : req . headers . set ( 's' , authHeader ) } ) ; return next . handle ( authReq ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $Observable$ O $HttpRequest$ O O O O $HttpHandler$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { NgModule , Optional , SkipSelf } from 's' ; import { CommonModule } from 's' ; import { RouterModule } from 's' ; import { HttpClientModule , HTTP_INTERCEPTORS } from 's' ; import { GrowlerModule } from 's' ; import { ModalModule } from 's' ; import { OverlayModule } from 's' ; import { DataService } from 's' ; import { NavbarComponent } from 's' ; import { FilterService } from 's' ; import { SorterService } from 's' ; import { TrackByService } from 's' ; import { DialogService } from 's' ; import { EnsureModuleLoadedOnceGuard } from 's' ; import { AuthService } from 's' ; import { EventBusService } from 's' ; import { AuthInterceptor } from 's' ; @ NgModule ( { imports : [ CommonModule , RouterModule , HttpClientModule , GrowlerModule , ModalModule , OverlayModule ] , exports : [ GrowlerModule , RouterModule , HttpClientModule , ModalModule , OverlayModule , NavbarComponent ] , declarations : [ NavbarComponent ] , providers : [ SorterService , FilterService , DataService , TrackByService , DialogService , AuthService , EventBusService , { provide : HTTP_INTERCEPTORS , useClass : AuthInterceptor , multi : true , } , { provide : 's' , useFactory : ( ) => window } ] } ) export class CoreModule extends EnsureModuleLoadedOnceGuard { constructor ( @ Optional ( ) @ SkipSelf ( ) parentModule ) { super ( parentModule ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $CoreModule$ O O O O O O O O O
import { NgModule } from 's' ; import { BrowserModule } from 's' ; import { AppComponent } from 's' ; import { AppRoutingModule } from 's' ; import { LoginModule } from 's' ; import { CoreModule } from 's' ; import { SharedModule } from 's' ; @ NgModule ( { imports : [ BrowserModule , LoginModule , AppRoutingModule , CoreModule , SharedModule ] , declarations : [ AppComponent ] , bootstrap : [ AppComponent ] } ) export class AppModule { }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { Type } from 's' ; import { ActivatedRouteSnapshot , ActivatedRoute , UrlSegment , Params , Data , Route , ParamMap } from 's' ; import { Observable , of } from 's' ; import { ICustomer , IPagedResults } from 's' ; export class MockDataService { constructor ( ) { } getCustomer ( id ) < ICustomer > { if ( id === 0 ) { return of ( customers . slice ( 0 , 0 ) [ 0 ] ) ; } else { return of ( null ) ; } } getCustomersPage ( page , pageSize ) < IPagedResults < ICustomer [ ] > > { const topVal = pageSize , skipVal = page , skip = ( isNaN ( skipVal ) ) ? 0 : + skipVal ; let top = ( isNaN ( topVal ) ) ? 0 : skip + ( + topVal ) ; if ( top > customers . length ) { top = skip + ( customers . length - skip ) ; } return of ( { totalRecords : customers . length , results : customers . slice ( skip , top ) } ) ; } getCustomers ( ) < ICustomer [ ] > { return of ( customers ) ; } } export class MockActivatedRoute implements ActivatedRoute { snapshot : ActivatedRouteSnapshot ; url : Observable < UrlSegment [ ] > ; params : Observable < Params > ; queryParams : Observable < Params > ; fragment : Observable < string > ; data : Observable < Data > ; outlet : string ; component : Type < any > | string ; routeConfig : Route ; root : ActivatedRoute ; parent : ActivatedRoute ; firstChild : ActivatedRoute ; children : ActivatedRoute [ ] ; pathFromRoot : ActivatedRoute [ ] ; paramMap : Observable < ParamMap > ; queryParamMap : Observable < ParamMap > ; toString ( ) { return 's' ; } } export function getActivatedRouteWithParent ( params : any [ ] ) { const route = new MockActivatedRoute ( ) ; route . parent = new MockActivatedRoute ( ) ; if ( params ) { for ( const param of params ) { route . parent . params = of ( param ) ; } } return route ; } export const customers = [ { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : { 's' : 's' , 's' : 's' } , 's' : [ { 's' : 's' , 's' : 0 } , { 's' : 's' , 's' : 0 } ] , 's' : 0 , 's' : - 0 } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : { 's' : 's' , 's' : 's' } , 's' : [ { 's' : 's' , 's' : 0 } , { 's' : 's' , 's' : 0 } ] , 's' : 0 , 's' : - 0 } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : { 's' : 's' , 's' : 's' } , 's' : [ { 's' : 's' , 's' : 0 } , { 's' : 's' , 's' : 0 } , { 's' : 's' , 's' : 0 } ] , 's' : 0 , 's' : - 0 } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : { 's' : 's' , 's' : 's' } , 's' : [ { 's' : 's' , 's' : 0 } , { 's' : 's' , 's' : 0 } ] , 's' : 0 , 's' : - 0 } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : { 's' : 's' , 's' : 's' } , 's' : [ { 's' : 's' , 's' : 0 } , { 's' : 's' , 's' : 0 } ] , 's' : 0 , 's' : - 0 } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : { 's' : 's' , 's' : 's' } , 's' : [ { 's' : 's' , 's' : 0 } , { 's' : 's' , 's' : 0 } ] , 's' : 0 , 's' : - 0 } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : { 's' : 's' , 's' : 's' } , 's' : [ { 's' : 's' , 's' : 0 } , { 's' : 's' , 's' : 0 } , { 's' : 's' , 's' : 0 } ] , 's' : 0 , 's' : - 0 } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : { 's' : 's' , 's' : 's' } , 's' : [ { 's' : 's' , 's' : 0 } , { 's' : 's' , 's' : 0 } ] , 's' : 0 , 's' : - 0 } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : { 's' : 's' , 's' : 's' } , 's' : [ { 's' : 's' , 's' : 0 } , { 's' : 's' , 's' : 0 } ] , 's' : 0 , 's' : - 0 } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : { 's' : 's' , 's' : 's' } , 's' : [ { 's' : 's' , 's' : 0 } , { 's' : 's' , 's' : 0 } , { 's' : 's' , 's' : 0 } ] , 's' : 0 , 's' : - 0 } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : { 's' : 's' , 's' : 's' } , 's' : 0 , 's' : - 0 } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : { 's' : 's' , 's' : 's' } , 's' : 0 , 's' : - 0 } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : { 's' : 's' , 's' : 's' } , 's' : [ { 's' : 's' , 's' : 0 } , { 's' : 's' , 's' : 0 } , { 's' : 's' , 's' : 0 } ] , 's' : 0 , 's' : - 0 } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : { 's' : 's' , 's' : 's' } , 's' : 0 , 's' : - 0 } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : { 's' : 's' , 's' : 's' } , 's' : 0 , 's' : - 0 } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : { 's' : 's' , 's' : 's' } , 's' : 0 , 's' : - 0 } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : { 's' : 's' , 's' : 's' } , 's' : 0 , 's' : - 0 } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : { 's' : 's' , 's' : 's' } , 's' : 0 , 's' : - 0 } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : { 's' : 's' , 's' : 's' } , 's' : 0 , 's' : 0 } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : { 's' : 's' , 's' : 's' } , 's' : 0 , 's' : - 0 } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : { 's' : 's' , 's' : 's' } , 's' : [ { 's' : 's' , 's' : 0 } , { 's' : 's' , 's' : 0 } ] , 's' : 0 , 's' : 0 } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : { 's' : 's' , 's' : 's' } , 's' : - 0 , 's' : - 0 } ] ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $Observable$ O $number$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $Observable$ O $number$ O $number$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $Observable$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $string
import { sandboxOf } from 's' ; import { SharedModule } from 's' ; import { CoreModule } from 's' ; import { DataService } from 's' ; import { CustomerDetailsComponent } from 's' ; import { MockDataService , MockActivatedRoute , getActivatedRouteWithParent } from 's' ; import { ActivatedRoute } from 's' ; const sandboxConfig = { imports : [ SharedModule , CoreModule ] , providers : [ { provide : DataService , useClass : MockDataService } , { provide : ActivatedRoute , useFactory : ( ) => { const route = getActivatedRouteWithParent ( [ { id : 's' } ] ) ; return route ; } } ] , label : 's' } ; export default sandboxOf ( CustomerDetailsComponent , sandboxConfig ) . add ( 's' , { template : `template` } ) . add ( 's' , { template : `template` , providers : [ { provide : ActivatedRoute , useFactory : ( ) => { const route = getActivatedRouteWithParent ( [ { id : null } ] ) ; return route ; } } ] } ) ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { sandboxOf } from 's' ; import { SharedModule } from 's' ; import { CoreModule } from 's' ; import { DataService } from 's' ; import { CustomerOrdersComponent } from 's' ; import { MockDataService , MockActivatedRoute , getActivatedRouteWithParent } from 's' ; import { ActivatedRoute } from 's' ; const sandboxConfig = { imports : [ SharedModule , CoreModule ] , providers : [ { provide : DataService , useClass : MockDataService } , { provide : ActivatedRoute , useFactory : ( ) => { const route = getActivatedRouteWithParent ( [ { id : 's' } ] ) ; return route ; } } ] , label : 's' } ; export default sandboxOf ( CustomerOrdersComponent , sandboxConfig ) . add ( 's' , { template : `template` } ) . add ( 's' , { template : `template` , providers : [ { provide : ActivatedRoute , useFactory : ( ) => { const route = getActivatedRouteWithParent ( [ { id : null } ] ) ; return route ; } } ] } ) ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { sandboxOf } from 's' ; import { SharedModule } from 's' ; import { CustomersCardComponent } from 's' ; import { RouterTestingModule } from 's' ; import { CoreModule } from 's' ; import { customers } from 's' ; const sandboxConfig = { imports : [ SharedModule , CoreModule , RouterTestingModule ] , label : 's' } ; export default sandboxOf ( CustomersCardComponent , sandboxConfig ) . add ( 's' , { template : `template` , context : { customers : customers } } ) . add ( 's' , { template : `template` , context : { customers : customers . slice ( 0 , 0 ) } } ) . add ( 's' , { template : `template` , context : { customers : customers . slice ( 0 , 0 ) } } ) . add ( 's' , { template : `template` } ) ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { sandboxOf } from 's' ; import { SharedModule } from 's' ; import { CustomersGridComponent } from 's' ; import { RouterTestingModule } from 's' ; import { CoreModule } from 's' ; import { customers } from 's' ; const sandboxConfig = { imports : [ SharedModule , CoreModule , RouterTestingModule ] , label : 's' } ; export default sandboxOf ( CustomersGridComponent , sandboxConfig ) . add ( 's' , { template : `template` , context : { customers : customers } } ) . add ( 's' , { template : `template` , context : { customers : customers . slice ( 0 , 0 ) } } ) . add ( 's' , { template : `template` , context : { customers : customers . slice ( 0 , 0 ) } } ) . add ( 's' , { template : `template` } ) ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { RouterTestingModule } from 's' ; import { sandboxOf } from 's' ; import { SharedModule } from 's' ; import { CustomersComponent } from 's' ; import { CustomersCardComponent } from 's' ; import { CustomersGridComponent } from 's' ; import { CoreModule } from 's' ; import { customers , MockDataService } from 's' ; import { DataService } from 's' ; const sandboxConfig = { imports : [ SharedModule , CoreModule , RouterTestingModule ] , declarations : [ CustomersCardComponent , CustomersGridComponent ] , providers : [ { provide : DataService , useClass : MockDataService } ] , label : 's' } ; export default sandboxOf ( CustomersComponent , sandboxConfig ) . add ( 's' , { template : `template` } ) ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { trigger , state , animate , style , transition } from 's' ; export function routerTransition ( ) { return slideToLeft ( ) ; } function slideToRight ( ) { return trigger ( 's' , [ state ( 's' , style ( { position : 's' , width : 's' } ) ) , state ( 's' , style ( { position : 's' , width : 's' } ) ) , transition ( 's' , [ style ( { transform : 's' } ) , animate ( 's' , style ( { transform : 's' } ) ) ] ) , transition ( 's' , [ style ( { transform : 's' } ) , animate ( 's' , style ( { transform : 's' } ) ) ] ) ] ) ; } function slideToLeft ( ) { return trigger ( 's' , [ state ( 's' , style ( { position : 's' , width : 's' } ) ) , state ( 's' , style ( { position : 's' , width : 's' } ) ) , transition ( 's' , [ style ( { transform : 's' } ) , animate ( 's' , style ( { transform : 's' } ) ) ] ) , transition ( 's' , [ style ( { transform : 's' } ) , animate ( 's' , style ( { transform : 's' } ) ) ] ) ] ) ; } function slideToBottom ( ) { return trigger ( 's' , [ state ( 's' , style ( { position : 's' , width : 's' , height : 's' } ) ) , state ( 's' , style ( { position : 's' , width : 's' , height : 's' } ) ) , transition ( 's' , [ style ( { transform : 's' } ) , animate ( 's' , style ( { transform : 's' } ) ) ] ) , transition ( 's' , [ style ( { transform : 's' } ) , animate ( 's' , style ( { transform : 's' } ) ) ] ) ] ) ; } function slideToTop ( ) { return trigger ( 's' , [ state ( 's' , style ( { position : 's' , width : 's' , height : 's' } ) ) , state ( 's' , style ( { position : 's' , width : 's' , height : 's' } ) ) , transition ( 's' , [ style ( { transform : 's' } ) , animate ( 's' , style ( { transform : 's' } ) ) ] ) , transition ( 's' , [ style ( { transform : 's' } ) , animate ( 's' , style ( { transform : 's' } ) ) ] ) ] ) ; }	
export const environment = { production : true } ;	O O O O O O O O O O
import { platformBrowserDynamic } from 's' ; import { PlaygroundModule } from 's' ; PlaygroundModule . configure ( { selector : 's' , overlay : false , modules : [ ] } ) ; platformBrowserDynamic ( ) . bootstrapModule ( PlaygroundModule ) ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { enableProdMode } from 's' ; import { platformBrowserDynamic } from 's' ; import { AppModule } from 's' ; import { environment } from 's' ; if ( environment . production ) { enableProdMode ( ) ; } platformBrowserDynamic ( ) . bootstrapModule ( AppModule ) . catch ( err => console . log ( err ) ) ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import 's' ; import 's' ; import 's' ;	O O O O O O O O O
import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import { getTestBed } from 's' ; import { BrowserDynamicTestingModule , platformBrowserDynamicTesting } from 's' ; declare const __karma__ ; declare const require ; __karma__ . loaded = function ( ) { } ; getTestBed ( ) . initTestEnvironment ( BrowserDynamicTestingModule , platformBrowserDynamicTesting ( ) ) ; const context = require . context ( 's' , true , "s" ) ; context . keys ( ) . map ( context ) ; __karma__ . start ( ) ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O