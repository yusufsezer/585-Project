import Vue , { VNode } from 's' declare global { interface NumberConstructor { [ 's' ] : number } interface StringConstructor { [ 's' ] : string } interface BooleanConstructor { [ 's' ] : boolean } namespace JSX { interface Element extends VNode { } interface ElementClass extends Vue { } interface ElementAttributesProperty { $props : { } ; } interface SVGAttributes extends HTMLAttributes { accentHeight ? : number | string ; accumulate ? : "s" | "s" ; additive ? : "s" | "s" ; alignmentBaseline ? : "s" | "s" | "s" | "s" | "s" | "s" | "s" | "s" | "s" | "s" | "s" | "s" | "s" ; allowReorder ? : "s" | "s" ; alphabetic ? : number | string ; amplitude ? : number | string ; arabicForm ? : "s" | "s" | "s" | "s" ; ascent ? : number | string ; attributeName ? : string ; attributeType ? : string ; autoReverse ? : number | string ; azimuth ? : number | string ; baseFrequency ? : number | string ; baselineShift ? : number | string ; baseProfile ? : number | string ; bbox ? : number | string ; begin ? : number | string ; bias ? : number | string ; by ? : number | string ; calcMode ? : number | string ; capHeight ? : number | string ; clip ? : number | string ; clipPath ? : string ; clipPathUnits ? : number | string ; clipRule ? : number | string ; colorInterpolation ? : number | string ; colorInterpolationFilters ? : "s" | "s" | "s" | "s" ; colorProfile ? : number | string ; colorRendering ? : number | string ; contentScriptType ? : number | string ; contentStyleType ? : number | string ; cursor ? : number | string ; cx ? : number | string ; cy ? : number | string ; d ? : string ; decelerate ? : number | string ; descent ? : number | string ; diffuseConstant ? : number | string ; direction ? : number | string ; display ? : number | string ; divisor ? : number | string ; dominantBaseline ? : number | string ; dur ? : number | string ; dx ? : number | string ; dy ? : number | string ; edgeMode ? : number | string ; elevation ? : number | string ; enableBackground ? : number | string ; end ? : number | string ; exponent ? : number | string ; externalResourcesRequired ? : number | string ; fill ? : string ; fillOpacity ? : number | string ; fillRule ? : "s" | "s" | "s" ; filter ? : string ; filterRes ? : number | string ; filterUnits ? : number | string ; floodColor ? : number | string ; floodOpacity ? : number | string ; focusable ? : number | string ; fontFamily ? : string ; fontSize ? : number | string ; fontSizeAdjust ? : number | string ; fontStretch ? : number | string ; fontStyle ? : number | string ; fontVariant ? : number | string ; fontWeight ? : number | string ; format ? : number | string ; from ? : number | string ; fx ? : number | string ; fy ? : number | string ; 0 ? : number | string ; 0 ? : number | string ; glyphName ? : number | string ; glyphOrientationHorizontal ? : number | string ; glyphOrientationVertical ? : number | string ; glyphRef ? : number | string ; gradientTransform ? : string ; gradientUnits ? : string ; hanging ? : number | string ; horizAdvX ? : number | string ; horizOriginX ? : number | string ; ideographic ? : number | string ; imageRendering ? : number | string ; 0 ? : number | string ; in ? : string ; intercept ? : number | string ; 0 ? : number | string ; 0 ? : number | string ; 0 ? : number | string ; 0 ? : number | string ; k ? : number | string ; kernelMatrix ? : number | string ; kernelUnitLength ? : number | string ; kerning ? : number | string ; keyPoints ? : number | string ; keySplines ? : number | string ; keyTimes ? : number | string ; lengthAdjust ? : number | string ; letterSpacing ? : number | string ; lightingColor ? : number | string ; limitingConeAngle ? : number | string ; local ? : number | string ; markerEnd ? : string ; markerHeight ? : number | string ; markerMid ? : string ; markerStart ? : string ; markerUnits ? : number | string ; markerWidth ? : number | string ; mask ? : string ; maskContentUnits ? : number | string ; maskUnits ? : number | string ; mathematical ? : number | string ; mode ? : number | string ; numOctaves ? : number | string ; offset ? : number | string ; opacity ? : number | string ; operator ? : number | string ; order ? : number | string ; orient ? : number | string ; orientation ? : number | string ; origin ? : number | string ; overflow ? : number | string ; overlinePosition ? : number | string ; overlineThickness ? : number | string ; paintOrder ? : number | string ; 0 ? : number | string ; pathLength ? : number | string ; patternContentUnits ? : string ; patternTransform ? : number | string ; patternUnits ? : string ; pointerEvents ? : number | string ; points ? : string ; pointsAtX ? : number | string ; pointsAtY ? : number | string ; pointsAtZ ? : number | string ; preserveAlpha ? : number | string ; preserveAspectRatio ? : string ; primitiveUnits ? : number | string ; r ? : number | string ; radius ? : number | string ; refX ? : number | string ; refY ? : number | string ; renderingIntent ? : number | string ; repeatCount ? : number | string ; repeatDur ? : number | string ; requiredExtensions ? : number | string ; requiredFeatures ? : number | string ; restart ? : number | string ; result ? : string ; rotate ? : number | string ; rx ? : number | string ; ry ? : number | string ; scale ? : number | string ; seed ? : number | string ; shapeRendering ? : number | string ; slope ? : number | string ; spacing ? : number | string ; specularConstant ? : number | string ; specularExponent ? : number | string ; speed ? : number | string ; spreadMethod ? : string ; startOffset ? : number | string ; stdDeviation ? : number | string ; stemh ? : number | string ; stemv ? : number | string ; stitchTiles ? : number | string ; stopColor ? : string ; stopOpacity ? : number | string ; strikethroughPosition ? : number | string ; strikethroughThickness ? : number | string ; string ? : number | string ; stroke ? : string ; strokeDasharray ? : string | number ; strokeDashoffset ? : string | number ; strokeLinecap ? : "s" | "s" | "s" | "s" ; strokeLinejoin ? : "s" | "s" | "s" | "s" ; strokeMiterlimit ? : string ; strokeOpacity ? : number | string ; strokeWidth ? : number | string ; surfaceScale ? : number | string ; systemLanguage ? : number | string ; tableValues ? : number | string ; targetX ? : number | string ; targetY ? : number | string ; textAnchor ? : string ; textDecoration ? : number | string ; textLength ? : number | string ; textRendering ? : number | string ; to ? : number | string ; transform ? : string ; 0 ? : number | string ; 0 ? : number | string ; underlinePosition ? : number | string ; underlineThickness ? : number | string ; unicode ? : number | string ; unicodeBidi ? : number | string ; unicodeRange ? : number | string ; unitsPerEm ? : number | string ; vAlphabetic ? : number | string ; values ? : string ; vectorEffect ? : number | string ; version ? : string ; vertAdvY ? : number | string ; vertOriginX ? : number | string ; vertOriginY ? : number | string ; vHanging ? : number | string ; vIdeographic ? : number | string ; viewBox ? : string ; viewTarget ? : number | string ; visibility ? : number | string ; vMathematical ? : number | string ; widths ? : number | string ; wordSpacing ? : number | string ; writingMode ? : number | string ; 0 ? : number | string ; 0 ? : number | string ; x ? : number | string ; xChannelSelector ? : string ; xHeight ? : number | string ; xlinkActuate ? : string ; xlinkArcrole ? : string ; xlinkHref ? : string ; xlinkRole ? : string ; xlinkShow ? : string ; xlinkTitle ? : string ; xlinkType ? : string ; xmlBase ? : string ; xmlLang ? : string ; xmlns ? : string ; xmlnsXlink ? : string ; xmlSpace ? : string ; 0 ? : number | string ; 0 ? : number | string ; y ? : number | string ; yChannelSelector ? : string ; z ? : number | string ; zoomAndPan ? : string ; } interface PathAttributes { d : string ; } interface EventHandler < E extends Event > { ( event : E ) : void ; } type ClipboardEventHandler = EventHandler < ClipboardEvent > ; type CompositionEventHandler = EventHandler < CompositionEvent > ; type DragEventHandler = EventHandler < DragEvent > ; type FocusEventHandler = EventHandler < FocusEvent > ; type KeyboardEventHandler = EventHandler < KeyboardEvent > ; type MouseEventHandler = EventHandler < MouseEvent > ; type TouchEventHandler = EventHandler < TouchEvent > ; type UIEventHandler = EventHandler < UIEvent > ; type WheelEventHandler = EventHandler < WheelEvent > ; type AnimationEventHandler = EventHandler < AnimationEvent > ; type TransitionEventHandler = EventHandler < TransitionEvent > ; type GenericEventHandler = EventHandler < Event > ; interface DOMAttributes { onLoad ? : GenericEventHandler ; onCopy ? : ClipboardEventHandler ; onCut ? : ClipboardEventHandler ; onPaste ? : ClipboardEventHandler ; onCompositionEnd ? : CompositionEventHandler ; onCompositionStart ? : CompositionEventHandler ; onCompositionUpdate ? : CompositionEventHandler ; onFocus ? : FocusEventHandler ; onBlur ? : FocusEventHandler ; onChange ? : GenericEventHandler ; onInput ? : GenericEventHandler ; onSearch ? : GenericEventHandler ; onSubmit ? : GenericEventHandler ; onKeyDown ? : KeyboardEventHandler ; onKeyPress ? : KeyboardEventHandler ; onKeyUp ? : KeyboardEventHandler ; onAbort ? : GenericEventHandler ; onCanPlay ? : GenericEventHandler ; onCanPlayThrough ? : GenericEventHandler ; onDurationChange ? : GenericEventHandler ; onEmptied ? : GenericEventHandler ; onEncrypted ? : GenericEventHandler ; onEnded ? : GenericEventHandler ; onLoadedData ? : GenericEventHandler ; onLoadedMetadata ? : GenericEventHandler ; onLoadStart ? : GenericEventHandler ; onPause ? : GenericEventHandler ; onPlay ? : GenericEventHandler ; onPlaying ? : GenericEventHandler ; onProgress ? : GenericEventHandler ; onRateChange ? : GenericEventHandler ; onSeeked ? : GenericEventHandler ; onSeeking ? : GenericEventHandler ; onStalled ? : GenericEventHandler ; onSuspend ? : GenericEventHandler ; onTimeUpdate ? : GenericEventHandler ; onVolumeChange ? : GenericEventHandler ; onWaiting ? : GenericEventHandler ; onClick ? : MouseEventHandler ; onContextMenu ? : MouseEventHandler ; onDblClick ? : MouseEventHandler ; onDrag ? : DragEventHandler ; onDragEnd ? : DragEventHandler ; onDragEnter ? : DragEventHandler ; onDragExit ? : DragEventHandler ; onDragLeave ? : DragEventHandler ; onDragOver ? : DragEventHandler ; onDragStart ? : DragEventHandler ; onDrop ? : DragEventHandler ; onMouseDown ? : MouseEventHandler ; onMouseEnter ? : MouseEventHandler ; onMouseLeave ? : MouseEventHandler ; onMouseMove ? : MouseEventHandler ; onMouseOut ? : MouseEventHandler ; onMouseOver ? : MouseEventHandler ; onMouseUp ? : MouseEventHandler ; onSelect ? : GenericEventHandler ; onTouchCancel ? : TouchEventHandler ; onTouchEnd ? : TouchEventHandler ; onTouchMove ? : TouchEventHandler ; onTouchStart ? : TouchEventHandler ; onScroll ? : UIEventHandler ; onWheel ? : WheelEventHandler ; onAnimationStart ? : AnimationEventHandler ; onAnimationEnd ? : AnimationEventHandler ; onAnimationIteration ? : AnimationEventHandler ; onTransitionEnd ? : TransitionEventHandler ; } interface HTMLAttributes extends DOMAttributes { accept ? : string ; acceptCharset ? : string ; accessKey ? : string ; action ? : string ; allowFullScreen ? : boolean ; allowTransparency ? : boolean ; alt ? : string ; async ? : boolean ; autocomplete ? : string ; autofocus ? : boolean ; autoPlay ? : boolean ; capture ? : boolean ; cellPadding ? : number | string ; cellSpacing ? : number | string ; charSet ? : string ; challenge ? : string ; checked ? : boolean ; class ? : string | { [ key ] : boolean } ; className ? : string | { [ key ] : boolean } ; cols ? : number ; colSpan ? : number ; content ? : string ; contentEditable ? : boolean ; contextMenu ? : string ; controls ? : boolean ; coords ? : string ; crossOrigin ? : string ; data ? : string ; dateTime ? : string ; default ? : boolean ; defer ? : boolean ; dir ? : string ; disabled ? : boolean ; download ? : any ; draggable ? : boolean ; encType ? : string ; form ? : string ; formAction ? : string ; formEncType ? : string ; formMethod ? : string ; formNoValidate ? : boolean ; formTarget ? : string ; frameBorder ? : number | string ; headers ? : string ; height ? : number | string ; hidden ? : boolean ; high ? : number ; href ? : string ; hrefLang ? : string ; for ? : string ; httpEquiv ? : string ; icon ? : string ; id ? : string ; inputMode ? : string ; integrity ? : string ; is ? : string ; keyParams ? : string ; keyType ? : string ; kind ? : string ; label ? : string ; lang ? : string ; list ? : string ; loop ? : boolean ; low ? : number ; manifest ? : string ; marginHeight ? : number ; marginWidth ? : number ; max ? : number | string ; maxLength ? : number ; media ? : string ; mediaGroup ? : string ; method ? : string ; min ? : number | string ; minLength ? : number ; multiple ? : boolean ; muted ? : boolean ; name ? : string ; noValidate ? : boolean ; open ? : boolean ; optimum ? : number ; pattern ? : string ; placeholder ? : string ; poster ? : string ; preload ? : string ; radioGroup ? : string ; readOnly ? : boolean ; rel ? : string ; required ? : boolean ; role ? : string ; rows ? : number ; rowSpan ? : number ; sandbox ? : string ; scope ? : string ; scoped ? : boolean ; scrolling ? : string ; seamless ? : boolean ; selected ? : boolean ; shape ? : string ; size ? : number ; sizes ? : string ; slot ? : string ; span ? : number ; spellCheck ? : boolean ; src ? : string ; srcset ? : string ; srcDoc ? : string ; srcLang ? : string ; srcSet ? : string ; start ? : number ; step ? : number | string ; style ? : any ; summary ? : string ; tabIndex ? : number ; target ? : string ; title ? : string ; type ? : string ; useMap ? : string ; value ? : string | string [ ] ; width ? : number | string ; wmode ? : string ; wrap ? : string ; about ? : string ; datatype ? : string ; inlist ? : any ; prefix ? : string ; property ? : string ; resource ? : string ; typeof ? : string ; vocab ? : string ; } interface IntrinsicElements { a : HTMLAttributes ; abbr : HTMLAttributes ; address : HTMLAttributes ; area : HTMLAttributes ; article : HTMLAttributes ; aside : HTMLAttributes ; audio : HTMLAttributes ; b : HTMLAttributes ; base : HTMLAttributes ; bdi : HTMLAttributes ; bdo : HTMLAttributes ; big : HTMLAttributes ; blockquote : HTMLAttributes ; body : HTMLAttributes ; br : HTMLAttributes ; button : HTMLAttributes ; canvas : HTMLAttributes ; caption : HTMLAttributes ; cite : HTMLAttributes ; code : HTMLAttributes ; col : HTMLAttributes ; colgroup : HTMLAttributes ; data : HTMLAttributes ; datalist : HTMLAttributes ; dd : HTMLAttributes ; del : HTMLAttributes ; details : HTMLAttributes ; dfn : HTMLAttributes ; dialog : HTMLAttributes ; div : HTMLAttributes ; dl : HTMLAttributes ; dt : HTMLAttributes ; em : HTMLAttributes ; embed : HTMLAttributes ; fieldset : HTMLAttributes ; figcaption : HTMLAttributes ; figure : HTMLAttributes ; footer : HTMLAttributes ; form : HTMLAttributes ; 0 : HTMLAttributes ; 0 : HTMLAttributes ; 0 : HTMLAttributes ; 0 : HTMLAttributes ; 0 : HTMLAttributes ; 0 : HTMLAttributes ; head : HTMLAttributes ; header : HTMLAttributes ; hr : HTMLAttributes ; html : HTMLAttributes ; i : HTMLAttributes ; iframe : HTMLAttributes ; img : HTMLAttributes ; input : HTMLAttributes ; ins : HTMLAttributes ; kbd : HTMLAttributes ; keygen : HTMLAttributes ; label : HTMLAttributes ; legend : HTMLAttributes ; li : HTMLAttributes ; link : HTMLAttributes ; main : HTMLAttributes ; map : HTMLAttributes ; mark : HTMLAttributes ; menu : HTMLAttributes ; menuitem : HTMLAttributes ; meta : HTMLAttributes ; meter : HTMLAttributes ; nav : HTMLAttributes ; noscript : HTMLAttributes ; object : HTMLAttributes ; ol : HTMLAttributes ; optgroup : HTMLAttributes ; option : HTMLAttributes ; output : HTMLAttributes ; p : HTMLAttributes ; param : HTMLAttributes ; picture : HTMLAttributes ; pre : HTMLAttributes ; progress : HTMLAttributes ; q : HTMLAttributes ; rp : HTMLAttributes ; rt : HTMLAttributes ; ruby : HTMLAttributes ; s : HTMLAttributes ; samp : HTMLAttributes ; script : HTMLAttributes ; section : HTMLAttributes ; select : HTMLAttributes ; slot : HTMLAttributes ; small : HTMLAttributes ; source : HTMLAttributes ; span : HTMLAttributes ; strong : HTMLAttributes ; style : HTMLAttributes ; sub : HTMLAttributes ; summary : HTMLAttributes ; sup : HTMLAttributes ; table : HTMLAttributes ; tbody : HTMLAttributes ; td : HTMLAttributes ; textarea : HTMLAttributes ; tfoot : HTMLAttributes ; th : HTMLAttributes ; thead : HTMLAttributes ; time : HTMLAttributes ; title : HTMLAttributes ; tr : HTMLAttributes ; track : HTMLAttributes ; u : HTMLAttributes ; ul : HTMLAttributes ; "s" : HTMLAttributes ; video : HTMLAttributes ; wbr : HTMLAttributes ; svg : SVGAttributes ; animate : SVGAttributes ; circle : SVGAttributes ; clipPath : SVGAttributes ; defs : SVGAttributes ; ellipse : SVGAttributes ; feBlend : SVGAttributes ; feColorMatrix : SVGAttributes ; feComponentTransfer : SVGAttributes ; feComposite : SVGAttributes ; feConvolveMatrix : SVGAttributes ; feDiffuseLighting : SVGAttributes ; feDisplacementMap : SVGAttributes ; feFlood : SVGAttributes ; feGaussianBlur : SVGAttributes ; feImage : SVGAttributes ; feMerge : SVGAttributes ; feMergeNode : SVGAttributes ; feMorphology : SVGAttributes ; feOffset : SVGAttributes ; feSpecularLighting : SVGAttributes ; feTile : SVGAttributes ; feTurbulence : SVGAttributes ; filter : SVGAttributes ; foreignObject : SVGAttributes ; g : SVGAttributes ; image : SVGAttributes ; line : SVGAttributes ; linearGradient : SVGAttributes ; marker : SVGAttributes ; mask : SVGAttributes ; path : SVGAttributes ; pattern : SVGAttributes ; polygon : SVGAttributes ; polyline : SVGAttributes ; radialGradient : SVGAttributes ; rect : SVGAttributes ; stop : SVGAttributes ; symbol : SVGAttributes ; text : SVGAttributes ; tspan : SVGAttributes ; use : SVGAttributes ; } interface IntrinsicAttributes { key ? : string | number staticClass ? : string ref ? : string refInFor ? : boolean slot ? : string scopedSlots ? : any } } }	O $any$ O O $any$ O O O O $any$ O O $any$ O O O O O O O O $any$ O O O O O O O O $any$ O O O O O O O O $any$ O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O ${}$ O O O O O O $any$ O $any$ O $complex$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $complex$ O O O O O O $complex$ O O O O O O O O O O O O O O O O O $complex$ O O O O O O $string$ O O O O $string$ O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $string$ O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O O O O O O O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $string$ O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $string$ O O O O $complex$ O O O O O O O O O O O O O O O $string$ O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $string$ O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $string$ O O O O $string$ O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $string$ O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $string$ O O O O $complex$ O O O O O O $string$ O O O O $string$ O O O O $complex$ O O O O O O $complex$ O O O O O O $string$ O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $string$ O O O O $complex$ O O O O O O $string$ O O O O $complex$ O O O O O O $string$ O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $string$ O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $string$ O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $string$ O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $string$ O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $string$ O O O O $complex$ O O O O O O $complex$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O $string$ O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $string$ O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $string$ O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $string$ O O O O $complex$ O O O O O O $string$ O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $string$ O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $string$ O O O O $complex$ O O O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $string$ O O O O $complex$ O O O O O O $string$ O O O O O O $any$ O $string$ O O O O O $any$ O $any$ O $complex$ O O O $E$ O $any$ O O O O O O $any$ O $any$ O $complex$ O O O $any$ O $any$ O $complex$ O O O $any$ O $any$ O $complex$ O O O $any$ O $any$ O $complex$ O O O $any$ O $any$ O $complex$ O O O $any$ O $any$ O $complex$ O O O $any$ O $any$ O $complex$ O O O $any$ O $any$ O $complex$ O O O $any$ O $any$ O $complex$ O O O $any$ O $any$ O $complex$ O O O $any$ O $any$ O $complex$ O O O $any$ O $any$ O $complex$ O O O $any$ O $EventHandler<Event>$ O O $any$ O $EventHandler<ClipboardEvent>$ O O $any$ O $EventHandler<ClipboardEvent>$ O O $any$ O $EventHandler<ClipboardEvent>$ O O $any$ O $EventHandler<CompositionEvent>$ O O $any$ O $EventHandler<CompositionEvent>$ O O $any$ O $EventHandler<CompositionEvent>$ O O $any$ O $EventHandler<FocusEvent>$ O O $any$ O $EventHandler<FocusEvent>$ O O $any$ O $EventHandler<Event>$ O O $any$ O $EventHandler<Event>$ O O $any$ O $EventHandler<Event>$ O O $any$ O $EventHandler<Event>$ O O $any$ O $EventHandler<KeyboardEvent>$ O O $any$ O $EventHandler<KeyboardEvent>$ O O $any$ O $EventHandler<KeyboardEvent>$ O O $any$ O $EventHandler<Event>$ O O $any$ O $EventHandler<Event>$ O O $any$ O $EventHandler<Event>$ O O $any$ O $EventHandler<Event>$ O O $any$ O $EventHandler<Event>$ O O $any$ O $EventHandler<Event>$ O O $any$ O $EventHandler<Event>$ O O $any$ O $EventHandler<Event>$ O O $any$ O $EventHandler<Event>$ O O $any$ O $EventHandler<Event>$ O O $any$ O $EventHandler<Event>$ O O $any$ O $EventHandler<Event>$ O O $any$ O $EventHandler<Event>$ O O $any$ O $EventHandler<Event>$ O O $any$ O $EventHandler<Event>$ O O $any$ O $EventHandler<Event>$ O O $any$ O $EventHandler<Event>$ O O $any$ O $EventHandler<Event>$ O O $any$ O $EventHandler<Event>$ O O $any$ O $EventHandler<Event>$ O O $any$ O $EventHandler<Event>$ O O $any$ O $EventHandler<Event>$ O O $any$ O $EventHandler<MouseEvent>$ O O $any$ O $EventHandler<MouseEvent>$ O O $any$ O $EventHandler<MouseEvent>$ O O $any$ O $EventHandler<DragEvent>$ O O $any$ O $EventHandler<DragEvent>$ O O $any$ O $EventHandler<DragEvent>$ O O $any$ O $EventHandler<DragEvent>$ O O $any$ O $EventHandler<DragEvent>$ O O $any$ O $EventHandler<DragEvent>$ O O $any$ O $EventHandler<DragEvent>$ O O $any$ O $EventHandler<DragEvent>$ O O $any$ O $EventHandler<MouseEvent>$ O O $any$ O $EventHandler<MouseEvent>$ O O $any$ O $EventHandler<MouseEvent>$ O O $any$ O $EventHandler<MouseEvent>$ O O $any$ O $EventHandler<MouseEvent>$ O O $any$ O $EventHandler<MouseEvent>$ O O $any$ O $EventHandler<MouseEvent>$ O O $any$ O $EventHandler<Event>$ O O $any$ O $EventHandler<TouchEvent>$ O O $any$ O $EventHandler<TouchEvent>$ O O $any$ O $EventHandler<TouchEvent>$ O O $any$ O $EventHandler<TouchEvent>$ O O $any$ O $EventHandler<UIEvent>$ O O $any$ O $EventHandler<WheelEvent>$ O O $any$ O $EventHandler<AnimationEvent>$ O O $any$ O $EventHandler<AnimationEvent>$ O O $any$ O $EventHandler<AnimationEvent>$ O O $any$ O $EventHandler<TransitionEvent>$ O O $any$ O O O $any$ O $any$ O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $boolean$ O O O O $boolean$ O O O O $string$ O O O O $boolean$ O O O O $string$ O O O O $boolean$ O O O O $boolean$ O O O O $boolean$ O O O O $complex$ O O O O O O $complex$ O O O O O O $string$ O O O O $string$ O O O O $boolean$ O O O O $complex$ O O O O O O $string$ O O O O O $complex$ O O O O O O $string$ O O O O O $number$ O O O O $number$ O O O O $string$ O O O O $boolean$ O O O O $string$ O O O O $boolean$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $boolean$ O O O O $boolean$ O O O O $string$ O O O O $boolean$ O O O O $any$ O O O O $boolean$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $boolean$ O O O O $string$ O O O O $complex$ O O O O O O $string$ O O O O $complex$ O O O O O O $boolean$ O O O O $number$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $boolean$ O O O O $number$ O O O O $string$ O O O O $number$ O O O O $number$ O O O O $complex$ O O O O O O $number$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $complex$ O O O O O O $number$ O O O O $boolean$ O O O O $boolean$ O O O O $string$ O O O O $boolean$ O O O O $boolean$ O O O O $number$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $boolean$ O O O O $string$ O O O O $boolean$ O O O O $string$ O O O O $number$ O O O O $number$ O O O O $string$ O O O O $string$ O O O O $boolean$ O O O O $string$ O O O O $boolean$ O O O O $boolean$ O O O O $string$ O O O O $number$ O O O O $string$ O O O O $string$ O O O O $number$ O O O O $boolean$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $number$ O O O O $complex$ O O O O O O $any$ O O O O $string$ O O O O $number$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $complex$ O O O O O O O O $complex$ O O O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $any$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O O O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O O O $any$ O $HTMLAttributes$ O $any$ O $HTMLAttributes$ O $any$ O $SVGAttributes$ O $any$ O $SVGAttributes$ O $any$ O $SVGAttributes$ O $any$ O $SVGAttributes$ O $any$ O $SVGAttributes$ O $any$ O $SVGAttributes$ O $any$ O $SVGAttributes$ O $any$ O $SVGAttributes$ O $any$ O $SVGAttributes$ O $any$ O $SVGAttributes$ O $any$ O $SVGAttributes$ O $any$ O $SVGAttributes$ O $any$ O $SVGAttributes$ O $any$ O $SVGAttributes$ O $any$ O $SVGAttributes$ O $any$ O $SVGAttributes$ O $any$ O $SVGAttributes$ O $any$ O $SVGAttributes$ O $any$ O $SVGAttributes$ O $any$ O $SVGAttributes$ O $any$ O $SVGAttributes$ O $any$ O $SVGAttributes$ O $any$ O $SVGAttributes$ O $any$ O $SVGAttributes$ O $any$ O $SVGAttributes$ O $any$ O $SVGAttributes$ O $any$ O $SVGAttributes$ O $any$ O $SVGAttributes$ O $any$ O $SVGAttributes$ O $any$ O $SVGAttributes$ O $any$ O $SVGAttributes$ O $any$ O $SVGAttributes$ O $any$ O $SVGAttributes$ O $any$ O $SVGAttributes$ O $any$ O $SVGAttributes$ O $any$ O $SVGAttributes$ O $any$ O $SVGAttributes$ O $any$ O $SVGAttributes$ O $any$ O $SVGAttributes$ O $any$ O $SVGAttributes$ O $any$ O $SVGAttributes$ O $any$ O $SVGAttributes$ O $any$ O O O $any$ O $complex$ O O O O O $string$ O O O $string$ O O O $boolean$ O O O $string$ O O O $any$ O O O O O O
import { Vue } from 's' import { VNode , VNodeData } from 's' export { VNode } from 's' export { PropOptions } from 's' import { ComponentOptions , FunctionalComponentOptions } from 's' export { ComponentOptions } from 's' export type Hash < V > = { [ k ] : V } export type VClass < T > = { new ( ) : T extend ( option : ComponentOptions < Vue > | FunctionalComponentOptions ) : typeof Vue } & Pick < typeof Vue , keyof typeof Vue > export interface DecoratorProcessor { ( proto , instance , options < Vue > ) : void } export type $$Prop = string & { 's' : never } export interface ContextObject < T > { readonly props : T ; readonly children : VNode [ ] ; readonly slots : Hash < VNode > ; readonly data : VNodeData ; readonly parent : VNode ; } export type Class = { new ( ... args : { } [ ] ) : { } }	O O $any$ O O O O O $any$ O $any$ O O O O O $any$ O O O O O $any$ O O O O O $any$ O $any$ O O O O O $any$ O O O O O $any$ O $any$ O O O O $string$ O O $any$ O O O $any$ O $any$ O O O O O O O $any$ $any$ O $any$ O $any$ O $any$ O O $any$ O O O $any$ O O $any$ O O $any$ O O O $any$ O O O $any$ O O $Vue$ O $Vue$ O $ComponentOptions$ O $any$ O O O O O O O $any$ O O O O O O O O O O $any$ O $any$ O O O $T$ O $any$ O O $any[]$ O $any$ O O O O $Hash<any>$ O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O O O O O ${}[]$ O O O O O O O O O O
declare var Reflect export function NOOP ( ) { } export function getReflectType ( target , key ) { if ( typeof Reflect === "s" && typeof Reflect . getMetadata === "s" ) { return Reflect . getMetadata ( 's' , target , key ) } return null } export interface Map < T > { [ k ] : T } export function createMap < T > ( ) < T > { const ret = Object . create ( null ) ret [ "s" ] = undefined delete ret [ "s" ] return ret } export function hasOwn ( obj , key ) { return Object . prototype . hasOwnProperty . call ( obj , key ) } export interface ReadonlyPropertyDescriptor < T > { enumerable ? : boolean ; configurable ? : boolean ; writable ? : boolean ; value ? : T ; get ? : ( ) => T ; }	O O $any$ O O $void$ O O O O O O $any$ O $Object$ O $string$ O O O O O $any$ O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O $Object$ O $string$ O O O O O O O $any$ O $any$ O O O $string$ O O $any$ O O O $Map$ O $any$ O O O O $any$ O O O $any$ O $ObjectConstructor$ O $complex$ O O O $any$ O O O O $undefined$ O $any$ O O O O $any$ O O O $any$ O $Object$ O $string$ O O O $ObjectConstructor$ O $Object$ O $boolean$ O $any$ O $Object$ O $string$ O O O O $any$ O $any$ O O $boolean$ O O O O $boolean$ O O O O $boolean$ O O O O $T$ O O $any$ O $T$ O O O O O $any$ O O
import Vue from 's' import { VClass , DecoratorProcessor , ComponentOptions , $$Prop , } from 's' import { createMap , hasOwn , NOOP } from 's' function makeOptionsFromMeta ( meta < Vue > , name ) < Vue > { meta . name = meta . name || name for ( let key of [ 's' , 's' , 's' , 's' ] ) { if ( ! hasOwn ( meta , key ) ) { meta [ key ] = { } } } return meta } function getKeys ( proto ) { let protoKeys = Object . getOwnPropertyNames ( proto ) let internalKeys : $$Prop [ ] = [ ] let normalKeys : string [ ] = [ ] for ( let key of protoKeys ) { if ( key === 's' ) { continue } else if ( key . substr ( 0 , 0 ) === 's' ) { internalKeys . push ( key as $$Prop ) } else { normalKeys . push ( key ) } } return { internalKeys , normalKeys } } let registeredProcessors = createMap < DecoratorProcessor | undefined > ( ) function collectInternalProp ( propKey , proto , instance , optionsToWrite < Vue > ) { let processor = registeredProcessors [ propKey ] if ( ! processor ) { return } processor ( proto , instance , optionsToWrite ) } function collectMethodsAndComputed ( propKey , proto , optionsToWrite < Vue > ) { let descriptor = Object . getOwnPropertyDescriptor ( proto , propKey ) if ( ! descriptor ) { return } if ( typeof descriptor . value === 's' ) { optionsToWrite . methods ! [ propKey ] = descriptor . value } else if ( descriptor . get || descriptor . set ) { optionsToWrite . computed ! [ propKey ] = { get : descriptor . get , set : descriptor . set , } } } const VUE_KEYS = Object . keys ( new Vue ) function collectData ( cls < Vue > , keys : string [ ] , optionsToWrite < Vue > ) { if ( optionsToWrite . data ) return optionsToWrite . data = function ( this ) { let selfData = { } let vm = this let insKeys = Object . keys ( vm ) . concat ( Object . keys ( vm . $props || { } ) ) cls . prototype . _init = ! vm ? NOOP : function ( this ) { for ( let key of insKeys ) { if ( keys . indexOf ( key ) >= 0 ) continue Object . defineProperty ( this , key , { get : ( ) => vm [ key ] , set : NOOP } ) } } let proxy = new cls ( ) for ( let key of keys ) { if ( VUE_KEYS . indexOf ( key ) === - 0 ) { selfData [ key ] = proxy [ key ] } } cls . prototype . _init = NOOP return selfData } } function findSuper ( proto ) < Vue > { let superProto = Object . getPrototypeOf ( proto ) let Super = superProto instanceof Vue ? ( superProto . constructor as VClass < Vue > ) : Vue return Super } const BUILTIN = [ 's' , 's' , 's' , 's' , 's' ] function Component_ ( meta < Vue > = { } ) { function decorate ( cls < Vue > ) < Vue > { Component . inDefinition = true cls . prototype . _init = NOOP let instance = null as any try { instance = new cls ( ) } finally { Component . inDefinition = false } delete cls . prototype . _init let proto = cls . prototype let options = makeOptionsFromMeta ( meta , cls [ 's' ] ) let { internalKeys , normalKeys } = getKeys ( proto ) for ( let protoKey of internalKeys ) { collectInternalProp ( protoKey , proto , instance , options ) } for ( let protoKey of normalKeys ) { collectMethodsAndComputed ( protoKey , proto , options ) } collectData ( cls , Object . keys ( instance ) , options ) let Super = findSuper ( proto ) let ret = Super . extend ( options ) let statics = Object . getOwnPropertyNames ( cls ) . filter ( k => BUILTIN . indexOf ( k ) < 0 ) for ( let key of statics ) { ret [ key ] = cls [ key ] } return ret } return decorate } export function Component < T extends VClass < Vue > > ( ctor : T ) : T export function Component ( config ? < Vue > ) : < T extends VClass < Vue > > ( ctor : T ) => T export function Component ( target ? : ComponentOptions < Vue > | VClass < Vue > ) { if ( typeof target === 's' ) { return Component_ ( ) ( target ) } return Component_ ( target as ComponentOptions < Vue > ) } export namespace Component { export function register ( key , logic ) { registeredProcessors [ key ] = logic } export let inDefinition = false }	O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $Map<T>$ O $any$ O $void$ O O O O $ComponentOptions$ O $ComponentOptions$ O $any$ O O $string$ O O $any$ O O $any$ O $any$ O $any$ O $any$ O $string$ O O O $string$ O O O O O O O O O O O O O O O $any$ O $any$ O $string$ O O O $any$ O $string$ O O O O O O O $any$ O O $complex$ O $Vue$ O O O $string[]$ O $ObjectConstructor$ O $string[]$ O $any$ O O $$$Prop[]$ O $any$ O O O O O O $string[]$ O O O O O O O O O O $string$ O $string[]$ O O O O $string$ O O O O O O O O O $string$ O $string$ O O O O O O O O O $$$Prop[]$ O $number$ O $string$ O $any$ O O O O $string[]$ O $number$ O $string$ O O O O O $$$Prop[]$ O $string[]$ O O O $Map<DecoratorProcessor>$ O $Map<T>$ O $any$ O O O O O O $void$ O $$$Prop$ O $Vue$ O $Vue$ O $ComponentOptions$ O $any$ O O O O $DecoratorProcessor$ O $Map<DecoratorProcessor>$ O $$$Prop$ O O O O $DecoratorProcessor$ O O O O $DecoratorProcessor$ O $any$ O $any$ O $any$ O O O $void$ O $string$ O $Object$ O $ComponentOptions$ O $any$ O O O O $PropertyDescriptor$ O $ObjectConstructor$ O $PropertyDescriptor$ O $Object$ O $string$ O O O O $PropertyDescriptor$ O O O O O O O $PropertyDescriptor$ O $any$ O O O O $any$ O $any$ O O $string$ O O $PropertyDescriptor$ O $any$ O O O O $PropertyDescriptor$ O $any$ O $PropertyDescriptor$ O $void$ O O $any$ O $any$ O O $string$ O O O $any$ O $PropertyDescriptor$ O $any$ O $void$ O $PropertyDescriptor$ O $void$ O O O O O $string[]$ O $ObjectConstructor$ O $complex$ O O $any$ O O $void$ O $VClass$ O $any$ O O $string[]$ O O O O O $ComponentOptions$ O $any$ O O O O O $any$ O $any$ O O $any$ O $any$ O O O $Vue$ O O O ${}$ O O O O $any$ O O O $string[]$ O $ObjectConstructor$ O $complex$ O $any$ O O $complex$ O $ObjectConstructor$ O $complex$ O $any$ O $any$ O O O O O $VClass<any>$ O $any$ O $any$ O O $any$ O $void$ O O O $Vue$ O O O O O $string$ O $string[]$ O O O O $string[]$ O $number$ O $string$ O O O O O $ObjectConstructor$ O $any$ O O O $string$ O O $any$ O O O O $any$ O $string$ O O $void$ O $void$ O O O O O $any$ O O $VClass<any>$ O O O O O $string$ O $string[]$ O O O O $string[]$ O $number$ O $string$ O O O O O O ${}$ O $string$ O O $any$ O $string$ O O O $VClass<any>$ O $any$ O $any$ O $void$ O ${}$ O O O $VClass$ O $Object$ O O $any$ O O O $any$ O $ObjectConstructor$ O $any$ O $Object$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O $string[]$ O O O O O O O O O O O O O $VClass<any>$ O $ComponentOptions$ O $any$ O O O O O O O $VClass$ O $VClass$ O $any$ O O O $any$ O O $any$ O $boolean$ O O $VClass<any>$ O $any$ O $any$ O $void$ O $Vue$ O O O O O O $any$ O O $VClass<any>$ O O O O O $any$ O $boolean$ O O O O $VClass<any>$ O $any$ O $any$ O $any$ O $VClass<any>$ O $any$ O $any$ O $any$ O $any$ O $VClass<any>$ O O O O O O $$$Prop[]$ O $string[]$ O O $complex$ O $any$ O O O O $$$Prop$ O $$$Prop[]$ O O $void$ O $$$Prop$ O $any$ O $any$ O $any$ O O O O O $string$ O $string[]$ O O $void$ O $string$ O $any$ O $any$ O O $void$ O $VClass<any>$ O $ObjectConstructor$ O $complex$ O $any$ O O $any$ O O $VClass<any>$ O $VClass<any>$ O $any$ O O $any$ O $VClass<any>$ O $any$ O $any$ O O $string[]$ O $ObjectConstructor$ O $string[]$ O $VClass<any>$ O O $complex$ O $string$ O $string[]$ O $number$ O $string$ O O O O O O O $string$ O $string[]$ O O $any$ O $string$ O O $VClass<any>$ O $string$ O O O $any$ O O $VClass<any>$ O O O $any$ O $any$ O $any$ O $any$ O O O $T$ O $any$ O O $any$ O O $any$ O $any$ $ComponentOptions$ O $any$ O O O O $any$ O $any$ O $any$ O O O $T$ O $any$ O O $any$ O O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O O O O O O $any$ O O O O O $VClass<any>$ O O O $any$ O O O $VClass<any>$ O $any$ O $any$ O $any$ O O O O O $any$ O O O $void$ O $$$Prop$ O $DecoratorProcessor$ O O $Map<DecoratorProcessor>$ O $$$Prop$ O O $DecoratorProcessor$ O O O $boolean$ O O O
import Vue from 's' import { Component } from 's' import { $$Prop } from 's' import { createMap , Map , ReadonlyPropertyDescriptor } from 's' const LIFECYCLE_KEY = 's' as $$Prop export type Lifecycles = 's' | 's' | 's' | 's' | 's' | 's' | 's' | 's' | 's' | 's' export interface Location { name ? : string ; path ? : string ; hash ? : string ; query ? : Map < string > ; params ? : Map < string > ; append ? : boolean ; replace ? : boolean ; } export type RawLocation = string | Location ; export type RouterLifecycle = 's' | 's' export type BeforeRouteEnterLifecycle = 's' export declare type NextFunc = ( to ? : RawLocation | false | void ) => void ; export declare type NextFuncVm < T extends Vue > = ( to ? : RawLocation | false | ( ( vm : T ) => any ) | void ) => void ; export type RouteHandler = ( to , from , next ) => void export type RouteHandlerVm < T extends Vue > = ( to , from , next < T > ) => void export function Lifecycle ( target , life , _ < ( ) => void > ) export function Lifecycle ( target , life , _ < RouteHandler > ) export function Lifecycle < T extends Vue > ( target : T , life , _ < RouteHandlerVm < T > > ) export function Lifecycle ( target , life , _ < ( ... args : any [ ] ) => void > ) { let lifecycles = target [ LIFECYCLE_KEY ] = target [ LIFECYCLE_KEY ] || createMap ( ) lifecycles [ life ] = true } Component . register ( LIFECYCLE_KEY , function ( proto , instance , options ) { let lifecycles : string [ ] = proto [ LIFECYCLE_KEY ] for ( let lifecycle in lifecycles ) { let handler = proto [ lifecycle ] delete proto [ lifecycle ] options [ lifecycle ] = handler } } )	O $any$ O O O O $any$ O O O O O $any$ O O O O O $Map<T>$ O $any$ O $any$ O O O O $$$Prop$ O O O $any$ O O $any$ O O O O O O O O O O O O O O O O O O O O O O $any$ O $string$ O O O O $string$ O O O O $string$ O O O O $Map<string>$ O O $any$ O O O O $Map<string>$ O O $any$ O O O O $boolean$ O O O O $boolean$ O O O O O O O $any$ O O O $any$ O O O $any$ O O O O O O $any$ O O O O O $any$ O O $complex$ O O $any$ O O O O O O O O O O O $any$ O $any$ O $any$ O O O $any)$ O O $any$ O O O O O $T$ O $any$ O O O O O O O O O O O O $any$ O O $any$ O $any$ O $NextFunc$ O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $NextFuncVm$ O $any$ O O O O O O $void$ O $Vue$ O $Lifecycles$ O $ReadonlyPropertyDescriptor$ O O O O O O O O O $void$ O $Vue$ O $RouterLifecycle$ O $ReadonlyPropertyDescriptor$ O $any$ O O O O $void$ O $any$ O $any$ O O $T$ O $any$ O $BeforeRouteEnterLifecycle$ O $ReadonlyPropertyDescriptor$ O $any$ O $any$ O O O O O $complex$ O $Vue$ O $string$ O $ReadonlyPropertyDescriptor$ O O O $any[]$ O O O O O O O O O O O $any$ O $any$ O $$$Prop$ O O $any$ O $$$Prop$ O O $Map<T>$ O O $any$ O $string$ O O O O $any$ O $void$ O $$$Prop$ O O O $any$ O $any$ O $any$ O O O $string[]$ O O O O O $any$ O $$$Prop$ O O O O $string$ O $string[]$ O O O $any$ O $any$ O $string$ O O $any$ O $string$ O $any$ O $string$ O O $any$ O O O
import Vue from 's' import { PropOptions , $$Prop } from 's' import { Component } from 's' import { getReflectType , createMap } from 's' const PROP_KEY = 's' as $$Prop export function Prop ( target , key ) { let propKeys : string [ ] = target [ PROP_KEY ] = target [ PROP_KEY ] || [ ] propKeys . push ( key ) } Component . register ( PROP_KEY , function ( proto , instance , options ) { let propKeys : string [ ] = proto [ PROP_KEY ] let props = options . props = options . props || createMap ( ) for ( let key of propKeys ) { let prop = { } if ( instance [ key ] != null ) { prop = instance [ key ] delete instance [ key ] } if ( ! prop . type ) { prop . type = getReflectType ( proto , key ) } props [ key ] = prop } options . props = props } ) export type Class < T > = { [ 's' ] : T } | { new ( ... args : any [ ] ) : T & object } export interface PlainProp < T > { type ? : Class < T > validator ? ( value : T ) : boolean required ? : boolean } export interface DefaultProp < T > extends PlainProp < T > { default : T | ( ( ) => T ) } export interface RequiredProp < T > extends PlainProp < T > { required : true default ? : T | ( ( ) => T ) } export interface FuncProp < T extends Function > { type ? : FunctionConstructor , defaultFunc ? : T required ? : boolean } export function p < T > ( tpe < T > ) : T | undefined export function p < T > ( conf < T > ) : T export function p < T > ( conf < T > ) : T export function p < T > ( conf < T > ) : T | undefined export function p < T extends Function > ( conf < T > ) : T export function p < T > ( confOrType ) : T { if ( ! Component . inDefinition ) { return undefined as any } if ( typeof confOrType === 's' ) { let tpe = confOrType return { type : tpe } as any } let conf = confOrType if ( conf . type === Function ) { conf . default = conf . defaultFunc delete conf . defaultFunc } return conf }	O $any$ O O O O $any$ O $any$ O O O O O $any$ O O O O O $any$ O $Map<T>$ O O O O $$$Prop$ O O O $any$ O O $void$ O $Vue$ O $string$ O O O $string[]$ O O O O O $any$ O $$$Prop$ O O $any$ O $$$Prop$ O O O O $string[]$ O $number$ O $string$ O O $any$ O $void$ O $$$Prop$ O O O $any$ O $any$ O $any$ O O O $string[]$ O O O O O $any$ O $$$Prop$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $Map<T>$ O O O O O $string$ O $string[]$ O O O $PropOptions$ O O O O O $any$ O $string$ O O O O O $any$ O $any$ O $string$ O O $any$ O $string$ O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $string$ O O $any$ O $string$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O O O $any$ O O O O O O $any[]$ O O O O O O $any$ O O O O O $any$ O $any$ O O $Class<T>$ O O $any$ O $any$ O $boolean$ O O $T$ O $any$ O O O $boolean$ O O O O O O $any$ O $any$ O O $any$ O $any$ O O $T)$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O O $true$ O O $T)$ O O $any$ O O O O O $any$ O O O O $any$ O $any$ O $FunctionConstructor$ O O $FunctionConstructor$ O O $any$ O $T$ O O $any$ $boolean$ O O O O O O $complex$ O $any$ O O $Class$ O $any$ O O O $any$ O O O O $complex$ O $any$ O O $RequiredProp$ O $any$ O O O $any$ O O $complex$ O $any$ O O $DefaultProp$ O $any$ O O O $any$ O O $complex$ O $any$ O O $PlainProp$ O $any$ O O O $any$ O O O O $complex$ O $any$ O $FunctionConstructor$ O O $FuncProp$ O $any$ O O O $any$ O O $complex$ O $any$ O O $any$ O O $any$ O O O O $any$ O $boolean$ O O O $undefined$ O O O O O O $any$ O O O O O $any$ O $any$ O O $any$ O $any$ O O O O O $any$ O $any$ O O $any$ O $any$ O $FunctionConstructor$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O
import Vue from 's' import { VNode , $$Prop } from 's' import { Component } from 's' export type RenderFunc = ( createElement : typeof Vue . prototype . $createElement ) => VNode const RENDER_KEY = 's' as $$Prop const RENDER : 's' = 's' export function Render ( target , key : 's' , _ < RenderFunc > ) { target [ RENDER_KEY ] = true } Component . register ( RENDER_KEY , function ( proto , instance , options ) { if ( proto [ RENDER_KEY ] ) { options [ RENDER ] = proto [ RENDER ] delete proto [ RENDER ] } } )	O $any$ O O O O $any$ O $any$ O O O O O $any$ O O O O O $any$ O O $any$ O O $any$ O $any$ O $any$ O O $any$ O $$$Prop$ O O O $any$ O O O O O O O O $void$ O $Vue$ O O O O O $TypedPropertyDescriptor$ O $any$ O O O $any$ O $$$Prop$ O O O O $any$ O $void$ O $$$Prop$ O O O $any$ O $any$ O $any$ O O O O $any$ O $$$Prop$ O O O $any$ O O O O $any$ O O O O $any$ O O O O O O
import Vue from 's' export function Transition ( target , key , _ < ( e , done ? ) => void > ) { }	O $any$ O O O O $void$ O $Vue$ O $string$ O $TypedPropertyDescriptor$ O O $HTMLElement$ O $Function$ $Function$ O O O O O O O
import Vue from 's' import { $$Prop } from 's' import { Component } from 's' import { createMap , ReadonlyPropertyDescriptor } from 's' import { WatchOptions } from 's' export type VuePropDecorator = ( target , key ) => void const WATCH_PROP = 's' as $$Prop export type WatchHandler < T > = ( val : T , oldVal : T ) => void export type WatchDecorator < K extends string > = < T > ( target : { [ k in K ] ? : T } , key , prop < WatchHandler < T > > ) => void export type 0 < 0 extends string , 0 extends string > = < T > ( target : { [ 0 in 0 ] ? : { [ 0 in 0 ] ? : T } } , key , prop < WatchHandler < T > > ) => void export type 0 < 0 extends string , 0 extends string , 0 extends string > = < T > ( target : { [ 0 in 0 ] ? : { [ 0 in 0 ] ? : { [ 0 in 0 ] ? : T } } } , key , prop < WatchHandler < T > > ) => void export type 0 < 0 extends string , 0 extends string , 0 extends string , 0 extends string > = < T > ( target : { [ 0 in 0 ] ? : { [ 0 in 0 ] ? : { [ 0 in 0 ] ? : { [ 0 in 0 ] ? : T } } } } , key , prop < WatchHandler < T > > ) => void export function Watch < 0 extends string , 0 extends string , 0 extends string , 0 extends string > ( keys : [ 0 , 0 , 0 , 0 ] , opt ? ) < 0 , 0 , 0 , 0 > export function Watch < 0 extends string , 0 extends string , 0 extends string > ( keys : [ 0 , 0 , 0 ] , opt ? ) < 0 , 0 , 0 > export function Watch < 0 extends string , 0 extends string > ( keys : [ 0 , 0 ] , opt ? ) < 0 , 0 > export function Watch < K extends string > ( key : K , opt ? ) < K > export function Watch ( keyOrPath : string | string [ ] , opt = { } ) < string > { let key = Array . isArray ( keyOrPath ) ? keyOrPath . join ( 's' ) : keyOrPath return function ( target , method ) { let watchedProps = target [ WATCH_PROP ] = target [ WATCH_PROP ] || createMap ( ) opt [ 's' ] = target [ method ] opt [ 's' ] = method watchedProps [ key ] = opt as any } } Component . register ( WATCH_PROP , function ( target , instance , optionsToWrite ) { let watchedProps = target [ WATCH_PROP ] const watch = optionsToWrite . watch for ( let key in watchedProps ) { watch ! [ key ] = watchedProps [ key ] delete target [ watchedProps [ key ] [ 's' ] ] } } )	O $any$ O O O O $any$ O O O O O $any$ O O O O O $Map<T>$ O $any$ O O O O O $any$ O O O O O $any$ O O $Vue$ O $string$ O O O O $$$Prop$ O O O $any$ O O $any$ O $any$ O O O $T$ O $any$ O $T$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O O $complex$ O O O $any$ O $any$ O O O $any$ O O $string$ O $ReadonlyPropertyDescriptor$ O $any$ O $any$ O O O O O O O $any$ O $any$ O O O $any$ O O O O O $any$ O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O $any$ O O O $string$ O $ReadonlyPropertyDescriptor$ O $any$ O $any$ O O O O O O O $any$ O $any$ O O O $any$ O O O $any$ O O O O O $any$ O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O $any$ O O O O $string$ O $ReadonlyPropertyDescriptor$ O $any$ O $any$ O O O O O O O $any$ O $any$ O O O $any$ O O O $any$ O O O $any$ O O O O O $any$ O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O $any$ O O O O O $string$ O $ReadonlyPropertyDescriptor$ O $any$ O $any$ O O O O O O O $WatchDecorator4$ O $any$ O O O $any$ O O O $any$ O O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ $WatchOptions$ O O $any$ O $any$ O $any$ O $any$ O O O $WatchDecorator3$ O $any$ O O O $any$ O O O $any$ O O O O O O O $any$ O $any$ O $any$ O O $any$ $WatchOptions$ O O $any$ O $any$ O $any$ O O O $WatchDecorator2$ O $any$ O O O $any$ O O O O O O O $any$ O $any$ O O $any$ $WatchOptions$ O O $any$ O $any$ O O O $WatchDecorator$ O $any$ O O O O $K$ O $any$ O $any$ $WatchOptions$ O O $any$ O O O $WatchDecorator$ O $complex$ O O O O O O O $WatchOptions$ O O O O O O O O O $string$ O $ArrayConstructor$ O $complex$ O $complex$ O O $string[]$ O $string$ O O O O $string$ O O O $any$ O $string$ O O O $any$ O $any$ O $$$Prop$ O O $any$ O $$$Prop$ O O $Map<T>$ O O $any$ O O O O $any$ O $string$ O $any$ O O O O $string$ $any$ O $string$ O O $any$ O O O O $any$ O $void$ O $$$Prop$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $$$Prop$ O O $any$ O $any$ O $any$ O O O $string$ O $any$ O O $any$ O O $string$ O O $any$ O $string$ O O $any$ O $any$ O $string$ O O O O O O O O
import Vue from 's' import { $$Prop } from 's' import { Component } from 's' import { ReadonlyPropertyDescriptor } from 's' const DATA_KEY = 's' as $$Prop export type Dict = { [ k ] : any } export function Data ( target , key : 's' , _ < ( ) => Dict > ) { target [ DATA_KEY ] = target [ key ] } Component . register ( DATA_KEY , ( proto , instance , options ) => { let dataFunc = proto [ 's' ] options . data = function ( this ) { return dataFunc . call ( this ) } delete proto [ 's' ] } )	O $any$ O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O $$$Prop$ O O O $any$ O O $any$ O O O $string$ O O O O O O $void$ O $Vue$ O O O O O $ReadonlyPropertyDescriptor$ O O O O $any$ O O O $any$ O $$$Prop$ O O $any$ O O O O $any$ O $void$ O $$$Prop$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O $Vue$ O O O $any$ O $any$ O O O O O $any$ O O O O O
import { VClass as Cls } from 's' import Vue from 's' export function Mixin < A > ( parent < A > ) < A > export function Mixin < A , B > ( parent < A > , trait < B > ) < A & B > export function Mixin < A , B , C > ( parent < A > , trait < B > , 0 < C > ) < A & B & C > export function Mixin < A , B , C , D > ( parent < A > , trait < B > , 0 < C > , 0 < D > ) < A & B & C & D > export function Mixin < T > ( parent < Vue > , ... traits : Cls < Vue > [ ] ) < T > export function Mixin < T > ( parent < T > , ... traits : ( typeof Vue ) [ ] ) < T > { return parent . extend ( { mixins : traits } ) as any } export { Component as Trait } from 's'	O O $any$ O $any$ O O O O $any$ O O O O $Cls$ O $any$ O O $Cls$ O $any$ O O O $any$ O O O $Cls$ O $any$ O $any$ O O $Cls$ O $any$ O O $Cls$ O $any$ O O O $any$ O $any$ O O O $Cls$ O $any$ O $any$ O $any$ O O $Cls$ O $any$ O O $Cls$ O $any$ O O $Cls$ O $any$ O O O $any$ O $any$ O $any$ O O O $Cls$ O $any$ O $any$ O $any$ O $any$ O O $Cls$ O $any$ O O $Cls$ O $any$ O O $Cls$ O $any$ O O $Cls$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $Cls$ O $any$ O O $Cls$ O $any$ O O O $VClass<any>[]$ O $any$ O $any$ O O O O O $any$ O O O $Cls$ O $any$ O O $Cls$ O $any$ O O O $any[]$ O O O $any$ O O O O O $any$ O O O $VClass<T>$ O $any$ O O $any[]$ O $any[]$ O O O O O O O $any$ O $any$ O O O
import Vue from 's' import 's' export { Component } from 's' export { Lifecycle , NextFunc , NextFuncVm } from 's' export { Prop , p } from 's' export { Render } from 's' export { Transition } from 's' export { Watch } from 's' export { Data } from 's' export { Mixin , Trait } from 's' export type CreateElement = typeof Vue . prototype . $createElement export { Vue }	O $any$ O O O O O O $any$ O O O O O $complex$ O $any$ O $any$ O O O O O $void$ O $complex$ O O O O O $void$ O O O O O $void$ O O O O O O O O O O O $void$ O O O O O O O $any$ O O O O O $any$ O O $any$ O $any$ O $any$ O O $any$ O
import { Component , Prop , Watch , Lifecycle , p , Render , Vue } from 's' @ Component export class MyMixin extends Vue { public k ! : string } declare module 's' { interface ComponentOptions < V extends Vue > { vuex ? : { } } } @ Component ( { directives : { } , components : { abc : { } } , vuex : { } , filters : { } , name : 's' , transitions : { } , delimiters : [ 's' , 's' ] , } ) export class MyComponent extends Vue { myData = 's' funcData = function ( ) { console . log ( 's' ) } @ Prop plain = p ( { type : Number } ) @ Prop 0 = p ( String ) @ Prop myProp = p ( Function ) @ Prop complex = p < Object > ( { type : Object , required : true , default ( ) { return { a : 0 , b : 0 } } } ) @ Prop required = p ( { type : Number , required : true , } ) @ Prop default = p ( { default ( ) { return 0 } } ) @ Prop screwed = p ( { type : Function , defaultFunc ( a ) { return false } } ) myMethod ( ) { } get myGetter ( ) { return this . myProp } myWatchee = 's' @ Watch ( 's' ) logWatch ( str ) { console . log ( this . myData ) } $parent ! : MyMixin $refs ! : { mychild : Vue } $el ! : HTMLDivElement @ Lifecycle beforeCreate ( ) { } created ( ) { } @ Render render ( h ) { return h ( 's' , 's' ) } @ Lifecycle beforeRouteEnter ( ) { } }	O O $any$ O $void$ O O O $complex$ O $complex$ O $void$ O $any$ O O O O $any$ O O $any$ O $any$ O O $string$ O O O O O O O O O $any$ O $any$ O $any$ O O ${}$ O O O O O O O $any$ O O ${}$ O O O O $complex$ O O ${}$ O O O O O ${}$ O O O O ${}$ O O O O $string$ O O O ${}$ O O O O $string[]$ O O O O O O O O O O O $any$ O $any$ O $string$ O O $void$ O O O O O $Console$ O $void$ O O O O O $void$ $number$ O $complex$ O O $NumberConstructor$ O $NumberConstructor$ O O O $void$ $string$ O $complex$ O $StringConstructor$ O O $void$ $Function$ O $complex$ O $FunctionConstructor$ O O $void$ $Object$ O $complex$ O $ObjectConstructor$ O O O $ObjectConstructor$ O $ObjectConstructor$ O $true$ O O O $complex$ O O O O O $number$ O O O $number$ O O O O O O O $void$ $number$ O $complex$ O O $NumberConstructor$ O $NumberConstructor$ O $true$ O O O O O O $void$ $number$ O $complex$ O O $number$ O O O O O O O O O $void$ $boolean$ O $complex$ O O $FunctionConstructor$ O $FunctionConstructor$ O $boolean$ O $number$ O O O O O O O $void$ O O O O O $Function$ O O O O O O $Function$ O $string$ O O O O O O O $void$ O $string$ O O $Console$ O $void$ O O O $string$ O O $MyMixin$ O O $any$ $complex$ O O O $any$ O $any$ O $HTMLDivElement$ O O $complex$ O $complex$ $void$ O O O O $void$ O O O O O $void$ $any$ O $Function$ O O O $Function$ O O O O O O O $complex$ $void$ O O O O O
import { MyComponent } from 's' import { expect } from 's' import { Component , Data , Vue , Prop , p , Watch } from 's' var globalCounter = 0 @ Component ( { props : { b : String } , watch : { a : ( ) => { globalCounter ++ } } } ) class TestData extends Vue { @ Prop a = p ( Number ) c = 0 d = { e : { f : 0 } } @ Watch ( 's' , { deep : true } ) increaseCounter ( ) { globalCounter ++ } @ Watch ( [ 's' , 's' , 's' ] ) decreaseCounter ( ) { globalCounter -- } @ Data data ( ) { return { c : this . a , d : { e : { f : 0 } } } } } describe ( 's' , ( ) => { it ( 's' , ( ) => { let opt = MyComponent [ 's' ] expect ( opt . beforeCreate ) . to . be . a ( 's' ) expect ( opt ) . to . not . have . property ( 's' ) expect ( opt . methods ! [ 's' ] ) . to . be . a ( 's' ) } ) it ( 's' , ( ) => { let opt = MyComponent [ 's' ] expect ( opt ) . to . have . ownProperty ( 's' ) expect ( opt . render ) . to . be . a ( 's' ) } ) it ( 's' , ( ) => { let opt = MyComponent [ 's' ] expect ( opt . watch ) . to . have . ownProperty ( 's' ) } ) it ( 's' , ( ) => { let opt = TestData [ 's' ] expect ( opt ) . to . have . property ( 's' ) expect ( opt . data ) . to . be . a ( 's' ) expect ( opt . data . call ( { a : 0 } ) . c ) . to . equal ( 0 ) expect ( opt . methods . data ) . to . equal ( undefined ) let instance = new TestData ( { propsData : { a : 0 } } ) expect ( instance ) . to . have . property ( 's' ) expect ( instance . a ) . to . be . equal ( 0 ) expect ( instance . data ) . to . equal ( undefined ) } ) it ( 's' , ( ) => { let opt = TestData [ 's' ] expect ( opt ) . to . have . property ( 's' ) expect ( opt . props ) . to . haveOwnProperty ( 's' ) expect ( opt . props ) . to . haveOwnProperty ( 's' ) } ) it ( 's' , ( ) => { let opt = TestData [ 's' ] expect ( opt ) . to . have . property ( 's' ) expect ( opt . watch ) . to . haveOwnProperty ( 's' ) expect ( opt . watch ) . to . haveOwnProperty ( 's' ) expect ( opt . watch ) . to . haveOwnProperty ( 's' ) expect ( opt . watch . c ) . to . haveOwnProperty ( 's' ) expect ( opt . watch . c . deep ) . to . equal ( true ) } ) it ( 's' , ( ) => { class Test { } var sharedObject = { } var counter = 0 function cp ( t ) { if ( Component . inDefinition ) { counter ++ return t as any } return undefined as any } @ Component class TestComponent extends Vue { @ Prop propValue = cp ( Number ) normal = 's' test = new Test own = this . propValue + 0 shared = sharedObject } let instance = new TestComponent ( { propsData : { propValue : 0 } } ) expect ( instance . normal ) . to . equal ( 's' ) expect ( instance . test ) . to . be . instanceOf ( Test ) expect ( instance . own ) . to . equal ( 0 ) expect ( instance . shared ) . to . equal ( sharedObject ) expect ( counter ) . to . equal ( 0 ) } ) it ( 's' , done => { let instance = new TestData ( { propsData : { b : 's' , a : 0 } } ) expect ( globalCounter ) . to . equal ( 0 ) instance . c = 0 instance . $nextTick ( ( ) => { expect ( globalCounter ) . to . equal ( 0 ) instance . a = 0 instance . $nextTick ( ( ) => { expect ( globalCounter ) . to . equal ( 0 ) done ( ) } ) } ) } ) it ( 's' , done => { let instance = new TestData ( { propsData : { b : 's' , a : 0 } } ) expect ( globalCounter ) . to . equal ( 0 ) instance . d . e . f = 0 instance . $nextTick ( ( ) => { expect ( globalCounter ) . to . equal ( 0 ) done ( ) } ) } ) it ( 's' , ( ) => { type Type = { prop ? : number ; } class Comp extends Vue { public member ! : Type ; @ Watch ( [ 's' , 's' ] ) handler ( newValue ) { } } Comp } ) } )	O O $any$ O O O O O $any$ O O O O O $any$ O $void$ O $any$ O $void$ O $complex$ O O O O O O $number$ O O O $any$ O O $complex$ O O $StringConstructor$ O $StringConstructor$ O O $complex$ O O $void$ O O O O O $number$ O O O O O O $any$ O $any$ O O $void$ $number$ O $complex$ O $NumberConstructor$ O $number$ O O $complex$ O O $complex$ O O $number$ O O O O O O O O O O $boolean$ O O O O $void$ O O O $number$ O O O O O O O O O O O O O $void$ O O O $number$ O O O $void$ $complex$ O O O O O $number$ O O O $number$ O $complex$ O O $complex$ O O $number$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $number$ O O O O O $any$ O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $undefined$ O O $TestData$ O O $any$ O O $complex$ O O $number$ O O O O O $any$ O $TestData$ O O $any$ O $any$ O $any$ O O O $any$ O $TestData$ O $number$ O O $any$ O $any$ O $any$ O O O $any$ O $TestData$ O $complex$ O O $any$ O $any$ O $undefined$ O O O $any$ O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O O ${}$ O O O O $number$ O O O $number$ O $NumberConstructor$ O O O O $any$ O $boolean$ O O $number$ O O $NumberConstructor$ O O O O $undefined$ O O O O $any$ O $any$ O $any$ O O $void$ $number$ O $number$ O $NumberConstructor$ O $string$ O O $Test$ O O $any$ $number$ O O O $number$ O O ${}$ O ${}$ O O $TestComponent$ O O $any$ O O $complex$ O O $number$ O O O O O $any$ O $TestComponent$ O $string$ O O $any$ O $any$ O O O $any$ O $TestComponent$ O $Test$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $TestComponent$ O $number$ O O $any$ O $any$ O O O $any$ O $TestComponent$ O ${}$ O O $any$ O $any$ O ${}$ O $any$ O $number$ O O $any$ O $any$ O O O O O $any$ O O O $any$ O O O $TestData$ O O $any$ O O $complex$ O O $string$ O O O $number$ O O O O O $any$ O $number$ O O $any$ O $any$ O O O $TestData$ O $number$ O O $TestData$ O $any$ O O O O O $any$ O $number$ O O $any$ O $any$ O O O $TestData$ O $number$ O O $TestData$ O $any$ O O O O O $any$ O $number$ O O $any$ O $any$ O O O $any$ O O O O O O O O $any$ O O O $any$ O O O $TestData$ O O $any$ O O $complex$ O O $string$ O O O $number$ O O O O O $any$ O $number$ O O $any$ O $any$ O O O $TestData$ O $complex$ O $complex$ O $number$ O O $TestData$ O $any$ O O O O O $any$ O $number$ O O $any$ O $any$ O O O $any$ O O O O O O $any$ O O O O O O O O $any$ O O $number$ O O O O O O $any$ O $any$ O O $Type$ O O $any$ O O O O O O O O O O $void$ O $number$ O O O O $any$ O O O O
import { expect } from 's' import { Trait , Component , Mixin , Vue } from 's' describe ( 's' , ( ) => { it ( 's' , ( ) => { expect ( Trait ) . to . be . equal ( Component ) } ) it ( 's' , ( ) => { @ Trait class MA extends Vue { 0 = 0 myMethod ( ) { } } @ Trait class MB extends Vue { 0 = 0 0 ( ) { } } let Mixed = Mixin ( MA , MB ) expect ( Mixed ) . to . be . a ( 's' ) let options = Mixed [ 's' ] expect ( options ) . to . haveOwnProperty ( 's' ) expect ( options . mixins ) . to . have . length ( 0 ) let instance = new Mixed expect ( instance ) . to . haveOwnProperty ( 's' ) expect ( instance . 0 ) . to . equal ( 0 ) expect ( instance . 0 ) . to . equal ( 0 ) expect ( instance . myMethod ) . to . be . a ( 's' ) expect ( instance . 0 ) . to . be . a ( 's' ) } ) it ( 's' , ( ) => { @ Trait class MA extends Vue { 0 = 0 myMethod ( ) { } } @ Trait class MB extends Vue { 0 = 0 0 ( ) { } } @ Component class Mixed extends Mixin ( MA , MB ) { 0 = 0 m ( ) { this . myMethod ( ) } } let instance = new Mixed expect ( instance ) . to . haveOwnProperty ( 's' ) expect ( instance . 0 ) . to . equal ( 0 ) expect ( instance . 0 ) . to . equal ( 0 ) expect ( instance . myMethod ) . to . be . a ( 's' ) expect ( instance . 0 ) . to . be . a ( 's' ) } ) it ( 's' , ( ) => { @ Trait class A extends Vue { a = 0 } @ Trait class B extends Vue { b = 0 } @ Trait class C extends Vue { c = 0 } @ Trait class D extends Vue { d = 0 } @ Trait class E extends Vue { e = 0 } interface M extends A , B , C , D , E { } @ Component class Mixed extends Mixin < M > ( A , B , C , D , E ) { } let instance = new Mixed expect ( instance . a ) . to . equal ( 0 ) expect ( instance . b ) . to . equal ( 0 ) expect ( instance . c ) . to . equal ( 0 ) expect ( instance . d ) . to . equal ( 0 ) expect ( instance . e ) . to . equal ( 0 ) @ Component ( { components : { Mixed : Mixed } } ) class TestType extends Vue { } TestType } ) } )	O O $any$ O O O O O $any$ O $any$ O O O $any$ O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $number$ O O $void$ O O O O O O $any$ O $any$ O $any$ O $number$ O O $void$ O O O O O O $complex$ O O O $any$ O $any$ O $any$ O $complex$ O O $any$ O $any$ O $any$ O O O O $any$ O $complex$ O O O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $complex$ O O $complex$ $any$ O $complex$ O O $any$ O $any$ O O O $any$ O $complex$ O $number$ O O $any$ O $any$ O O O $any$ O $complex$ O $number$ O O $any$ O $any$ O O O $any$ O $complex$ O $void$ O O $any$ O $any$ O $any$ O O O $any$ O $complex$ O $void$ O O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $number$ O O $void$ O O O O O O $any$ O $any$ O $any$ O $number$ O O $void$ O O O O O O $any$ O $any$ O O O $any$ O $any$ O O $number$ O O $void$ O O O O O $void$ O O O O O $Mixed$ O O $any$ $any$ O $Mixed$ O O $any$ O $any$ O O O $any$ O $Mixed$ O $number$ O O $any$ O $any$ O O O $any$ O $Mixed$ O $number$ O O $any$ O $any$ O O O $any$ O $Mixed$ O $void$ O O $any$ O $any$ O $any$ O O O $any$ O $Mixed$ O $void$ O O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $number$ O O O O $any$ O $any$ O $any$ O $number$ O O O O $any$ O $any$ O $any$ O $number$ O O O O $any$ O $any$ O $any$ O $number$ O O O O $any$ O $any$ O $any$ O $number$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Mixed$ O O $any$ $any$ O $Mixed$ O $number$ O O $any$ O $any$ O O O $any$ O $Mixed$ O $number$ O O $any$ O $any$ O O O $any$ O $Mixed$ O $number$ O O $any$ O $any$ O O O $any$ O $Mixed$ O $number$ O O $any$ O $any$ O O O $any$ O $Mixed$ O $number$ O O $any$ O $any$ O O O O $any$ O O $complex$ O O $any$ O $any$ O O O O $any$ O $any$ O O $any$ O O O O
import { MyComponent } from 's' import { expect } from 's' import { Component , Vue } from 's' describe ( 's' , ( ) => { it ( 's' , ( ) => { expect ( MyComponent ) . to . haveOwnProperty ( 's' ) expect ( MyComponent [ 's' ] ) . to . be . a ( 's' ) } ) it ( 's' , ( ) => { let a = new MyComponent ( { propsData : { complex : { test : 0 } , required : 0 , } } ) expect ( a ) . to . be . instanceOf ( Vue ) } ) it ( 's' , ( ) => { let options = MyComponent [ 's' ] expect ( options ) . to . haveOwnProperty ( 's' ) expect ( options . data ) . to . be . a ( 's' ) let data = ( options . data as any ) ( ) expect ( data ) . to . be . a ( 's' ) expect ( Object . keys ( data ) ) . to . be . eql ( [ 's' , 's' , 's' ] ) expect ( data [ 's' ] ) . to . equal ( 's' ) expect ( data [ 's' ] ) . to . be . a ( 's' ) } ) it ( 's' , ( ) => { let options = MyComponent [ 's' ] expect ( options ) . to . haveOwnProperty ( 's' ) expect ( options . methods ) . to . have . ownProperty ( 's' ) expect ( options . methods ! [ 's' ] ) . to . be . a ( 's' ) expect ( Object . keys ( options . methods ) ) . to . be . eql ( [ 's' , 's' ] ) } ) it ( 's' , ( ) => { let options = MyComponent [ 's' ] expect ( options ) . to . haveOwnProperty ( 's' ) expect ( options . methods ) . to . not . have . property ( 's' ) } ) it ( 's' , ( ) => { let options = MyComponent [ 's' ] expect ( options ) . to . haveOwnProperty ( 's' ) expect ( options . computed ) . to . haveOwnProperty ( 's' ) let myGetter = options . computed ! [ 's' ] expect ( myGetter ) . to . be . a ( 's' ) expect ( myGetter ) . to . haveOwnProperty ( 's' ) expect ( myGetter . get ) . to . be . a ( 's' ) } ) it ( 's' , ( ) => { @ Component class ArrayComp extends Vue { myArray = [ 0 , 0 , 0 ] } let options = ArrayComp [ 's' ] expect ( options ) . to . haveOwnProperty ( 's' ) let data = options . data ( ) expect ( data ) . to . haveOwnProperty ( 's' ) let myArray = data . myArray expect ( myArray ) . to . be . a ( 's' ) expect ( myArray . push ) . to . be . a ( 's' ) expect ( myArray ) . to . have . length ( 0 ) expect ( myArray [ 0 ] ) . to . equal ( 0 ) expect ( myArray [ 0 ] ) . to . equal ( 0 ) expect ( myArray [ 0 ] ) . to . equal ( 0 ) } ) it ( 's' , ( ) => { const sbmoz = Object . create ( { watch ( ) { } } ) expect ( sbmoz ) . to . not . have . ownProperty ( 's' ) expect ( sbmoz . watch ) . to . be . a ( 's' ) @ Component ( sbmoz ) class Test extends Vue { } const options = Test [ 's' ] expect ( options ) . to . haveOwnProperty ( 's' ) expect ( options . watch ) . to . be . an ( 's' ) } ) it ( 's' , ( ) => { @ Component class A extends Vue { static field = 0 static method ( ) { return 0 } method ( ) { return A . method ( ) + A . field } } expect ( A . field ) . to . equal ( 0 ) expect ( A . method ( ) ) . to . equal ( 0 ) const instance = new A ( ) expect ( instance . method ( ) ) . to . equal ( 0 ) } ) } )	O O $any$ O O O O O $any$ O O O O O $any$ O $any$ O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O O $MyComponent$ O O $any$ O O $complex$ O O $complex$ O O $number$ O O O O $number$ O O O O O O $any$ O $MyComponent$ O O $any$ O $any$ O $any$ O $any$ O O O $any$ O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O $any$ O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $ObjectConstructor$ O $complex$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O $any$ O $ObjectConstructor$ O $complex$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O O O O $any$ O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $number[]$ O O O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O $any$ O $any$ $any$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O $ObjectConstructor$ O $complex$ O O $void$ O O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O O $number$ O O O $number$ O O O O O O $number$ O O O O $any$ O $number$ O O O $any$ O $number$ O O $any$ O $any$ O $number$ O O $any$ O $any$ O O O $any$ O $any$ O $number$ O O O O $any$ O $any$ O O O O $A$ O O $any$ O O $any$ O $A$ O $number$ O O O O $any$ O $any$ O O O O O O O
import { MyComponent } from 's' import { expect } from 's' describe ( 's' , ( ) => { it ( 's' , ( ) => { let options = MyComponent [ 's' ] expect ( options ) . to . haveOwnProperty ( 's' ) let props = options . props ! expect ( props ) . to . be . a ( 's' ) expect ( props ) . to . haveOwnProperty ( 's' ) expect ( props ) . to . haveOwnProperty ( 's' ) expect ( props ) . to . haveOwnProperty ( 's' ) } ) it ( 's' , ( ) => { let props = MyComponent [ 's' ] . props ! expect ( props [ 's' ] ) . to . deep . equal ( { type : Function } , 's' ) } ) it ( 's' , ( ) => { let props = MyComponent [ 's' ] . props let complex = props [ 's' ] expect ( complex [ 's' ] ) . to . equal ( Object ) expect ( complex [ 's' ] ) . to . equal ( true ) expect ( complex [ 's' ] ) . to . be . a ( 's' ) let 0 = complex [ 's' ] ( ) expect ( 0 ) . to . deep . equal ( { a : 0 , b : 0 } ) let 0 = complex [ 's' ] ( ) expect ( 0 ) . to . deep . equal ( { a : 0 , b : 0 } , 's' ) expect ( 0 ) . to . not . equal ( 0 ) } ) it ( 's' , ( ) => { let props = MyComponent [ 's' ] . props let screwed = props [ 's' ] expect ( screwed [ 's' ] ) . to . equal ( Function ) expect ( screwed [ 's' ] ) . to . be . a ( 's' ) expect ( screwed ) . to . not . haveOwnProperty ( 's' ) expect ( screwed [ 's' ] ) . to . equal ( undefined ) } ) it ( 's' , ( ) => { let data = MyComponent [ 's' ] . data ! expect ( data ) . to . not . have . property ( 's' ) expect ( data ) . to . not . have . property ( 's' ) expect ( data ) . to . not . have . property ( 's' ) } ) it ( 's' , ( ) => { let instance = new MyComponent ( { propsData : { complex : { test : 0 } , required : 0 , } } ) expect ( instance . required ) . to . equal ( 0 ) expect ( instance . complex [ 's' ] ) . to . equal ( 0 ) } ) } )	O O $any$ O O O O O $any$ O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O $FunctionConstructor$ O $FunctionConstructor$ O O O O O O $any$ O O O O O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O $any$ O $ObjectConstructor$ O $any$ O $any$ O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O $number$ O O O $number$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O $number$ O O O $number$ O O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O $any$ O O O O O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O $any$ O $FunctionConstructor$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O $any$ O $undefined$ O O O $any$ O O O O O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O O $MyComponent$ O O $any$ O O $complex$ O O $complex$ O O $number$ O O O O $number$ O O O O O O $any$ O $MyComponent$ O $number$ O O $any$ O $any$ O O O $any$ O $MyComponent$ O $Object$ O O O O O $any$ O $any$ O O O O O O O
import 's' import 's' import 's' import 's' import 's'	O O O O O O O O O O
'js' var path = require ( 's' ) var webpack = require ( 's' ) module . exports = { entry : { index : 's' , test : 's' } , output : { path : path . resolve ( __dirname , 's' ) , filename : 's' , libraryTarget : 's' , } , resolve : { extensions : [ 's' , 's' ] } , externals : { vue : 's' , chai : 's' , } , module : { rules : [ { test : "s" , use : 's' } ] } , plugins : [ new webpack . optimize . ModuleConcatenationPlugin ( ) ] , target : 's' }	O O $any$ O $any$ O O O O $any$ O $any$ O O O $complex$ O $complex$ O O $complex$ O O $string$ O O O $string$ O O O O $complex$ O O $any$ O $any$ O $any$ O $any$ O O O O $string$ O O O $string$ O O O O O $complex$ O O $string[]$ O O O O O O O O $complex$ O O $string$ O O O $string$ O O O O O $complex$ O O $complex$ O O O $RegExp$ O O O $string$ O O O O O O $any[]$ O O O $any$ O $any$ O $any$ O O O O $string$ O O O