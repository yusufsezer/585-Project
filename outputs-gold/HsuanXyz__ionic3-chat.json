import { Component } from 's' ; import { Platform } from 's' ; import { StatusBar } from 's' ; import { SplashScreen } from 's' ; @ Component ( { templateUrl : 's' } ) export class MyApp { rootPage : any = 's' ; constructor ( platform , statusBar , splashScreen ) { platform . ready ( ) . then ( ( ) => { statusBar . styleDefault ( ) ; splashScreen . hide ( ) ; } ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $Platform$ O $StatusBar$ O $SplashScreen$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
export class EmojiProvider { getEmojis ( ) { const EMOJIS = "s" + "s" + "s" + "s" + "s" + "s" + "s" + "s" + "s" + "s" ; const EmojiArr = EMOJIS . split ( 's' ) ; const groupNum = Math . ceil ( EmojiArr . length / ( 0 ) ) ; const items = [ ] ; for ( let i = 0 ; i < groupNum ; i ++ ) { items . push ( EmojiArr . slice ( i * 0 , ( i + 0 ) * 0 ) ) ; } return items } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { NgModule , ErrorHandler } from 's' ; import { IonicApp , IonicModule , IonicErrorHandler } from 's' ; import { BrowserModule } from 's' ; import { MyApp } from 's' ; import { StatusBar } from 's' ; import { SplashScreen } from 's' ; import { EmojiProvider } from 's' ; import { HttpClientModule } from "s" ; @ NgModule ( { declarations : [ MyApp , ] , imports : [ BrowserModule , HttpClientModule , IonicModule . forRoot ( MyApp , { tabsHideOnSubPages : true , tabsLayout : 's' , preloadModules : true } ) , ] , bootstrap : [ IonicApp ] , entryComponents : [ MyApp , ] , providers : [ StatusBar , SplashScreen , { provide : ErrorHandler , useClass : IonicErrorHandler } , EmojiProvider ] } ) export class AppModule { }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { platformBrowserDynamic } from 's' ; import { AppModule } from 's' ; platformBrowserDynamic ( ) . bootstrapModule ( AppModule ) ;	O O O O O O O O O O O O O O O O O O O O O O O
import { Component , forwardRef } from 's' ; import { EmojiProvider } from "s" ; import { ControlValueAccessor , NG_VALUE_ACCESSOR } from "s" ; export const EMOJI_PICKER_VALUE_ACCESSOR = { provide : NG_VALUE_ACCESSOR , useExisting : forwardRef ( ( ) => EmojiPickerComponent ) , multi : true } ; @ Component ( { selector : 's' , providers : [ EMOJI_PICKER_VALUE_ACCESSOR ] , templateUrl : 's' } ) export class EmojiPickerComponent implements ControlValueAccessor { emojiArr = [ ] ; _content : string ; _onChanged : Function ; _onTouched : Function ; constructor ( emojiProvider ) { this . emojiArr = emojiProvider . getEmojis ( ) ; } writeValue ( obj ) { this . _content = obj ; } registerOnChange ( fn ) { this . _onChanged = fn ; this . setValue ( this . _content ) ; } registerOnTouched ( fn ) { this . _onTouched = fn ; } private setValue ( val ) { this . _content += val ; if ( this . _content ) { this . _onChanged ( this . _content ) } } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $EmojiProvider$ O O O O O O O O O O O O O $void$ O $any$ O O O O O O O O O $void$ O $any$ O O O O O O O O O O O O O O O O O O $void$ O $any$ O O O O O O O O O O $any$ O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O
import { NgModule } from 's' ; import { IonicPageModule } from 's' ; import { EmojiPickerComponent } from 's' ; @ NgModule ( { declarations : [ EmojiPickerComponent , ] , imports : [ IonicPageModule . forChild ( EmojiPickerComponent ) , ] , exports : [ EmojiPickerComponent ] } ) export class EmojiPickerComponentModule { }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { Component } from 's' ; import { IonicPage } from 's' ; @ IonicPage ( ) @ Component ( { selector : 's' , templateUrl : 's' } ) export class AboutPage { }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { NgModule } from 's' ; import { IonicPageModule } from 's' ; import { AboutPage } from 's' ; @ NgModule ( { declarations : [ AboutPage , ] , imports : [ IonicPageModule . forChild ( AboutPage ) , ] , exports : [ AboutPage ] } ) export class AboutPageModule { }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { Injectable } from 's' ; import { Events } from 's' ; import { map } from 's' ; import { HttpClient } from "s" ; import { Observable } from "s" ; export class ChatMessage { messageId : string ; userId : string ; userName : string ; userAvatar : string ; toUserId : string ; time : number | string ; message : string ; status : string ; } export class UserInfo { id : string ; name ? : string ; avatar ? : string ; } @ Injectable ( ) export class ChatService { constructor ( private http , private events ) { } mockNewMsg ( msg ) { const mockMsg = { messageId : Date . now ( ) . toString ( ) , userId : 's' , userName : 's' , userAvatar : 's' , toUserId : 's' , time : Date . now ( ) , message : msg . message , status : 's' } ; setTimeout ( ( ) => { this . events . publish ( 's' , mockMsg , Date . now ( ) ) } , Math . random ( ) * 0 ) } getMsgList ( ) < ChatMessage [ ] > { const msgListUrl = 's' ; return this . http . get < any > ( msgListUrl ) . pipe ( map ( response => response . array ) ) ; } sendMsg ( msg ) { return new Promise ( resolve => setTimeout ( ( ) => resolve ( msg ) , Math . random ( ) * 0 ) ) . then ( ( ) => this . mockNewMsg ( msg ) ) ; } getUserInfo ( ) < UserInfo > { const userInfo = { id : 's' , name : 's' , avatar : 's' } ; return new Promise ( resolve => resolve ( userInfo ) ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $HttpClient$ O O $Events$ O O O O O O O O O $ChatMessage$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $Observable$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ChatMessage$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $Promise$ O O O O O O O $UserInfo$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { Component , ElementRef , ViewChild } from 's' ; import { IonicPage , NavParams } from 's' ; import { Events , Content } from 's' ; import { ChatService , ChatMessage , UserInfo } from "s" ; @ IonicPage ( ) @ Component ( { selector : 's' , templateUrl : 's' , } ) export class Chat { @ ViewChild ( Content ) content : Content ; @ ViewChild ( 's' ) messageInput : ElementRef ; msgList : ChatMessage [ ] = [ ] ; user : UserInfo ; toUser : UserInfo ; editorMsg = 's' ; showEmojiPicker = false ; constructor ( navParams , private chatService , private events , ) { this . toUser = { id : navParams . get ( 's' ) , name : navParams . get ( 's' ) } ; this . chatService . getUserInfo ( ) . then ( ( res ) => { this . user = res } ) ; } ionViewWillLeave ( ) { this . events . unsubscribe ( 's' ) ; } ionViewDidEnter ( ) { this . getMsg ( ) ; this . events . subscribe ( 's' , msg => { this . pushNewMsg ( msg ) ; } ) } onFocus ( ) { this . showEmojiPicker = false ; this . content . resize ( ) ; this . scrollToBottom ( ) ; } switchEmojiPicker ( ) { this . showEmojiPicker = ! this . showEmojiPicker ; if ( ! this . showEmojiPicker ) { this . focus ( ) ; } else { this . setTextareaScroll ( ) ; } this . content . resize ( ) ; this . scrollToBottom ( ) ; } getMsg ( ) { return this . chatService . getMsgList ( ) . subscribe ( res => { this . msgList = res ; this . scrollToBottom ( ) ; } ) ; } sendMsg ( ) { if ( ! this . editorMsg . trim ( ) ) return ; const id = Date . now ( ) . toString ( ) ; let newMsg = { messageId : Date . now ( ) . toString ( ) , userId : this . user . id , userName : this . user . name , userAvatar : this . user . avatar , toUserId : this . toUser . id , time : Date . now ( ) , message : this . editorMsg , status : 's' } ; this . pushNewMsg ( newMsg ) ; this . editorMsg = 's' ; if ( ! this . showEmojiPicker ) { this . focus ( ) ; } this . chatService . sendMsg ( newMsg ) . then ( ( ) => { let index = this . getMsgIndexById ( id ) ; if ( index !== - 0 ) { this . msgList [ index ] . status = 's' ; } } ) } pushNewMsg ( msg ) { const userId = this . user . id , toUserId = this . toUser . id ; if ( msg . userId === userId && msg . toUserId === toUserId ) { this . msgList . push ( msg ) ; } else if ( msg . toUserId === userId && msg . userId === toUserId ) { this . msgList . push ( msg ) ; } this . scrollToBottom ( ) ; } getMsgIndexById ( id ) { return this . msgList . findIndex ( e => e . messageId === id ) } scrollToBottom ( ) { setTimeout ( ( ) => { if ( this . content . scrollToBottom ) { this . content . scrollToBottom ( ) ; } } , 0 ) } private focus ( ) { if ( this . messageInput && this . messageInput . nativeElement ) { this . messageInput . nativeElement . focus ( ) ; } } private setTextareaScroll ( ) { const textarea = this . messageInput . nativeElement ; textarea . scrollTop = textarea . scrollHeight ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $NavParams$ O O $ChatService$ O O $Events$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ChatMessage$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $ChatMessage$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $string$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { Pipe , PipeTransform } from 's' ; import distanceInWordsToNow from 's' ; @ Pipe ( { name : 's' , } ) export class RelativeTime implements PipeTransform { transform ( value , ... args ) { return distanceInWordsToNow ( new Date ( value ) , { addSuffix : true } ) ; } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $string$ O O O O O O O O O O O O O O O O O O O O O O O
import { NgModule } from 's' ; import { IonicPageModule } from 's' ; import { Chat } from 's' ; import { ChatService } from "s" ; import { RelativeTime } from "s" ; import { EmojiPickerComponentModule } from "s" ; import { EmojiProvider } from "s" ; @ NgModule ( { declarations : [ Chat , RelativeTime ] , imports : [ EmojiPickerComponentModule , IonicPageModule . forChild ( Chat ) , ] , exports : [ Chat ] , providers : [ ChatService , EmojiProvider ] } ) export class ChatModule { }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { Component } from 's' ; import { IonicPage } from 's' ; @ IonicPage ( ) @ Component ( { selector : 's' , templateUrl : 's' } ) export class ContactPage { }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { NgModule } from 's' ; import { ContactPage } from 's' ; import { IonicPageModule } from 's' ; @ NgModule ( { declarations : [ ContactPage ] , imports : [ IonicPageModule . forChild ( ContactPage ) ] , } ) export class ContactPageModule { }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { Component } from 's' ; import { IonicPage } from 's' ; @ IonicPage ( ) @ Component ( { selector : 's' , templateUrl : 's' } ) export class HomePage { toUser : { toUserId : string , toUserName : string } ; constructor ( ) { this . toUser = { toUserId : 's' , toUserName : 's' } } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { NgModule } from 's' ; import { HomePage } from 's' ; import { IonicPageModule } from 's' ; @ NgModule ( { declarations : [ HomePage ] , imports : [ IonicPageModule . forChild ( HomePage ) , ] , } ) export class HomePageModule { }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { Component } from 's' ; import { IonicPage } from "s" ; @ IonicPage ( ) @ Component ( { templateUrl : 's' } ) export class TabsPage { 0 : any = 's' ; 0 : any = 's' ; constructor ( ) { } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { NgModule } from 's' ; import { TabsPage } from 's' ; import { IonicPageModule } from 's' ; @ NgModule ( { declarations : [ TabsPage ] , imports : [ IonicPageModule . forChild ( TabsPage ) ] , } ) export class TabsPageModule { }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
'js' 's' ; importScripts ( 's' ) ; self . toolbox . options . cache = { name : 's' } ; self . toolbox . precache ( [ 's' , 's' , 's' , 's' , 's' , 's' ] ) ; self . toolbox . router . any ( 's' , self . toolbox . fastest ) ; self . toolbox . router . default = self . toolbox . networkFirst ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O