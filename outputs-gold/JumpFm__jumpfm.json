'js' const updater = require ( 's' ) ; const electron = require ( 's' ) const app = electron . app const BrowserWindow = electron . BrowserWindow const path = require ( 's' ) const url = require ( 's' ) app . on ( 's' , function ( ) { if ( process . platform != 's' ) { app . quit ( ) ; } } ) ; app . on ( 's' , function ( ) { updater . init ( 's' ) ; const { width , height } = electron . screen . getPrimaryDisplay ( ) . workAreaSize ; const w = parseInt ( width * 0 ) ; const h = parseInt ( height * 0 ) ; global . argv = process . argv let mainWindow = new BrowserWindow ( { width : w , height : h , icon : path . join ( __dirname , 's' ) , } ) ; mainWindow . loadURL ( 's' + __dirname + 's' ) ; mainWindow . on ( 's' , function ( ) { mainWindow = null ; } ) ; } ) ;	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
const keyCodes : { [ name ] : number } = { backspace : 0 , tab : 0 , enter : 0 , pause : 0 , esc : 0 , space : 0 , pageup : 0 , pagedown : 0 , end : 0 , home : 0 , left : 0 , up : 0 , right : 0 , down : 0 , insert : 0 , del : 0 , slash : 0 , 0 : 0 , 0 : 0 , 0 : 0 , 0 : 0 , 0 : 0 , 0 : 0 , 0 : 0 , 0 : 0 , 0 : 0 , 0 : 0 , a : 0 , b : 0 , c : 0 , d : 0 , e : 0 , f : 0 , g : 0 , h : 0 , i : 0 , j : 0 , k : 0 , l : 0 , m : 0 , n : 0 , o : 0 , p : 0 , q : 0 , r : 0 , s : 0 , t : 0 , u : 0 , v : 0 , w : 0 , x : 0 , y : 0 , z : 0 , 0 : 0 , 0 : 0 , 0 : 0 , 0 : 0 , 0 : 0 , 0 : 0 , 0 : 0 , 0 : 0 , 0 : 0 , 0 : 0 , 0 : 0 , 0 : 0 , numLock : 0 , scrollLock : 0 , 's' : 0 , 's' : 0 , 's' : 0 , 's' : 0 , 's' : 0 , 's' : 0 , 's' : 0 , 's' : 0 , 's' : 0 , 's' : 0 , "s" : 0 } const includes = ( array , item ) => array . indexOf ( item ) > - 0 export const shortway = ( command , callback ) => { const keys = command . split ( 's' ) const key = keys . filter ( key => keyCodes [ key ] ) [ 0 ] const keyCode = keyCodes [ key ] const ctrl = keys . some ( key => key === 's' ) const shift = keys . some ( key => key === 's' ) const alt = keys . some ( key => key === 's' ) if ( ! keyCode ) throw new Error ( `template` ) return function ( e ) { if ( e . ctrlKey === ctrl && e . shiftKey === shift && e . altKey === alt && e . keyCode === keyCode ) { callback ( e ) return false } } }	O O O O O $string
import { Dialog as DialogApi , DialogSpec , Suggestion } from 's' import { shortway } from "s" ; interface SuggestionLi extends Suggestion { li : HTMLLIElement } export class Dialog implements DialogApi { private readonly divDialog : HTMLDivElement = document . getElementById ( 's' ) as HTMLDivElement private readonly divLabel : HTMLDivElement = document . getElementById ( 's' ) as HTMLDivElement private readonly input : HTMLInputElement = document . getElementById ( 's' ) as HTMLInputElement private readonly olSug : HTMLOListElement = document . getElementById ( 's' ) as HTMLOListElement private suggestions : SuggestionLi [ ] = [ ] private onAccept = ( val , sug ) => { } private suggest = val => [ ] private cur : number constructor ( ) { const on = ( type , action , capture = false ) => this . input . addEventListener ( type , action , capture ) on ( 's' , e => { e . stopPropagation ( ) } ) on ( 's' , this . close ) on ( 's' , shortway ( 's' , this . close ) ) on ( 's' , shortway ( 's' , ( ) => { this . close ( ) this . onAccept ( this . input . value , this . suggestions [ this . cur ] ) } ) ) on ( 's' , shortway ( 's' , ( ) => this . setCur ( this . cur + 0 ) ) ) on ( 's' , shortway ( 's' , ( ) => this . setCur ( this . cur - 0 ) ) ) on ( 's' , this . updateSuggestions ) } private updateSuggestions = ( ) => { this . suggestions = this . suggest ( this . input . value ) . map ( sug => { const li = document . createElement ( 's' ) li . innerHTML = sug . html sug . li = li return sug } ) this . clearSuggestions ( ) this . suggestions . forEach ( sug => { this . olSug . appendChild ( sug . li ) } ) const curSuggestion = this . suggestions [ this . cur = 0 ] if ( curSuggestion ) curSuggestion . li . setAttribute ( 's' , 's' ) } private setCur = ( i ) => { if ( ! this . suggestions . length ) return const curSug = this . suggestions [ this . cur ] if ( curSug ) curSug . li . removeAttribute ( 's' ) this . cur = Math . max ( 0 , Math . min ( i , this . suggestions . length - 0 ) ) this . suggestions [ this . cur ] . li . setAttribute ( 's' , 's' ) } private clearSuggestions = ( ) => { while ( this . olSug . lastChild ) this . olSug . removeChild ( this . olSug . lastChild ) } private close = ( ) => { this . divDialog . style . display = 's' } open = ( spec ) => { this . suggestions = [ ] this . clearSuggestions ( ) this . divLabel . textContent = spec . label this . cur = 0 this . divDialog . style . display = 's' this . input . value = 's' this . input . select ( ) spec . onOpen && spec . onOpen ( this . input ) this . suggest = spec . suggest || ( val => [ ] ) this . onAccept = spec . onAccept } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $string$ O $Suggestionnumber$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $DialogSpec$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import * as fs from 's' ; import * as homedir from 's' ; import * as path from 's' ; export interface Plugins { name : string version : string dependencies : { [ name ] : string } } const load = ( path ) => { try { return require ( path ) } catch ( e ) { console . log ( e ) return { } } } const save = < T > ( path ) => ( obj : T ) => { fs . writeFileSync ( path , JSON . stringify ( obj , null , 0 ) ) return obj ; } export const packageJson = require ( 's' ) export const root = path . join ( homedir ( ) , "s" ) export const pluginsPath = path . join ( root , 's' ) if ( ! fs . existsSync ( pluginsPath ) ) fs . mkdirpSync ( pluginsPath ) export const pluginsPackageJson = path . join ( pluginsPath , 's' ) export const settingsPath = path . join ( root , 's' ) export const keyboardPath = path . join ( root , 's' ) export const settings = load ( settingsPath ) export const keyboard = load ( keyboardPath ) export const saveSettings = save ( settingsPath ) export const saveKeyboard = ( ) => save ( keyboardPath ) ( keyboard ) export const savePlugins = save < Plugins > ( pluginsPackageJson ) export const getKeys = ( actionName , defaultKeys : string [ ] ) : string [ ] => { const keys = keyboard [ actionName ] if ( keys && Array . isArray ( keys ) ) return keys keyboard [ actionName ] = defaultKeys return defaultKeys }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $string$ O O O O O O O O O $string$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $string$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $string$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { FilterBox as FilterApi } from 's' import { getKeys } from "s" ; import { shortway } from "s" ; export class Filter implements FilterApi { readonly input : HTMLInputElement = document . createElement ( 's' ) private readonly handlers : ( ( val ) => void ) [ ] = [ ] constructor ( ) { this . input . className = 's' this . input . addEventListener ( 's' , e => e . stopPropagation ( ) , false ) this . input . addEventListener ( 's' , ( ) => { this . notifyAll ( ) } , false ) this . input . addEventListener ( 's' , this . hide , false ) this . hide ( ) } private notifyAll ( ) { this . handlers . forEach ( handler => { handler ( this . input . value ) } ) ; } set = ( val ) => { this . input . value = val this . notifyAll ( ) } get = ( ) => { return this . input . value } onChange = ( handler : ( val ) => void ) => this . handlers . push ( handler ) focus = ( ) => { this . input . style . display = 's' this . input . focus ( ) } hide = ( ) => this . input . style . display = 's' bind = ( actionName , defaultKeys : string [ ] , action : ( ) => void ) => { getKeys ( actionName , defaultKeys ) . forEach ( combo => { const cb = shortway ( combo , ( e ) => { e . preventDefault ( ) action ( ) } ) this . input . addEventListener ( 's' , cb , false ) } ) } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $string$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O $string$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $string$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $string$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { Item as ItemApi , File } from 's' import * as moment from 's' import * as fileSize from 's' type attr = 's' | 's' | 's' export class Item implements ItemApi { private hidden : boolean = false private selected : boolean = false private readonly icon = document . createElement ( 's' ) private readonly tdIcon = document . createElement ( 's' ) private readonly tdName = document . createElement ( 's' ) private readonly tdSize = document . createElement ( 's' ) private readonly tdTime = document . createElement ( 's' ) readonly tr = document . createElement ( 's' ) constructor ( item ) { this . icon . className = 's' this . tdIcon . appendChild ( this . icon ) this . tr . appendChild ( this . tdIcon ) this . tr . appendChild ( this . tdName ) this . tr . appendChild ( this . tdSize ) this . tr . appendChild ( this . tdTime ) this . path = item . path this . name = item . name this . tdName . textContent = item . name || 's' } readonly path : string ; readonly name : string ; private readonly attrs : { [ attr ] : boolean } = { } private set = ( attr ) => ( b ) => { this . attrs [ attr ] = b if ( b ) this . tr . setAttribute ( attr , 's' ) else this . tr . removeAttribute ( attr ) return this } private is = ( attr ) => this . attrs [ attr ] setCur : ( b ) => void = this . set ( 's' ) setHidden : ( b ) => void = this . set ( 's' ) setSelected : ( b ) => void = this . set ( 's' ) hide = ( ) => this . setHidden ( true ) show = ( ) => this . setHidden ( false ) isSelected = ( ) => this . is ( 's' ) isHidden = ( ) => this . is ( 's' ) setAttribute ( name , val = 's' ) { this . tr . setAttribute ( name , val ) return this } setIcon = ( src ) => { this . icon . src = src return this } setTime = ( time ) => { this . tdTime . textContent = ( time && moment ( time ) . format ( 's' ) || 's' ) return this } setSize = ( size ) => { this . tdSize . textContent = ( size && fileSize ( size ) || 's' ) return this } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $File$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $string$ O O O O O O O O O O O $attr$ O O O $boolean$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $attr$ O O O O O O O O O O O $boolean$ O O O O O O O O O O O O O $boolean$ O O O O O O O O O O O O O $boolean$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $string$ O $string$ O O O O O O O O O O O O O O O O O O O O $string$ O O O O O O O O O O O O O O O O $number$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $number$ O O O O O O O O O O O O O O O O O O O O O O O
import { Panel as PanelApi , Url , File } from 's' import { Item } from 's' import { Filter } from 's' import { getKeys } from "s" ; import { shortway } from "s" ; export class Panel implements PanelApi { private readonly table : HTMLTableElement = document . createElement ( 's' ) private readonly tbody : HTMLTableSectionElement = document . createElement ( 's' ) private readonly thead : HTMLTableSectionElement = document . createElement ( 's' ) private readonly title : HTMLTitleElement = document . createElement ( 's' ) private readonly trHead : HTMLTableRowElement = document . createElement ( 's' ) readonly divPanel : HTMLDivElement = document . createElement ( 's' ) readonly filterBox : Filter = new Filter ( ) private readonly filters : { [ name ] : ( ( item ) => boolean ) } = { } private readonly onCds : ( ( ) => void ) [ ] = [ ] private readonly onItemsAddeds : ( ( newItems : Item [ ] ) => void ) [ ] = [ ] private readonly onLoads : ( ( ) => void ) [ ] = [ ] private active = false private url : Url private cur : number = 0 private items : Item [ ] = [ ] private visibleItems : Item [ ] = [ ] constructor ( ) { [ 's' , 's' , 's' , 's' ] . forEach ( head => { const td = document . createElement ( 's' ) td . textContent = head this . trHead . appendChild ( td ) } ) this . divPanel . className = 's' this . divPanel . appendChild ( this . title ) this . divPanel . appendChild ( this . table ) this . thead . appendChild ( this . trHead ) this . table . appendChild ( this . thead ) this . table . appendChild ( this . tbody ) this . divPanel . appendChild ( this . filterBox . input ) this . filterBox . onChange ( this . setTitle ) } private clearItems = ( ) => { while ( this . tbody . lastChild ) this . tbody . removeChild ( this . tbody . lastChild ) } private addItems = ( items : Item [ ] ) => { items . forEach ( item => this . tbody . appendChild ( item . tr ) ) } private setTitle = ( ) => { const filter = this . filterBox . get ( ) const protocol = this . url . protocol this . title . textContent = ( protocol ? protocol + 's' : 's' ) + this . url . path + ( filter ? 's' + filter + 's' : 's' ) } private scrollToCur = ( ) => { const curItem = this . getCurrentItem ( ) if ( ! curItem ) return const tr = curItem . tr const trRect = tr . getBoundingClientRect ( ) const tbodyRect = this . tbody . getBoundingClientRect ( ) if ( trRect . bottom > tbodyRect . bottom ) tr . scrollIntoView ( false ) if ( trRect . top < tbodyRect . top ) tr . scrollIntoView ( true ) } private safeUpdateCurrent = ( b ) => { const item = this . getCurrentItem ( ) if ( item ) item . setCur ( b ) } private setCur = ( i ) => { this . safeUpdateCurrent ( false ) this . cur = Math . max ( 0 , Math . min ( i , this . visibleItems . length - 0 ) ) this . safeUpdateCurrent ( true ) } private progressiveProcessItems = ( process : ( items : Item [ ] ) => void ) => ( from , done ? : ( ) => void ) => { if ( from > this . items . length ) return done && done ( ) const to = from + 0 process ( this . items . slice ( from , to ) ) setImmediate ( ( ) => { this . progressiveProcessItems ( process ) ( to , done ) } ) } private progressiveAddItems = this . progressiveProcessItems ( items => { this . addItems ( items ) this . onItemsAddeds . forEach ( f => setImmediate ( ( ) => f ( items ) ) ) } ) private progressiveUpdateVisibility = this . progressiveProcessItems ( items => { items . forEach ( item => { const visible = Object . values ( this . filters ) . every ( filter => filter ( item ) ) if ( visible ) { this . visibleItems . push ( item ) item . show ( ) } else { item . hide ( ) } } ) } ) private updateVisibility = ( ) => { console . log ( 's' ) this . safeUpdateCurrent ( false ) this . visibleItems = [ ] this . progressiveUpdateVisibility ( 0 , ( ) => { console . log ( 's' ) this . setCur ( this . cur ) this . scrollToCur ( ) } ) } private selectRange = ( from , to ) => { if ( from > to ) return this . selectRange ( to , from ) for ( let i = from ; i <= Math . min ( to , this . visibleItems . length - 0 ) ; i ++ ) { const item = this . visibleItems [ i ] if ( item ) item . setSelected ( true ) } } private rowsInView = ( ) => { return Math . floor ( this . tbody . clientHeight / this . visibleItems [ 0 ] . tr . scrollHeight ) } private stepTo = ( i , select = false ) => { if ( select ) this . selectRange ( this . cur , i ) this . setCur ( i ) this . scrollToCur ( ) } setActive = ( b ) => { this . active = b if ( b ) this . divPanel . setAttribute ( 's' , 's' ) else this . divPanel . removeAttribute ( 's' ) } cd ( path ) ; cd ( url ) ; cd ( pathOrUrl ) { if ( typeof pathOrUrl == 's' ) return this . cd ( { protocol : 's' , path : pathOrUrl , query : { } } ) this . url = pathOrUrl as Url console . log ( 's' , this . url ) this . setTitle ( ) this . onCds . forEach ( f => setImmediate ( f ) ) } onCd = ( then : ( ) => void ) => this . onCds . push ( then ) onItemsAdded = ( then : ( newItems : Item [ ] ) => void ) => this . onItemsAddeds . push ( then ) onLoad = ( then : ( ) => void ) => { this . onLoads . push ( then ) } step = ( d , select ? ) => { const newCur = d < 0 ? Math . max ( 0 , this . cur + d ) : Math . min ( this . cur + d , this . visibleItems . length - 0 ) this . stepTo ( newCur , select ) } stepPgUp = ( select ? ) => { this . step ( - this . rowsInView ( ) , select ) } stepPgDown = ( select ? ) => { this . step ( this . rowsInView ( ) , select ) } stepStart = ( select ? ) => { this . stepTo ( 0 , select ) } stepEnd = ( select ? ) => { this . stepTo ( this . visibleItems . length - 0 , select ) } selectNone = ( ) => this . items . forEach ( item => item . setSelected ( false ) ) selectAll = ( ) => this . items . forEach ( item => item . setSelected ( true ) ) selectToggleCurrent = ( ) => { const item = this . getCurrentItem ( ) item . setSelected ( ! item . isSelected ( ) ) } getUrl = ( ) => this . url getItems = ( ) => this . items getSelectedItems = ( ) => this . visibleItems . filter ( ( item , i ) => i === this . cur || item . isSelected ( ) ) getCurrentItem = ( ) => this . visibleItems [ this . cur ] setItems = ( items : File [ ] ) => { console . log ( 's' ) this . items = items . map ( item => new Item ( item ) ) this . clearItems ( ) this . progressiveAddItems ( 0 , ( ) => { this . onLoads . forEach ( onLoad => { setImmediate ( onLoad ) } ) } ) this . updateVisibility ( ) return this } filterSet = ( name , filter : ( item ) => boolean ) => { console . log ( 's' , filter ) this . filters [ name ] = filter this . updateVisibility ( ) } filterRemove = ( name ) => { delete this . filters [ name ] this . updateVisibility ( ) } bind = ( actionName , defaultKeys : string [ ] , action : ( ) => void ) => { getKeys ( actionName , defaultKeys ) . forEach ( combo => { const cb = shortway ( combo , ( e ) => { if ( ! this . active ) return e . preventDefault ( ) action ( ) } ) document . addEventListener ( 's' , cb , false ) } ) } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $string$ O O O O $Itemboolean$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $number$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $number$ O $number$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $boolean$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $boolean$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $void$ O $string$ O O $void$ O $Url$ O O O O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $number$ O O $boolean$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $boolean$ O O O O O O O O O O O O O O O O O O O O O $boolean$ O O O O O O O O O O O O O O O O O O O O $boolean$ O O O O O O O O O O O O O O O O $boolean$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $string$ O O O O $Item$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $string$ O O O O O O O O O O O O O O O O O O O $string$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { StatusBar as StatusBarApi , Msg as MsgAPi } from 's' class Msg implements MsgAPi { readonly divMsg : HTMLDivElement = document . createElement ( 's' ) constructor ( ) { this . divMsg . className = 's' } setType = ( type : "s" | "s" | "s" ) => { this . divMsg . setAttribute ( 's' , type ) return this } setText = ( txt ) => { this . divMsg . textContent = txt return this } setTooltip = ( txt ) => { this . divMsg . setAttribute ( 's' , txt ) return this } setClearTimeout = ( timeout ) => { setTimeout ( ( ) => this . setText ( 's' ) , timeout ) return this } setAttr = ( name , b ) => { if ( b ) this . divMsg . setAttribute ( name , 's' ) else this . divMsg . removeAttribute ( name ) return this } } class Button { readonly a : HTMLAnchorElement = document . createElement ( 's' ) private readonly i = document . createElement ( 's' ) constructor ( faIcon , tooltip ) { this . a . className = 's' this . a . setAttribute ( 's' , tooltip ) this . a . target = 's' this . i . className = `template` this . a . appendChild ( this . i ) } } export class StatusBar implements StatusBarApi { private readonly divMsgs : HTMLDivElement = document . getElementById ( 's' ) as HTMLDivElement private readonly divButtons : HTMLDivElement = document . getElementById ( 's' ) as HTMLDivElement private readonly msgs : { [ name ] : Msg } = { } msg = ( name ) : MsgAPi => { if ( this . msgs [ name ] ) return this . msgs [ name ] const msg = new Msg ( ) this . msgs [ name ] = msg this . divMsgs . appendChild ( msg . divMsg ) return msg } clear = ( name ) => { const msg = this . msgs [ name ] if ( ! msg ) return msg . setText ( 's' ) } msgClear = this . clear buttonAdd ( faIcon , tooltip , action : ( ) => void ) { const a = new Button ( faIcon , tooltip ) . a this . divButtons . appendChild ( a ) a . addEventListener ( 's' , action , false ) } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $string$ O O O O O O O O O O O O O O O O $string$ O O O O O O O O O O O O O O O O O O O $number$ O O O O O O O O O O O O O O O O O O O O O O O $string$ O $boolean$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $string$ O $string$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $string$ O O O O O O O O O O $string$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $string$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $string$ O $string$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { JumpFm } from 's' import { pluginsPath , pluginsPackageJson , packageJson , savePlugins } from 's' ; import * as check from 's' import * as fs from 's' import * as npm from 's' import * as path from 's' import * as watch from 's' interface checkRes { status : number , depsWereOk : boolean , log : string [ ] , error : string [ ] , } const defaultPlugins = { dependencies : { "s" : "s" , "s" : "s" , "s" : "s" , "s" : "s" , "s" : "s" , "s" : "s" , "s" : "s" , "s" : "s" , "s" : "s" , "s" : "s" , "s" : "s" , "s" : "s" , "s" : "s" , "s" : "s" , "s" : "s" , "s" : "s" } } class PluginsLoader { jumpFm : JumpFm ; done : ( err ? ) => void ; private loaded = { } constructor ( jumpFm , done : ( err ? ) => void ) { this . jumpFm = jumpFm this . done = ( ) => { jumpFm . statusBar . msg ( 's' ) . setText ( 's' ) done ( ) } } private loadCss = ( href ) => { if ( ! href ) return const link = document . createElement ( 's' ) link . setAttribute ( 's' , 's' ) link . setAttribute ( 's' , href ) document . head . appendChild ( link ) } private loadPlugin = ( name ) => { try { console . time ( name ) if ( this . loaded [ name ] ) return this . loaded [ name ] = true const pluginDir = path . join ( pluginsPath , 's' , name ) const plugin = require ( pluginDir ) if ( plugin . css ) plugin . css . forEach ( css => this . loadCss ( path . join ( pluginDir , css ) ) ) plugin . load ( this . jumpFm ) console . timeEnd ( name ) } catch ( e ) { console . log ( e ) } } private getPackage = ( ) => { try { return fs . readJsonSync ( pluginsPackageJson ) } catch ( e ) { fs . writeFileSync ( pluginsPackageJson , JSON . stringify ( defaultPlugins , null , 0 ) ) return defaultPlugins } } loadPlugins ( pkg ) { try { Object . keys ( pkg . dependencies ) . forEach ( name => { this . loadPlugin ( name ) } ) this . done ( ) } catch ( e ) { console . log ( e ) this . done ( e ) } } load ( ) { const pkg = this . getPackage ( ) const checkRes = check . sync ( { packageDir : pluginsPath } ) if ( checkRes . depsWereOk ) { this . loadPlugins ( pkg ) } process . chdir ( pluginsPath ) npm . load ( { save : true } , ( err , res ) => { if ( err ) return this . done ( err ) npm . commands . update ( [ ] , ( err , res ) => { if ( err ) return this . done ( err ) if ( ! checkRes . depsWereOk ) this . loadPlugins ( pkg ) } ) } ) } } export class PluginManager { readonly jumpFm : JumpFm constructor ( jumpFm ) { this . jumpFm = jumpFm } loadAndUpdatePlugins = ( done : ( err ? ) => void ) => { this . jumpFm . statusBar . msg ( 's' ) . setType ( 's' ) . setText ( 's' ) . setTooltip ( 's' ) const pluginLoader = new PluginsLoader ( this . jumpFm , done ) pluginLoader . load ( ) watch ( pluginsPackageJson , ( ) => { pluginLoader . load ( ) } ) } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O O O O O $JumpFm$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $string$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $checkRes$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { Settings as SettingsApi } from 's' import { settings , saveSettings } from 's' type Type = 's' | 's' export class Settings implements SettingsApi { private get = < T > ( type ) => ( key , defaultValue : T ) => { const val = settings [ key ] if ( val && ( typeof val === type ) ) return val settings [ key ] = defaultValue saveSettings ( settings ) return defaultValue } getNum = this . get < number > ( 's' ) getStr = this . get < string > ( 's' ) }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $Type$ O O O $string$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
import { } from 's' import { JumpFm as JumpFmApi } from 's' import { Panel } from "s" import { StatusBar } from "s" import { PluginManager } from "s" ; import { Dialog } from "s" ; import { shortway } from "s" ; import { Settings } from "s" ; import { getKeys , saveKeyboard , root , packageJson , keyboardPath , settingsPath , pluginsPackageJson } from "s" ; import * as homedir from 's' import * as fs from 's' import * as watch from 's' export class JumpFm implements JumpFmApi { private active : 0 | 0 = 0 private readonly divPanels = document . getElementById ( 's' ) private readonly pluginManager = new PluginManager ( this ) private readonly watchers : { [ name ] : fs . FSWatcher } = { } readonly package = packageJson readonly root = root readonly settings = new Settings ( ) readonly dialog = new Dialog ( ) readonly electron : Electron . AllElectron = require ( 's' ) readonly panels : Panel [ ] = [ new Panel ( ) , new Panel ( ) ] readonly statusBar : StatusBar = new StatusBar ( ) readonly argv : string [ ] private passive = ( ) : 0 | 0 => ( this . active + 0 ) % 0 as 0 | 0 private setActive = ( i : 0 | 0 ) => { this . active = i this . panels [ this . active ] . setActive ( true ) this . panels [ this . passive ( ) ] . setActive ( false ) } watchStart = ( name , path , then , recursive = false ) => { this . watchStop ( name ) console . log ( 's' , name , path ) setImmediate ( ( ) => { let to this . watchers [ name ] = watch ( path , { recursive : recursive } , ( ) => { clearTimeout ( to ) to = setTimeout ( then , 0 ) } ) } ) } watchStop = ( name ) => { if ( this . watchers [ name ] ) { console . log ( 's' , name ) this . watchers [ name ] . close ( ) } } getPanelActive = ( ) => this . panels [ this . active ] getPanelPassive = ( ) => this . panels [ this . passive ( ) ] panelsSwap = ( ) => { this . active = this . passive ( ) const tmp = this . panels [ 0 ] this . panels [ 0 ] = this . panels [ 0 ] this . panels [ 0 ] = tmp this . divPanels . insertBefore ( this . panels [ 0 ] . divPanel , this . panels [ 0 ] . divPanel ) } panelsSwitch = ( ) => this . setActive ( this . passive ( ) ) bind = ( actionName , defaultKeys : string [ ] , action : ( ) => void ) => { getKeys ( actionName , defaultKeys ) . forEach ( combo => { const cb = shortway ( combo , ( e ) => { e . preventDefault ( ) action ( ) } ) document . addEventListener ( 's' , cb , false ) } ) } constructor ( argv : string [ ] ) { this . argv = argv this . panels . forEach ( panel => { this . divPanels . appendChild ( panel . divPanel ) } ) const opn = ( url ) => ( ) => this . electron . shell . openItem ( url ) this . statusBar . buttonAdd ( 's' , 's' , opn ( 's' ) ) this . statusBar . buttonAdd ( 's' , 's' , opn ( keyboardPath ) ) this . statusBar . buttonAdd ( 's' , 's' , opn ( settingsPath ) ) this . statusBar . buttonAdd ( 's' , 's' , opn ( pluginsPackageJson ) ) this . pluginManager . loadAndUpdatePlugins ( ( ) => { saveKeyboard ( ) this . panels . forEach ( panel => panel . cd ( homedir ( ) ) ) this . setActive ( 0 ) } ) } }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $string$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $string$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $string$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
const icons = require ( 's' ) const extensions = { } for ( var icon in icons ) { icons [ icon ] . forEach ( ext => { extensions [ ext ] = icon } ) ; } export const getExtIcon = ( ext ) => { const icon = extensions [ ext ] if ( icon ) return 's' + icon + 's' }	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $string$ O O O O O O O O O O O O O O O O O O O O O
document . addEventListener ( 's' , ( ) => { console . time ( 's' ) new ( require ( 's' ) . JumpFm ) ( require ( 's' ) . remote . getGlobal ( 's' ) ) console . timeEnd ( 's' ) } , false )	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O