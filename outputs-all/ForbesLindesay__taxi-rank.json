'js' module . exports = { extends : "s" } ;	O $complex$ O $complex$ O O $string$ O O O O
'js' const startServer = require ( 's' ) ; const argv = require ( 's' ) ( process . argv . slice ( 0 ) ) ; const port = argv . p || argv . port || 0 ; if ( argv . help || argv . h ) { console . log ( 's' ) ; console . log ( 's' ) ; console . log ( 's' ) ; console . log ( 's' ) ; process . exit ( 0 ) ; } startServer ( { onStart ( ) { console . log ( 's' + port ) ; } , port , } ) ;	O O $any$ O $any$ O O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O $Console$ O $void$ O O O O $Console$ O $void$ O O O O $Console$ O $void$ O O O O $Console$ O $void$ O O O O $any$ O $any$ O O O O O $any$ O O $void$ O O O $Console$ O $void$ O O O $any$ O O O O $any$ O O O O
interface BrowserOptions { runScripts : 's' | 's' ; } export default BrowserOptions ;	O $any$ O O O O O O O O O O $any$ O
type Subscribe < T > = ( handler : ( value : T ) => void ) => ( ( ) => void ) ; interface Emitter < T > { emit ( value : T ) : void ; } function eventChannel < T > ( ) : Subscribe < T > & Emitter < T > { const handlers < ( value : T ) => void > = new Set ( ) ; function on ( handler : ( value : T ) => void ) { handlers . add ( handler ) ; return ( ) => { handlers . delete ( handler ) ; } ; } ( on as any ) . emit = ( value : T ) => { handlers . forEach ( fn => fn ( value ) ) ; } ; return ( on as any ) ; } export default eventChannel ;	O $any$ O $any$ O O O $void$ O O $T$ O $any$ O O O O O O O O O O O O O $any$ O $any$ O O $void$ O $T$ O $any$ O O O O O O $complex$ O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O O O $Set$ O O $T$ O $any$ O O O O O O $SetConstructor$ O O O O $void$ O $void$ O O $T$ O $any$ O O O O O $void>$ O $void>$ O $void$ O O O O O O O $void>$ O $boolean$ O $void$ O O O O O O $void$ O O O O $any$ O O $T$ O $any$ O O O $void>$ O O O $void$ O $void$ O $T$ O O O O O O O $void$ O O O O O O O $complex$ O
import { DOMWindow } from 's' ; interface TabOptions { name ? : string ; opener ? : DOMWindow ; referrer ? : string ; url : string ; html ? : string ; } export default TabOptions ;	O O $any$ O O O O O $any$ O $string$ O O O O $any$ O O $any$ O $string$ O O O O $string$ O O O $string$ O O O O O O O $any$ O
import { JSDOM , DOMWindow } from 's' ; import { parseURL , serializeURL , URLData } from 's' ; import Browser from 's' ; import TabOptions from 's' ; import StorageShim = require ( 's' ) ; class Tab { private readonly _browser : Browser ; private _url : URLData ; private _dom : Promise < JSDOM > ; public readonly id : string ; public readonly name : string | void ; private readonly _sessionStorage : Map < string , StorageShim > = new Map ( ) ; private readonly _localStorage : Map < string , StorageShim > ; private readonly _onClose : ( tab ) => void ; constructor ( browser , options , id , localStorage < string , StorageShim > , onClose : ( tab ) => void ) { this . _browser = browser ; this . id = id ; this . name = options . name ; this . _localStorage = localStorage ; this . _onClose = onClose ; this . setLocation ( options ) ; } private _beforeParse = ( window ) => { const host = window . location . host ; const sessionStorage = this . _sessionStorage . get ( host ) || new StorageShim ( ) ; const localStorage = this . _localStorage . get ( host ) || new StorageShim ( ) ; this . _sessionStorage . set ( host , sessionStorage ) ; this . _localStorage . set ( host , localStorage ) ; ( window as any ) . sessionStorage = sessionStorage ; ( window as any ) . localStorage = localStorage ; window . console . dir = window . console . log ; let lastTime = 0 ; if ( ! window . requestAnimationFrame ) ( window as any ) . requestAnimationFrame = function ( callback : ( delay ) => void , element ) { var currTime = new Date ( ) . getTime ( ) ; var timeToCall = Math . max ( 0 , 0 - ( currTime - lastTime ) ) ; var id = window . setTimeout ( function ( ) { callback ( currTime + timeToCall ) ; } , timeToCall ) ; lastTime = currTime + timeToCall ; return id ; } ; if ( ! window . cancelAnimationFrame ) window . cancelAnimationFrame = function ( id ) { clearTimeout ( id ) ; } ; this . _browser . onBeforeParse . emit ( window ) ; } ; setLocation ( options ) { const url = parseURL ( options . url ) ; if ( url === 's' ) { throw new Error ( 's' + options . url ) ; } this . _url = url ; if ( url . scheme === 's' ) { this . _dom = Promise . resolve ( new JSDOM ( 's' , { cookieJar : this . _browser . cookies , url : options . url , referrer : options . referrer , resources : 's' , runScripts : this . _browser . runScripts , beforeParse : this . _beforeParse , } ) ) ; } else { this . _dom = JSDOM . fromURL ( options . url , { cookieJar : this . _browser . cookies , referrer : options . referrer , resources : 's' , runScripts : this . _browser . runScripts , beforeParse : this . _beforeParse , } ) ; } } get dom ( ) { return this . _dom ; } whenReady ( ) < JSDOM > { return this . _dom . then ( ( dom ) : JSDOM | Promise < JSDOM > => { const state = dom . window . document . readyState if ( state === 's' || state === 's' ) { return dom ; } return new Promise ( ( resolve , reject ) => { dom . window . document . addEventListener ( 's' , ( ) => resolve ( dom ) ) ; } ) ; } ) ; } async close ( ) { const dom = await this . dom ; dom . window . close ( ) ; this . _onClose ( this ) ; } } export default Tab ;	O O $any$ O $any$ O O O O O O $complex$ O $string$ O $any$ O O O O O $any$ O O O O $any$ O O O O $any$ O O O O O O O $any$ O O O $Browser$ O $any$ O O $URLData$ O $any$ O O $Promise<any>$ O $PromiseConstructor$ O $any$ O O O O $string$ O O O O O $complex$ O O O O O O O $complex$ O $MapConstructor$ O O O $any$ O O O $MapConstructor$ O O O O O $complex$ O $MapConstructor$ O O O $any$ O O O O $void$ O O $Tab$ O O O O O O $Browser$ O $TabOptions$ O $string$ O $Map$ O O O $any$ O O $void$ O O $Tab$ O O O O O O O $Browser$ O $Browser$ O O O $string$ O $string$ O O O $complex$ O $TabOptions$ O $string$ O O O $complex$ O $complex$ O O O $void$ O $void$ O O O $void$ O $TabOptions$ O O O O $void$ O O $DOMWindow$ O O O O $any$ O $any$ O $any$ O $any$ O O $StorageShim$ O O O $complex$ O $StorageShim$ O $any$ O O O $any$ O O O O $StorageShim$ O O O $complex$ O $StorageShim$ O $any$ O O O $any$ O O O O O $complex$ O $complex$ O $any$ O $StorageShim$ O O O O $complex$ O $complex$ O $any$ O $StorageShim$ O O O $any$ O O O O $any$ O $StorageShim$ O O $any$ O O O O $any$ O $StorageShim$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $number$ O O O O O O $any$ O $any$ O O $any$ O O O O $any$ O O O $void$ O O $number$ O O O O $any$ O O O $number$ O O $DateConstructor$ O O O $number$ O O O O $number$ O $Math$ O $number$ O O O O O O $number$ O $number$ O O O O $any$ O $any$ O $any$ O O O O O $void$ O $number$ O $number$ O O O O $number$ O O $number$ O $number$ O $number$ O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O O $void$ O $any$ O O O O O O $Browser$ O $complex$ O $void$ O $any$ O O O O $void$ O $TabOptions$ O O O $complex$ O $complex$ O $TabOptions$ O $string$ O O O O $complex$ O O O O O O $ErrorConstructor$ O O O $TabOptions$ O $string$ O O O O O $URLData$ O $URLData$ O O O $URLData$ O $string$ O O O O O O $Promise<any>$ O $PromiseConstructor$ O $complex$ O O $any$ O O O O $any$ O O O $Browser$ O $any$ O $string$ O $TabOptions$ O $string$ O $string$ O $TabOptions$ O $string$ O $string$ O O O O O O O $Browser$ O O O $void$ O O O $void$ O O O O O O O O O O $Promise<any>$ O $any$ O $any$ O $TabOptions$ O $string$ O O $any$ O O O $Browser$ O $any$ O $string$ O $TabOptions$ O $string$ O $string$ O O O O O O O $Browser$ O O O $void$ O O O $void$ O O O O O O O $Promise<any>$ O O O O O O $Promise<any>$ O O $Promise$ O O O $any$ O O O O O $Promise<any>$ O O O O $any$ O O $any$ O $PromiseConstructor$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O O $any$ O O O O O $any$ O O O O $PromiseConstructor$ O O $void$ O $void$ O O O $any$ O $any$ O $any$ O $any$ O O O O O O $void$ O $any$ O O O O O O O O O O O $Promise<void>$ O O O O $any$ O O O O $Promise<any>$ O $any$ O $any$ O $any$ O O O O O $void$ O O O O O O O O $any$ O
import { CookieJar , DOMWindow } from 's' ; import BrowserOptions from 's' ; import eventChannel from 's' ; import Tab from 's' ; import TabOptions from 's' ; import StorageShim = require ( 's' ) ; class Browser { private _currentTab : Tab | null = null ; private _nextTabID : number = 0 ; private readonly _tabsByID : Map < string , Tab > = new Map ( ) ; private readonly _tabsByName : Map < string , Tab > = new Map ( ) ; private readonly _localStorage : Map < string , StorageShim > = new Map ( ) ; public readonly runScripts : 's' | 's' ; public readonly cookies = new CookieJar ( ) ; public readonly onInactive = eventChannel < Tab > ( ) ; public readonly onActive = eventChannel < Tab > ( ) ; public readonly onBeforeParse = eventChannel < DOMWindow > ( ) ; constructor ( options ) { this . runScripts = options . runScripts ; this . open ( { url : 's' , } ) ; } findTab ( nameOrID ) : Tab | null { const tabByName = this . _tabsByName . get ( nameOrID ) ; if ( tabByName ) { return tabByName ; } const tabByID = this . _tabsByID . get ( nameOrID ) ; if ( tabByID ) { return tabByID ; } return null ; } open ( options ) { const named = options . name && this . findTab ( options . name ) ; if ( named ) { if ( this . _currentTab ) { this . onInactive . emit ( this . _currentTab ) ; } named . setLocation ( options ) ; this . _currentTab = named ; this . onActive . emit ( named ) ; return named ; } const id = 's' + ( this . _nextTabID ++ ) ; const tab = new Tab ( this , options , id , this . _localStorage , this . _onTabClose ) ; this . _tabsByID . set ( id , tab ) ; if ( options . name ) { this . _tabsByName . set ( options . name , tab ) ; } if ( this . _currentTab ) { this . onInactive . emit ( this . _currentTab ) ; } this . _currentTab = tab ; this . onActive . emit ( tab ) ; return tab ; } get currentTab ( ) : Tab | null { return this . _currentTab ; } private _onTabClose = ( tab ) => { this . _tabsByID . delete ( tab . id ) ; if ( tab . name ) { this . _tabsByName . delete ( tab . name ) ; } if ( this . _currentTab === tab ) { this . open ( { url : 's' , } ) ; } } ; dispose ( ) { } } export default Browser ;	O O $any$ O $any$ O O O O O $any$ O O O O $complex$ O O O O $any$ O O O O $any$ O O O O $any$ O O O O O O O $any$ O O $Tab$ O $any$ O O O O O O $number$ O O O O O O O $complex$ O $MapConstructor$ O O O $any$ O O O $MapConstructor$ O O O O O $complex$ O $MapConstructor$ O O O $any$ O O O $MapConstructor$ O O O O O $complex$ O $MapConstructor$ O O O $any$ O O O $MapConstructor$ O O O O O O O O O O O O O $any$ O O $any$ O O O O O $complex$ O $complex$ O $any$ O O O O O O $complex$ O $complex$ O $any$ O O O O O O $complex$ O $complex$ O $any$ O O O O O O $BrowserOptions$ O O O O O O $BrowserOptions$ O O O O O $Tab$ O O $string$ O O O O O O O $Tab$ O $string$ O O $any$ O O O O $Tab$ O O O $complex$ O $Tab$ O $string$ O O O O $Tab$ O O O $Tab$ O O O $Tab$ O O O $complex$ O $Tab$ O $string$ O O O O $Tab$ O O O $Tab$ O O O O O O $Tab$ O $TabOptions$ O O O $Tab$ O $TabOptions$ O $string$ O O O $Tab$ O $TabOptions$ O $string$ O O O O $Tab$ O O O O O O $Tab$ O O O O $complex$ O $void$ O O O $Tab$ O O O $Tab$ O $void$ O $TabOptions$ O O O O $Tab$ O $Tab$ O O O $complex$ O $void$ O $Tab$ O O O $Tab$ O O O $string$ O O O O O O $number$ O O O O $Tab$ O O $any$ O O O $TabOptions$ O $string$ O O O $complex$ O O O $void$ O O O O $complex$ O $complex$ O $string$ O $Tab$ O O O O $TabOptions$ O $string$ O O O O $complex$ O $complex$ O $TabOptions$ O $string$ O $Tab$ O O O O O O O $Tab$ O O O O $complex$ O $void$ O O O $Tab$ O O O O O $Tab$ O $Tab$ O O O $complex$ O $void$ O $Tab$ O O O $Tab$ O O O $Tab$ O O O $any$ O O O O O O $Tab$ O O O $void$ O O $Tab$ O O O O O $complex$ O $boolean$ O $Tab$ O $string$ O O O O $Tab$ O $complex$ O O O O $complex$ O $boolean$ O $Tab$ O $string$ O O O O O O O $Tab$ O $Tab$ O O O O $Tab$ O O $string$ O O O O O O O O O $void$ O O O O O O O $any$ O
const enum MouseButton { LEFT = 0 , MIDDLE = 0 , RIGHT = 0 , } export default MouseButton ;	O O $any$ O $MouseButton.LEFT$ O O O $MouseButton.MIDDLE$ O O O $MouseButton.RIGHT$ O O O O O O $any$ O
const enum StorageLevel { Local = 's' , Session = 's' , } export default StorageLevel ;	O O $any$ O $StorageLevel.Local$ O O O $StorageLevel.Session$ O O O O O O $any$ O
export default interface WebdriverCookie { name : string , value : string , path : string , domain : string , httpOnly ? : boolean , secure ? : boolean , expiry ? : number , }	O O O $any$ O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $boolean$ O O O O $boolean$ O O O O $number$ O O O O O
interface WebdriverElementReference { readonly ELEMENT : string ; } export default WebdriverElementReference ;	O $any$ O O $string$ O O O O O O $any$ O
const enum WebdriverSelectorType { CLASS = 's' , CSS = 's' , ID = 's' , NAME = 's' , LINK_TEXT = 's' , PARTIAL_LINK_TEXT = 's' , TAG = 's' , XPATH = 's' , } export default WebdriverSelectorType ;	O O $any$ O $WebdriverSelectorType.CLASS$ O O O $WebdriverSelectorType.CSS$ O O O $WebdriverSelectorType.ID$ O O O $WebdriverSelectorType.NAME$ O O O $WebdriverSelectorType.LINK_TEXT$ O O O $WebdriverSelectorType.PARTIAL_LINK_TEXT$ O O O $WebdriverSelectorType.TAG$ O O O $WebdriverSelectorType.XPATH$ O O O O O O $any$ O
export const SuccessStatus : 0 = 0 ; const enum WebdriverStatus { NoSuchSession = 0 , NoSuchElement = 0 , UnknownCommand = 0 , StaleElementReferene = 0 , ElementNotVisible = 0 , InvalidElementState = 0 , UnknownError = 0 , ElementIsNotSelectable = 0 , JavaScriptError = 0 , XPathLookupError = 0 , Timeout = 0 , NoSuchWindow = 0 , InvalidSelector = 0 , SessionNotCreatedException = 0 , } export default WebdriverStatus ;	O O O O O O O O O O $any$ O $WebdriverStatus.NoSuchSession$ O O O $WebdriverStatus.NoSuchElement$ O O O $WebdriverStatus.UnknownCommand$ O O O $WebdriverStatus.StaleElementReferene$ O O O $WebdriverStatus.ElementNotVisible$ O O O $WebdriverStatus.InvalidElementState$ O O O $WebdriverStatus.UnknownError$ O O O $WebdriverStatus.ElementIsNotSelectable$ O O O $WebdriverStatus.JavaScriptError$ O O O $WebdriverStatus.XPathLookupError$ O O O $WebdriverStatus.Timeout$ O O O $WebdriverStatus.NoSuchWindow$ O O O $WebdriverStatus.InvalidSelector$ O O O $WebdriverStatus.SessionNotCreatedException$ O O O O O O $any$ O
const enum WebdriverTimeoutType { SCRIPT = 's' , ASYNC_SCRIPT = 's' , PAGE_LOAD = 's' , IMPLICIT = 's' , } export default WebdriverTimeoutType ;	O O $any$ O $WebdriverTimeoutType.SCRIPT$ O O O $WebdriverTimeoutType.ASYNC_SCRIPT$ O O O $WebdriverTimeoutType.PAGE_LOAD$ O O O $WebdriverTimeoutType.IMPLICIT$ O O O O O O $any$ O
import uuid = require ( 's' ) ; import { JSDOM , DOMWindow } from 's' ; import Browser from 's' ; import Tab from 's' ; import WebdriverCookie from 's' ; import WebdriverElementReference from 's' ; import WebdriverSelectorType from 's' ; import WebdriverStatus , { SuccessStatus } from 's' ; import WebdriverTimeoutType from 's' ; import { Cookie , Store } from 's' ; import MouseButton from 's' ; import StorageLevel from 's' ; interface ElementList { readonly length : number ; readonly [ index ] : Element ; } type WebdriverSuccessResponse < T > = { status : 0 , sessionId : string , value : T , } type WebdriverErrorResponse = { status : WebdriverStatus , value : { message : string } } ; type WebdriverResponse < T > = WebdriverSuccessResponse < T > | WebdriverErrorResponse ; const XPathSelectorError = { status : WebdriverStatus . InvalidSelector , value : { message : 's' } , } ; function createResponse < T = void > ( request : { params : { sessionId : string } } , value : T ) < T > { return { status : SuccessStatus , sessionId : request . params . sessionId , value } ; } function isWebdriverResponse < T > ( value : T | WebdriverResponse < T > ) : value is WebdriverResponse < T > { return value && typeof value === 's' && typeof ( value as any ) . status === 's' ; } function withCallback < T > ( fn : ( cb : ( err , res : T ) => any ) => void ) < T > { return new Promise ( ( resolve , reject ) => { fn ( ( err , res ) => { if ( err ) return reject ( err ) ; else resolve ( ( res as any ) ) ; } ) } ) ; } class ElementStore { private readonly elements : Map < string , Element > = new Map ( ) ; private readonly elementIDs : Map < Element , string > = new Map ( ) ; private _nextIndex = 0 ; storeElement ( tab , element ) { const oldID = this . elementIDs . get ( element ) ; if ( oldID ) { return { ELEMENT : oldID } ; } const id = 's' + ( this . _nextIndex ++ ) ; this . elements . set ( id , element ) ; this . elementIDs . set ( element , id ) ; return { ELEMENT : id } ; } getElement ( reference : WebdriverElementReference | string ) : Element | null { return this . elements . get ( typeof reference === 's' ? reference : reference . ELEMENT ) || null ; } } class WebdriverSession { public readonly browser : Browser ; public readonly elements = new ElementStore ( ) ; public timeouts : Map < WebdriverTimeoutType , number > = new Map ( [ [ WebdriverTimeoutType . ASYNC_SCRIPT , 0 ] , [ WebdriverTimeoutType . IMPLICIT , 0 ] , [ WebdriverTimeoutType . PAGE_LOAD , 0 ] , [ WebdriverTimeoutType . SCRIPT , 0 ] , ] ) ; public mouseLocation : null | { elementID : string , xoffset : number , yoffset : number } ; constructor ( browser ) { this . browser = browser ; } } class Webdriver { private readonly _activeSessions : Map < string , WebdriverSession > = new Map ( ) ; async createSession ( request : { body : { desiredCapabilities : { [ key ] : string | number | void | null } , requiredCapabilities : { [ key ] : string | number | void | null } , } , } , ) < WebdriverResponse < Object > > { const runScripts = request . body . desiredCapabilities . runScripts || request . body . desiredCapabilities . runScripts || 's' ; if ( runScripts !== 's' && runScripts !== 's' ) { return { status : WebdriverStatus . SessionNotCreatedException , value : { message : 's' } , } ; } const capabilities = { runScripts : ( runScripts as 's' | 's' ) } ; const sessionId = uuid ( ) ; const currentSession = new WebdriverSession ( new Browser ( { runScripts : capabilities . runScripts } ) ) ; this . _activeSessions . set ( sessionId , currentSession ) ; return { status : SuccessStatus , sessionId , value : capabilities } ; } async deleteSession ( request : { params : { sessionId : string } } ) < WebdriverResponse < void > > { const session = this . _activeSessions . get ( request . params . sessionId ) ; if ( session ) { session . browser . dispose ( ) ; this . _activeSessions . delete ( request . params . sessionId ) ; } return createResponse ( request , undefined ) ; } private async _withSession < T > ( request : { params : { sessionId : string } } , fn : ( session ) => Promise < T | WebdriverResponse < T > > ) < WebdriverResponse < T > > { const session = this . _activeSessions . get ( request . params . sessionId ) ; if ( ! session ) { return { status : WebdriverStatus . NoSuchSession , value : { message : `template` } } ; } const result = await fn ( session ) ; if ( isWebdriverResponse ( result ) ) { return result ; } else { return createResponse < T > ( request , result ) ; } } setTimeouts ( request : { body : { type : WebdriverTimeoutType , ms : number } , params : { sessionId : string } } ) < WebdriverResponse < void > > { return this . _withSession < void > ( request , async ( session ) => { session . timeouts . set ( request . body . type , request . body . ms ) ; } ) ; } setAsyncScriptTimeOut ( request : { body : { ms : number } , params : { sessionId : string } } ) < WebdriverResponse < void > > { return this . _withSession < void > ( request , async ( session ) => { session . timeouts . set ( WebdriverTimeoutType . ASYNC_SCRIPT , request . body . ms ) ; } ) ; } getActiveWindowHandle ( request : { params : { sessionId : string } } ) < WebdriverResponse < string > > { return this . _withSession < string > ( request , async ( session ) => { const tab = session . browser . currentTab ; if ( ! tab ) { return { status : WebdriverStatus . UnknownError , value : { message : 's' } } ; } return tab . id ; } ) ; } setUrl ( request : { body : { url : string } , params : { sessionId : string } } ) < WebdriverResponse < void > > { return this . _withSession < void > ( request , async ( session ) => { const tab = session . browser . currentTab ; if ( ! tab ) { return { status : WebdriverStatus . UnknownError , value : { message : 's' } } ; } const dom = await tab . whenReady ( ) ; dom . window . location . href = request . body . url ; await tab . whenReady ( ) ; } ) ; } goBack ( request : { body : { url : string } , params : { sessionId : string } } ) < WebdriverResponse < void > > { return this . _withSession < void > ( request , async ( session ) => { const tab = session . browser . currentTab ; if ( ! tab ) { return { status : WebdriverStatus . UnknownError , value : { message : 's' } } ; } const dom = await tab . whenReady ( ) ; dom . window . history . back ( ) ; await tab . whenReady ( ) ; } ) ; } goForward ( request : { body : { url : string } , params : { sessionId : string } } ) < WebdriverResponse < void > > { return this . _withSession < void > ( request , async ( session ) => { const tab = session . browser . currentTab ; if ( ! tab ) { return { status : WebdriverStatus . UnknownError , value : { message : 's' } } ; } const dom = await tab . whenReady ( ) ; dom . window . history . forward ( ) ; await tab . whenReady ( ) ; } ) ; } refresh ( request : { body : { url : string } , params : { sessionId : string } } ) < WebdriverResponse < void > > { return this . _withSession < void > ( request , async ( session ) => { const tab = session . browser . currentTab ; if ( ! tab ) { return { status : WebdriverStatus . UnknownError , value : { message : 's' } } ; } const dom = await tab . whenReady ( ) ; dom . window . location . reload ( ) ; await tab . whenReady ( ) ; } ) ; } getElementFromResponse ( request : { body : { using : WebdriverSelectorType , value : string } , params : { sessionId : string } } , elementsResponse < Array < WebdriverElementReference > > ) < WebdriverElementReference > { if ( elementsResponse . status !== SuccessStatus ) { return < WebdriverErrorResponse > elementsResponse ; } const elements = ( < WebdriverSuccessResponse < Array < WebdriverElementReference > > > elementsResponse ) . value ; if ( elements . length ) { return createResponse ( request , elements [ 0 ] ) ; } return { status : WebdriverStatus . NoSuchElement , value : { message : `template` } } ; } async getElement ( request : { body : { using : WebdriverSelectorType , value : string } , params : { sessionId : string } } ) < WebdriverResponse < WebdriverElementReference > > { return this . getElementFromResponse ( request , await this . getElements ( request ) ) ; } private _htmlCollectionToArray ( session , tab , elements < Element > ) < WebdriverElementReference > { const result = [ ] ; for ( let i = 0 ; i < elements . length ; i ++ ) { result . push ( session . elements . storeElement ( tab , elements [ i ] ) ) ; } return result ; } private _getElementsInContext ( ctx : { using : WebdriverSelectorType , value : string , parent : Document | Element , session : WebdriverSession , } , ) < Element > { function htmlCollectionToArray ( elements ) < Element > { const result = [ ] ; for ( let i = 0 ; i < elements . length ; i ++ ) { result . push ( elements [ i ] ) ; } return result ; } switch ( ctx . using ) { case WebdriverSelectorType . CLASS : return htmlCollectionToArray ( ctx . parent . getElementsByClassName ( ctx . value ) ) ; case WebdriverSelectorType . CSS : return htmlCollectionToArray ( ctx . parent . querySelectorAll ( ctx . value ) ) ; case WebdriverSelectorType . ID : return htmlCollectionToArray ( ctx . parent . querySelectorAll ( 's' + ctx . value ) ) . filter ( element => element . id === ctx . value ) ; case WebdriverSelectorType . NAME : return htmlCollectionToArray ( ctx . parent . querySelectorAll ( `template` ) ) . filter ( element => element . getAttribute ( 's' ) === ctx . value ) ; case WebdriverSelectorType . LINK_TEXT : return htmlCollectionToArray ( ctx . parent . getElementsByTagName ( 's' ) ) . filter ( element => element . textContent === ctx . value ) ; case WebdriverSelectorType . PARTIAL_LINK_TEXT : return htmlCollectionToArray ( ctx . parent . getElementsByTagName ( 's' ) ) . filter ( element => ( element . textContent || 's' ) . indexOf ( ctx . value ) !== - 0 ) ; case WebdriverSelectorType . TAG : return htmlCollectionToArray ( ctx . parent . getElementsByTagName ( ctx . value ) ) ; case WebdriverSelectorType . XPATH : throw new Error ( 's' ) ; } } getElements ( request : { body : { using : WebdriverSelectorType , value : string } , params : { sessionId : string } } ) < WebdriverResponse < Array < WebdriverElementReference > > > { return this . _withSession < Array < WebdriverElementReference > > ( request , async ( session ) => { const tab = session . browser . currentTab ; if ( ! tab ) { return [ ] ; } const dom = await tab . whenReady ( ) ; if ( request . body . using === WebdriverSelectorType . ID ) { const element = dom . window . document . getElementById ( request . body . value ) ; return element ? [ session . elements . storeElement ( tab , element ) ] : [ ] ; } if ( request . body . using === WebdriverSelectorType . XPATH ) { return XPathSelectorError ; } return this . _getElementsInContext ( { using : request . body . using , value : request . body . value , parent : dom . window . document , session , } ) . map ( element => session . elements . storeElement ( tab , element ) ) ; } ) ; } async getChildElement ( request : { body : { using : WebdriverSelectorType , value : string } , params : { sessionId : string , elementId : string } } ) < WebdriverResponse < WebdriverElementReference > > { return this . getElementFromResponse ( request , await this . getChildElements ( request ) ) ; } getChildElements ( request : { body : { using : WebdriverSelectorType , value : string } , params : { sessionId : string , elementId : string } } ) < WebdriverResponse < Array < WebdriverElementReference > > > { return this . _withElement < Array < WebdriverElementReference > > ( request , async ( session , element ) => { const tab = session . browser . currentTab ; if ( ! tab ) { return [ ] ; } const dom = await tab . whenReady ( ) ; if ( request . body . using === WebdriverSelectorType . ID ) { return { status : WebdriverStatus . UnknownError , value : { message : 's' } } ; } if ( request . body . using === WebdriverSelectorType . XPATH ) { return XPathSelectorError ; } return this . _getElementsInContext ( { using : request . body . using , value : request . body . value , parent : element , session , } ) . map ( element => session . elements . storeElement ( tab , element ) ) ; } ) ; } compareElements ( request : { params : { elementA : string , elementB : string , sessionId : string } } ) < WebdriverResponse < boolean > > { return this . _withSession < boolean > ( request , async ( session ) => { return request . params . elementA === request . params . elementB ; } ) ; } getActiveElement ( request : { params : { sessionId : string } } ) < WebdriverResponse < WebdriverElementReference > > { return this . _withSession < WebdriverElementReference > ( request , async ( session ) => { const tab = session . browser . currentTab ; if ( ! tab ) { return { status : WebdriverStatus . UnknownError , value : { message : 's' } } ; } const dom = await tab . whenReady ( ) ; return session . elements . storeElement ( tab , dom . window . document . activeElement ) ; } ) ; } getSource ( request : { params : { sessionId : string } } ) < WebdriverResponse < string > > { return this . _withSession < string > ( request , async ( session ) => { const tab = session . browser . currentTab ; if ( ! tab ) { return { status : WebdriverStatus . UnknownError , value : { message : 's' } } ; } const dom = await tab . whenReady ( ) ; return dom . serialize ( ) ; } ) ; } getTitle ( request : { params : { sessionId : string } } ) < WebdriverResponse < string > > { return this . _withSession < string > ( request , async ( session ) => { const tab = session . browser . currentTab ; if ( ! tab ) { return { status : WebdriverStatus . UnknownError , value : { message : 's' } } ; } const dom = await tab . whenReady ( ) ; return dom . window . document . title ; } ) ; } getUrl ( request : { params : { sessionId : string } } ) < WebdriverResponse < string > > { return this . _withSession < string > ( request , async ( session ) => { const tab = session . browser . currentTab ; if ( ! tab ) { return { status : WebdriverStatus . UnknownError , value : { message : 's' } } ; } const dom = await tab . whenReady ( ) ; return dom . window . location . href ; } ) ; } deleteAllCookies ( request : { params : { sessionId : string } } ) < WebdriverResponse < void > > { return this . _withSession ( request , async ( session ) => { const store = ( session . browser . cookies as any ) . store ; const cookies = await withCallback < Array < Cookie > > ( cb => store . getAllCookies ( cb ) ) ; for ( const cookie of cookies ) { await withCallback < void > ( cb => store . removeCookie ( cookie . domain , cookie . path , cookie . key , err => cb ( err , undefined ) ) ) ; } } ) ; } deleteCookie ( request : { params : { sessionId : string , key : string } } ) < WebdriverResponse < void > > { return this . _withSession ( request , async ( session ) => { const store = ( session . browser . cookies as any ) . store ; const cookies = await withCallback < Array < Cookie > > ( cb => store . getAllCookies ( cb ) ) ; for ( const cookie of cookies ) { if ( cookie . key === request . params . key ) { await withCallback < void > ( cb => store . removeCookie ( cookie . domain , cookie . path , cookie . key , err => cb ( err , undefined ) ) ) ; } } } ) ; } setCookie ( request : { params : { sessionId : string } , body : { cookie : WebdriverCookie } } ) < WebdriverResponse < void > > { return this . _withSession < void > ( request , async ( session ) => { const tab = session . browser . currentTab ; if ( ! tab ) { return { status : WebdriverStatus . UnknownError , value : { message : 's' } } ; } const dom = await tab . whenReady ( ) ; await new Promise ( ( resolve , reject ) => { const c = request . body . cookie ; session . browser . cookies . setCookie ( new Cookie ( { key : c . name , value : c . value , maxAge : c . expiry || 's' , domain : c . domain , path : c . path , secure : c . secure || false , httpOnly : c . httpOnly || false , creation : new Date ( ) , lastAccessed : new Date ( ) , } ) , dom . window . location . href , ( err ) => { if ( err ) reject ( err ) ; else resolve ( ) ; } ) ; } ) ; } ) ; } getCookies ( request : { params : { sessionId : string } } ) < WebdriverResponse < Array < WebdriverCookie > > > { return this . _withSession < Array < WebdriverCookie > > ( request , async ( session ) => { const tab = session . browser . currentTab ; if ( ! tab ) { return { status : WebdriverStatus . UnknownError , value : { message : 's' } } ; } const dom = await tab . whenReady ( ) ; const cookies = await new Promise < Cookie [ ] > ( ( resolve , reject ) => { session . browser . cookies . getCookies ( dom . window . location . href , ( err , cookies ) => { if ( err ) reject ( err ) ; else resolve ( cookies ) ; } ) ; } ) ; return cookies . map ( ( c ) : WebdriverCookie => ( { name : c . key , value : c . value , path : c . path , domain : c . domain , httpOnly : c . httpOnly , secure : c . secure , expiry : typeof c . maxAge === 's' ? c . maxAge : undefined , } ) ) ; } ) ; } private async _withElement < T > ( request : { params : { sessionId : string , elementId : string } } , fn : ( session , element ) => Promise < T | WebdriverResponse < T > > ) < WebdriverResponse < T > > { const session = this . _activeSessions . get ( request . params . sessionId ) ; if ( ! session ) { return { status : WebdriverStatus . NoSuchSession , value : { message : `template` } } ; } const element = session . elements . getElement ( request . params . elementId ) ; if ( ! element ) { return { status : WebdriverStatus . NoSuchElement , value : { message : `template` } } ; } const result = await fn ( session , element ) ; if ( isWebdriverResponse ( result ) ) { return result ; } else { return createResponse < T > ( request , result ) ; } } getTagName ( request : { params : { sessionId : string , elementId : string } } ) < WebdriverResponse < string > > { return this . _withElement ( request , async ( session , element ) => { return element . tagName . toLowerCase ( ) ; } ) ; } getAttribute ( request : { params : { sessionId : string , elementId : string , attributeName : string } } ) < WebdriverResponse < string | null > > { return this . _withElement < string | null > ( request , async ( session , element ) => { if ( request . params . attributeName === 's' && isInputlike ( element ) ) { return element . value ; } if ( request . params . attributeName === 's' && isInput ( element ) ) { return element . checked ? 's' : null ; } return element . getAttribute ( request . params . attributeName ) ; } ) ; } getCssProperty ( request : { params : { sessionId : string , elementId : string , propertyName : string } } ) < WebdriverResponse < string | null > > { return this . _withElement < string | null > ( request , async ( session , element ) => { const tab = session . browser . currentTab ; if ( ! tab ) { return { status : WebdriverStatus . UnknownError , value : { message : 's' } } ; } const dom = await tab . whenReady ( ) ; return dom . window . getComputedStyle ( element ) [ ( request . params . propertyName as any ) ] || null ; } ) ; } getEnabled ( request : { params : { sessionId : string , elementId : string , attributeName : string } } ) < WebdriverResponse < boolean > > { return this . _withElement < boolean > ( request , async ( session , element ) => { return ! ( element as any ) . disabled ; } ) ; } getSelected ( request : { params : { sessionId : string , elementId : string , attributeName : string } } ) < WebdriverResponse < boolean > > { return this . _withElement < boolean > ( request , async ( session , element ) => { return ! ! ( element as any ) . checked ; } ) ; } getText ( request : { params : { sessionId : string , elementId : string } } ) < WebdriverResponse < string > > { return this . _withElement < string > ( request , async ( session , element ) => { return element . textContent || 's' ; } ) ; } click ( request : { params : { sessionId : string , elementId : string } } ) < WebdriverResponse < void > > { return this . _withElement < void > ( request , async ( session , element ) => { const tab = session . browser . currentTab ; if ( ! tab ) { return { status : WebdriverStatus . UnknownError , value : { message : 's' } } ; } const dom = await tab . whenReady ( ) ; const style = dom . window . getComputedStyle ( element ) ; const top = style . top ? parseInt ( style . top , 0 ) : 0 ; const left = style . left ? parseInt ( style . left , 0 ) : 0 ; const x = style . width ? parseInt ( style . width , 0 ) / 0 : 0 ; const y = style . height ? parseInt ( style . height , 0 ) / 0 : 0 ; [ 's' , 's' , 's' ] . forEach ( name => { const e = dom . window . document . createEvent ( 's' ) ; e . initMouseEvent ( name , true , true , dom . window , 0 , left + x , top + y , left + x , top + y , false , false , false , false , MouseButton . LEFT , null ) ; element . dispatchEvent ( e ) ; } ) ; } ) ; } moveTo ( request : { params : { sessionId : string } , body : { element ? : string , xoffset ? : number , yoffset ? : number } } ) < WebdriverResponse < void > > { return this . _withSession < void > ( request , async ( session ) => { if ( ! request . body . element ) { return { status : WebdriverStatus . UnknownError , value : { message : 's' } , } ; } session . mouseLocation = { elementID : request . body . element , xoffset : request . body . xoffset || 0 , yoffset : request . body . yoffset || 0 , } ; } ) ; } globalClick ( request : { params : { sessionId : string } , body : { button : MouseButton } } ) < WebdriverResponse < void > > { return this . _withSession < void > ( request , async ( session ) => { if ( ! session . mouseLocation ) { return { status : WebdriverStatus . UnknownError , value : { message : 's' } , } ; } const element = session . elements . getElement ( session . mouseLocation . elementID ) ; if ( ! element ) { return { status : WebdriverStatus . UnknownError , value : { message : 's' + session . mouseLocation . elementID + 's' } , } ; } const tab = session . browser . currentTab ; if ( ! tab ) { return { status : WebdriverStatus . UnknownError , value : { message : 's' } } ; } const dom = await tab . whenReady ( ) ; const style = dom . window . getComputedStyle ( element ) ; const top = style . top ? parseInt ( style . top , 0 ) : 0 ; const left = style . left ? parseInt ( style . left , 0 ) : 0 ; const x = session . mouseLocation . xoffset ; const y = session . mouseLocation . yoffset ; [ 's' , 's' , 's' ] . forEach ( name => { const e = dom . window . document . createEvent ( 's' ) ; e . initMouseEvent ( name , true , true , dom . window , 0 , left + x , top + y , left + x , top + y , false , false , false , false , request . body . button , null ) ; element . dispatchEvent ( e ) ; } ) ; } ) ; } submit ( request : { params : { sessionId : string , elementId : string } } ) < WebdriverResponse < void > > { return this . _withElement < void > ( request , async ( session , element ) => { const tab = session . browser . currentTab ; if ( ! tab ) { return { status : WebdriverStatus . UnknownError , value : { message : 's' } } ; } const dom = await tab . whenReady ( ) ; if ( ! isForm ( element ) ) { return { status : WebdriverStatus . UnknownError , value : { message : 's' } } ; } const form = element ; const submit = dom . window . document . createEvent ( 's' ) ; submit . initEvent ( 's' , true , true ) ; if ( form . dispatchEvent ( submit ) ) { form . submit ( ) ; } await tab . whenReady ( ) ; } ) ; } sendKeys ( request : { params : { sessionId : string } , body : { value : string } } ) < WebdriverResponse < void > > { return this . _withSession < void > ( request , async ( session ) => { const tab = session . browser . currentTab ; if ( ! tab ) { return { status : WebdriverStatus . UnknownError , value : { message : 's' } } ; } const dom = await tab . whenReady ( ) ; for ( const key of request . body . value ) { const options = { key : key . toLowerCase ( ) , char : key , charCode : key . charCodeAt ( 0 ) , shiftKey : key !== key . toLowerCase ( ) , keyCode : key . toUpperCase ( ) . charCodeAt ( 0 ) , } ; const KeyboardEvent = ( dom . window as any ) . KeyboardEvent ; dom . window . document . activeElement . dispatchEvent ( new KeyboardEvent ( 's' , options ) ) ; dom . window . document . activeElement . dispatchEvent ( new KeyboardEvent ( 's' , options ) ) ; dom . window . document . activeElement . dispatchEvent ( new KeyboardEvent ( 's' , options ) ) ; } } ) ; } execute ( request : { params : { sessionId : string } , body : { script : string , args : Array < string > } } ) < WebdriverResponse < any > > { return this . _withSession ( request , async ( session ) => { const tab = session . browser . currentTab ; if ( ! tab ) { return { status : WebdriverStatus . UnknownError , value : { message : 's' } } ; } const dom = await tab . whenReady ( ) ; return ( dom . window as any ) . Function ( 's' , request . body . script ) ( ... request . body . args ) ; } ) ; } executeAsync ( request : { params : { sessionId : string } , body : { script : string , args : Array < string > } } ) < WebdriverResponse < any > > { return this . execute ( request ) ; } _getStorage ( window , level ) { switch ( level ) { case StorageLevel . Local : return window . localStorage ; case StorageLevel . Session : return window . sessionStorage ; } } setStorageItem ( request : { params : { sessionId : string , storageLevel : StorageLevel } , body : { key : string , value : string } } ) < WebdriverResponse < void > > { return this . _withSession < void > ( request , async ( session ) => { const tab = session . browser . currentTab ; if ( ! tab ) { return { status : WebdriverStatus . UnknownError , value : { message : 's' } } ; } const dom = await tab . whenReady ( ) ; this . _getStorage ( dom . window , request . params . storageLevel ) . setItem ( request . body . key , request . body . value ) ; } ) ; } getStorageItem ( request : { params : { sessionId : string , storageLevel : StorageLevel , key : string } } ) < WebdriverResponse < string | null > > { return this . _withSession < string | null > ( request , async ( session ) => { const tab = session . browser . currentTab ; if ( ! tab ) { return { status : WebdriverStatus . UnknownError , value : { message : 's' } } ; } const dom = await tab . whenReady ( ) ; return this . _getStorage ( dom . window , request . params . storageLevel ) . getItem ( request . params . key ) ; } ) ; } getStorageKeys ( request : { params : { sessionId : string , storageLevel : StorageLevel } } ) < WebdriverResponse < Array < string > > > { return this . _withSession < Array < string > > ( request , async ( session ) => { const tab = session . browser . currentTab ; if ( ! tab ) { return { status : WebdriverStatus . UnknownError , value : { message : 's' } } ; } const dom = await tab . whenReady ( ) ; const storage = this . _getStorage ( dom . window , request . params . storageLevel ) ; const keys = [ ] ; for ( let i = 0 ; i < storage . length ; i ++ ) { const key = storage . key ( i ) ; if ( typeof key === 's' ) { keys . push ( key ) ; } } return keys ; } ) ; } getStorageSize ( request : { params : { sessionId : string , storageLevel : StorageLevel } } ) < WebdriverResponse < number > > { return this . _withSession < number > ( request , async ( session ) => { const tab = session . browser . currentTab ; if ( ! tab ) { return { status : WebdriverStatus . UnknownError , value : { message : 's' } } ; } const dom = await tab . whenReady ( ) ; return this . _getStorage ( dom . window , request . params . storageLevel ) . length ; } ) ; } clearStorage ( request : { params : { sessionId : string , storageLevel : StorageLevel } } ) < WebdriverResponse < void > > { return this . _withSession < void > ( request , async ( session ) => { const tab = session . browser . currentTab ; if ( ! tab ) { return { status : WebdriverStatus . UnknownError , value : { message : 's' } } ; } const dom = await tab . whenReady ( ) ; this . _getStorage ( dom . window , request . params . storageLevel ) . clear ( ) ; } ) ; } removeStorageItem ( request : { params : { sessionId : string , storageLevel : StorageLevel , key : string } } ) < WebdriverResponse < void > > { return this . _withSession < void > ( request , async ( session ) => { const tab = session . browser . currentTab ; if ( ! tab ) { return { status : WebdriverStatus . UnknownError , value : { message : 's' } } ; } const dom = await tab . whenReady ( ) ; this . _getStorage ( dom . window , request . params . storageLevel ) . removeItem ( request . params . key ) ; } ) ; } _setValue ( window , element , value ) : null | WebdriverErrorResponse { if ( ! isInputlike ( element ) ) { return { status : WebdriverStatus . InvalidElementState , value : { message : 's' + element . tagName } } ; } if ( element . disabled || element . readOnly ) { return { status : WebdriverStatus . InvalidElementState , value : { message : 's' } } ; } element . focus ( ) ; const descriptor = Object . getOwnPropertyDescriptor ( element . constructor . prototype , 's' ) ; if ( ! descriptor . set ) { throw new Error ( 's' ) ; } descriptor . set . call ( element , value ) ; const e = window . document . createEvent ( 's' ) ; e . initEvent ( 's' , true , true ) ; element . dispatchEvent ( e ) ; element . blur ( ) ; return null ; } clear ( request : { params : { sessionId : string , elementId : string } } ) < WebdriverResponse < void > > { return this . _withElement < void > ( request , async ( session , element ) => { const tab = session . browser . currentTab ; if ( ! tab ) { return { status : WebdriverStatus . UnknownError , value : { message : 's' } } ; } const dom = await tab . whenReady ( ) ; this . _setValue ( dom . window , element , 's' ) ; } ) ; } appendValue ( request : { params : { sessionId : string , elementId : string } , body : { value : Array < string > } } ) < WebdriverResponse < void > > { return this . _withElement < void > ( request , async ( session , element ) => { const tab = session . browser . currentTab ; if ( ! tab ) { return { status : WebdriverStatus . UnknownError , value : { message : 's' } } ; } const dom = await tab . whenReady ( ) ; if ( ! isInputlike ( element ) ) { return { status : WebdriverStatus . InvalidElementState , value : { message : 's' + element . tagName } } ; } this . _setValue ( dom . window , element , element . value + request . body . value . join ( 's' ) ) ; } ) ; } getDisplayed ( request : { params : { sessionId : string , elementId : string } } ) < WebdriverResponse < boolean > > { return this . _withElement < boolean > ( request , async ( session , element ) => { const tab = session . browser . currentTab ; if ( ! tab ) { return { status : WebdriverStatus . UnknownError , value : { message : 's' } } ; } const dom = await tab . whenReady ( ) ; const display = dom . window . getComputedStyle ( element ) . display ; return display !== 's' ; } ) ; } closeActiveWindow ( request : { params : { sessionId : string } } ) < WebdriverResponse < void > > { return this . _withSession < void > ( request , async ( session ) => { const tab = session . browser . currentTab ; if ( tab ) { tab . close ( ) ; } } ) ; } } function isInput ( element ) : element is HTMLInputElement { return element . tagName === 's' ; } function isInputlike ( element ) : element is HTMLTextAreaElement | HTMLInputElement { return element . tagName === 's' || element . tagName === 's' ; } function isForm ( element ) : element is HTMLFormElement { return element . tagName === 's' ; } export default Webdriver ;	O $any$ O O O O O O O O $any$ O $any$ O O O O O $any$ O O O O $any$ O O O O $any$ O O O O $any$ O O O O $any$ O O O O $any$ O O O O O O O O $any$ O O O O O $any$ O $any$ O O O O O $any$ O O O O $any$ O O O O $any$ O O $number$ O O O O O $number$ O O $complex$ O O O $any$ O $any$ O O O O O O O $string$ O O O $T$ O $any$ O O O $any$ O O $WebdriverStatus$ O $any$ O $complex$ O O $string$ O O O O O O $any$ O $any$ O O $any$ O $any$ O O $any$ O O $complex$ O O $WebdriverStatus$ O $any$ O $WebdriverStatus.InvalidSelector$ O $complex$ O O $string$ O O O O O O O $WebdriverResponse$ O $any$ O O O O $complex$ O O $complex$ O O $string$ O O O O O $T$ O $any$ O O $any$ O O O O O O O O $string$ O $complex$ O $complex$ O $string$ O $T$ O O O O $complex$ O $any$ O O $complex$ O $any$ O $any$ O $any$ O O O $complex$ O $any$ O $any$ O O O $complex$ O O $complex$ O O O O O $complex$ O O O O $any$ O O O O O $Promise$ O $any$ O O $void$ O O $any$ O O $any$ O $T$ O $any$ O O O O O O O O $any$ O O O O $PromiseConstructor$ O O $void$ O $void$ O O O $void$ O O $any$ O $T$ O O O O O $any$ O O $void$ O $any$ O O O $void$ O O $T$ O O O O O O O O O O O O $any$ O O O $complex$ O $MapConstructor$ O O O $complex$ O O O $MapConstructor$ O O O O O $complex$ O $MapConstructor$ O $complex$ O O O O O $MapConstructor$ O O O O $number$ O O O $WebdriverElementReference$ O $Tab$ O $Element$ O O O $string$ O O O $complex$ O $string$ O $Element$ O O O O $string$ O O O O $string$ O $string$ O O O O $string$ O O O O O O $number$ O O O O O $complex$ O $complex$ O $string$ O $Element$ O O O O $complex$ O $complex$ O $Element$ O $string$ O O O O $string$ O $string$ O O O $Element$ O $complex$ O $any$ O O O O $complex$ O O O O O O $complex$ O $Element$ O O $complex$ O O O $string$ O $WebdriverElementReference$ O $string$ O O O O O O O $any$ O O O $Browser$ O $any$ O O O $ElementStore$ O O $any$ O O O O $complex$ O $MapConstructor$ O $any$ O O O O O $MapConstructor$ O O O $any$ O $WebdriverTimeoutType.ASYNC_SCRIPT$ O O O O O $any$ O $WebdriverTimeoutType.IMPLICIT$ O O O O O $any$ O $WebdriverTimeoutType.PAGE_LOAD$ O O O O O $any$ O $WebdriverTimeoutType.SCRIPT$ O O O O O O O O $complex$ O O O O $string$ O O O $number$ O O O $number$ O O O O O O $Browser$ O O O O $Browser$ O $Browser$ O O O O $any$ O O O $complex$ O $MapConstructor$ O O O $any$ O O O $MapConstructor$ O O O O $Promise$ O $complex$ O O $complex$ O O $complex$ O O O $string$ O O O O O O O O O O O $complex$ O O O $string$ O O O O O O O O O O O O O O O O O $any$ O $ObjectConstructor$ O O O O $complex$ O $complex$ O $complex$ O $complex$ O $any$ O $complex$ O $complex$ O $complex$ O $any$ O O O O O $complex$ O O O $complex$ O O O O O O $WebdriverStatus.SessionNotCreatedException$ O $any$ O $WebdriverStatus.SessionNotCreatedException$ O $complex$ O O $string$ O O O O O O O O $complex$ O O O O O O O O O O O O O O $any$ O $any$ O O O O $WebdriverSession$ O O $any$ O O $any$ O O O O $complex$ O O O O O O O O $complex$ O $complex$ O $any$ O $WebdriverSession$ O O O O O O O O $any$ O $complex$ O $complex$ O O O O $Promise$ O $complex$ O O $complex$ O O $string$ O O O O O O $any$ O O O O O O $WebdriverSession$ O O O $complex$ O $WebdriverSession$ O $complex$ O $complex$ O $string$ O O O O $WebdriverSession$ O O $WebdriverSession$ O $Browser$ O $void$ O O O O O $complex$ O $boolean$ O $complex$ O $complex$ O $string$ O O O O $WebdriverResponse<T>$ O $complex$ O $undefined$ O O O O O $Promise$ O $any$ O O $complex$ O O $complex$ O O $string$ O O O O O $complex$ O O $WebdriverSession$ O O $PromiseConstructor$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $WebdriverSession$ O O O $complex$ O $WebdriverSession$ O $complex$ O $complex$ O $string$ O O O O O $WebdriverSession$ O O O O $WebdriverStatus.NoSuchSession$ O $any$ O $WebdriverStatus.NoSuchSession$ O $complex$ O O $string$ O O O O O O O $complex$ O O $complex$ O $WebdriverSession$ O O O O $complex$ O $complex$ O O O O $WebdriverResponse<T>$ O O O O O $WebdriverResponse<T>$ O $any$ O O $complex$ O $T$ O O O O $Promise$ O $complex$ O O $complex$ O O $WebdriverTimeoutType$ O $any$ O $number$ O O O O $complex$ O O $string$ O O O O O O $any$ O O O O O O O O $Promise<WebdriverResponse<T>>$ O O O O $complex$ O O O $WebdriverSession$ O O O $WebdriverSession$ O $complex$ O $complex$ O $complex$ O $complex$ O $WebdriverTimeoutType$ O $complex$ O $complex$ O $number$ O O O O O O $Promise$ O $complex$ O O $complex$ O O $number$ O O O O $complex$ O O $string$ O O O O O O $any$ O O O O O O O O $Promise<WebdriverResponse<T>>$ O O O O $complex$ O O O $WebdriverSession$ O O O $WebdriverSession$ O $complex$ O $complex$ O $any$ O $WebdriverTimeoutType.ASYNC_SCRIPT$ O $complex$ O $complex$ O $number$ O O O O O O $Promise$ O $complex$ O O $complex$ O O $string$ O O O O O O $any$ O O O O O O O O $Promise<WebdriverResponse<T>>$ O O O O $complex$ O O O $WebdriverSession$ O O O O $Tab$ O $WebdriverSession$ O $Browser$ O $Tab$ O O O O $Tab$ O O O O $WebdriverStatus.UnknownError$ O $any$ O $WebdriverStatus.UnknownError$ O $complex$ O O $string$ O O O O O O O $Tab$ O $string$ O O O O O $Promise$ O $complex$ O O $complex$ O O $string$ O O O O $complex$ O O $string$ O O O O O O $any$ O O O O O O O O $Promise<WebdriverResponse<T>>$ O O O O $complex$ O O O $WebdriverSession$ O O O O $Tab$ O $WebdriverSession$ O $Browser$ O $Tab$ O O O O $Tab$ O O O O $WebdriverStatus.UnknownError$ O $any$ O $WebdriverStatus.UnknownError$ O $complex$ O O $string$ O O O O O O O $any$ O O $Tab$ O $Promise<any>$ O O O $any$ O $any$ O $any$ O $any$ O $complex$ O $complex$ O $string$ O O $Tab$ O $Promise<any>$ O O O O O O O $Promise$ O $complex$ O O $complex$ O O $string$ O O O O $complex$ O O $string$ O O O O O O $any$ O O O O O O O O $Promise<WebdriverResponse<T>>$ O O O O $complex$ O O O $WebdriverSession$ O O O O $Tab$ O $WebdriverSession$ O $Browser$ O $Tab$ O O O O $Tab$ O O O O $WebdriverStatus.UnknownError$ O $any$ O $WebdriverStatus.UnknownError$ O $complex$ O O $string$ O O O O O O O $any$ O O $Tab$ O $Promise<any>$ O O O $any$ O $any$ O $any$ O $any$ O O O O $Tab$ O $Promise<any>$ O O O O O O O $Promise$ O $complex$ O O $complex$ O O $string$ O O O O $complex$ O O $string$ O O O O O O $any$ O O O O O O O O $Promise<WebdriverResponse<T>>$ O O O O $complex$ O O O $WebdriverSession$ O O O O $Tab$ O $WebdriverSession$ O $Browser$ O $Tab$ O O O O $Tab$ O O O O $WebdriverStatus.UnknownError$ O $any$ O $WebdriverStatus.UnknownError$ O $complex$ O O $string$ O O O O O O O $any$ O O $Tab$ O $Promise<any>$ O O O $any$ O $any$ O $any$ O $any$ O O O O $Tab$ O $Promise<any>$ O O O O O O O $Promise$ O $complex$ O O $complex$ O O $string$ O O O O $complex$ O O $string$ O O O O O O $any$ O O O O O O O O $Promise<WebdriverResponse<T>>$ O O O O $complex$ O O O $WebdriverSession$ O O O O $Tab$ O $WebdriverSession$ O $Browser$ O $Tab$ O O O O $Tab$ O O O O $WebdriverStatus.UnknownError$ O $any$ O $WebdriverStatus.UnknownError$ O $complex$ O O $string$ O O O O O O O $any$ O O $Tab$ O $Promise<any>$ O O O $any$ O $any$ O $any$ O $any$ O O O O $Tab$ O $Promise<any>$ O O O O O O O $WebdriverResponse$ O $complex$ O O $complex$ O O $WebdriverSelectorType$ O $any$ O $string$ O O O O $complex$ O O $string$ O O O O O $WebdriverResponse$ O $ArrayConstructor$ O $any$ O O O O $any$ O O O O $WebdriverResponse<WebdriverElementReference[]>$ O O O O O O O O $any$ O $WebdriverResponse<WebdriverElementReference[]>$ O O O $WebdriverElementReference[]$ O O O $any$ O $ArrayConstructor$ O $any$ O O O $WebdriverResponse<WebdriverElementReference[]>$ O O $WebdriverElementReference[]$ O O O $WebdriverElementReference[]$ O $number$ O O O $WebdriverResponse<T>$ O $complex$ O $WebdriverElementReference[]$ O O O O O O O O $WebdriverStatus.NoSuchElement$ O $any$ O $WebdriverStatus.NoSuchElement$ O $complex$ O O $string$ O O O O O O O $Promise$ O $complex$ O O $complex$ O O $WebdriverSelectorType$ O $any$ O $string$ O O O O $complex$ O O $string$ O O O O O O $any$ O $any$ O O O O O O $WebdriverResponse<WebdriverElementReference>$ O $complex$ O O O O $Promise<WebdriverResponse<WebdriverElementReference[]>>$ O $complex$ O O O O O $Array$ O $WebdriverSession$ O $Tab$ O $HTMLCollectionOf$ O $complex$ O O O $any$ O O O $any[]$ O O O O O O O $number$ O O O $number$ O $HTMLCollectionOf<Element>$ O $number$ O $number$ O O O $any[]$ O $number$ O $WebdriverSession$ O $ElementStore$ O $WebdriverElementReference$ O $Tab$ O $HTMLCollectionOf<Element>$ O $number$ O O O O O O $any[]$ O O O $Array$ O $complex$ O O $WebdriverSelectorType$ O $any$ O $string$ O O O $complex$ O $complex$ O $complex$ O $WebdriverSession$ O $any$ O O O O O $complex$ O O O $Array$ O $ElementList$ O O $complex$ O O O $any[]$ O O O O O O O $number$ O O O $number$ O $ElementList$ O $number$ O $number$ O O O $any[]$ O $number$ O $ElementList$ O $number$ O O O O O $any[]$ O O O O $complex$ O $WebdriverSelectorType$ O O O $any$ O $WebdriverSelectorType.CLASS$ O O $Element[]$ O $complex$ O $complex$ O $HTMLCollectionOf<Element>)$ O $complex$ O $string$ O O O O $any$ O $WebdriverSelectorType.CSS$ O O $Element[]$ O $complex$ O $complex$ O O O $complex$ O $string$ O O O O $any$ O $WebdriverSelectorType.ID$ O O $Element[]$ O $complex$ O $complex$ O O O O O $complex$ O $string$ O O O $complex$ O $Element$ O $Element$ O $string$ O $complex$ O $string$ O O O $any$ O $WebdriverSelectorType.NAME$ O O $Element[]$ O $complex$ O $complex$ O O O O O O O $complex$ O $Element$ O $Element$ O $string$ O O O O $complex$ O $string$ O O O $any$ O $WebdriverSelectorType.LINK_TEXT$ O O $Element[]$ O $complex$ O $complex$ O O O O O O O $complex$ O $Element$ O $Element$ O $string$ O $complex$ O $string$ O O O $any$ O $WebdriverSelectorType.PARTIAL_LINK_TEXT$ O O $Element[]$ O $complex$ O $complex$ O O O O O O O $complex$ O $Element$ O O $Element$ O $string$ O O O O $number$ O $complex$ O $string$ O O O O O O O $any$ O $WebdriverSelectorType.TAG$ O O $Element[]$ O $complex$ O $complex$ O O O $complex$ O $string$ O O O O $any$ O $WebdriverSelectorType.XPATH$ O O O $ErrorConstructor$ O O O O O O $Promise$ O $complex$ O O $complex$ O O $WebdriverSelectorType$ O $any$ O $string$ O O O O $complex$ O O $string$ O O O O O O $any$ O $ArrayConstructor$ O $any$ O O O O O O O $Promise<WebdriverResponse<T>>$ O $ArrayConstructor$ O $any$ O O O $complex$ O O O $WebdriverSession$ O O O O $Tab$ O $WebdriverSession$ O $Browser$ O $Tab$ O O O O $Tab$ O O O O O O O O $any$ O O $Tab$ O $Promise<any>$ O O O O O $complex$ O $complex$ O $WebdriverSelectorType$ O $any$ O $WebdriverSelectorType.ID$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $complex$ O $complex$ O $string$ O O O $any$ O O $WebdriverSession$ O $ElementStore$ O $WebdriverElementReference$ O $Tab$ O $any$ O O O O O O O O O $complex$ O $complex$ O $complex$ O $any$ O $WebdriverSelectorType.XPATH$ O O O $complex$ O O O O O $Element[]$ O O $complex$ O $complex$ O $complex$ O $complex$ O $string$ O $complex$ O $complex$ O $string$ O $any$ O $any$ O $any$ O $any$ O $WebdriverSession$ O O O O $U[]$ O $Element$ O $WebdriverSession$ O $ElementStore$ O $WebdriverElementReference$ O $Tab$ O $Element$ O O O O O O O O $Promise$ O $complex$ O O $complex$ O O $WebdriverSelectorType$ O $any$ O $string$ O O O O $complex$ O O $string$ O O O $string$ O O O O O O $any$ O $any$ O O O O O O $WebdriverResponse<WebdriverElementReference>$ O $complex$ O O O O $Promise<WebdriverResponse<WebdriverElementReference[]>>$ O $complex$ O O O O $Promise$ O $complex$ O O $complex$ O O $WebdriverSelectorType$ O $any$ O $string$ O O O O $complex$ O O $string$ O O O $string$ O O O O O O $any$ O $ArrayConstructor$ O $any$ O O O O O O O $Promise<...>$ O $ArrayConstructor$ O $any$ O O O $complex$ O O O $WebdriverSession$ O $Element$ O O O O $Tab$ O $WebdriverSession$ O $Browser$ O $Tab$ O O O O $Tab$ O O O O O O O O $any$ O O $Tab$ O $Promise<any>$ O O O O O $complex$ O $complex$ O $WebdriverSelectorType$ O $any$ O $WebdriverSelectorType.ID$ O O O O $WebdriverStatus.UnknownError$ O $any$ O $WebdriverStatus.UnknownError$ O $complex$ O O $string$ O O O O O O O O $complex$ O $complex$ O $complex$ O $any$ O $WebdriverSelectorType.XPATH$ O O O $complex$ O O O O O $Element[]$ O O $complex$ O $complex$ O $complex$ O $complex$ O $string$ O $complex$ O $complex$ O $string$ O $Element$ O $Element$ O $WebdriverSession$ O O O O $U[]$ O $Element$ O $WebdriverSession$ O $ElementStore$ O $WebdriverElementReference$ O $Tab$ O $Element$ O O O O O O O $Promise$ O $complex$ O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O O O O $any$ O O O O O O O O $Promise<WebdriverResponse<T>>$ O O O O $complex$ O O O $WebdriverSession$ O O O O $complex$ O $complex$ O $string$ O $complex$ O $complex$ O $string$ O O O O O $Promise$ O $complex$ O O $complex$ O O $string$ O O O O O O $any$ O $any$ O O O O O O $Promise<WebdriverResponse<T>>$ O $any$ O O $complex$ O O O $WebdriverSession$ O O O O $Tab$ O $WebdriverSession$ O $Browser$ O $Tab$ O O O O $Tab$ O O O O $WebdriverStatus.UnknownError$ O $any$ O $WebdriverStatus.UnknownError$ O $complex$ O O $string$ O O O O O O O $any$ O O $Tab$ O $Promise<any>$ O O O O $WebdriverSession$ O $ElementStore$ O $WebdriverElementReference$ O $Tab$ O $any$ O $any$ O $any$ O $any$ O O O O O O $Promise$ O $complex$ O O $complex$ O O $string$ O O O O O O $any$ O O O O O O O O $Promise<WebdriverResponse<T>>$ O O O O $complex$ O O O $WebdriverSession$ O O O O $Tab$ O $WebdriverSession$ O $Browser$ O $Tab$ O O O O $Tab$ O O O O $WebdriverStatus.UnknownError$ O $any$ O $WebdriverStatus.UnknownError$ O $complex$ O O $string$ O O O O O O O $any$ O O $Tab$ O $Promise<any>$ O O O O $any$ O $any$ O O O O O O O $Promise$ O $complex$ O O $complex$ O O $string$ O O O O O O $any$ O O O O O O O O $Promise<WebdriverResponse<T>>$ O O O O $complex$ O O O $WebdriverSession$ O O O O $Tab$ O $WebdriverSession$ O $Browser$ O $Tab$ O O O O $Tab$ O O O O $WebdriverStatus.UnknownError$ O $any$ O $WebdriverStatus.UnknownError$ O $complex$ O O $string$ O O O O O O O $any$ O O $Tab$ O $Promise<any>$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O $Promise$ O $complex$ O O $complex$ O O $string$ O O O O O O $any$ O O O O O O O O $Promise<WebdriverResponse<T>>$ O O O O $complex$ O O O $WebdriverSession$ O O O O $Tab$ O $WebdriverSession$ O $Browser$ O $Tab$ O O O O $Tab$ O O O O $WebdriverStatus.UnknownError$ O $any$ O $WebdriverStatus.UnknownError$ O $complex$ O O $string$ O O O O O O O $any$ O O $Tab$ O $Promise<any>$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O $Promise$ O $complex$ O O $complex$ O O $string$ O O O O O O $any$ O O O O O O O O $Promise<WebdriverResponse<T>>$ O $complex$ O O O $WebdriverSession$ O O O O $Store$ O O $WebdriverSession$ O $Browser$ O $any$ O O O O $any$ O O $any[]$ O O $Promise<T>$ O $ArrayConstructor$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any[]$ O O O $Promise<T>$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $undefined$ O O O O O O O O O $Promise$ O $complex$ O O $complex$ O O $string$ O O O $string$ O O O O O O $any$ O O O O O O O O $Promise<WebdriverResponse<T>>$ O $complex$ O O O $WebdriverSession$ O O O O $Store$ O O $WebdriverSession$ O $Browser$ O $any$ O O O O $any$ O O $any[]$ O O $Promise<T>$ O $ArrayConstructor$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any[]$ O O O O $any$ O $any$ O $complex$ O $complex$ O $string$ O O O $Promise<T>$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $undefined$ O O O O O O O O O O $Promise$ O $complex$ O O $complex$ O O $string$ O O O O $complex$ O O $WebdriverCookie$ O $any$ O O O O $any$ O O O O O O O O $Promise<WebdriverResponse<T>>$ O O O O $complex$ O O O $WebdriverSession$ O O O O $Tab$ O $WebdriverSession$ O $Browser$ O $Tab$ O O O O $Tab$ O O O O $WebdriverStatus.UnknownError$ O $any$ O $WebdriverStatus.UnknownError$ O $complex$ O O $string$ O O O O O O O $any$ O O $Tab$ O $Promise<any>$ O O O O O $PromiseConstructor$ O O $void$ O $void$ O O O O $WebdriverCookie$ O $complex$ O $complex$ O $WebdriverCookie$ O $WebdriverSession$ O $Browser$ O $any$ O $any$ O O $any$ O O $string$ O $WebdriverCookie$ O $string$ O $string$ O $WebdriverCookie$ O $string$ O $complex$ O $WebdriverCookie$ O $number$ O O O $string$ O $WebdriverCookie$ O $string$ O $string$ O $WebdriverCookie$ O $string$ O $boolean$ O $WebdriverCookie$ O $boolean$ O O O $boolean$ O $WebdriverCookie$ O $boolean$ O O O $Date$ O O $DateConstructor$ O O O $Date$ O O $DateConstructor$ O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O $any$ O $void$ O $any$ O O O $void$ O O O O O O O O O O O O O $Promise$ O $complex$ O O $complex$ O O $string$ O O O O O O $any$ O $ArrayConstructor$ O $any$ O O O O O O O $Promise<WebdriverResponse<T>>$ O $ArrayConstructor$ O $any$ O O O $complex$ O O O $WebdriverSession$ O O O O $Tab$ O $WebdriverSession$ O $Browser$ O $Tab$ O O O O $Tab$ O O O O $WebdriverStatus.UnknownError$ O $any$ O $WebdriverStatus.UnknownError$ O $complex$ O O $string$ O O O O O O O $any$ O O $Tab$ O $Promise<any>$ O O O O $any[]$ O O O $PromiseConstructor$ O $any$ O O O O O $void$ O $void$ O O O $WebdriverSession$ O $Browser$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O $any$ O $void$ O $any$ O O O $void$ O $any$ O O O O O O O O O $any[]$ O $U[]$ O O $any$ O O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O $undefined$ O O O O O O O O O O O $Promise$ O $any$ O O $complex$ O O $complex$ O O $string$ O O O $string$ O O O O O $complex$ O O $WebdriverSession$ O $Element$ O O $PromiseConstructor$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $WebdriverSession$ O O O $complex$ O $WebdriverSession$ O $complex$ O $complex$ O $string$ O O O O O $WebdriverSession$ O O O O $WebdriverStatus.NoSuchSession$ O $any$ O $WebdriverStatus.NoSuchSession$ O $complex$ O O $string$ O O O O O O O $Element$ O $WebdriverSession$ O $ElementStore$ O $Element$ O $complex$ O $complex$ O $string$ O O O O O $Element$ O O O O $WebdriverStatus.NoSuchElement$ O $any$ O $WebdriverStatus.NoSuchElement$ O $complex$ O O $string$ O O O O O O O $complex$ O O $complex$ O $WebdriverSession$ O $Element$ O O O O $complex$ O $complex$ O O O O $WebdriverResponse<T>$ O O O O O $WebdriverResponse<T>$ O $any$ O O $complex$ O $T$ O O O O $Promise$ O $complex$ O O $complex$ O O $string$ O O O $string$ O O O O O O $any$ O O O O O O O O $Promise<...>$ O $complex$ O O O $WebdriverSession$ O $Element$ O O O O $Element$ O $string$ O $string$ O O O O O O O $Promise$ O $complex$ O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O O O O $any$ O O O O O O O O O O $Promise<...>$ O O O O O O $complex$ O O O $WebdriverSession$ O $Element$ O O O O O $complex$ O $complex$ O $string$ O O O $complex$ O $Element$ O O O O $complex$ O $string$ O O O O $complex$ O $complex$ O $string$ O O O $complex$ O $Element$ O O O O $HTMLInputElement$ O $boolean$ O O O O O O O $Element$ O $string$ O $complex$ O $complex$ O $string$ O O O O O O $Promise$ O $complex$ O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O O O O $any$ O O O O O O O O O O $Promise<...>$ O O O O O O $complex$ O O O $WebdriverSession$ O $Element$ O O O O $Tab$ O $WebdriverSession$ O $Browser$ O $Tab$ O O O O $Tab$ O O O O $WebdriverStatus.UnknownError$ O $any$ O $WebdriverStatus.UnknownError$ O $complex$ O O $string$ O O O O O O O $any$ O O $Tab$ O $Promise<any>$ O O O O $any$ O $any$ O $any$ O $Element$ O O O $complex$ O $complex$ O $string$ O O O O O O O O O O O $Promise$ O $complex$ O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O O O O $any$ O O O O O O O O $Promise<...>$ O O O O $complex$ O O O $WebdriverSession$ O $Element$ O O O O O O $Element$ O O O O $any$ O O O O O $Promise$ O $complex$ O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O O O O $any$ O O O O O O O O $Promise<...>$ O O O O $complex$ O O O $WebdriverSession$ O $Element$ O O O O O O O $Element$ O O O O $any$ O O O O O $Promise$ O $complex$ O O $complex$ O O $string$ O O O $string$ O O O O O O $any$ O O O O O O O O $Promise<...>$ O O O O $complex$ O O O $WebdriverSession$ O $Element$ O O O O $Element$ O $string$ O O O O O O O $Promise$ O $complex$ O O $complex$ O O $string$ O O O $string$ O O O O O O $any$ O O O O O O O O $Promise<...>$ O O O O $complex$ O O O $WebdriverSession$ O $Element$ O O O O $Tab$ O $WebdriverSession$ O $Browser$ O $Tab$ O O O O $Tab$ O O O O $WebdriverStatus.UnknownError$ O $any$ O $WebdriverStatus.UnknownError$ O $complex$ O O $string$ O O O O O O O $any$ O O $Tab$ O $Promise<any>$ O O O O $any$ O $any$ O $any$ O $any$ O $Element$ O O O $number$ O $any$ O $any$ O $number$ O $any$ O $any$ O O O O O O O $number$ O $any$ O $any$ O $number$ O $any$ O $any$ O O O O O O O $number$ O $any$ O $any$ O $number$ O $any$ O $any$ O O O O O O O O O $number$ O $any$ O $any$ O $number$ O $any$ O $any$ O O O O O O O O O O O O O O O O $void$ O $string$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $string$ O O O O O $any$ O $any$ O O O $number$ O $number$ O $number$ O $number$ O $number$ O $number$ O $number$ O $number$ O O O O O O O O O $any$ O $MouseButton.LEFT$ O O O O $Element$ O $boolean$ O $any$ O O O O O O O O O $Promise$ O $complex$ O O $complex$ O O $string$ O O O O $complex$ O O $string$ O O O O $number$ O O O O $number$ O O O O O O O $any$ O O O O O O O O $Promise<WebdriverResponse<T>>$ O O O O $complex$ O O O $WebdriverSession$ O O O O O O $complex$ O $complex$ O $string$ O O O O $WebdriverStatus.UnknownError$ O $any$ O $WebdriverStatus.UnknownError$ O $complex$ O O $string$ O O O O O O O $WebdriverSession$ O $complex$ O O $string$ O $complex$ O $complex$ O $string$ O $number$ O $complex$ O $complex$ O $number$ O O O $number$ O $complex$ O $complex$ O $number$ O O O O O O O O O $Promise$ O $complex$ O O $complex$ O O $string$ O O O O $complex$ O O $MouseButton$ O $any$ O O O O $any$ O O O O O O O O $Promise<WebdriverResponse<T>>$ O O O O $complex$ O O O $WebdriverSession$ O O O O O O $WebdriverSession$ O $complex$ O O O O $WebdriverStatus.UnknownError$ O $any$ O $WebdriverStatus.UnknownError$ O $complex$ O O $string$ O O O O O O O O $Element$ O $WebdriverSession$ O $ElementStore$ O $Element$ O $WebdriverSession$ O $complex$ O $string$ O O O O O $Element$ O O O O $WebdriverStatus.UnknownError$ O $any$ O $WebdriverStatus.UnknownError$ O $complex$ O O $string$ O O O $WebdriverSession$ O $complex$ O $string$ O O O O O O O O $Tab$ O $WebdriverSession$ O $Browser$ O $Tab$ O O O O $Tab$ O O O O $WebdriverStatus.UnknownError$ O $any$ O $WebdriverStatus.UnknownError$ O $complex$ O O $string$ O O O O O O O $any$ O O $Tab$ O $Promise<any>$ O O O O $any$ O $any$ O $any$ O $any$ O $Element$ O O O $number$ O $any$ O $any$ O $number$ O $any$ O $any$ O O O O O O O $number$ O $any$ O $any$ O $number$ O $any$ O $any$ O O O O O O O $number$ O $WebdriverSession$ O $complex$ O $number$ O O $number$ O $WebdriverSession$ O $complex$ O $number$ O O O O O O O O O $void$ O $string$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $string$ O O O O O $any$ O $any$ O O O $number$ O $number$ O $number$ O $number$ O $number$ O $number$ O $number$ O $number$ O O O O O O O O O $complex$ O $complex$ O $MouseButton$ O O O O $Element$ O $boolean$ O $any$ O O O O O O O O O $Promise$ O $complex$ O O $complex$ O O $string$ O O O $string$ O O O O O O $any$ O O O O O O O O $Promise<...>$ O O O O $complex$ O O O $WebdriverSession$ O $Element$ O O O O $Tab$ O $WebdriverSession$ O $Browser$ O $Tab$ O O O O $Tab$ O O O O $WebdriverStatus.UnknownError$ O $any$ O $WebdriverStatus.UnknownError$ O $complex$ O O $string$ O O O O O O O $any$ O O $Tab$ O $Promise<any>$ O O O O O O $complex$ O $Element$ O O O O O $WebdriverStatus.UnknownError$ O $any$ O $WebdriverStatus.UnknownError$ O $complex$ O O $string$ O O O O O O O $HTMLFormElement$ O $HTMLFormElement$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O O O O O O $HTMLFormElement$ O $boolean$ O $any$ O O O $HTMLFormElement$ O $void$ O O O O O $Tab$ O $Promise<any>$ O O O O O O O $Promise$ O $complex$ O O $complex$ O O $string$ O O O O $complex$ O O $string$ O O O O O O $any$ O O O O O O O O $Promise<WebdriverResponse<T>>$ O O O O $complex$ O O O $WebdriverSession$ O O O O $Tab$ O $WebdriverSession$ O $Browser$ O $Tab$ O O O O $Tab$ O O O O $WebdriverStatus.UnknownError$ O $any$ O $WebdriverStatus.UnknownError$ O $complex$ O O $string$ O O O O O O O $any$ O O $Tab$ O $Promise<any>$ O O O O O O $string$ O $complex$ O $complex$ O $string$ O O O $complex$ O O $string$ O $string$ O $string$ O O O $string$ O $string$ O $number$ O $string$ O $number$ O O O O $boolean$ O $string$ O $string$ O $string$ O O O $number$ O $string$ O $string$ O O O $number$ O O O O O O O $any$ O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O O $complex$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O O $complex$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O O $complex$ O O O O O O O O $Promise$ O $complex$ O O $complex$ O O $string$ O O O O $complex$ O O $string$ O O O $string[]$ O $ArrayConstructor$ O O O O O O O $any$ O O O O O O O O $Promise<WebdriverResponse<T>>$ O $complex$ O O O $WebdriverSession$ O O O O $Tab$ O $WebdriverSession$ O $Browser$ O $Tab$ O O O O $Tab$ O O O O $WebdriverStatus$ O $any$ O $WebdriverStatus.UnknownError$ O $complex$ O O $string$ O O O O O O O $any$ O O $Tab$ O $Promise<any>$ O O O O O $any$ O $any$ O O O O $any$ O O O $complex$ O $complex$ O $string$ O O O $complex$ O $complex$ O $string[]$ O O O O O O $Promise$ O $complex$ O O $complex$ O O $string$ O O O O $complex$ O O $string$ O O O $string[]$ O $ArrayConstructor$ O O O O O O O $any$ O O O O O O O O $Promise<WebdriverResponse<any>>$ O $complex$ O O O $Storage$ O $DOMWindow$ O $StorageLevel$ O O O O $StorageLevel$ O O O $any$ O $StorageLevel.Local$ O O $any$ O $any$ O O $any$ O $StorageLevel.Session$ O O $any$ O $any$ O O O $Promise$ O $complex$ O O $complex$ O O $string$ O O O $StorageLevel$ O $any$ O O $complex$ O O $string$ O O O $string$ O O O O O O $any$ O O O O O O O O $Promise<WebdriverResponse<T>>$ O O O O $complex$ O O O $WebdriverSession$ O O O O $Tab$ O $WebdriverSession$ O $Browser$ O $Tab$ O O O O $Tab$ O O O O $WebdriverStatus.UnknownError$ O $any$ O $WebdriverStatus.UnknownError$ O $complex$ O O $string$ O O O O O O O $any$ O O $Tab$ O $Promise<any>$ O O O O O $Storage$ O $any$ O $any$ O $complex$ O $complex$ O $StorageLevel$ O O $void$ O $complex$ O $complex$ O $string$ O $complex$ O $complex$ O $string$ O O O O O O $Promise$ O $complex$ O O $complex$ O O $string$ O O O $StorageLevel$ O $any$ O $string$ O O O O O O $any$ O O O O O O O O O O $Promise<WebdriverResponse<T>>$ O O O O O O $complex$ O O O $WebdriverSession$ O O O O $Tab$ O $WebdriverSession$ O $Browser$ O $Tab$ O O O O $Tab$ O O O O $WebdriverStatus.UnknownError$ O $any$ O $WebdriverStatus.UnknownError$ O $complex$ O O $string$ O O O O O O O $any$ O O $Tab$ O $Promise<any>$ O O O O O O $Storage$ O $any$ O $any$ O $complex$ O $complex$ O $StorageLevel$ O O $string$ O $complex$ O $complex$ O $string$ O O O O O O $Promise$ O $complex$ O O $complex$ O O $string$ O O O $StorageLevel$ O $any$ O O O O $any$ O $ArrayConstructor$ O O O O O O O O O $Promise<WebdriverResponse<T>>$ O $ArrayConstructor$ O O O O O $complex$ O O O $WebdriverSession$ O O O O $Tab$ O $WebdriverSession$ O $Browser$ O $Tab$ O O O O $Tab$ O O O O $WebdriverStatus.UnknownError$ O $any$ O $WebdriverStatus.UnknownError$ O $complex$ O O $string$ O O O O O O O $any$ O O $Tab$ O $Promise<any>$ O O O O $Storage$ O O O $Storage$ O $any$ O $any$ O $complex$ O $complex$ O $StorageLevel$ O O O $any[]$ O O O O O O O $number$ O O O $number$ O $Storage$ O $number$ O $number$ O O O O $string$ O $Storage$ O $string$ O $number$ O O O O O $string$ O O O O $any[]$ O $number$ O $string$ O O O O O $any[]$ O O O O O $Promise$ O $complex$ O O $complex$ O O $string$ O O O $StorageLevel$ O $any$ O O O O $any$ O O O O O O O O $Promise<WebdriverResponse<T>>$ O O O O $complex$ O O O $WebdriverSession$ O O O O $Tab$ O $WebdriverSession$ O $Browser$ O $Tab$ O O O O $Tab$ O O O O $WebdriverStatus.UnknownError$ O $any$ O $WebdriverStatus.UnknownError$ O $complex$ O O $string$ O O O O O O O $any$ O O $Tab$ O $Promise<any>$ O O O O O O $Storage$ O $any$ O $any$ O $complex$ O $complex$ O $StorageLevel$ O O $number$ O O O O O $Promise$ O $complex$ O O $complex$ O O $string$ O O O $StorageLevel$ O $any$ O O O O $any$ O O O O O O O O $Promise<WebdriverResponse<T>>$ O O O O $complex$ O O O $WebdriverSession$ O O O O $Tab$ O $WebdriverSession$ O $Browser$ O $Tab$ O O O O $Tab$ O O O O $WebdriverStatus.UnknownError$ O $any$ O $WebdriverStatus.UnknownError$ O $complex$ O O $string$ O O O O O O O $any$ O O $Tab$ O $Promise<any>$ O O O O O $Storage$ O $any$ O $any$ O $complex$ O $complex$ O $StorageLevel$ O O $void$ O O O O O O O $Promise$ O $complex$ O O $complex$ O O $string$ O O O $StorageLevel$ O $any$ O $string$ O O O O O O $any$ O O O O O O O O $Promise<WebdriverResponse<T>>$ O O O O $complex$ O O O $WebdriverSession$ O O O O $Tab$ O $WebdriverSession$ O $Browser$ O $Tab$ O O O O $Tab$ O O O O $WebdriverStatus.UnknownError$ O $any$ O $WebdriverStatus.UnknownError$ O $complex$ O O $string$ O O O O O O O $any$ O O $Tab$ O $Promise<any>$ O O O O O $Storage$ O $any$ O $any$ O $complex$ O $complex$ O $StorageLevel$ O O $void$ O $complex$ O $complex$ O $string$ O O O O O O $WebdriverErrorResponse$ O $DOMWindow$ O $Element$ O $string$ O O O O $any$ O O O O $complex$ O $Element$ O O O O O $WebdriverStatus.InvalidElementState$ O $any$ O $WebdriverStatus.InvalidElementState$ O $complex$ O O $string$ O O O $Element$ O $string$ O O O O O O $complex$ O $boolean$ O $complex$ O $boolean$ O O O O $WebdriverStatus.InvalidElementState$ O $any$ O $WebdriverStatus.InvalidElementState$ O $complex$ O O $string$ O O O O O O $complex$ O $void$ O O O O $PropertyDescriptor$ O $ObjectConstructor$ O $PropertyDescriptor$ O $complex$ O $Function$ O $any$ O O O O O O O $PropertyDescriptor$ O $void$ O O O O $ErrorConstructor$ O O O O O $PropertyDescriptor$ O $void$ O $any$ O $complex$ O $string$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O O O O $complex$ O $boolean$ O $any$ O O $complex$ O $void$ O O O O O O O $Promise$ O $complex$ O O $complex$ O O $string$ O O O $string$ O O O O O O $any$ O O O O O O O O $Promise<...>$ O O O O $complex$ O O O $WebdriverSession$ O $Element$ O O O O $Tab$ O $WebdriverSession$ O $Browser$ O $Tab$ O O O O $Tab$ O O O O $WebdriverStatus.UnknownError$ O $any$ O $WebdriverStatus.UnknownError$ O $complex$ O O $string$ O O O O O O O $any$ O O $Tab$ O $Promise<any>$ O O O O O $WebdriverErrorResponse$ O $any$ O $any$ O $Element$ O O O O O O O O $Promise$ O $complex$ O O $complex$ O O $string$ O O O $string$ O O O O $complex$ O O $string[]$ O $ArrayConstructor$ O O O O O O O $any$ O O O O O O O O $Promise<...>$ O O O O $complex$ O O O $WebdriverSession$ O $Element$ O O O O $Tab$ O $WebdriverSession$ O $Browser$ O $Tab$ O O O O $Tab$ O O O O $WebdriverStatus.UnknownError$ O $any$ O $WebdriverStatus.UnknownError$ O $complex$ O O $string$ O O O O O O O $any$ O O $Tab$ O $Promise<any>$ O O O O O O $complex$ O $Element$ O O O O O $WebdriverStatus.InvalidElementState$ O $any$ O $WebdriverStatus.InvalidElementState$ O $complex$ O O $string$ O O O $Element$ O $string$ O O O O O O $WebdriverErrorResponse$ O $any$ O $any$ O $complex$ O $complex$ O $string$ O $complex$ O $complex$ O $string[]$ O $string$ O O O O O O O O O $Promise$ O $complex$ O O $complex$ O O $string$ O O O $string$ O O O O O O $any$ O O O O O O O O $Promise<...>$ O O O O $complex$ O O O $WebdriverSession$ O $Element$ O O O O $Tab$ O $WebdriverSession$ O $Browser$ O $Tab$ O O O O $Tab$ O O O O $WebdriverStatus.UnknownError$ O $any$ O $WebdriverStatus.UnknownError$ O $complex$ O O $string$ O O O O O O O $any$ O O $Tab$ O $Promise<any>$ O O O O $any$ O $any$ O $any$ O $any$ O $Element$ O O $any$ O O $any$ O O O O O O O $Promise$ O $complex$ O O $complex$ O O $string$ O O O O O O $any$ O O O O O O O O $Promise<WebdriverResponse<T>>$ O O O O $complex$ O O O $WebdriverSession$ O O O O $Tab$ O $WebdriverSession$ O $Browser$ O $Tab$ O O O $Tab$ O O $Tab$ O $Promise<void>$ O O O O O O O O O O $complex$ O $Element$ O O $Element$ O $complex$ O O $Element$ O $string$ O O O O O $complex$ O $Element$ O O $Element$ O $complex$ O $complex$ O O $Element$ O $string$ O O O $Element$ O $string$ O O O O O $complex$ O $Element$ O O $Element$ O $complex$ O O $Element$ O $string$ O O O O O O $any$ O
interface WebdriverOptions { port ? : number ; onStart ? : Function ; } export default WebdriverOptions ;	O $any$ O $number$ O O O O $Function$ O O $FunctionConstructor$ O O O O $any$ O
import Webdriver from 's' ; export const enum HttpMethod { get = 's' , post = 's' , delete = 's' , } const methods < { method : HttpMethod , path : string , fn : keyof Webdriver } > = [ ] ; function register ( method , path , fn : keyof Webdriver ) { methods . push ( { method , path , fn } ) ; } register ( HttpMethod . post , 's' , 's' ) ; register ( HttpMethod . delete , 's' , 's' ) ; register ( HttpMethod . delete , 's' , 's' ) ; register ( HttpMethod . delete , 's' , 's' ) ; register ( HttpMethod . get , 's' , 's' ) ; register ( HttpMethod . get , 's' , 's' ) ; register ( HttpMethod . post , 's' , 's' ) ; register ( HttpMethod . post , 's' , 's' ) ; register ( HttpMethod . post , 's' , 's' ) ; register ( HttpMethod . get , 's' , 's' ) ; register ( HttpMethod . post , 's' , 's' ) ; register ( HttpMethod . post , 's' , 's' ) ; register ( HttpMethod . post , 's' , 's' ) ; register ( HttpMethod . get , 's' , 's' ) ; register ( HttpMethod . get , 's' , 's' ) ; register ( HttpMethod . get , 's' , 's' ) ; register ( HttpMethod . get , 's' , 's' ) ; register ( HttpMethod . get , 's' , 's' ) ; register ( HttpMethod . get , 's' , 's' ) ; register ( HttpMethod . post , 's' , 's' ) ; register ( HttpMethod . post , 's' , 's' ) ; register ( HttpMethod . post , 's' , 's' ) ; register ( HttpMethod . post , 's' , 's' ) ; register ( HttpMethod . get , 's' , 's' ) ; register ( HttpMethod . post , 's' , 's' ) ; register ( HttpMethod . post , 's' , 's' ) ; register ( HttpMethod . post , 's' , 's' ) ; register ( HttpMethod . post , 's' , 's' ) ; register ( HttpMethod . get , 's' , 's' ) ; register ( HttpMethod . get , 's' , 's' ) ; register ( HttpMethod . post , 's' , 's' ) ; register ( HttpMethod . post , 's' , 's' ) ; register ( HttpMethod . post , 's' , 's' ) ; register ( HttpMethod . post , 's' , 's' ) ; register ( HttpMethod . post , 's' , 's' ) ; register ( HttpMethod . post , 's' , 's' ) ; register ( HttpMethod . post , 's' , 's' ) ; register ( HttpMethod . get , 's' , 's' ) ; register ( HttpMethod . post , 's' , 's' ) ; register ( HttpMethod . get , 's' , 's' ) ; register ( HttpMethod . get , 's' , 's' ) ; register ( HttpMethod . get , 's' , 's' ) ; register ( HttpMethod . delete , 's' , 's' ) ; register ( HttpMethod . delete , 's' , 's' ) ; register ( HttpMethod . delete , 's' , 's' ) ; export default methods ;	O $any$ O O O O O O $any$ O $HttpMethod.get$ O O O $HttpMethod.post$ O O O $HttpMethod.delete$ O O O O O $Array$ O O $HttpMethod$ O $any$ O $string$ O O O O O O $any$ O O O O O O O O O $HttpMethod$ O $string$ O O O O $any$ O O O O O O O $HttpMethod$ O $string$ O O O O O O O O $any$ O $HttpMethod.post$ O O O O O O O O $any$ O $HttpMethod.delete$ O O O O O O O O $any$ O $HttpMethod.delete$ O O O O O O O O $any$ O $HttpMethod.delete$ O O O O O O O O $any$ O $HttpMethod.get$ O O O O O O O O $any$ O $HttpMethod.get$ O O O O O O O O $any$ O $HttpMethod.post$ O O O O O O O O $any$ O $HttpMethod.post$ O O O O O O O O $any$ O $HttpMethod.post$ O O O O O O O O $any$ O $HttpMethod.get$ O O O O O O O O $any$ O $HttpMethod.post$ O O O O O O O O $any$ O $HttpMethod.post$ O O O O O O O O $any$ O $HttpMethod.post$ O O O O O O O O $any$ O $HttpMethod.get$ O O O O O O O O $any$ O $HttpMethod.get$ O O O O O O O O $any$ O $HttpMethod.get$ O O O O O O O O $any$ O $HttpMethod.get$ O O O O O O O O $any$ O $HttpMethod.get$ O O O O O O O O $any$ O $HttpMethod.get$ O O O O O O O O $any$ O $HttpMethod.post$ O O O O O O O O $any$ O $HttpMethod.post$ O O O O O O O O $any$ O $HttpMethod.post$ O O O O O O O O $any$ O $HttpMethod.post$ O O O O O O O O $any$ O $HttpMethod.get$ O O O O O O O O $any$ O $HttpMethod.post$ O O O O O O O O $any$ O $HttpMethod.post$ O O O O O O O O $any$ O $HttpMethod.post$ O O O O O O O O $any$ O $HttpMethod.post$ O O O O O O O O $any$ O $HttpMethod.get$ O O O O O O O O $any$ O $HttpMethod.get$ O O O O O O O O $any$ O $HttpMethod.post$ O O O O O O O O $any$ O $HttpMethod.post$ O O O O O O O O $any$ O $HttpMethod.post$ O O O O O O O O $any$ O $HttpMethod.post$ O O O O O O O O $any$ O $HttpMethod.post$ O O O O O O O O $any$ O $HttpMethod.post$ O O O O O O O O $any$ O $HttpMethod.post$ O O O O O O O O $any$ O $HttpMethod.get$ O O O O O O O O $any$ O $HttpMethod.post$ O O O O O O O O $any$ O $HttpMethod.get$ O O O O O O O O $any$ O $HttpMethod.get$ O O O O O O O O $any$ O $HttpMethod.get$ O O O O O O O O $any$ O $HttpMethod.delete$ O O O O O O O O $any$ O $HttpMethod.delete$ O O O O O O O O $any$ O $HttpMethod.delete$ O O O O O O O O O O
import express = require ( 's' ) ; import uuid = require ( 's' ) ; import { json } from 's' ; import Webdriver from 's' ; import WebdriverOptions from 's' ; import urlMap from 's' ; import WebdriverStatus from 's' ; import StorageLevel from 's' ; function startServer ( options = { } ) { const app = express ( ) ; app . use ( json ( ) ) ; app . get ( 's' , ( req , res , next ) => { res . json ( require ( 's' ) . version ) ; } ) ; function isStorageLevel ( str ) : str is StorageLevel { return str === StorageLevel . Local || str === StorageLevel . Session ; } const driver = new Webdriver ( ) ; urlMap . forEach ( pattern => { ( app as any ) [ pattern . method ] ( pattern . path , ( req : express . Request , res : express . Response , next : express . NextFunction ) => { if ( req . params . storageLevel && ! isStorageLevel ( req . params . storageLevel ) ) { return next ( ) ; } ( driver as any ) [ pattern . fn ] ( req ) . then ( ( result ) => res . json ( result ) , ( err ) => res . json ( { status : WebdriverStatus . UnknownError , value : { message : err . stack } } ) , ) . catch ( next ) ; } ) ; } ) ; app . use ( ( req , res , next ) => { res . json ( { status : WebdriverStatus . UnknownCommand , value : { message : `template` } } ) ; } ) ; return app . listen ( options . port || 0 , options . onStart ) ; } ; export = startServer ;	O $any$ O O O O O O O $any$ O O O O O O O O $any$ O O O O O $any$ O O O O $any$ O O O O O O O O O $any$ O O O O $any$ O O O O $any$ O $WebdriverOptions$ O O O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O $any$ O O O O O O $complex$ O $string$ O O $string$ O $any$ O O $string$ O $any$ O $StorageLevel.Local$ O $string$ O $any$ O $StorageLevel.Session$ O O O $Webdriver$ O O $any$ O O O O O O O O O O O $any$ O O O O O O $HttpMethod$ O O O O $string$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O $complex$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O $Webdriver$ O O O O O O O O O $any$ O O $any$ O O $any$ O O $any$ O $any$ O $any$ O O O $any$ O O $any$ O $any$ O O $WebdriverStatus$ O $any$ O $WebdriverStatus.UnknownError$ O $complex$ O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O $WebdriverStatus$ O $any$ O $WebdriverStatus.UnknownCommand$ O $complex$ O O $string$ O O O O O O O O O O $any$ O $any$ O $WebdriverOptions$ O $number$ O O O $WebdriverOptions$ O $Function$ O O O O O O $any$ O
'js' import type { Driver } from 's' ; import { SelectorTypes , MouseButtons } from 's' ; import chalk from 's' ; import assert from 's' ; function test ( name , fn : ( ) => void ) { console . log ( chalk . blue ( name ) ) ; fn ( ) ; } function run ( driver , location ) { function checkText ( elementSelector , expectedText ) { const element = driver . browser . activeWindow . getElement ( elementSelector ) ; const actualText = element . getText ( ) ; assert . equal ( actualText , expectedText ) ; return element ; } test ( 's' , ( ) => { driver . timeOut . setTimeOuts ( { implicit : 's' , async : 's' } ) ; } ) ; test ( 's' , ( ) => { const activeWindowHandle = driver . browser . activeWindow . getWindowHandle ( ) ; assert . notEqual ( activeWindowHandle . id , 's' ) ; assert . equal ( typeof activeWindowHandle . id , 's' ) ; } ) ; test ( 's' , ( ) => { driver . browser . activeWindow . navigateTo ( location ) ; } ) ; test ( 's' , ( ) => { assert . equal ( driver . browser . activeWindow . getUrl ( ) , location ) ; } ) ; test ( 's' , ( ) => { const alertButton = driver . browser . activeWindow . getElement ( 's' ) ; assert ( alertButton && typeof alertButton === 's' ) ; } ) ; test ( 's' , ( ) => { try { driver . browser . activeWindow . getElement ( 's' ) ; } catch ( ex ) { assert . equal ( ex . code , 's' ) ; return ; } assert ( false , 's' ) ; } ) ; test ( "s" , ( ) => { const alertButton = driver . browser . activeWindow . getElement ( 's' ) ; const elementID = alertButton . elementID ; assert ( elementID . length > 0 ) ; } ) ; test ( 's' , ( ) => { const element = driver . browser . activeWindow . getElement ( 's' , SelectorTypes . NAME ) ; assert ( element ) ; } ) ; test ( 's' , ( ) => { const inputField = driver . browser . activeWindow . getElement ( 's' , SelectorTypes . ID ) ; assert . equal ( inputField . getTagName ( ) , 's' ) ; } ) ; test ( 's' , ( ) => { const areaToClick = driver . browser . activeWindow . getElement ( 's' ) ; assert . equal ( areaToClick . getCssValue ( 's' ) , 's' ) ; } ) ; test ( 's' , ( ) => { const inputField = driver . browser . activeWindow . getElement ( 's' ) ; assert ( inputField . hasClass ( 's' ) ) ; assert ( inputField . hasClass ( 's' ) ) ; assert ( ! inputField . hasClass ( 's' ) ) ; } ) ; test ( 's' , ( ) => { const inputField = driver . browser . activeWindow . getElement ( 's' ) ; const confirmButton = driver . browser . activeWindow . getElement ( 's' ) ; console . log ( 's' ) ; assert ( ! inputField . isEqual ( confirmButton ) ) ; assert ( ! confirmButton . isEqual ( inputField ) ) ; const inputFieldByClass = driver . browser . activeWindow . getElement ( 's' , SelectorTypes . CLASS ) ; console . log ( 's' ) ; assert ( inputField . isEqual ( inputFieldByClass ) ) ; assert ( inputFieldByClass . isEqual ( inputField ) ) ; } ) ; test ( 's' , ( ) => { const firstCheckBox = driver . browser . activeWindow . getElement ( 's' ) ; assert ( firstCheckBox . isEnabled ( ) ) ; assert ( ! firstCheckBox . isDisabled ( ) ) ; const thirdCheckBox = driver . browser . activeWindow . getElement ( 's' ) ; assert ( ! thirdCheckBox . isEnabled ( ) ) ; assert ( thirdCheckBox . isDisabled ( ) ) ; } ) ; test ( 's' , ( ) => { const firstCheckBox = driver . browser . activeWindow . getElement ( 's' ) ; assert ( firstCheckBox . isSelected ( ) ) ; const secondCheckBox = driver . browser . activeWindow . getElement ( 's' ) ; assert ( ! secondCheckBox . isSelected ( ) ) ; } ) ; test ( 's' , ( ) => { const firstCheckBox = driver . browser . activeWindow . getElement ( 's' ) ; assert ( firstCheckBox . isSelected ( ) , 's' ) ; firstCheckBox . mouse . click ( ) ; assert ( ! firstCheckBox . isSelected ( ) , 's' ) ; firstCheckBox . mouse . click ( ) ; assert ( firstCheckBox . isSelected ( ) , 's' ) ; } ) ; test ( 's' , ( ) => { const mouseEvents = driver . browser . activeWindow . getElement ( 's' ) ; mouseEvents . mouse . click ( ) ; assert . equal ( mouseEvents . getText ( ) , 's' ) ; } ) ; test ( 's' , ( ) => { const formToSubmit = driver . browser . activeWindow . getElement ( 's' ) ; formToSubmit . submit ( ) ; const url = driver . browser . activeWindow . getUrl ( ) ; assert . equal ( url . substr ( - 0 ) , 's' ) ; } ) ; test ( 's' , ( ) => { const areaToClick = driver . browser . activeWindow . getElement ( 's' ) ; areaToClick . mouse . click ( ) ; assert . equal ( areaToClick . getText ( ) , 's' ) ; } ) ; test ( 's' , ( ) => { const areaToClick = driver . browser . activeWindow . getElement ( 's' ) ; areaToClick . mouse . click ( MouseButtons . RIGHT ) ; assert . equal ( areaToClick . getText ( ) , 's' ) ; } ) ; test ( 's' , ( ) => { const areaToClick = driver . browser . activeWindow . getElement ( 's' ) ; areaToClick . mouse . clickAt ( 0 , 0 ) ; assert . equal ( areaToClick . getText ( ) , 's' ) ; } ) ; test ( 's' , ( ) => { const elements = driver . browser . activeWindow . getElements ( 's' ) ; assert . equal ( elements . length , 0 ) ; } ) ; test ( 's' , ( ) => { assert ( driver . browser . activeWindow . hasElement ( 's' ) ) ; assert ( ! driver . browser . activeWindow . hasElement ( 's' ) ) ; } ) ; test ( 's' , ( ) => { const container = driver . browser . activeWindow . getElement ( 's' ) ; const subElement = container . getElement ( 's' ) ; assert . equal ( subElement . getText ( ) , 's' ) ; const 0 = container . getElement ( 's' ) ; assert . equal ( 0 . getText ( ) , 's' ) ; } ) ; test ( 's' , ( ) => { const container = driver . browser . activeWindow . getElement ( 's' ) ; const subElements = container . getElements ( 's' ) ; assert ( Array . isArray ( subElements ) ) ; assert . equal ( subElements . length , 0 ) ; } ) ; test ( 's' , ( ) => { const container = driver . browser . activeWindow . getElement ( 's' ) ; assert ( container . hasElement ( 's' ) ) ; assert ( ! container . hasElement ( 's' ) ) ; } ) ; test ( 's' , ( ) => { const element = driver . browser . activeWindow . getActiveElement ( ) ; assert ( element && typeof element === 's' ) ; } ) ; test ( 's' , ( ) => { assert . equal ( driver . browser . activeWindow . getTitle ( ) , 's' ) ; } ) ; test ( 's' , ( ) => { const source = driver . browser . activeWindow . getSource ( ) ; assert ( source . includes ( 's' ) ) ; } ) ; test ( 's' , ( ) => { const linkToClick = driver . browser . activeWindow . getElement ( 's' ) ; linkToClick . mouse . click ( ) ; assert . equal ( driver . browser . activeWindow . getTitle ( ) , 's' ) ; } ) ; test ( 's' , ( ) => { driver . browser . activeWindow . sendKeys ( 's' ) ; const typeKeyPress = driver . browser . activeWindow . getElement ( 's' ) ; assert . equal ( typeKeyPress . getText ( ) , 's' ) ; const typeKeyUp = driver . browser . activeWindow . getElement ( 's' ) ; assert . equal ( typeKeyUp . getText ( ) , 's' ) ; driver . browser . activeWindow . sendKeys ( [ 's' , 's' ] ) ; assert . equal ( typeKeyPress . getText ( ) , 's' ) ; assert . equal ( typeKeyUp . getText ( ) , 's' ) ; const typeKeyDown = driver . browser . activeWindow . getElement ( 's' ) ; assert . equal ( typeKeyDown . getText ( ) , 's' ) ; } ) ; test ( 's' , ( ) => { driver . browser . activeWindow . goBackward ( ) ; } ) ; test ( 's' , ( ) => { driver . browser . activeWindow . goForward ( ) ; driver . browser . activeWindow . goBackward ( ) ; } ) ; test ( 's' , ( ) => { driver . browser . activeWindow . refresh ( ) ; } ) ; test ( 's' , ( ) => { assert . equal ( driver . browser . activeWindow . execute ( "s" ) , 0 , ) ; } ) ; test ( 's' , ( ) => { assert . equal ( driver . browser . activeWindow . execute ( 's' , [ 0 , 0 ] ) , 0 , ) ; } ) ; test ( 's' , ( ) => { const 0 = { name : 's' , value : 's' , } ; const 0 = { name : 's' , value : 's' , } ; driver . browser . cookieStorage . setCookie ( 0 ) ; driver . browser . cookieStorage . setCookie ( 0 ) ; } ) ; test ( 's' , ( ) => { const cookie = driver . browser . cookieStorage . getCookie ( 's' ) ; if ( ! cookie ) { throw new Error ( 's' ) ; } assert . equal ( cookie . name , 's' ) ; assert . equal ( cookie . value , 's' ) ; } ) ; test ( 's' , ( ) => { const size = driver . browser . cookieStorage . getSize ( ) ; assert ( typeof size === 's' ) ; } ) ; test ( 's' , ( ) => { const keys = driver . browser . cookieStorage . getKeys ( ) ; assert ( keys . includes ( 's' ) ) ; assert ( keys . includes ( 's' ) ) ; } ) ; test ( 's' , ( ) => { driver . browser . cookieStorage . removeCookie ( 's' ) ; const keys = driver . browser . cookieStorage . getKeys ( ) ; assert ( ! keys . includes ( 's' ) ) ; assert ( keys . includes ( 's' ) ) ; } ) ; test ( 's' , ( ) => { const cookies = driver . browser . cookieStorage . getCookies ( ) ; assert ( Array . isArray ( cookies ) ) ; } ) ; test ( 's' , ( ) => { driver . browser . cookieStorage . clear ( ) ; assert . equal ( driver . browser . cookieStorage . getSize ( ) , 0 ) ; } ) ; test ( 's' , ( ) => { driver . browser . localStorage . setItem ( 's' , 's' ) ; driver . browser . localStorage . setItem ( 's' , 's' ) ; } ) ; test ( 's' , ( ) => { assert . equal ( driver . browser . localStorage . getItem ( 's' ) , 's' ) ; } ) ; test ( 's' , ( ) => { assert . equal ( driver . browser . localStorage . getSize ( ) , 0 ) ; } ) ; test ( 's' , ( ) => { assert . deepEqual ( driver . browser . localStorage . getKeys ( ) , [ 's' , 's' ] ) ; } ) ; test ( 's' , ( ) => { driver . browser . localStorage . removeItem ( 's' ) ; assert . equal ( driver . browser . localStorage . getSize ( ) , 0 ) ; assert . deepEqual ( driver . browser . localStorage . getKeys ( ) , [ 's' ] ) ; } ) ; test ( 's' , ( ) => { driver . browser . localStorage . clear ( ) ; assert . equal ( driver . browser . localStorage . getSize ( ) , 0 ) ; } ) ; test ( 's' , ( ) => { driver . browser . sessionStorage . setItem ( 's' , 's' ) ; driver . browser . sessionStorage . setItem ( 's' , 's' ) ; } ) ; test ( 's' , ( ) => { assert . equal ( driver . browser . sessionStorage . getItem ( 's' ) , 's' ) ; } ) ; test ( 's' , ( ) => { assert . equal ( driver . browser . sessionStorage . getSize ( ) , 0 ) ; } ) ; test ( 's' , ( ) => { assert . deepEqual ( driver . browser . sessionStorage . getKeys ( ) , [ 's' , 's' ] ) ; } ) ; test ( 's' , ( ) => { driver . browser . sessionStorage . removeItem ( 's' ) ; assert . equal ( driver . browser . sessionStorage . getSize ( ) , 0 ) ; assert . deepEqual ( driver . browser . sessionStorage . getKeys ( ) , [ 's' ] ) ; } ) ; test ( 's' , ( ) => { driver . browser . sessionStorage . clear ( ) ; assert . equal ( driver . browser . sessionStorage . getSize ( ) , 0 ) ; } ) ; test ( 's' , ( ) => { const element = driver . browser . activeWindow . getElement ( 's' , SelectorTypes . NAME ) ; assert . equal ( element . getAttribute ( 's' ) , 's' ) ; } ) ; test ( 's' , ( ) => { const element = driver . browser . activeWindow . getElement ( 's' ) ; element . clear ( ) ; assert . equal ( element . getAttribute ( 's' ) , 's' ) ; } ) ; test ( 's' , ( ) => { const element = driver . browser . activeWindow . getElement ( 's' , SelectorTypes . NAME ) ; element . sendKeys ( 's' ) ; assert . equal ( element . getAttribute ( 's' ) , 's' ) ; } ) ; test ( 's' , ( ) => { const element = driver . browser . activeWindow . getElement ( 's' ) ; assert ( element != null ) ; } ) ; test ( 's' , ( ) => { const element = driver . browser . activeWindow . getElement ( 's' ) ; assert ( element . isDisplayed ( ) ) ; const hiddenElement = driver . browser . activeWindow . getElement ( 's' ) ; assert ( ! hiddenElement . isDisplayed ( ) ) ; } ) ; test ( 's' , ( ) => { const element = driver . browser . activeWindow . getElement ( 's' ) ; assert . equal ( element . getAttribute ( 's' ) , 's' ) ; } ) ; test ( 's' , ( ) => { const element = driver . browser . activeWindow . getElement ( 's' ) ; element . clear ( ) ; element . sendKeys ( 's' ) ; element . sendKeys ( [ 's' , 's' ] ) ; assert . equal ( element . getAttribute ( 's' ) , 's' ) ; element . clear ( ) ; assert . equal ( element . getAttribute ( 's' ) , 's' ) ; } ) ; test ( 's' , ( ) => { const element = driver . browser . activeWindow . getElement ( 's' ) ; assert . equal ( element . getText ( ) , 's' ) ; } ) ; test ( 's' , ( ) => { const button = driver . browser . activeWindow . getElement ( 's' ) ; button . mouse . click ( ) ; assert . equal ( button . getText ( ) , 's' ) ; } ) ; test ( 's' , ( ) => { driver . browser . activeWindow . close ( ) ; } ) ; } export default run ;	O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O $any$ O O O O $any$ O O O O $void$ O $string$ O $void$ O O O O O O O $Console$ O $void$ O $any$ O $any$ O $string$ O O O $void$ O O O O O $void$ O $Driver$ O $string$ O O O $any$ O $string$ O $string$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $string$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $string$ O O O $any$ O O $void$ O O O O O O O $any$ O $any$ O $any$ O O $string$ O O O $string$ O O O O O O O O $void$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O O O O O O O $void$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $string$ O O O O O $void$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $string$ O O O O O $void$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O $any$ O O O O O O O $void$ O O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O O O O $void$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $void$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O O O O $void$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O $void$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O $void$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O O $any$ O O $any$ O $any$ O O O O O O O O $void$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Console$ O $void$ O O O O $any$ O O $any$ O $any$ O $any$ O O O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O $Console$ O $void$ O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O O O $void$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O O O $void$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O $any$ O O O O O O O $void$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O $any$ O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O O O O $void$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O $void$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O O $void$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O $void$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O $void$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O $void$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O $void$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O O O O $void$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O $void$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O $any$ O $ArrayConstructor$ O $complex$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O O O O $void$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O $any$ O O $any$ O $any$ O O O O O O O O $void$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O $any$ O O O O O O O $void$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O O $void$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O O O $void$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O O $void$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O $void$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $void$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O O O $void$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $void$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O O $void$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O O O O O O O O $void$ O O O O O O O O $complex$ O O $string$ O O O $string$ O O O O O O $complex$ O O $string$ O O O $string$ O O O O O $any$ O $any$ O $any$ O $any$ O $complex$ O O $any$ O $any$ O $any$ O $any$ O $complex$ O O O O O $void$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O $ErrorConstructor$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O $void$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O O $any$ O O O O O O O $void$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O O O O O $void$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O O O O O $void$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $ArrayConstructor$ O $complex$ O $any$ O O O O O O $void$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O O $void$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O $void$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O $void$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O O $void$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O O O O $void$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O O $void$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O O $void$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O $void$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O $void$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O O $void$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O O O O $void$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O O $void$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O O $void$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O $void$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O $void$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O $void$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O O O $void$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O $any$ O O O O O O O $void$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O $void$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O $void$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O $void$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O $void$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O $void$ O
'js' import request from 's' ; import { readFileSync } from 's' ; function doReplacements ( source , replacements : { [ key ] : string } ) { Object . keys ( replacements ) . forEach ( key => { source = source . split ( key ) . join ( replacements [ key ] ) ; } ) ; return source ; } function createPage ( filename , replacements ? : { [ key ] : string } ) { let html = readFileSync ( filename , 's' ) ; if ( replacements ) { html = doReplacements ( html , replacements ) ; } const res = request ( 's' , 's' , { json : { html } } ) . getBody ( 's' ) ; const parsed = JSON . parse ( res ) ; return 's' + parsed . path ; } const location = createPage ( __dirname + 's' , { 's' : createPage ( __dirname + 's' ) , } ) ; export default location ;	O O $any$ O O O O O $any$ O O O O O $string$ O $string$ O $complex$ O O O $string$ O O O O O O $ObjectConstructor$ O $complex$ O $complex$ O O $void$ O $string$ O O $string$ O $string$ O $complex$ O $string$ O O $string$ O $complex$ O $string$ O O O O O O O $string$ O O O $string$ O $string$ O $complex$ O O O O $string$ O O O O O O O $any$ O $any$ O $string$ O O O O O O $complex$ O O $any$ O $string$ O $any$ O $complex$ O O O O $any$ O $any$ O O O O O O $complex$ O O $any$ O O O O $any$ O O O O O $any$ O $JSON$ O $any$ O $any$ O O O O O $any$ O $any$ O O O $string$ O $string$ O $any$ O O O O O O $string$ O $any$ O O O O O O O O O $string$ O
'js' import { fork } from 's' ; import cabbie from 's' ; import runTest from 's' ; import location from 's' ; let p = null ; p = fork ( require . resolve ( 's' ) ) . on ( 's' , m => { if ( m !== 's' ) { return ; } let driver ; try { driver = cabbie ( 's' ) ; runTest ( driver , location ) ; } finally { if ( driver ) { driver . dispose ( ) ; } if ( p ) { p . kill ( ) ; } } } ) ;	O O O $any$ O O O O O $any$ O O O O $void$ O O O O $string$ O O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O $any$ O O O O $any$ O O O O O O O O $any$ O O O $any$ O $any$ O O O O $void$ O $any$ O $string$ O O O O O O O $any$ O O $any$ O $any$ O O O O O O $any$ O O $any$ O $any$ O O O O O O O O
'js' import startServer from 's' ; startServer ( { onStart ( ) { process . send ( 's' ) ; } , } ) ;	O O $any$ O O O $any$ O O $void$ O O O $any$ O $any$ O O O O O O O O O